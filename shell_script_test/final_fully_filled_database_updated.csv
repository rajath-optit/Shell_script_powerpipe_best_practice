title,control_title,control_description,Mod,priority,Recommendation Steps/Approach,Cost,Automation Approach,Features of the Script,Shell Script,Why This is Useful,What This Script Does,Script Type,Execution Frequency,Compliance Framework,Last Updated
Account,Security contact information should be provided for an AWS account,This control checks if an AWS Web Services (AWS) account has security contact information. The control fails if security contact information is not provided for the account.,Compliance,High,Security contact information should be provided for an AWS account. Steps: 1. Navigate to the AWS Management Console. 2. Update the security contact information under the account settings. https://docs.aws.amazon.com/accounts/latest/reference/account-settings.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Security contact information should be provided for an AWS account
check_compliance() {
    log ""Checking AWS resources for Security contact information should be provided for an AWS account compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Account,AWS account should be part of AWS Organizations,Ensure that an AWS account is part of AWS Organizations. The rule is non-compliant if an AWS account is not part of AWS Organizations or AWS Organizations master account ID does not match rule parameter MasterAccountId.,Compliance,High,"AWS account should be part of AWS Organizations. Steps: 1. Check if the account is part of an AWS Organization. 2. If not, create an organization and add the account. https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started.html",$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS account should be part of AWS Organizations
check_compliance() {
    log ""Checking AWS resources for AWS account should be part of AWS Organizations compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,AWS account should be part of AWS Organizations,Ensure that an AWS account is part of AWS Organizations. The rule is non-compliant if an AWS account is not part of AWS Organizations or AWS Organizations master account ID does not match rule parameter MasterAccountId.,Compliance,High,"AWS account should be part of AWS Organizations. Steps: 1. Check if the account is part of an AWS Organization. 2. If not, create an organization and add the account. https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started.html",$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS account should be part of AWS Organizations
check_compliance() {
    log ""Checking AWS resources for AWS account should be part of AWS Organizations compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,AWS account should be part of AWS Organizations,Ensure that an AWS account is part of AWS Organizations. The rule is non-compliant if an AWS account is not part of AWS Organizations or AWS Organizations master account ID does not match rule parameter MasterAccountId.,Compliance,High,"AWS account should be part of AWS Organizations. Steps: 1. Check if the account is part of an AWS Organization. 2. If not, create an organization and add the account. https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started.html",$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS account should be part of AWS Organizations
check_compliance() {
    log ""Checking AWS resources for AWS account should be part of AWS Organizations compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,AWS account should be part of AWS Organizations,Ensure that an AWS account is part of AWS Organizations. The rule is non-compliant if an AWS account is not part of AWS Organizations or AWS Organizations master account ID does not match rule parameter MasterAccountId.,Compliance,High,"AWS account should be part of AWS Organizations. Steps: 1. Check if the account is part of an AWS Organization. 2. If not, create an organization and add the account. https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started.html",$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS account should be part of AWS Organizations
check_compliance() {
    log ""Checking AWS resources for AWS account should be part of AWS Organizations compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ACM,ACM certificates should not expire within 30 days,Ensure network integrity is protected by ensuring X509 certificates are issued by AWS ACM.,Compliance,High,ACM certificates should not expire within 30 days. Steps: 1. Review ACM certificates. 2. Renew any certificates expiring within 30 days. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Not Expire Within 30 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect ACM certificates that will expire within 30 days.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ACM certificates and flags those expiring soon. It can also attempt automatic renewal if eligible.
SSM Automation: An SSM document to notify or automatically trigger certificate renewal processes.","üîç Features of the Script:
‚úÖ Scans all ACM certificates in the AWS account.
‚úÖ Checks the expiration date and identifies those expiring in ‚â§30 days.
‚úÖ Attempts to renew eligible certificates automatically.
‚úÖ Sends alerts for certificates that require manual intervention.
‚úÖ Logs all actions, including skipped or non-renewable certificates.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check ACM certificates expiration
check_acm_certificates() {
    log ""Checking ACM certificates for expiration...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    expiring_count=0
    for cert_arn in $certificates; do
        # Get the certificate expiration date
        expiration_date=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.NotAfter"" --output text)
        expiration_epoch=$(date -d ""$expiration_date"" +%s)
        current_epoch=$(date +%s)
        days_left=$(( (expiration_epoch - current_epoch) / 86400 ))

        if [[ $days_left -le 30 ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn expires in $days_left days.""

            # Attempt automatic renewal if eligible
            domain_name=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.DomainName"" --output text)
            eligibility=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.RenewalEligibility"" --output text)

            if [[ ""$eligibility"" == ""ELIGIBLE"" ]]; then
                log ""üîÑ Attempting to renew certificate for domain: $domain_name""
                aws acm request-certificate --domain-name ""$domain_name"" --validation-method DNS
                log ""‚úÖ Renewal request submitted for $domain_name.""
            else
                log ""‚ùå Certificate $cert_arn is not eligible for automatic renewal. Manual action required.""
            fi

            ((expiring_count++))
        else
            log ""‚úÖ Certificate $cert_arn is valid for $days_left more days.""
        fi
    done

    if [[ $expiring_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $expiring_count certificates are expiring soon. Some may require manual intervention.""
    else
        log ""‚úÖ All ACM certificates are valid.""
    fi
}

# Execute the function
check_acm_certificates
","üöÄ Why This is Useful?
üîπ Ensures Business Continuity: Prevents service disruptions due to expired certificates.
üîπ Automated Renewals: Automatically renews eligible certificates to reduce manual effort.
üîπ Manual Alerting: Identifies non-renewable certificates that need action.
üîπ Full Visibility: Logs all actions, ensuring compliance tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates in the AWS account.
2Ô∏è‚É£ Checks the expiration date for each certificate.
3Ô∏è‚É£ Flags certificates expiring in ‚â§30 days.
4Ô∏è‚É£ Attempts automatic renewal if the certificate is eligible.",Bash,Weekly,SOC 2,2024-02-13
ACM,ACM certificates should not expire within 30 days,Ensure network integrity is protected by ensuring X509 certificates are issued by AWS ACM.,Compliance,High,ACM certificates should not expire within 30 days. Steps: 1. Review ACM certificates. 2. Renew any certificates expiring within 30 days. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Not Expire Within 30 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect ACM certificates that will expire within 30 days.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ACM certificates and flags those expiring soon. It can also attempt automatic renewal if eligible.
SSM Automation: An SSM document to notify or automatically trigger certificate renewal processes.","üîç Features of the Script:
‚úÖ Scans all ACM certificates in the AWS account.
‚úÖ Checks the expiration date and identifies those expiring in ‚â§30 days.
‚úÖ Attempts to renew eligible certificates automatically.
‚úÖ Sends alerts for certificates that require manual intervention.
‚úÖ Logs all actions, including skipped or non-renewable certificates.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check ACM certificates expiration
check_acm_certificates() {
    log ""Checking ACM certificates for expiration...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    expiring_count=0
    for cert_arn in $certificates; do
        # Get the certificate expiration date
        expiration_date=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.NotAfter"" --output text)
        expiration_epoch=$(date -d ""$expiration_date"" +%s)
        current_epoch=$(date +%s)
        days_left=$(( (expiration_epoch - current_epoch) / 86400 ))

        if [[ $days_left -le 30 ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn expires in $days_left days.""

            # Attempt automatic renewal if eligible
            domain_name=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.DomainName"" --output text)
            eligibility=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.RenewalEligibility"" --output text)

            if [[ ""$eligibility"" == ""ELIGIBLE"" ]]; then
                log ""üîÑ Attempting to renew certificate for domain: $domain_name""
                aws acm request-certificate --domain-name ""$domain_name"" --validation-method DNS
                log ""‚úÖ Renewal request submitted for $domain_name.""
            else
                log ""‚ùå Certificate $cert_arn is not eligible for automatic renewal. Manual action required.""
            fi

            ((expiring_count++))
        else
            log ""‚úÖ Certificate $cert_arn is valid for $days_left more days.""
        fi
    done

    if [[ $expiring_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $expiring_count certificates are expiring soon. Some may require manual intervention.""
    else
        log ""‚úÖ All ACM certificates are valid.""
    fi
}

# Execute the function
check_acm_certificates
","üöÄ Why This is Useful?
üîπ Ensures Business Continuity: Prevents service disruptions due to expired certificates.
üîπ Automated Renewals: Automatically renews eligible certificates to reduce manual effort.
üîπ Manual Alerting: Identifies non-renewable certificates that need action.
üîπ Full Visibility: Logs all actions, ensuring compliance tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates in the AWS account.
2Ô∏è‚É£ Checks the expiration date for each certificate.
3Ô∏è‚É£ Flags certificates expiring in ‚â§30 days.
4Ô∏è‚É£ Attempts automatic renewal if the certificate is eligible.",Bash,Weekly,SOC 2,2024-02-13
Security,ACM certificates should not expire within 30 days,Ensure network integrity is protected by ensuring X509 certificates are issued by AWS ACM.,Compliance,High,ACM certificates should not expire within 30 days. Steps: 1. Review ACM certificates. 2. Renew any certificates expiring within 30 days. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Not Expire Within 30 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect ACM certificates that will expire within 30 days.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ACM certificates and flags those expiring soon. It can also attempt automatic renewal if eligible.
SSM Automation: An SSM document to notify or automatically trigger certificate renewal processes.","üîç Features of the Script:
‚úÖ Scans all ACM certificates in the AWS account.
‚úÖ Checks the expiration date and identifies those expiring in ‚â§30 days.
‚úÖ Attempts to renew eligible certificates automatically.
‚úÖ Sends alerts for certificates that require manual intervention.
‚úÖ Logs all actions, including skipped or non-renewable certificates.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check ACM certificates expiration
check_acm_certificates() {
    log ""Checking ACM certificates for expiration...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    expiring_count=0
    for cert_arn in $certificates; do
        # Get the certificate expiration date
        expiration_date=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.NotAfter"" --output text)
        expiration_epoch=$(date -d ""$expiration_date"" +%s)
        current_epoch=$(date +%s)
        days_left=$(( (expiration_epoch - current_epoch) / 86400 ))

        if [[ $days_left -le 30 ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn expires in $days_left days.""

            # Attempt automatic renewal if eligible
            domain_name=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.DomainName"" --output text)
            eligibility=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.RenewalEligibility"" --output text)

            if [[ ""$eligibility"" == ""ELIGIBLE"" ]]; then
                log ""üîÑ Attempting to renew certificate for domain: $domain_name""
                aws acm request-certificate --domain-name ""$domain_name"" --validation-method DNS
                log ""‚úÖ Renewal request submitted for $domain_name.""
            else
                log ""‚ùå Certificate $cert_arn is not eligible for automatic renewal. Manual action required.""
            fi

            ((expiring_count++))
        else
            log ""‚úÖ Certificate $cert_arn is valid for $days_left more days.""
        fi
    done

    if [[ $expiring_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $expiring_count certificates are expiring soon. Some may require manual intervention.""
    else
        log ""‚úÖ All ACM certificates are valid.""
    fi
}

# Execute the function
check_acm_certificates
","üöÄ Why This is Useful?
üîπ Ensures Business Continuity: Prevents service disruptions due to expired certificates.
üîπ Automated Renewals: Automatically renews eligible certificates to reduce manual effort.
üîπ Manual Alerting: Identifies non-renewable certificates that need action.
üîπ Full Visibility: Logs all actions, ensuring compliance tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates in the AWS account.
2Ô∏è‚É£ Checks the expiration date for each certificate.
3Ô∏è‚É£ Flags certificates expiring in ‚â§30 days.
4Ô∏è‚É£ Attempts automatic renewal if the certificate is eligible.",Bash,Weekly,SOC 2,2024-02-13
ACM,ACM certificates should not expire within 30 days,Ensure network integrity is protected by ensuring X509 certificates are issued by AWS ACM.,Compliance,High,ACM certificates should not expire within 30 days. Steps: 1. Review ACM certificates. 2. Renew any certificates expiring within 30 days. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Not Expire Within 30 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect ACM certificates that will expire within 30 days.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ACM certificates and flags those expiring soon. It can also attempt automatic renewal if eligible.
SSM Automation: An SSM document to notify or automatically trigger certificate renewal processes.","üîç Features of the Script:
‚úÖ Scans all ACM certificates in the AWS account.
‚úÖ Checks the expiration date and identifies those expiring in ‚â§30 days.
‚úÖ Attempts to renew eligible certificates automatically.
‚úÖ Sends alerts for certificates that require manual intervention.
‚úÖ Logs all actions, including skipped or non-renewable certificates.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check ACM certificates expiration
check_acm_certificates() {
    log ""Checking ACM certificates for expiration...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    expiring_count=0
    for cert_arn in $certificates; do
        # Get the certificate expiration date
        expiration_date=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.NotAfter"" --output text)
        expiration_epoch=$(date -d ""$expiration_date"" +%s)
        current_epoch=$(date +%s)
        days_left=$(( (expiration_epoch - current_epoch) / 86400 ))

        if [[ $days_left -le 30 ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn expires in $days_left days.""

            # Attempt automatic renewal if eligible
            domain_name=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.DomainName"" --output text)
            eligibility=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.RenewalEligibility"" --output text)

            if [[ ""$eligibility"" == ""ELIGIBLE"" ]]; then
                log ""üîÑ Attempting to renew certificate for domain: $domain_name""
                aws acm request-certificate --domain-name ""$domain_name"" --validation-method DNS
                log ""‚úÖ Renewal request submitted for $domain_name.""
            else
                log ""‚ùå Certificate $cert_arn is not eligible for automatic renewal. Manual action required.""
            fi

            ((expiring_count++))
        else
            log ""‚úÖ Certificate $cert_arn is valid for $days_left more days.""
        fi
    done

    if [[ $expiring_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $expiring_count certificates are expiring soon. Some may require manual intervention.""
    else
        log ""‚úÖ All ACM certificates are valid.""
    fi
}

# Execute the function
check_acm_certificates
","üöÄ Why This is Useful?
üîπ Ensures Business Continuity: Prevents service disruptions due to expired certificates.
üîπ Automated Renewals: Automatically renews eligible certificates to reduce manual effort.
üîπ Manual Alerting: Identifies non-renewable certificates that need action.
üîπ Full Visibility: Logs all actions, ensuring compliance tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates in the AWS account.
2Ô∏è‚É£ Checks the expiration date for each certificate.
3Ô∏è‚É£ Flags certificates expiring in ‚â§30 days.
4Ô∏è‚É£ Attempts automatic renewal if the certificate is eligible.",Bash,Weekly,SOC 2,2024-02-13
ACM,Ensure that ACM certificates are not in failed state,This control ensures that ACM certificates are not in failed state.,Compliance,High,Ensure that ACM certificates are not in failed state. Steps: 1. Check the status of ACM certificates. 2. Resolve any certificates that are in a failed state. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"Ensure ACM Certificates Are Not in a Failed State
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check ACM certificates for a ""FAILED"" state.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans for failed ACM certificates and sends alerts.
SSM Automation: A remediation script to suggest revalidation or replacement.","üîç Features of the Script:
‚úÖ Scans all ACM certificates for their status.
‚úÖ Identifies and logs certificates in a ""FAILED"" state.
‚úÖ Suggests remediation steps for each failed certificate.
‚úÖ Can be extended to trigger automatic revalidation if possible.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check ACM certificates for failed status
check_acm_failed_certificates() {
    log ""Checking ACM certificates for failed state...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    failed_count=0
    for cert_arn in $certificates; do
        # Get the certificate status
        cert_status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Status"" --output text)

        if [[ ""$cert_status"" == ""FAILED"" ]]; then
            log ""‚ùå Certificate $cert_arn is in FAILED state.""
            log ""‚ö†Ô∏è Action required: Check ACM console for failure reasons and revalidate or replace this certificate.""
            ((failed_count++))
        else
            log ""‚úÖ Certificate $cert_arn is in $cert_status state.""
        fi
    done

    if [[ $failed_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $failed_count certificates are in FAILED state. Immediate action required.""
    else
        log ""‚úÖ All ACM certificates are in a healthy state.""
    fi
}

# Execute the function
check_acm_failed_certificates
","üöÄ Why This is Useful?
üîπ Ensures Service Continuity: Prevents downtime due to failed SSL/TLS certificates.
üîπ Automated Detection: Identifies failed certificates and logs them for action.
üîπ Visibility & Compliance: Helps track issues and enforce best practices.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks their current status.
3Ô∏è‚É£ Flags certificates in a ""FAILED"" state.
4Ô∏è‚É£ Suggests remediation steps for failed certificates.
5Ô∏è‚É£ Logs actions and alerts for manual intervention.",Bash,Weekly,SOC 2,2024-02-13
ACM,Ensure that ACM certificates are not in failed state,This control ensures that ACM certificates are not in failed state.,Compliance,High,Ensure that ACM certificates are not in failed state. Steps: 1. Check the status of ACM certificates. 2. Resolve any certificates that are in a failed state. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"Ensure ACM Certificates Are Not in a Failed State
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check ACM certificates for a ""FAILED"" state.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans for failed ACM certificates and sends alerts.
SSM Automation: A remediation script to suggest revalidation or replacement.","üîç Features of the Script:
‚úÖ Scans all ACM certificates for their status.
‚úÖ Identifies and logs certificates in a ""FAILED"" state.
‚úÖ Suggests remediation steps for each failed certificate.
‚úÖ Can be extended to trigger automatic revalidation if possible.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check ACM certificates for failed status
check_acm_failed_certificates() {
    log ""Checking ACM certificates for failed state...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    failed_count=0
    for cert_arn in $certificates; do
        # Get the certificate status
        cert_status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Status"" --output text)

        if [[ ""$cert_status"" == ""FAILED"" ]]; then
            log ""‚ùå Certificate $cert_arn is in FAILED state.""
            log ""‚ö†Ô∏è Action required: Check ACM console for failure reasons and revalidate or replace this certificate.""
            ((failed_count++))
        else
            log ""‚úÖ Certificate $cert_arn is in $cert_status state.""
        fi
    done

    if [[ $failed_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $failed_count certificates are in FAILED state. Immediate action required.""
    else
        log ""‚úÖ All ACM certificates are in a healthy state.""
    fi
}

# Execute the function
check_acm_failed_certificates
","üöÄ Why This is Useful?
üîπ Ensures Service Continuity: Prevents downtime due to failed SSL/TLS certificates.
üîπ Automated Detection: Identifies failed certificates and logs them for action.
üîπ Visibility & Compliance: Helps track issues and enforce best practices.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks their current status.
3Ô∏è‚É£ Flags certificates in a ""FAILED"" state.
4Ô∏è‚É£ Suggests remediation steps for failed certificates.
5Ô∏è‚É£ Logs actions and alerts for manual intervention.",Bash,Weekly,SOC 2,2024-02-13
ACM,Ensure that ACM certificates are not in failed state,This control ensures that ACM certificates are not in failed state.,Compliance,High,Ensure that ACM certificates are not in failed state. Steps: 1. Check the status of ACM certificates. 2. Resolve any certificates that are in a failed state. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"Ensure ACM Certificates Are Not in a Failed State
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check ACM certificates for a ""FAILED"" state.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans for failed ACM certificates and sends alerts.
SSM Automation: A remediation script to suggest revalidation or replacement.","üîç Features of the Script:
‚úÖ Scans all ACM certificates for their status.
‚úÖ Identifies and logs certificates in a ""FAILED"" state.
‚úÖ Suggests remediation steps for each failed certificate.
‚úÖ Can be extended to trigger automatic revalidation if possible.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check ACM certificates for failed status
check_acm_failed_certificates() {
    log ""Checking ACM certificates for failed state...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    failed_count=0
    for cert_arn in $certificates; do
        # Get the certificate status
        cert_status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Status"" --output text)

        if [[ ""$cert_status"" == ""FAILED"" ]]; then
            log ""‚ùå Certificate $cert_arn is in FAILED state.""
            log ""‚ö†Ô∏è Action required: Check ACM console for failure reasons and revalidate or replace this certificate.""
            ((failed_count++))
        else
            log ""‚úÖ Certificate $cert_arn is in $cert_status state.""
        fi
    done

    if [[ $failed_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $failed_count certificates are in FAILED state. Immediate action required.""
    else
        log ""‚úÖ All ACM certificates are in a healthy state.""
    fi
}

# Execute the function
check_acm_failed_certificates
","üöÄ Why This is Useful?
üîπ Ensures Service Continuity: Prevents downtime due to failed SSL/TLS certificates.
üîπ Automated Detection: Identifies failed certificates and logs them for action.
üîπ Visibility & Compliance: Helps track issues and enforce best practices.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks their current status.
3Ô∏è‚É£ Flags certificates in a ""FAILED"" state.
4Ô∏è‚É£ Suggests remediation steps for failed certificates.
5Ô∏è‚É£ Logs actions and alerts for manual intervention.",Bash,Weekly,SOC 2,2024-02-13
ACM,Ensure that ACM certificates are not in pending validation state,"This control ensures that ACM certificates are not in pending validation state. When certificates are not validated within 72 hours after the request is made, those certificates become invalid.",Compliance,High,Ensure that ACM certificates are not in pending validation state. Steps: 1. Review ACM certificates. 2. Complete validation for any certificates in pending validation state. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"Ensure That ACM Certificates Are Not in Pending Validation State
‚úÖ Automation Approach:

AWS Config Rule: Set up an AWS Config rule to detect ACM certificates stuck in the ""Pending Validation"" state.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that identifies and reports certificates in the ""Pending Validation"" state for a certain period (e.g., 7 days).
SNS Notification: Sends an alert if any certificates are still in ""Pending Validation"" after the threshold period.","üîç Features of the Script:
‚úÖ Scans all ACM certificates and checks their validation status.
‚úÖ Identifies certificates that have been in ""Pending Validation"" for too long.
‚úÖ Logs each certificate status and remediation actions taken.
‚úÖ Optionally sends SNS notifications for manual intervention.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

check_acm_certificates() {
    log ""Scanning ACM certificates for pending validation state...""

    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    pending_count=0
    for cert_arn in $certificates; do
        status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Status"" --output text)

        if [[ ""$status"" == ""PENDING_VALIDATION"" ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn is pending validation. Please check DNS or email validation settings.""
            ((pending_count++))
        else
            log ""‚úÖ Certificate $cert_arn is in a valid state ($status).""
        fi
    done

    if [[ $pending_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $pending_count certificates in 'Pending Validation'. Manual action may be required.""
    else
        log ""‚úÖ All certificates are in a valid state.""
    fi
}

check_acm_certificates
","üöÄ Why This is Useful?
üîπ Prevents services from being impacted by unvalidated SSL/TLS certificates.
üîπ Ensures certificates are properly validated and ready for use.
üîπ Automates detection, reducing manual monitoring effort.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks the validation status of each certificate.
3Ô∏è‚É£ Identifies and logs certificates stuck in ""Pending Validation"".
4Ô∏è‚É£ Alerts about certificates requiring action.
5Ô∏è‚É£ Ensures AWS security best practices are followed.",Bash,Weekly,SOC 2,2024-02-13
ACM,Ensure that ACM certificates are not in pending validation state,"This control ensures that ACM certificates are not in pending validation state. When certificates are not validated within 72 hours after the request is made, those certificates become invalid.",Compliance,High,Ensure that ACM certificates are not in pending validation state. Steps: 1. Review ACM certificates. 2. Complete validation for any certificates in pending validation state. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"Ensure That ACM Certificates Are Not in Pending Validation State
‚úÖ Automation Approach:

AWS Config Rule: Set up an AWS Config rule to detect ACM certificates stuck in the ""Pending Validation"" state.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that identifies and reports certificates in the ""Pending Validation"" state for a certain period (e.g., 7 days).
SNS Notification: Sends an alert if any certificates are still in ""Pending Validation"" after the threshold period.","üîç Features of the Script:
‚úÖ Scans all ACM certificates and checks their validation status.
‚úÖ Identifies certificates that have been in ""Pending Validation"" for too long.
‚úÖ Logs each certificate status and remediation actions taken.
‚úÖ Optionally sends SNS notifications for manual intervention.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

check_acm_certificates() {
    log ""Scanning ACM certificates for pending validation state...""

    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    pending_count=0
    for cert_arn in $certificates; do
        status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Status"" --output text)

        if [[ ""$status"" == ""PENDING_VALIDATION"" ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn is pending validation. Please check DNS or email validation settings.""
            ((pending_count++))
        else
            log ""‚úÖ Certificate $cert_arn is in a valid state ($status).""
        fi
    done

    if [[ $pending_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $pending_count certificates in 'Pending Validation'. Manual action may be required.""
    else
        log ""‚úÖ All certificates are in a valid state.""
    fi
}

check_acm_certificates
","üöÄ Why This is Useful?
üîπ Prevents services from being impacted by unvalidated SSL/TLS certificates.
üîπ Ensures certificates are properly validated and ready for use.
üîπ Automates detection, reducing manual monitoring effort.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks the validation status of each certificate.
3Ô∏è‚É£ Identifies and logs certificates stuck in ""Pending Validation"".
4Ô∏è‚É£ Alerts about certificates requiring action.
5Ô∏è‚É£ Ensures AWS security best practices are followed.",Bash,Weekly,SOC 2,2024-02-13
ACM,Ensure that ACM certificates are not in pending validation state,"This control ensures that ACM certificates are not in pending validation state. When certificates are not validated within 72 hours after the request is made, those certificates become invalid.",Compliance,High,Ensure that ACM certificates are not in pending validation state. Steps: 1. Review ACM certificates. 2. Complete validation for any certificates in pending validation state. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"Ensure That ACM Certificates Are Not in Pending Validation State
‚úÖ Automation Approach:

AWS Config Rule: Set up an AWS Config rule to detect ACM certificates stuck in the ""Pending Validation"" state.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that identifies and reports certificates in the ""Pending Validation"" state for a certain period (e.g., 7 days).
SNS Notification: Sends an alert if any certificates are still in ""Pending Validation"" after the threshold period.","üîç Features of the Script:
‚úÖ Scans all ACM certificates and checks their validation status.
‚úÖ Identifies certificates that have been in ""Pending Validation"" for too long.
‚úÖ Logs each certificate status and remediation actions taken.
‚úÖ Optionally sends SNS notifications for manual intervention.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

check_acm_certificates() {
    log ""Scanning ACM certificates for pending validation state...""

    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    pending_count=0
    for cert_arn in $certificates; do
        status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Status"" --output text)

        if [[ ""$status"" == ""PENDING_VALIDATION"" ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn is pending validation. Please check DNS or email validation settings.""
            ((pending_count++))
        else
            log ""‚úÖ Certificate $cert_arn is in a valid state ($status).""
        fi
    done

    if [[ $pending_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $pending_count certificates in 'Pending Validation'. Manual action may be required.""
    else
        log ""‚úÖ All certificates are in a valid state.""
    fi
}

check_acm_certificates
","üöÄ Why This is Useful?
üîπ Prevents services from being impacted by unvalidated SSL/TLS certificates.
üîπ Ensures certificates are properly validated and ready for use.
üîπ Automates detection, reducing manual monitoring effort.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks the validation status of each certificate.
3Ô∏è‚É£ Identifies and logs certificates stuck in ""Pending Validation"".
4Ô∏è‚É£ Alerts about certificates requiring action.
5Ô∏è‚É£ Ensures AWS security best practices are followed.",Bash,Weekly,SOC 2,2024-02-13
ACM,ACM certificates should not use wildcard certificates,Ensure that ACM single domain name certificates are used instead of wildcard certificates within your AWS account in order to follow security best practices and protect each domain/subdomain with its own unique private key.,Compliance,High,ACM certificates should not use wildcard certificates. Steps: 1. Review all ACM certificates. 2. Replace any wildcard certificates with specific domain certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Not Use Wildcard Certificates
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to detect wildcard certificates (*.example.com) in ACM.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans ACM certificates and flags wildcard usage.
SNS Notification: Sends alerts when a wildcard certificate is detected.
","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates and checks their domain names.
‚úÖ Identifies certificates using wildcard domains (*.domain.com).
‚úÖ Logs each certificate status and highlights non-compliant ones.
‚úÖ Optionally sends SNS alerts for further action.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

check_wildcard_certificates() {
    log ""Scanning ACM certificates for wildcard usage...""

    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    wildcard_count=0
    for cert_arn in $certificates; do
        domain_name=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.DomainName"" --output text)

        if [[ ""$domain_name"" == \** ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn uses a wildcard domain ($domain_name). Consider replacing it with a specific domain certificate.""
            ((wildcard_count++))
        else
            log ""‚úÖ Certificate $cert_arn uses a specific domain ($domain_name).""
        fi
    done

    if [[ $wildcard_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $wildcard_count wildcard certificates. Consider replacing them with specific domain certificates.""
    else
        log ""‚úÖ All certificates use specific domains.""
    fi
}

check_wildcard_certificates
","üöÄ Why This is Useful?
üîπ Reduces security risks by discouraging over-permissive wildcard certificates.
üîπ Improves TLS security by enforcing specific domain validation.
üîπ Automates detection, reducing manual monitoring.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks if the domain name starts with *. (wildcard).
3Ô∏è‚É£ Flags any certificate using a wildcard.
4Ô∏è‚É£ Logs each certificate status for compliance review.
5Ô∏è‚É£ Ensures ACM follows best security practices.",Bash,Weekly,SOC 2,2024-02-13
ACM,ACM certificates should not use wildcard certificates,Ensure that ACM single domain name certificates are used instead of wildcard certificates within your AWS account in order to follow security best practices and protect each domain/subdomain with its own unique private key.,Compliance,High,ACM certificates should not use wildcard certificates. Steps: 1. Review all ACM certificates. 2. Replace any wildcard certificates with specific domain certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Not Use Wildcard Certificates
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to detect wildcard certificates (*.example.com) in ACM.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans ACM certificates and flags wildcard usage.
SNS Notification: Sends alerts when a wildcard certificate is detected.
","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates and checks their domain names.
‚úÖ Identifies certificates using wildcard domains (*.domain.com).
‚úÖ Logs each certificate status and highlights non-compliant ones.
‚úÖ Optionally sends SNS alerts for further action.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

check_wildcard_certificates() {
    log ""Scanning ACM certificates for wildcard usage...""

    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    wildcard_count=0
    for cert_arn in $certificates; do
        domain_name=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.DomainName"" --output text)

        if [[ ""$domain_name"" == \** ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn uses a wildcard domain ($domain_name). Consider replacing it with a specific domain certificate.""
            ((wildcard_count++))
        else
            log ""‚úÖ Certificate $cert_arn uses a specific domain ($domain_name).""
        fi
    done

    if [[ $wildcard_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $wildcard_count wildcard certificates. Consider replacing them with specific domain certificates.""
    else
        log ""‚úÖ All certificates use specific domains.""
    fi
}

check_wildcard_certificates
","üöÄ Why This is Useful?
üîπ Reduces security risks by discouraging over-permissive wildcard certificates.
üîπ Improves TLS security by enforcing specific domain validation.
üîπ Automates detection, reducing manual monitoring.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks if the domain name starts with *. (wildcard).
3Ô∏è‚É£ Flags any certificate using a wildcard.
4Ô∏è‚É£ Logs each certificate status for compliance review.
5Ô∏è‚É£ Ensures ACM follows best security practices.",Bash,Weekly,SOC 2,2024-02-13
ACM,ACM certificates should not use wildcard certificates,Ensure that ACM single domain name certificates are used instead of wildcard certificates within your AWS account in order to follow security best practices and protect each domain/subdomain with its own unique private key.,Compliance,High,ACM certificates should not use wildcard certificates. Steps: 1. Review all ACM certificates. 2. Replace any wildcard certificates with specific domain certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Not Use Wildcard Certificates
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to detect wildcard certificates (*.example.com) in ACM.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans ACM certificates and flags wildcard usage.
SNS Notification: Sends alerts when a wildcard certificate is detected.
","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates and checks their domain names.
‚úÖ Identifies certificates using wildcard domains (*.domain.com).
‚úÖ Logs each certificate status and highlights non-compliant ones.
‚úÖ Optionally sends SNS alerts for further action.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

check_wildcard_certificates() {
    log ""Scanning ACM certificates for wildcard usage...""

    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    wildcard_count=0
    for cert_arn in $certificates; do
        domain_name=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.DomainName"" --output text)

        if [[ ""$domain_name"" == \** ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn uses a wildcard domain ($domain_name). Consider replacing it with a specific domain certificate.""
            ((wildcard_count++))
        else
            log ""‚úÖ Certificate $cert_arn uses a specific domain ($domain_name).""
        fi
    done

    if [[ $wildcard_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $wildcard_count wildcard certificates. Consider replacing them with specific domain certificates.""
    else
        log ""‚úÖ All certificates use specific domains.""
    fi
}

check_wildcard_certificates
","üöÄ Why This is Useful?
üîπ Reduces security risks by discouraging over-permissive wildcard certificates.
üîπ Improves TLS security by enforcing specific domain validation.
üîπ Automates detection, reducing manual monitoring.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks if the domain name starts with *. (wildcard).
3Ô∏è‚É£ Flags any certificate using a wildcard.
4Ô∏è‚É£ Logs each certificate status for compliance review.
5Ô∏è‚É£ Ensures ACM follows best security practices.",Bash,Weekly,SOC 2,2024-02-13
ACM,Ensure that all the expired ACM certificates are removed,This control ensures that all expired ACM certificates are removed from AWS account.,Compliance,High,Ensure that all the expired ACM certificates are removed. Steps: 1. Identify expired certificates in ACM. 2. Delete any expired certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check for expired ACM certificates.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies and deletes expired certificates.
SSM Automation: An SSM document to notify admins and log deletions for compliance tracking.","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates in the AWS account.
‚úÖ Checks if certificates have expired.
‚úÖ Deletes expired certificates automatically.
‚úÖ Logs all deletions and skipped certificates.
‚úÖ Ensures only expired certificates are removed.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and remove expired ACM certificates
remove_expired_acm_certificates() {
    log ""Checking ACM certificates for expiration...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    removed_count=0
    for cert_arn in $certificates; do
        # Get the certificate expiration date
        expiration_date=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.NotAfter"" --output text)
        expiration_epoch=$(date -d ""$expiration_date"" +%s)
        current_epoch=$(date +%s)

        if [[ $expiration_epoch -lt $current_epoch ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn has expired. Deleting...""
            aws acm delete-certificate --certificate-arn ""$cert_arn""
            log ""‚úÖ Deleted expired certificate: $cert_arn""
            ((removed_count++))
        else
            log ""‚úÖ Certificate $cert_arn is still valid.""
        fi
    done

    if [[ $removed_count -gt 0 ]]; then
        log ""‚úÖ $removed_count expired certificates have been removed.""
    else
        log ""‚úÖ No expired certificates found.""
    fi
}

# Execute the function
remove_expired_acm_certificates
","üöÄ Why This is Useful?
üîπ Prevents Clutter: Keeps ACM clean by removing expired certificates.
üîπ Automated Compliance: Ensures expired certificates are not mistakenly used.
üîπ Full Logging: Provides an audit trail of deletions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks their expiration dates.
3Ô∏è‚É£ Identifies expired certificates.
4Ô∏è‚É£ Deletes expired certificates automatically.
5Ô∏è‚É£ Logs actions and ensures only expired certificates are removed.",Bash,Weekly,SOC 2,2024-02-13
ACM,Ensure that all the expired ACM certificates are removed,This control ensures that all expired ACM certificates are removed from AWS account.,Compliance,High,Ensure that all the expired ACM certificates are removed. Steps: 1. Identify expired certificates in ACM. 2. Delete any expired certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check for expired ACM certificates.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies and deletes expired certificates.
SSM Automation: An SSM document to notify admins and log deletions for compliance tracking.","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates in the AWS account.
‚úÖ Checks if certificates have expired.
‚úÖ Deletes expired certificates automatically.
‚úÖ Logs all deletions and skipped certificates.
‚úÖ Ensures only expired certificates are removed.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and remove expired ACM certificates
remove_expired_acm_certificates() {
    log ""Checking ACM certificates for expiration...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    removed_count=0
    for cert_arn in $certificates; do
        # Get the certificate expiration date
        expiration_date=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.NotAfter"" --output text)
        expiration_epoch=$(date -d ""$expiration_date"" +%s)
        current_epoch=$(date +%s)

        if [[ $expiration_epoch -lt $current_epoch ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn has expired. Deleting...""
            aws acm delete-certificate --certificate-arn ""$cert_arn""
            log ""‚úÖ Deleted expired certificate: $cert_arn""
            ((removed_count++))
        else
            log ""‚úÖ Certificate $cert_arn is still valid.""
        fi
    done

    if [[ $removed_count -gt 0 ]]; then
        log ""‚úÖ $removed_count expired certificates have been removed.""
    else
        log ""‚úÖ No expired certificates found.""
    fi
}

# Execute the function
remove_expired_acm_certificates
","üöÄ Why This is Useful?
üîπ Prevents Clutter: Keeps ACM clean by removing expired certificates.
üîπ Automated Compliance: Ensures expired certificates are not mistakenly used.
üîπ Full Logging: Provides an audit trail of deletions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks their expiration dates.
3Ô∏è‚É£ Identifies expired certificates.
4Ô∏è‚É£ Deletes expired certificates automatically.
5Ô∏è‚É£ Logs actions and ensures only expired certificates are removed.",Bash,Weekly,SOC 2,2024-02-13
ACM,Ensure that all the expired ACM certificates are removed,This control ensures that all expired ACM certificates are removed from AWS account.,Compliance,High,Ensure that all the expired ACM certificates are removed. Steps: 1. Identify expired certificates in ACM. 2. Delete any expired certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check for expired ACM certificates.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies and deletes expired certificates.
SSM Automation: An SSM document to notify admins and log deletions for compliance tracking.","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates in the AWS account.
‚úÖ Checks if certificates have expired.
‚úÖ Deletes expired certificates automatically.
‚úÖ Logs all deletions and skipped certificates.
‚úÖ Ensures only expired certificates are removed.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and remove expired ACM certificates
remove_expired_acm_certificates() {
    log ""Checking ACM certificates for expiration...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    removed_count=0
    for cert_arn in $certificates; do
        # Get the certificate expiration date
        expiration_date=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.NotAfter"" --output text)
        expiration_epoch=$(date -d ""$expiration_date"" +%s)
        current_epoch=$(date +%s)

        if [[ $expiration_epoch -lt $current_epoch ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn has expired. Deleting...""
            aws acm delete-certificate --certificate-arn ""$cert_arn""
            log ""‚úÖ Deleted expired certificate: $cert_arn""
            ((removed_count++))
        else
            log ""‚úÖ Certificate $cert_arn is still valid.""
        fi
    done

    if [[ $removed_count -gt 0 ]]; then
        log ""‚úÖ $removed_count expired certificates have been removed.""
    else
        log ""‚úÖ No expired certificates found.""
    fi
}

# Execute the function
remove_expired_acm_certificates
","üöÄ Why This is Useful?
üîπ Prevents Clutter: Keeps ACM clean by removing expired certificates.
üîπ Automated Compliance: Ensures expired certificates are not mistakenly used.
üîπ Full Logging: Provides an audit trail of deletions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks their expiration dates.
3Ô∏è‚É£ Identifies expired certificates.
4Ô∏è‚É£ Deletes expired certificates automatically.
5Ô∏è‚É£ Logs actions and ensures only expired certificates are removed.",Bash,Weekly,SOC 2,2024-02-13
ACM,ACM certificates should have transparency logging enabled,Ensure ACM certificates transparency logging is enabled as certificate transparency logging guards against SSL/TLS certificates issued by mistake or by a compromised certificate authority.,Compliance,High,ACM certificates should have transparency logging enabled. Steps: 1. Review ACM certificates. 2. Enable transparency logging for all applicable certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Have Transparency Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if ACM certificates have transparency logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that detects and enables transparency logging for eligible certificates.
SSM Automation: An SSM document to notify admins about non-compliant certificates.","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates in the AWS account.
‚úÖ Checks if transparency logging is enabled.
‚úÖ Enables transparency logging for eligible certificates.
‚úÖ Logs actions taken for tracking and compliance.
‚úÖ Skips certificates already compliant or ineligible for logging.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable transparency logging
enable_transparency_logging() {
    log ""Checking ACM certificates for transparency logging compliance...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    updated_count=0
    for cert_arn in $certificates; do
        # Get the transparency logging status
        logging_status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Options.CertificateTransparencyLoggingPreference"" --output text)

        if [[ ""$logging_status"" != ""ENABLED"" ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn does not have transparency logging enabled. Enabling...""
            aws acm update-certificate-options --certificate-arn ""$cert_arn"" --options CertificateTransparencyLoggingPreference=ENABLED
            log ""‚úÖ Enabled transparency logging for $cert_arn""
            ((updated_count++))
        else
            log ""‚úÖ Certificate $cert_arn already has transparency logging enabled.""
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Transparency logging enabled for $updated_count certificates.""
    else
        log ""‚úÖ All certificates are already compliant.""
    fi
}

# Execute the function
enable_transparency_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Increases visibility into issued certificates.
üîπ Automated Compliance: Ensures all ACM certificates meet best practices.
üîπ Full Logging: Tracks changes for audit and compliance purposes.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks if transparency logging is enabled.
3Ô∏è‚É£ Flags non-compliant certificates.
4Ô∏è‚É£ Enables transparency logging where necessary.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
ACM,ACM certificates should have transparency logging enabled,Ensure ACM certificates transparency logging is enabled as certificate transparency logging guards against SSL/TLS certificates issued by mistake or by a compromised certificate authority.,Compliance,High,ACM certificates should have transparency logging enabled. Steps: 1. Review ACM certificates. 2. Enable transparency logging for all applicable certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Have Transparency Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if ACM certificates have transparency logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that detects and enables transparency logging for eligible certificates.
SSM Automation: An SSM document to notify admins about non-compliant certificates.","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates in the AWS account.
‚úÖ Checks if transparency logging is enabled.
‚úÖ Enables transparency logging for eligible certificates.
‚úÖ Logs actions taken for tracking and compliance.
‚úÖ Skips certificates already compliant or ineligible for logging.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable transparency logging
enable_transparency_logging() {
    log ""Checking ACM certificates for transparency logging compliance...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    updated_count=0
    for cert_arn in $certificates; do
        # Get the transparency logging status
        logging_status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Options.CertificateTransparencyLoggingPreference"" --output text)

        if [[ ""$logging_status"" != ""ENABLED"" ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn does not have transparency logging enabled. Enabling...""
            aws acm update-certificate-options --certificate-arn ""$cert_arn"" --options CertificateTransparencyLoggingPreference=ENABLED
            log ""‚úÖ Enabled transparency logging for $cert_arn""
            ((updated_count++))
        else
            log ""‚úÖ Certificate $cert_arn already has transparency logging enabled.""
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Transparency logging enabled for $updated_count certificates.""
    else
        log ""‚úÖ All certificates are already compliant.""
    fi
}

# Execute the function
enable_transparency_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Increases visibility into issued certificates.
üîπ Automated Compliance: Ensures all ACM certificates meet best practices.
üîπ Full Logging: Tracks changes for audit and compliance purposes.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks if transparency logging is enabled.
3Ô∏è‚É£ Flags non-compliant certificates.
4Ô∏è‚É£ Enables transparency logging where necessary.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Reliability,ACM certificates should have transparency logging enabled,Ensure ACM certificates transparency logging is enabled as certificate transparency logging guards against SSL/TLS certificates issued by mistake or by a compromised certificate authority.,Compliance,High,ACM certificates should have transparency logging enabled. Steps: 1. Review ACM certificates. 2. Enable transparency logging for all applicable certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Have Transparency Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if ACM certificates have transparency logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that detects and enables transparency logging for eligible certificates.
SSM Automation: An SSM document to notify admins about non-compliant certificates.","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates in the AWS account.
‚úÖ Checks if transparency logging is enabled.
‚úÖ Enables transparency logging for eligible certificates.
‚úÖ Logs actions taken for tracking and compliance.
‚úÖ Skips certificates already compliant or ineligible for logging.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable transparency logging
enable_transparency_logging() {
    log ""Checking ACM certificates for transparency logging compliance...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    updated_count=0
    for cert_arn in $certificates; do
        # Get the transparency logging status
        logging_status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Options.CertificateTransparencyLoggingPreference"" --output text)

        if [[ ""$logging_status"" != ""ENABLED"" ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn does not have transparency logging enabled. Enabling...""
            aws acm update-certificate-options --certificate-arn ""$cert_arn"" --options CertificateTransparencyLoggingPreference=ENABLED
            log ""‚úÖ Enabled transparency logging for $cert_arn""
            ((updated_count++))
        else
            log ""‚úÖ Certificate $cert_arn already has transparency logging enabled.""
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Transparency logging enabled for $updated_count certificates.""
    else
        log ""‚úÖ All certificates are already compliant.""
    fi
}

# Execute the function
enable_transparency_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Increases visibility into issued certificates.
üîπ Automated Compliance: Ensures all ACM certificates meet best practices.
üîπ Full Logging: Tracks changes for audit and compliance purposes.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks if transparency logging is enabled.
3Ô∏è‚É£ Flags non-compliant certificates.
4Ô∏è‚É£ Enables transparency logging where necessary.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,ACM certificates should have transparency logging enabled,Ensure ACM certificates transparency logging is enabled as certificate transparency logging guards against SSL/TLS certificates issued by mistake or by a compromised certificate authority.,Compliance,High,ACM certificates should have transparency logging enabled. Steps: 1. Review ACM certificates. 2. Enable transparency logging for all applicable certificates. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"ACM Certificates Should Have Transparency Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if ACM certificates have transparency logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that detects and enables transparency logging for eligible certificates.
SSM Automation: An SSM document to notify admins about non-compliant certificates.","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates in the AWS account.
‚úÖ Checks if transparency logging is enabled.
‚úÖ Enables transparency logging for eligible certificates.
‚úÖ Logs actions taken for tracking and compliance.
‚úÖ Skips certificates already compliant or ineligible for logging.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable transparency logging
enable_transparency_logging() {
    log ""Checking ACM certificates for transparency logging compliance...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    updated_count=0
    for cert_arn in $certificates; do
        # Get the transparency logging status
        logging_status=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.Options.CertificateTransparencyLoggingPreference"" --output text)

        if [[ ""$logging_status"" != ""ENABLED"" ]]; then
            log ""‚ö†Ô∏è Certificate $cert_arn does not have transparency logging enabled. Enabling...""
            aws acm update-certificate-options --certificate-arn ""$cert_arn"" --options CertificateTransparencyLoggingPreference=ENABLED
            log ""‚úÖ Enabled transparency logging for $cert_arn""
            ((updated_count++))
        else
            log ""‚úÖ Certificate $cert_arn already has transparency logging enabled.""
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Transparency logging enabled for $updated_count certificates.""
    else
        log ""‚úÖ All certificates are already compliant.""
    fi
}

# Execute the function
enable_transparency_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Increases visibility into issued certificates.
üîπ Automated Compliance: Ensures all ACM certificates meet best practices.
üîπ Full Logging: Tracks changes for audit and compliance purposes.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks if transparency logging is enabled.
3Ô∏è‚É£ Flags non-compliant certificates.
4Ô∏è‚É£ Enables transparency logging where necessary.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
ACM,RSA certificates managed by ACM should use a key length of at least 2,To be added,Compliance,High,RSA certificates managed by ACM should use a key length of at least 2048 bits. Steps: 1. Review all RSA certificates in ACM. 2. Ensure that the key length is at least 2048 bits; replace any with a shorter key length. https://docs.aws.amazon.com/acm/latest/userguide/acm-managing-certificates.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RSA certificates managed by ACM should use a key length of at least 2
check_compliance() {
    log ""Checking AWS resources for RSA certificates managed by ACM should use a key length of at least 2 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway methods authorizer should be configured,To be added,Compliance,High,API Gateway methods authorizer should be configured: 1. Navigate to your API Gateway in the AWS Management Console. 2. Select the API and go to the Authorizers section. 3. Create and configure an authorizer. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-create-authorizer.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway methods authorizer should be configured
check_compliance() {
    log ""Checking AWS resources for API Gateway methods authorizer should be configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway methods authorizer should be configured,To be added,Compliance,High,API Gateway methods authorizer should be configured: 1. Navigate to your API Gateway in the AWS Management Console. 2. Select the API and go to the Authorizers section. 3. Create and configure an authorizer. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-create-authorizer.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway methods authorizer should be configured
check_compliance() {
    log ""Checking AWS resources for API Gateway methods authorizer should be configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway methods request parameter should be validated,To be added,Compliance,High,API Gateway methods request parameter should be validated: 1. Access your API Gateway in the AWS Management Console. 2. Select the method you want to validate. 3. Configure request parameters to validate input data. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway methods request parameter should be validated
check_compliance() {
    log ""Checking AWS resources for API Gateway methods request parameter should be validated compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway methods request parameter should be validated,To be added,Compliance,High,API Gateway methods request parameter should be validated: 1. Access your API Gateway in the AWS Management Console. 2. Select the method you want to validate. 3. Configure request parameters to validate input data. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway methods request parameter should be validated
check_compliance() {
    log ""Checking AWS resources for API Gateway methods request parameter should be validated compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway REST API public endpoints should be configured with authorizer,To be added,Compliance,High,API Gateway REST API public endpoints should be configured with authorizer: 1. Go to the API Gateway console. 2. Select the method you want to secure. 3. Set the authorizer for public methods. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-method-settings.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway REST API public endpoints should be configured with authorizer
check_compliance() {
    log ""Checking AWS resources for API Gateway REST API public endpoints should be configured with authorizer compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway REST API public endpoints should be configured with authorizer,To be added,Compliance,High,API Gateway REST API public endpoints should be configured with authorizer: 1. Go to the API Gateway console. 2. Select the method you want to secure. 3. Set the authorizer for public methods. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-method-settings.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway REST API public endpoints should be configured with authorizer
check_compliance() {
    log ""Checking AWS resources for API Gateway REST API public endpoints should be configured with authorizer compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway routes should specify an authorization type,To be added,Compliance,High,"API Gateway routes should specify an authorization type: 1. In the API Gateway console, select the route. 2. Configure the authorization type (e.g., NONE, AWS_IAM, CUSTOM). https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-routes.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway routes should specify an authorization type
check_compliance() {
    log ""Checking AWS resources for API Gateway routes should specify an authorization type compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway V2 authorizer should be configured,To be added,Compliance,High,API Gateway V2 authorizer should be configured: 1. Go to the API Gateway V2 console. 2. Select your API and navigate to the Authorizers tab. 3. Create and configure your authorizer. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-create-v2-authorizer.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway V2 authorizer should be configured
check_compliance() {
    log ""Checking AWS resources for API Gateway V2 authorizer should be configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway stages should have authorizers configured,To be added,Compliance,High,API Gateway stages should have authorizers configured: 1. Navigate to your API Gateway console. 2. Select the stage settings. 3. Associate an authorizer with the stage. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-stages.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stages should have authorizers configured
check_compliance() {
    log ""Checking AWS resources for API Gateway stages should have authorizers configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,API Gateway stages should have authorizers configured,To be added,Compliance,High,API Gateway stages should have authorizers configured: 1. Navigate to your API Gateway console. 2. Select the stage settings. 3. Associate an authorizer with the stage. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-stages.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stages should have authorizers configured
check_compliance() {
    log ""Checking AWS resources for API Gateway stages should have authorizers configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,API Gateway stages should have authorizers configured,To be added,Compliance,High,API Gateway stages should have authorizers configured: 1. Navigate to your API Gateway console. 2. Select the stage settings. 3. Associate an authorizer with the stage. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-stages.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stages should have authorizers configured
check_compliance() {
    log ""Checking AWS resources for API Gateway stages should have authorizers configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway stages should have authorizers configured,To be added,Compliance,High,API Gateway stages should have authorizers configured: 1. Navigate to your API Gateway console. 2. Select the stage settings. 3. Associate an authorizer with the stage. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-stages.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stages should have authorizers configured
check_compliance() {
    log ""Checking AWS resources for API Gateway stages should have authorizers configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway REST API endpoint type should be configured to private,To be added,Compliance,High,"API Gateway REST API endpoint type should be configured to private: 1. In the API Gateway console, select your API. 2. Go to the Settings and set the endpoint type to Private. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway REST API endpoint type should be configured to private
check_compliance() {
    log ""Checking AWS resources for API Gateway REST API endpoint type should be configured to private compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway REST API endpoint type should be configured to private,To be added,Compliance,High,"API Gateway REST API endpoint type should be configured to private: 1. In the API Gateway console, select your API. 2. Go to the Settings and set the endpoint type to Private. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway REST API endpoint type should be configured to private
check_compliance() {
    log ""Checking AWS resources for API Gateway REST API endpoint type should be configured to private compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway stage should uses SSL certificate,To be added,Compliance,High,"API Gateway stage should use SSL certificate: 1. In the API Gateway console, select your API stage. 2. Configure the stage settings to use an SSL certificate. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-names.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage should uses SSL certificate
check_compliance() {
    log ""Checking AWS resources for API Gateway stage should uses SSL certificate compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,API Gateway stage should uses SSL certificate,To be added,Compliance,High,"API Gateway stage should use SSL certificate: 1. In the API Gateway console, select your API stage. 2. Configure the stage settings to use an SSL certificate. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-names.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage should uses SSL certificate
check_compliance() {
    log ""Checking AWS resources for API Gateway stage should uses SSL certificate compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway REST API stages should have AWS X-Ray tracing enabled,To be added,Compliance,High,API Gateway REST API stages should have AWS X-Ray tracing enabled: 1. Go to the API Gateway console. 2. Select the stage you want to enable tracing for. 3. Enable AWS X-Ray tracing in the stage settings. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enable-xray.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway REST API stages should have AWS X-Ray tracing enabled
check_compliance() {
    log ""Checking AWS resources for API Gateway REST API stages should have AWS X-Ray tracing enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway REST API stages should have AWS X-Ray tracing enabled,To be added,Compliance,High,API Gateway REST API stages should have AWS X-Ray tracing enabled: 1. Go to the API Gateway console. 2. Select the stage you want to enable tracing for. 3. Enable AWS X-Ray tracing in the stage settings. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enable-xray.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway REST API stages should have AWS X-Ray tracing enabled
check_compliance() {
    log ""Checking AWS resources for API Gateway REST API stages should have AWS X-Ray tracing enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway stage cache encryption at rest should be enabled,To be added,Compliance,High,API Gateway stage cache encryption at rest should be enabled: 1. Access the API Gateway console. 2. Select the desired stage. 3. Enable cache encryption in the stage settings. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enable-stage-cache.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage cache encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for API Gateway stage cache encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,API Gateway stage cache encryption at rest should be enabled,To be added,Compliance,High,API Gateway stage cache encryption at rest should be enabled: 1. Access the API Gateway console. 2. Select the desired stage. 3. Enable cache encryption in the stage settings. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enable-stage-cache.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage cache encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for API Gateway stage cache encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway stage cache encryption at rest should be enabled,To be added,Compliance,High,API Gateway stage cache encryption at rest should be enabled: 1. Access the API Gateway console. 2. Select the desired stage. 3. Enable cache encryption in the stage settings. https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enable-stage-cache.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage cache encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for API Gateway stage cache encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway stage logging should be enabled,To be added,Compliance,High,"API Gateway stage logging should be enabled: 1. In the API Gateway console, navigate to the stage settings. 2. Enable logging for the stage. https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage logging should be enabled
check_compliance() {
    log ""Checking AWS resources for API Gateway stage logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,API Gateway stage logging should be enabled,To be added,Compliance,High,"API Gateway stage logging should be enabled: 1. In the API Gateway console, navigate to the stage settings. 2. Enable logging for the stage. https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage logging should be enabled
check_compliance() {
    log ""Checking AWS resources for API Gateway stage logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,API Gateway stage logging should be enabled,To be added,Compliance,High,"API Gateway stage logging should be enabled: 1. In the API Gateway console, navigate to the stage settings. 2. Enable logging for the stage. https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage logging should be enabled
check_compliance() {
    log ""Checking AWS resources for API Gateway stage logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,API Gateway stage logging should be enabled,To be added,Compliance,High,"API Gateway stage logging should be enabled: 1. In the API Gateway console, navigate to the stage settings. 2. Enable logging for the stage. https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage logging should be enabled
check_compliance() {
    log ""Checking AWS resources for API Gateway stage logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,API Gateway stage should be associated with waf,To be added,Compliance,High,API Gateway stage should be associated with WAF: 1. Access the AWS WAF console. 2. Create a web ACL and associate it with your API Gateway stage. https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter-creating-web-acl.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage should be associated with waf
check_compliance() {
    log ""Checking AWS resources for API Gateway stage should be associated with waf compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,API Gateway stage should be associated with waf,To be added,Compliance,High,API Gateway stage should be associated with WAF: 1. Access the AWS WAF console. 2. Create a web ACL and associate it with your API Gateway stage. https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter-creating-web-acl.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage should be associated with waf
check_compliance() {
    log ""Checking AWS resources for API Gateway stage should be associated with waf compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
API Gateway,Access logging should be configured for API Gateway V2 Stages,To be added,Compliance,High,Access logging should be configured for API Gateway V2 stages: 1. Navigate to the API Gateway V2 console. 2. Select the stage and enable access logging. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-v2-access-logs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Access logging should be configured for API Gateway V2 Stages
check_compliance() {
    log ""Checking AWS resources for Access logging should be configured for API Gateway V2 Stages compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
AppStream,AppStream fleet default internet access should be disabled,To be added,Compliance,High,"AppStream fleet default internet access should be disabled: 1. Go to the AppStream console in the AWS Management Console. 2. Select the fleet you want to configure. 3. Under the Network settings, disable Default Internet Access. https://docs.aws.amazon.com/appstream2/latest/developerguide/appstream2-fleet.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AppStream fleet default internet access should be disabled
check_compliance() {
    log ""Checking AWS resources for AppStream fleet default internet access should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
AppStream,AppStream fleet idle disconnect timeout should be set to less than or equal to 10 mins,To be added,Compliance,High,AppStream fleet idle disconnect timeout should be set to less than or equal to 10 mins: 1. Access the AppStream console. 2. Choose the fleet and navigate to Idle Disconnect Timeout. 3. Set the value to 10 minutes or less. https://docs.aws.amazon.com/appstream2/latest/developerguide/appstream2-fleet.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AppStream fleet idle disconnect timeout should be set to less than or equal to 10 mins
check_compliance() {
    log ""Checking AWS resources for AppStream fleet idle disconnect timeout should be set to less than or equal to 10 mins compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
AppStream,AppStream fleet max user duration should be set to less than 10 hours,To be added,Compliance,High,"AppStream fleet max user duration should be set to less than 10 hours: 1. In the AppStream console, select your fleet. 2. Navigate to User Duration settings. 3. Ensure the Max User Duration is set to less than 10 hours. https://docs.aws.amazon.com/appstream2/latest/developerguide/appstream2-fleet.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AppStream fleet max user duration should be set to less than 10 hours
check_compliance() {
    log ""Checking AWS resources for AppStream fleet max user duration should be set to less than 10 hours compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
AppStream,AppStream fleet session disconnect timeout should be set to less than or equal to 5 mins,To be added,Compliance,High,AppStream fleet session disconnect timeout should be set to less than or equal to 5 mins: 1. Open the AppStream console. 2. Select the fleet you wish to modify. 3. Go to Session Disconnect Timeout and set it to 5 minutes or less. https://docs.aws.amazon.com/appstream2/latest/developerguide/appstream2-fleet.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AppStream fleet session disconnect timeout should be set to less than or equal to 5 mins
check_compliance() {
    log ""Checking AWS resources for AppStream fleet session disconnect timeout should be set to less than or equal to 5 mins compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
AppSync,AppSync graphql API logging should be enabled,To be added,Compliance,High,"AppSync GraphQL API logging should be enabled: 1. Go to the AWS AppSync console. 2. Select the API for which you want to enable logging. 3. In the Settings section, find the Logging option. 4. Enable logging and configure the log level as needed (INFO, ERROR, etc.). https://docs.aws.amazon.com/appsync/latest/devguide/monitoring.html#monitoring-logging",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AppSync graphql API logging should be enabled
check_compliance() {
    log ""Checking AWS resources for AppSync graphql API logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Athena,Athena workgroups should be encrypted at rest,This control checks if an Athena workgroup is encrypted at rest. The control fails if an Athena workgroup isn't encrypted at rest.,Compliance,High,"Athena workgroups should be encrypted at rest: 1. Navigate to the AWS Athena console. 2. Choose the Workgroup that you want to encrypt. 3. In the Workgroup settings, ensure that encryption at rest is enabled by selecting the appropriate KMS key. 4. Save changes. https://docs.aws.amazon.com/athena/latest/ug/workgroups.html#workgroups-encryption",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Athena workgroups should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for Athena workgroups should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Athena,Athena workgroups should be encrypted at rest,This control checks if an Athena workgroup is encrypted at rest. The control fails if an Athena workgroup isn't encrypted at rest.,Compliance,High,"Athena workgroups should be encrypted at rest: 1. Navigate to the AWS Athena console. 2. Choose the Workgroup that you want to encrypt. 3. In the Workgroup settings, ensure that encryption at rest is enabled by selecting the appropriate KMS key. 4. Save changes. https://docs.aws.amazon.com/athena/latest/ug/workgroups.html#workgroups-encryption",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Athena workgroups should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for Athena workgroups should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Athena,Athena workgroups should enforce configuration,This control checks if an Athena workgroup enforces configuration. The control fails if an Athena workgroup doesn't enforce configuration.,Compliance,High,"Athena workgroups should enforce configuration: 1. Open the AWS Athena console. 2. Select the relevant workgroup. 3. In the Workgroup settings, ensure that the desired configurations (e.g., query result location, encryption, etc.) are enforced. 4. Save the settings to apply the configuration. https://docs.aws.amazon.com/athena/latest/ug/workgroups.html#workgroups-configuration",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Athena workgroups should enforce configuration
check_compliance() {
    log ""Checking AWS resources for Athena workgroups should enforce configuration compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Athena,Athena workgroups should enforce configuration,This control checks if an Athena workgroup enforces configuration. The control fails if an Athena workgroup doesn't enforce configuration.,Compliance,High,"Athena workgroups should enforce configuration: 1. Open the AWS Athena console. 2. Select the relevant workgroup. 3. In the Workgroup settings, ensure that the desired configurations (e.g., query result location, encryption, etc.) are enforced. 4. Save the settings to apply the configuration. https://docs.aws.amazon.com/athena/latest/ug/workgroups.html#workgroups-configuration",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Athena workgroups should enforce configuration
check_compliance() {
    log ""Checking AWS resources for Athena workgroups should enforce configuration compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling group launch configurations user data should not have any sensitive data,Ensure that sensitive information is not included in the user data of the launch configuration. It is recommended to utilize Secrets Manager as an alternative for securely managing sensitive data.,Compliance,High,EC2 auto scaling group launch configurations user data should not have any sensitive data: 1. Review user data in launch configurations. 2. Ensure no sensitive information is exposed or use encrypted methods. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-launch-user-data.html,To be added,"EC2 Auto Scaling Group Launch Configurations User Data Should Not Have Any Sensitive Data
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if user data in launch configurations contains sensitive data (e.g., credentials, API keys).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans launch configurations for sensitive data patterns.
SSM Automation: Notifies admins and suggests replacing non-compliant configurations.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling launch configurations.
‚úÖ Extracts and scans user data for sensitive data patterns (e.g., passwords, keys).
‚úÖ Flags launch configurations containing sensitive data.
‚úÖ Suggests remediation (removing or encrypting sensitive data).
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling launch configurations for sensitive data in user data
check_launch_config_sensitive_data() {
    log ""Checking Auto Scaling Launch Configurations for sensitive data in user data...""

    launch_configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)
    if [[ -z ""$launch_configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    sensitive_patterns=(""password"" ""secret"" ""access_key"" ""private_key"" ""aws_secret"" ""api_key"")
    for config in $launch_configs; do
        user_data=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" --query ""LaunchConfigurations[0].UserData"" --output text | base64 --decode 2>/dev/null)

        for pattern in ""${sensitive_patterns[@]}""; do
            if echo ""$user_data"" | grep -qi ""$pattern""; then
                log ""‚ö†Ô∏è Launch Configuration $config contains potential sensitive data: $pattern""
                log ""‚ùå Action required: Remove or encrypt sensitive data in user data.""
            fi
        done
    done
}

# Execute the function
check_launch_config_sensitive_data
","üöÄ Why This is Useful?
üîπ Enhances Security: Prevents accidental exposure of credentials in launch configurations.
üîπ Ensures Compliance: Meets security best practices by avoiding plaintext secrets.
üîπ Automates Auditing: Quickly identifies and flags configurations with sensitive data.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling launch configurations.
2Ô∏è‚É£ Extracts and decodes user data.
3Ô∏è‚É£ Scans user data for sensitive keywords.
4Ô∏è‚É£ Flags configurations containing sensitive data.
5Ô∏è‚É£ Logs findings and suggests remediation.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling group launch configurations user data should not have any sensitive data,Ensure that sensitive information is not included in the user data of the launch configuration. It is recommended to utilize Secrets Manager as an alternative for securely managing sensitive data.,Compliance,High,EC2 auto scaling group launch configurations user data should not have any sensitive data: 1. Review user data in launch configurations. 2. Ensure no sensitive information is exposed or use encrypted methods. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-launch-user-data.html,To be added,"EC2 Auto Scaling Group Launch Configurations User Data Should Not Have Any Sensitive Data
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if user data in launch configurations contains sensitive data (e.g., credentials, API keys).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans launch configurations for sensitive data patterns.
SSM Automation: Notifies admins and suggests replacing non-compliant configurations.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling launch configurations.
‚úÖ Extracts and scans user data for sensitive data patterns (e.g., passwords, keys).
‚úÖ Flags launch configurations containing sensitive data.
‚úÖ Suggests remediation (removing or encrypting sensitive data).
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling launch configurations for sensitive data in user data
check_launch_config_sensitive_data() {
    log ""Checking Auto Scaling Launch Configurations for sensitive data in user data...""

    launch_configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)
    if [[ -z ""$launch_configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    sensitive_patterns=(""password"" ""secret"" ""access_key"" ""private_key"" ""aws_secret"" ""api_key"")
    for config in $launch_configs; do
        user_data=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" --query ""LaunchConfigurations[0].UserData"" --output text | base64 --decode 2>/dev/null)

        for pattern in ""${sensitive_patterns[@]}""; do
            if echo ""$user_data"" | grep -qi ""$pattern""; then
                log ""‚ö†Ô∏è Launch Configuration $config contains potential sensitive data: $pattern""
                log ""‚ùå Action required: Remove or encrypt sensitive data in user data.""
            fi
        done
    done
}

# Execute the function
check_launch_config_sensitive_data
","üöÄ Why This is Useful?
üîπ Enhances Security: Prevents accidental exposure of credentials in launch configurations.
üîπ Ensures Compliance: Meets security best practices by avoiding plaintext secrets.
üîπ Automates Auditing: Quickly identifies and flags configurations with sensitive data.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling launch configurations.
2Ô∏è‚É£ Extracts and decodes user data.
3Ô∏è‚É£ Scans user data for sensitive keywords.
4Ô∏è‚É£ Flags configurations containing sensitive data.
5Ô∏è‚É£ Logs findings and suggests remediation.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling group launch configurations user data should not have any sensitive data,Ensure that sensitive information is not included in the user data of the launch configuration. It is recommended to utilize Secrets Manager as an alternative for securely managing sensitive data.,Compliance,High,EC2 auto scaling group launch configurations user data should not have any sensitive data: 1. Review user data in launch configurations. 2. Ensure no sensitive information is exposed or use encrypted methods. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-launch-user-data.html,To be added,"EC2 Auto Scaling Group Launch Configurations User Data Should Not Have Any Sensitive Data
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if user data in launch configurations contains sensitive data (e.g., credentials, API keys).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans launch configurations for sensitive data patterns.
SSM Automation: Notifies admins and suggests replacing non-compliant configurations.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling launch configurations.
‚úÖ Extracts and scans user data for sensitive data patterns (e.g., passwords, keys).
‚úÖ Flags launch configurations containing sensitive data.
‚úÖ Suggests remediation (removing or encrypting sensitive data).
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling launch configurations for sensitive data in user data
check_launch_config_sensitive_data() {
    log ""Checking Auto Scaling Launch Configurations for sensitive data in user data...""

    launch_configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)
    if [[ -z ""$launch_configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    sensitive_patterns=(""password"" ""secret"" ""access_key"" ""private_key"" ""aws_secret"" ""api_key"")
    for config in $launch_configs; do
        user_data=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" --query ""LaunchConfigurations[0].UserData"" --output text | base64 --decode 2>/dev/null)

        for pattern in ""${sensitive_patterns[@]}""; do
            if echo ""$user_data"" | grep -qi ""$pattern""; then
                log ""‚ö†Ô∏è Launch Configuration $config contains potential sensitive data: $pattern""
                log ""‚ùå Action required: Remove or encrypt sensitive data in user data.""
            fi
        done
    done
}

# Execute the function
check_launch_config_sensitive_data
","üöÄ Why This is Useful?
üîπ Enhances Security: Prevents accidental exposure of credentials in launch configurations.
üîπ Ensures Compliance: Meets security best practices by avoiding plaintext secrets.
üîπ Automates Auditing: Quickly identifies and flags configurations with sensitive data.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling launch configurations.
2Ô∏è‚É£ Extracts and decodes user data.
3Ô∏è‚É£ Scans user data for sensitive keywords.
4Ô∏è‚É£ Flags configurations containing sensitive data.
5Ô∏è‚É£ Logs findings and suggests remediation.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling groups should not have any suspended processes,Ensure that there are no Auto Scaling Groups (ASGs) with suspended processes provisioned in your AWS account in order to avoid disrupting the auto scaling workflow.,Compliance,High,Auto Scaling groups should not have any suspended processes: 1. Check the Auto Scaling group to ensure that no critical processes are suspended. 2. Resume any suspended processes that are essential for operation. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html,To be added,"Auto Scaling Groups Should Not Have Any Suspended Processes
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Auto Scaling Groups (ASGs) have any suspended processes.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies ASGs with suspended processes and resumes them.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs).
‚úÖ Checks if any scaling process is suspended.
‚úÖ Flags non-compliant ASGs and resumes suspended processes.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and resume suspended processes in ASGs
resume_suspended_processes() {
    log ""Checking Auto Scaling Groups for suspended processes...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get list of suspended processes
        suspended_processes=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].SuspendedProcesses[].ProcessName"" --output text)

        if [[ -z ""$suspended_processes"" || ""$suspended_processes"" == ""None"" ]]; then
            log ""‚úÖ ASG $asg has no suspended processes.""
        else
            log ""‚ö†Ô∏è ASG $asg has suspended processes: $suspended_processes. Resuming them...""
            
            # Resume suspended processes
            aws autoscaling resume-processes --auto-scaling-group-name ""$asg""
            
            log ""‚úÖ Suspended processes resumed for ASG $asg.""
        fi
    done
}

# Execute the function
resume_suspended_processes
","üöÄ Why This is Useful?
üîπ Ensures Scaling Operations Continue: Prevents unexpected failures due to suspended processes.
üîπ Automates Compliance: Identifies ASGs with suspended processes and fixes them.
üîπ Reduces Manual Work: No need to manually check and resume processes for each ASG","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Checks if any ASG has suspended processes.
3Ô∏è‚É£ Flags non-compliant ASGs.
4Ô∏è‚É£ Resumes suspended processes in affected ASGs.
5Ô∏è‚É£ Logs findings and changes.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling groups should not have any suspended processes,Ensure that there are no Auto Scaling Groups (ASGs) with suspended processes provisioned in your AWS account in order to avoid disrupting the auto scaling workflow.,Compliance,High,Auto Scaling groups should not have any suspended processes: 1. Check the Auto Scaling group to ensure that no critical processes are suspended. 2. Resume any suspended processes that are essential for operation. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html,To be added,"Auto Scaling Groups Should Not Have Any Suspended Processes
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Auto Scaling Groups (ASGs) have any suspended processes.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies ASGs with suspended processes and resumes them.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs).
‚úÖ Checks if any scaling process is suspended.
‚úÖ Flags non-compliant ASGs and resumes suspended processes.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and resume suspended processes in ASGs
resume_suspended_processes() {
    log ""Checking Auto Scaling Groups for suspended processes...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get list of suspended processes
        suspended_processes=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].SuspendedProcesses[].ProcessName"" --output text)

        if [[ -z ""$suspended_processes"" || ""$suspended_processes"" == ""None"" ]]; then
            log ""‚úÖ ASG $asg has no suspended processes.""
        else
            log ""‚ö†Ô∏è ASG $asg has suspended processes: $suspended_processes. Resuming them...""
            
            # Resume suspended processes
            aws autoscaling resume-processes --auto-scaling-group-name ""$asg""
            
            log ""‚úÖ Suspended processes resumed for ASG $asg.""
        fi
    done
}

# Execute the function
resume_suspended_processes
","üöÄ Why This is Useful?
üîπ Ensures Scaling Operations Continue: Prevents unexpected failures due to suspended processes.
üîπ Automates Compliance: Identifies ASGs with suspended processes and fixes them.
üîπ Reduces Manual Work: No need to manually check and resume processes for each ASG","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Checks if any ASG has suspended processes.
3Ô∏è‚É£ Flags non-compliant ASGs.
4Ô∏è‚É£ Resumes suspended processes in affected ASGs.
5Ô∏è‚É£ Logs findings and changes.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling groups should not have any suspended processes,Ensure that there are no Auto Scaling Groups (ASGs) with suspended processes provisioned in your AWS account in order to avoid disrupting the auto scaling workflow.,Compliance,High,Auto Scaling groups should not have any suspended processes: 1. Check the Auto Scaling group to ensure that no critical processes are suspended. 2. Resume any suspended processes that are essential for operation. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html,To be added,"Auto Scaling Groups Should Not Have Any Suspended Processes
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Auto Scaling Groups (ASGs) have any suspended processes.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies ASGs with suspended processes and resumes them.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs).
‚úÖ Checks if any scaling process is suspended.
‚úÖ Flags non-compliant ASGs and resumes suspended processes.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and resume suspended processes in ASGs
resume_suspended_processes() {
    log ""Checking Auto Scaling Groups for suspended processes...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get list of suspended processes
        suspended_processes=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].SuspendedProcesses[].ProcessName"" --output text)

        if [[ -z ""$suspended_processes"" || ""$suspended_processes"" == ""None"" ]]; then
            log ""‚úÖ ASG $asg has no suspended processes.""
        else
            log ""‚ö†Ô∏è ASG $asg has suspended processes: $suspended_processes. Resuming them...""
            
            # Resume suspended processes
            aws autoscaling resume-processes --auto-scaling-group-name ""$asg""
            
            log ""‚úÖ Suspended processes resumed for ASG $asg.""
        fi
    done
}

# Execute the function
resume_suspended_processes
","üöÄ Why This is Useful?
üîπ Ensures Scaling Operations Continue: Prevents unexpected failures due to suspended processes.
üîπ Automates Compliance: Identifies ASGs with suspended processes and fixes them.
üîπ Reduces Manual Work: No need to manually check and resume processes for each ASG","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Checks if any ASG has suspended processes.
3Ô∏è‚É£ Flags non-compliant ASGs.
4Ô∏è‚É£ Resumes suspended processes in affected ASGs.
5Ô∏è‚É£ Logs findings and changes.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Ensure EC2 Auto Scaling Groups Propagate Tags to EC2 Instances that it launches,"Tags can help with managing, identifying, organizing, searching for, and filtering resources. Additionally, tags can help with security and compliance. Tags can be propagated from an Auto Scaling group to the EC2 instances that it launches.",Compliance,High,Ensure EC2 Auto Scaling Groups propagate tags to EC2 Instances that it launches: 1. Review Auto Scaling group settings to confirm that tags are being propagated to instances. 2. Update configurations as needed to ensure proper tagging. https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html,To be added,"Ensure EC2 Auto Scaling Groups Propagate Tags to EC2 Instances
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure Auto Scaling Groups (ASG) propagate tags to launched instances.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks ASGs and enables tag propagation if missing.
SSM Automation: An SSM document to notify administrators and enable tag propagation automatically.
","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs).
‚úÖ Checks if tag propagation is enabled.
‚úÖ Flags and enables tag propagation if missing.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable tag propagation for Auto Scaling Groups
check_asg_tag_propagation() {
    log ""Checking Auto Scaling Groups for tag propagation settings...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get ASG tags
        tags=$(aws autoscaling describe-tags --filters ""Name=auto-scaling-group,Values=$asg"" --query ""Tags[?PropagateAtLaunch==\`true\`]"" --output text)

        if [[ -z ""$tags"" ]]; then
            log ""‚ö†Ô∏è ASG $asg does NOT propagate tags to instances!""
            log ""‚úÖ Enabling tag propagation for $asg...""

            # Get the list of tags
            tag_list=$(aws autoscaling describe-tags --filters ""Name=auto-scaling-group,Values=$asg"" --query ""Tags"" --output json)

            # Enable tag propagation for all tags
            for tag in $(echo ""$tag_list"" | jq -c '.[]'); do
                key=$(echo ""$tag"" | jq -r '.Key')
                value=$(echo ""$tag"" | jq -r '.Value')

                aws autoscaling create-or-update-tags --tags ""ResourceId=$asg,ResourceType=auto-scaling-group,Key=$key,Value=$value,PropagateAtLaunch=true""
            done

            log ""‚úÖ Tag propagation enabled for ASG $asg.""
        else
            log ""‚úÖ ASG $asg is already propagating tags.""
        fi
    done
}

# Execute the function
check_asg_tag_propagation
","üöÄ Why This is Useful?
üîπ Ensures Consistency: Tags applied to ASG are also applied to EC2 instances.
üîπ Automates Compliance: Flags ASGs without tag propagation and fixes them.
üîπ Reduces Manual Work: No need to manually apply tags to each instance.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups.
2Ô∏è‚É£ Checks if tag propagation is enabled.
3Ô∏è‚É£ Flags ASGs missing tag propagation.
4Ô∏è‚É£ Enables tag propagation for non-compliant ASGs.
5Ô∏è‚É£ Logs findings for auditing.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Ensure EC2 Auto Scaling Groups Propagate Tags to EC2 Instances that it launches,"Tags can help with managing, identifying, organizing, searching for, and filtering resources. Additionally, tags can help with security and compliance. Tags can be propagated from an Auto Scaling group to the EC2 instances that it launches.",Compliance,High,Ensure EC2 Auto Scaling Groups propagate tags to EC2 Instances that it launches: 1. Review Auto Scaling group settings to confirm that tags are being propagated to instances. 2. Update configurations as needed to ensure proper tagging. https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html,To be added,"Ensure EC2 Auto Scaling Groups Propagate Tags to EC2 Instances
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure Auto Scaling Groups (ASG) propagate tags to launched instances.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks ASGs and enables tag propagation if missing.
SSM Automation: An SSM document to notify administrators and enable tag propagation automatically.
","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs).
‚úÖ Checks if tag propagation is enabled.
‚úÖ Flags and enables tag propagation if missing.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable tag propagation for Auto Scaling Groups
check_asg_tag_propagation() {
    log ""Checking Auto Scaling Groups for tag propagation settings...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get ASG tags
        tags=$(aws autoscaling describe-tags --filters ""Name=auto-scaling-group,Values=$asg"" --query ""Tags[?PropagateAtLaunch==\`true\`]"" --output text)

        if [[ -z ""$tags"" ]]; then
            log ""‚ö†Ô∏è ASG $asg does NOT propagate tags to instances!""
            log ""‚úÖ Enabling tag propagation for $asg...""

            # Get the list of tags
            tag_list=$(aws autoscaling describe-tags --filters ""Name=auto-scaling-group,Values=$asg"" --query ""Tags"" --output json)

            # Enable tag propagation for all tags
            for tag in $(echo ""$tag_list"" | jq -c '.[]'); do
                key=$(echo ""$tag"" | jq -r '.Key')
                value=$(echo ""$tag"" | jq -r '.Value')

                aws autoscaling create-or-update-tags --tags ""ResourceId=$asg,ResourceType=auto-scaling-group,Key=$key,Value=$value,PropagateAtLaunch=true""
            done

            log ""‚úÖ Tag propagation enabled for ASG $asg.""
        else
            log ""‚úÖ ASG $asg is already propagating tags.""
        fi
    done
}

# Execute the function
check_asg_tag_propagation
","üöÄ Why This is Useful?
üîπ Ensures Consistency: Tags applied to ASG are also applied to EC2 instances.
üîπ Automates Compliance: Flags ASGs without tag propagation and fixes them.
üîπ Reduces Manual Work: No need to manually apply tags to each instance.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups.
2Ô∏è‚É£ Checks if tag propagation is enabled.
3Ô∏è‚É£ Flags ASGs missing tag propagation.
4Ô∏è‚É£ Enables tag propagation for non-compliant ASGs.
5Ô∏è‚É£ Logs findings for auditing.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Ensure EC2 Auto Scaling Groups Propagate Tags to EC2 Instances that it launches,"Tags can help with managing, identifying, organizing, searching for, and filtering resources. Additionally, tags can help with security and compliance. Tags can be propagated from an Auto Scaling group to the EC2 instances that it launches.",Compliance,High,Ensure EC2 Auto Scaling Groups propagate tags to EC2 Instances that it launches: 1. Review Auto Scaling group settings to confirm that tags are being propagated to instances. 2. Update configurations as needed to ensure proper tagging. https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html,To be added,"Ensure EC2 Auto Scaling Groups Propagate Tags to EC2 Instances
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure Auto Scaling Groups (ASG) propagate tags to launched instances.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks ASGs and enables tag propagation if missing.
SSM Automation: An SSM document to notify administrators and enable tag propagation automatically.
","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs).
‚úÖ Checks if tag propagation is enabled.
‚úÖ Flags and enables tag propagation if missing.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable tag propagation for Auto Scaling Groups
check_asg_tag_propagation() {
    log ""Checking Auto Scaling Groups for tag propagation settings...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get ASG tags
        tags=$(aws autoscaling describe-tags --filters ""Name=auto-scaling-group,Values=$asg"" --query ""Tags[?PropagateAtLaunch==\`true\`]"" --output text)

        if [[ -z ""$tags"" ]]; then
            log ""‚ö†Ô∏è ASG $asg does NOT propagate tags to instances!""
            log ""‚úÖ Enabling tag propagation for $asg...""

            # Get the list of tags
            tag_list=$(aws autoscaling describe-tags --filters ""Name=auto-scaling-group,Values=$asg"" --query ""Tags"" --output json)

            # Enable tag propagation for all tags
            for tag in $(echo ""$tag_list"" | jq -c '.[]'); do
                key=$(echo ""$tag"" | jq -r '.Key')
                value=$(echo ""$tag"" | jq -r '.Value')

                aws autoscaling create-or-update-tags --tags ""ResourceId=$asg,ResourceType=auto-scaling-group,Key=$key,Value=$value,PropagateAtLaunch=true""
            done

            log ""‚úÖ Tag propagation enabled for ASG $asg.""
        else
            log ""‚úÖ ASG $asg is already propagating tags.""
        fi
    done
}

# Execute the function
check_asg_tag_propagation
","üöÄ Why This is Useful?
üîπ Ensures Consistency: Tags applied to ASG are also applied to EC2 instances.
üîπ Automates Compliance: Flags ASGs without tag propagation and fixes them.
üîπ Reduces Manual Work: No need to manually apply tags to each instance.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups.
2Ô∏è‚É£ Checks if tag propagation is enabled.
3Ô∏è‚É£ Flags ASGs missing tag propagation.
4Ô∏è‚É£ Enables tag propagation for non-compliant ASGs.
5Ô∏è‚É£ Logs findings for auditing.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 Auto Scaling groups should use EC2 launch templates,This control checks whether an AWS EC2 Auto Scaling group is created from an EC2 launch template. This control fails if an AWS EC2 Auto Scaling group is not created with a launch template or if a launch template is not specified in a mixed instances policy.,Compliance,High,EC2 Auto Scaling groups should use EC2 launch templates: 1. Verify the Auto Scaling group is using launch templates rather than launch configurations for better management. 2. Transition to using launch templates if not already in place. https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html,To be added,"EC2 Auto Scaling Groups Should Use EC2 Launch Templates
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Auto Scaling groups (ASGs) are using EC2 launch templates instead of launch configurations.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans ASGs and flags those still using launch configurations.
SSM Automation: Notifies admins and provides an option to migrate to launch templates.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling groups.
‚úÖ Checks if each ASG is using a launch template or a legacy launch configuration.
‚úÖ Flags ASGs still using launch configurations.
‚úÖ Suggests migrating flagged ASGs to launch templates.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling groups for launch configuration usage
check_asg_launch_templates() {
    log ""Checking Auto Scaling Groups for use of launch templates...""

    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)
    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        launch_template=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" --query ""AutoScalingGroups[0].LaunchTemplate"" --output text 2>/dev/null)
        launch_config=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" --query ""AutoScalingGroups[0].LaunchConfigurationName"" --output text 2>/dev/null)

        if [[ -n ""$launch_template"" && ""$launch_template"" != ""None"" ]]; then
            log ""‚úÖ Auto Scaling Group $asg is using a launch template.""
        elif [[ -n ""$launch_config"" && ""$launch_config"" != ""None"" ]]; then
            log ""‚ö†Ô∏è Auto Scaling Group $asg is using a launch configuration. Migration recommended!""
            log ""‚ÑπÔ∏è Consider updating $asg to use a launch template for improved security and efficiency.""
        else
            log ""‚ùå Auto Scaling Group $asg does not have a launch template or configuration. Action required!""
        fi
    done
}

# Execute the function
check_asg_launch_templates
","üöÄ Why This is Useful?
üîπ Enhances Security & Efficiency: Launch templates provide versioning, security improvements, and better flexibility.
üîπ Ensures Compliance: AWS recommends using launch templates over legacy launch configurations.
üîπ Automates Auditing: Quickly identifies ASGs that need to be migrated.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling groups.
2Ô∏è‚É£ Checks if they use launch templates or legacy configurations.
3Ô∏è‚É£ Flags ASGs still using launch configurations.
4Ô∏è‚É£ Suggests migration to launch templates.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 Auto Scaling groups should use EC2 launch templates,This control checks whether an AWS EC2 Auto Scaling group is created from an EC2 launch template. This control fails if an AWS EC2 Auto Scaling group is not created with a launch template or if a launch template is not specified in a mixed instances policy.,Compliance,High,EC2 Auto Scaling groups should use EC2 launch templates: 1. Verify the Auto Scaling group is using launch templates rather than launch configurations for better management. 2. Transition to using launch templates if not already in place. https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html,To be added,"EC2 Auto Scaling Groups Should Use EC2 Launch Templates
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Auto Scaling groups (ASGs) are using EC2 launch templates instead of launch configurations.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans ASGs and flags those still using launch configurations.
SSM Automation: Notifies admins and provides an option to migrate to launch templates.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling groups.
‚úÖ Checks if each ASG is using a launch template or a legacy launch configuration.
‚úÖ Flags ASGs still using launch configurations.
‚úÖ Suggests migrating flagged ASGs to launch templates.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling groups for launch configuration usage
check_asg_launch_templates() {
    log ""Checking Auto Scaling Groups for use of launch templates...""

    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)
    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        launch_template=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" --query ""AutoScalingGroups[0].LaunchTemplate"" --output text 2>/dev/null)
        launch_config=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" --query ""AutoScalingGroups[0].LaunchConfigurationName"" --output text 2>/dev/null)

        if [[ -n ""$launch_template"" && ""$launch_template"" != ""None"" ]]; then
            log ""‚úÖ Auto Scaling Group $asg is using a launch template.""
        elif [[ -n ""$launch_config"" && ""$launch_config"" != ""None"" ]]; then
            log ""‚ö†Ô∏è Auto Scaling Group $asg is using a launch configuration. Migration recommended!""
            log ""‚ÑπÔ∏è Consider updating $asg to use a launch template for improved security and efficiency.""
        else
            log ""‚ùå Auto Scaling Group $asg does not have a launch template or configuration. Action required!""
        fi
    done
}

# Execute the function
check_asg_launch_templates
","üöÄ Why This is Useful?
üîπ Enhances Security & Efficiency: Launch templates provide versioning, security improvements, and better flexibility.
üîπ Ensures Compliance: AWS recommends using launch templates over legacy launch configurations.
üîπ Automates Auditing: Quickly identifies ASGs that need to be migrated.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling groups.
2Ô∏è‚É£ Checks if they use launch templates or legacy configurations.
3Ô∏è‚É£ Flags ASGs still using launch configurations.
4Ô∏è‚É£ Suggests migration to launch templates.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 Auto Scaling groups should use EC2 launch templates,This control checks whether an AWS EC2 Auto Scaling group is created from an EC2 launch template. This control fails if an AWS EC2 Auto Scaling group is not created with a launch template or if a launch template is not specified in a mixed instances policy.,Compliance,High,EC2 Auto Scaling groups should use EC2 launch templates: 1. Verify the Auto Scaling group is using launch templates rather than launch configurations for better management. 2. Transition to using launch templates if not already in place. https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html,To be added,"EC2 Auto Scaling Groups Should Use EC2 Launch Templates
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Auto Scaling groups (ASGs) are using EC2 launch templates instead of launch configurations.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans ASGs and flags those still using launch configurations.
SSM Automation: Notifies admins and provides an option to migrate to launch templates.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling groups.
‚úÖ Checks if each ASG is using a launch template or a legacy launch configuration.
‚úÖ Flags ASGs still using launch configurations.
‚úÖ Suggests migrating flagged ASGs to launch templates.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling groups for launch configuration usage
check_asg_launch_templates() {
    log ""Checking Auto Scaling Groups for use of launch templates...""

    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)
    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        launch_template=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" --query ""AutoScalingGroups[0].LaunchTemplate"" --output text 2>/dev/null)
        launch_config=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" --query ""AutoScalingGroups[0].LaunchConfigurationName"" --output text 2>/dev/null)

        if [[ -n ""$launch_template"" && ""$launch_template"" != ""None"" ]]; then
            log ""‚úÖ Auto Scaling Group $asg is using a launch template.""
        elif [[ -n ""$launch_config"" && ""$launch_config"" != ""None"" ]]; then
            log ""‚ö†Ô∏è Auto Scaling Group $asg is using a launch configuration. Migration recommended!""
            log ""‚ÑπÔ∏è Consider updating $asg to use a launch template for improved security and efficiency.""
        else
            log ""‚ùå Auto Scaling Group $asg does not have a launch template or configuration. Action required!""
        fi
    done
}

# Execute the function
check_asg_launch_templates
","üöÄ Why This is Useful?
üîπ Enhances Security & Efficiency: Launch templates provide versioning, security improvements, and better flexibility.
üîπ Ensures Compliance: AWS recommends using launch templates over legacy launch configurations.
üîπ Automates Auditing: Quickly identifies ASGs that need to be migrated.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling groups.
2Ô∏è‚É£ Checks if they use launch templates or legacy configurations.
3Ô∏è‚É£ Flags ASGs still using launch configurations.
4Ô∏è‚É£ Suggests migration to launch templates.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling groups with a load balancer should use health checks,The Elastic Load Balancer (ELB) health checks for AWS Elastic Compute Cloud (AWS EC2) Auto Scaling groups support maintenance of adequate capacity and availability.,Compliance,Medium,Auto Scaling groups with a load balancer should use health checks: 1. Ensure that health checks are configured for Auto Scaling groups that utilize load balancers. 2. Adjust health check settings as necessary to maintain instance health. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-add-elb-healthcheck.html,To be added,"Auto Scaling Groups with a Load Balancer Should Use Health Checks
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Auto Scaling Groups (ASGs) attached to a Load Balancer have health checks enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans ASGs and ensures they are using ELB health checks instead of EC2 health checks.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs) attached to Load Balancers.
‚úÖ Checks whether ASGs use ELB health checks.
‚úÖ Flags ASGs using EC2 health checks and updates them to ELB health checks.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enforce ELB health checks on ASGs
check_asg_health_checks() {
    log ""Checking Auto Scaling Groups for Load Balancer health checks...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get associated Load Balancer names
        lb_names=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].LoadBalancerNames"" --output text)

        if [[ -z ""$lb_names"" || ""$lb_names"" == ""None"" ]]; then
            log ""‚ö†Ô∏è ASG $asg is not attached to a Load Balancer. Skipping...""
            continue
        fi

        # Get current health check type
        health_check_type=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].HealthCheckType"" --output text)

        if [[ ""$health_check_type"" == ""ELB"" ]]; then
            log ""‚úÖ ASG $asg is already using ELB health checks.""
        else
            log ""‚ö†Ô∏è ASG $asg is using EC2 health checks. Updating to ELB health checks...""
            
            # Update ASG to use ELB health checks
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" --health-check-type ""ELB""
            
            log ""‚úÖ ASG $asg has been updated to use ELB health checks.""
        fi
    done
}

# Execute the function
check_asg_health_checks
","üöÄ Why This is Useful?
üîπ Ensures High Availability: ELB health checks prevent unhealthy instances from receiving traffic.
üîπ Automates Compliance: Identifies ASGs using EC2 health checks and corrects them.
üîπ Minimizes Manual Effort: No need to manually check and update each ASG.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Identifies ASGs attached to a Load Balancer.
3Ô∏è‚É£ Checks whether ASGs use ELB health checks.
4Ô∏è‚É£ Updates non-compliant ASGs to use ELB health checks.
5Ô∏è‚É£ Logs findings and changes.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling groups with a load balancer should use health checks,The Elastic Load Balancer (ELB) health checks for AWS Elastic Compute Cloud (AWS EC2) Auto Scaling groups support maintenance of adequate capacity and availability.,Compliance,Medium,Auto Scaling groups with a load balancer should use health checks: 1. Ensure that health checks are configured for Auto Scaling groups that utilize load balancers. 2. Adjust health check settings as necessary to maintain instance health. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-add-elb-healthcheck.html,To be added,"Auto Scaling Groups with a Load Balancer Should Use Health Checks
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Auto Scaling Groups (ASGs) attached to a Load Balancer have health checks enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans ASGs and ensures they are using ELB health checks instead of EC2 health checks.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs) attached to Load Balancers.
‚úÖ Checks whether ASGs use ELB health checks.
‚úÖ Flags ASGs using EC2 health checks and updates them to ELB health checks.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enforce ELB health checks on ASGs
check_asg_health_checks() {
    log ""Checking Auto Scaling Groups for Load Balancer health checks...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get associated Load Balancer names
        lb_names=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].LoadBalancerNames"" --output text)

        if [[ -z ""$lb_names"" || ""$lb_names"" == ""None"" ]]; then
            log ""‚ö†Ô∏è ASG $asg is not attached to a Load Balancer. Skipping...""
            continue
        fi

        # Get current health check type
        health_check_type=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].HealthCheckType"" --output text)

        if [[ ""$health_check_type"" == ""ELB"" ]]; then
            log ""‚úÖ ASG $asg is already using ELB health checks.""
        else
            log ""‚ö†Ô∏è ASG $asg is using EC2 health checks. Updating to ELB health checks...""
            
            # Update ASG to use ELB health checks
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" --health-check-type ""ELB""
            
            log ""‚úÖ ASG $asg has been updated to use ELB health checks.""
        fi
    done
}

# Execute the function
check_asg_health_checks
","üöÄ Why This is Useful?
üîπ Ensures High Availability: ELB health checks prevent unhealthy instances from receiving traffic.
üîπ Automates Compliance: Identifies ASGs using EC2 health checks and corrects them.
üîπ Minimizes Manual Effort: No need to manually check and update each ASG.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Identifies ASGs attached to a Load Balancer.
3Ô∏è‚É£ Checks whether ASGs use ELB health checks.
4Ô∏è‚É£ Updates non-compliant ASGs to use ELB health checks.
5Ô∏è‚É£ Logs findings and changes.",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,Auto Scaling groups with a load balancer should use health checks,The Elastic Load Balancer (ELB) health checks for AWS Elastic Compute Cloud (AWS EC2) Auto Scaling groups support maintenance of adequate capacity and availability.,Compliance,Medium,Auto Scaling groups with a load balancer should use health checks: 1. Ensure that health checks are configured for Auto Scaling groups that utilize load balancers. 2. Adjust health check settings as necessary to maintain instance health. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-add-elb-healthcheck.html,To be added,"Auto Scaling Groups with a Load Balancer Should Use Health Checks
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Auto Scaling Groups (ASGs) attached to a Load Balancer have health checks enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans ASGs and ensures they are using ELB health checks instead of EC2 health checks.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs) attached to Load Balancers.
‚úÖ Checks whether ASGs use ELB health checks.
‚úÖ Flags ASGs using EC2 health checks and updates them to ELB health checks.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enforce ELB health checks on ASGs
check_asg_health_checks() {
    log ""Checking Auto Scaling Groups for Load Balancer health checks...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get associated Load Balancer names
        lb_names=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].LoadBalancerNames"" --output text)

        if [[ -z ""$lb_names"" || ""$lb_names"" == ""None"" ]]; then
            log ""‚ö†Ô∏è ASG $asg is not attached to a Load Balancer. Skipping...""
            continue
        fi

        # Get current health check type
        health_check_type=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].HealthCheckType"" --output text)

        if [[ ""$health_check_type"" == ""ELB"" ]]; then
            log ""‚úÖ ASG $asg is already using ELB health checks.""
        else
            log ""‚ö†Ô∏è ASG $asg is using EC2 health checks. Updating to ELB health checks...""
            
            # Update ASG to use ELB health checks
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" --health-check-type ""ELB""
            
            log ""‚úÖ ASG $asg has been updated to use ELB health checks.""
        fi
    done
}

# Execute the function
check_asg_health_checks
","üöÄ Why This is Useful?
üîπ Ensures High Availability: ELB health checks prevent unhealthy instances from receiving traffic.
üîπ Automates Compliance: Identifies ASGs using EC2 health checks and corrects them.
üîπ Minimizes Manual Effort: No need to manually check and update each ASG.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Identifies ASGs attached to a Load Balancer.
3Ô∏è‚É£ Checks whether ASGs use ELB health checks.
4Ô∏è‚É£ Updates non-compliant ASGs to use ELB health checks.
5Ô∏è‚É£ Logs findings and changes.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling groups with a load balancer should use health checks,The Elastic Load Balancer (ELB) health checks for AWS Elastic Compute Cloud (AWS EC2) Auto Scaling groups support maintenance of adequate capacity and availability.,Compliance,Medium,Auto Scaling groups with a load balancer should use health checks: 1. Ensure that health checks are configured for Auto Scaling groups that utilize load balancers. 2. Adjust health check settings as necessary to maintain instance health. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-add-elb-healthcheck.html,To be added,"Auto Scaling Groups with a Load Balancer Should Use Health Checks
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Auto Scaling Groups (ASGs) attached to a Load Balancer have health checks enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans ASGs and ensures they are using ELB health checks instead of EC2 health checks.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs) attached to Load Balancers.
‚úÖ Checks whether ASGs use ELB health checks.
‚úÖ Flags ASGs using EC2 health checks and updates them to ELB health checks.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enforce ELB health checks on ASGs
check_asg_health_checks() {
    log ""Checking Auto Scaling Groups for Load Balancer health checks...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get associated Load Balancer names
        lb_names=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].LoadBalancerNames"" --output text)

        if [[ -z ""$lb_names"" || ""$lb_names"" == ""None"" ]]; then
            log ""‚ö†Ô∏è ASG $asg is not attached to a Load Balancer. Skipping...""
            continue
        fi

        # Get current health check type
        health_check_type=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].HealthCheckType"" --output text)

        if [[ ""$health_check_type"" == ""ELB"" ]]; then
            log ""‚úÖ ASG $asg is already using ELB health checks.""
        else
            log ""‚ö†Ô∏è ASG $asg is using EC2 health checks. Updating to ELB health checks...""
            
            # Update ASG to use ELB health checks
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" --health-check-type ""ELB""
            
            log ""‚úÖ ASG $asg has been updated to use ELB health checks.""
        fi
    done
}

# Execute the function
check_asg_health_checks
","üöÄ Why This is Useful?
üîπ Ensures High Availability: ELB health checks prevent unhealthy instances from receiving traffic.
üîπ Automates Compliance: Identifies ASGs using EC2 health checks and corrects them.
üîπ Minimizes Manual Effort: No need to manually check and update each ASG.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Identifies ASGs attached to a Load Balancer.
3Ô∏è‚É£ Checks whether ASGs use ELB health checks.
4Ô∏è‚É£ Updates non-compliant ASGs to use ELB health checks.
5Ô∏è‚É£ Logs findings and changes.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling group launch configurations should not have metadata response hop limit greater than 1,This control checks the number of network hops that a metadata token can travel. The control fails if the metadata response hop limit is greater than 1.,Compliance,High,EC2 auto scaling group launch configurations should not have metadata response hop limit greater than 1: 1. Check and configure the launch configuration to ensure the metadata response hop limit is set to 1. https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-metadata-options.html,To be added,"EC2 Auto Scaling Group Launch Configurations Should Not Have Metadata Response Hop Limit Greater Than 1
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect launch configurations with MetadataOptions.HttpPutResponseHopLimit greater than 1.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks launch configurations and flags non-compliant ones.
SSM Automation: Notifies admins and suggests setting HttpPutResponseHopLimit to 1.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling launch configurations.
‚úÖ Checks the MetadataOptions.HttpPutResponseHopLimit setting.
‚úÖ Flags configurations where the limit is greater than 1.
‚úÖ Suggests modifying the configuration to set the limit to 1.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling launch configurations for metadata response hop limit
check_launch_config_hop_limit() {
    log ""Checking Auto Scaling Launch Configurations for metadata response hop limit...""

    launch_configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)
    if [[ -z ""$launch_configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    for config in $launch_configs; do
        hop_limit=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" --query ""LaunchConfigurations[0].MetadataOptions.HttpPutResponseHopLimit"" --output text 2>/dev/null)

        if [[ -n ""$hop_limit"" && ""$hop_limit"" -gt 1 ]]; then
            log ""‚ö†Ô∏è Launch Configuration $config has Metadata Response Hop Limit set to $hop_limit.""
            log ""‚ùå Action required: Set 'HttpPutResponseHopLimit' to 1 for security best practices.""
        else
            log ""‚úÖ Launch Configuration $config is compliant (Hop Limit: $hop_limit).""
        fi
    done
}

# Execute the function
check_launch_config_hop_limit
","üöÄ Why This is Useful?
üîπ Prevents Metadata Abuse: Reduces risk of metadata hijacking by restricting how far instance metadata requests can travel.
üîπ Ensures Compliance: AWS security best practices recommend setting the hop limit to 1.
üîπ Automates Security Audits: Quickly detects and flags non-compliant configurations.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling launch configurations.
2Ô∏è‚É£ Checks the metadata response hop limit setting.
3Ô∏è‚É£ Flags configurations where the limit is greater than 1.
4Ô∏è‚É£ Suggests modifying the configuration to set the limit to 1.
5Ô∏è‚É£ Logs findings and remediation suggestions.

",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling group launch configurations should not have metadata response hop limit greater than 1,This control checks the number of network hops that a metadata token can travel. The control fails if the metadata response hop limit is greater than 1.,Compliance,High,EC2 auto scaling group launch configurations should not have metadata response hop limit greater than 1: 1. Check and configure the launch configuration to ensure the metadata response hop limit is set to 1. https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-metadata-options.html,To be added,"EC2 Auto Scaling Group Launch Configurations Should Not Have Metadata Response Hop Limit Greater Than 1
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect launch configurations with MetadataOptions.HttpPutResponseHopLimit greater than 1.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks launch configurations and flags non-compliant ones.
SSM Automation: Notifies admins and suggests setting HttpPutResponseHopLimit to 1.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling launch configurations.
‚úÖ Checks the MetadataOptions.HttpPutResponseHopLimit setting.
‚úÖ Flags configurations where the limit is greater than 1.
‚úÖ Suggests modifying the configuration to set the limit to 1.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling launch configurations for metadata response hop limit
check_launch_config_hop_limit() {
    log ""Checking Auto Scaling Launch Configurations for metadata response hop limit...""

    launch_configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)
    if [[ -z ""$launch_configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    for config in $launch_configs; do
        hop_limit=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" --query ""LaunchConfigurations[0].MetadataOptions.HttpPutResponseHopLimit"" --output text 2>/dev/null)

        if [[ -n ""$hop_limit"" && ""$hop_limit"" -gt 1 ]]; then
            log ""‚ö†Ô∏è Launch Configuration $config has Metadata Response Hop Limit set to $hop_limit.""
            log ""‚ùå Action required: Set 'HttpPutResponseHopLimit' to 1 for security best practices.""
        else
            log ""‚úÖ Launch Configuration $config is compliant (Hop Limit: $hop_limit).""
        fi
    done
}

# Execute the function
check_launch_config_hop_limit
","üöÄ Why This is Useful?
üîπ Prevents Metadata Abuse: Reduces risk of metadata hijacking by restricting how far instance metadata requests can travel.
üîπ Ensures Compliance: AWS security best practices recommend setting the hop limit to 1.
üîπ Automates Security Audits: Quickly detects and flags non-compliant configurations.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling launch configurations.
2Ô∏è‚É£ Checks the metadata response hop limit setting.
3Ô∏è‚É£ Flags configurations where the limit is greater than 1.
4Ô∏è‚É£ Suggests modifying the configuration to set the limit to 1.
5Ô∏è‚É£ Logs findings and remediation suggestions.

",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling group launch configurations should not have metadata response hop limit greater than 1,This control checks the number of network hops that a metadata token can travel. The control fails if the metadata response hop limit is greater than 1.,Compliance,High,EC2 auto scaling group launch configurations should not have metadata response hop limit greater than 1: 1. Check and configure the launch configuration to ensure the metadata response hop limit is set to 1. https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-metadata-options.html,To be added,"EC2 Auto Scaling Group Launch Configurations Should Not Have Metadata Response Hop Limit Greater Than 1
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect launch configurations with MetadataOptions.HttpPutResponseHopLimit greater than 1.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks launch configurations and flags non-compliant ones.
SSM Automation: Notifies admins and suggests setting HttpPutResponseHopLimit to 1.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling launch configurations.
‚úÖ Checks the MetadataOptions.HttpPutResponseHopLimit setting.
‚úÖ Flags configurations where the limit is greater than 1.
‚úÖ Suggests modifying the configuration to set the limit to 1.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling launch configurations for metadata response hop limit
check_launch_config_hop_limit() {
    log ""Checking Auto Scaling Launch Configurations for metadata response hop limit...""

    launch_configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)
    if [[ -z ""$launch_configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    for config in $launch_configs; do
        hop_limit=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" --query ""LaunchConfigurations[0].MetadataOptions.HttpPutResponseHopLimit"" --output text 2>/dev/null)

        if [[ -n ""$hop_limit"" && ""$hop_limit"" -gt 1 ]]; then
            log ""‚ö†Ô∏è Launch Configuration $config has Metadata Response Hop Limit set to $hop_limit.""
            log ""‚ùå Action required: Set 'HttpPutResponseHopLimit' to 1 for security best practices.""
        else
            log ""‚úÖ Launch Configuration $config is compliant (Hop Limit: $hop_limit).""
        fi
    done
}

# Execute the function
check_launch_config_hop_limit
","üöÄ Why This is Useful?
üîπ Prevents Metadata Abuse: Reduces risk of metadata hijacking by restricting how far instance metadata requests can travel.
üîπ Ensures Compliance: AWS security best practices recommend setting the hop limit to 1.
üîπ Automates Security Audits: Quickly detects and flags non-compliant configurations.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling launch configurations.
2Ô∏è‚É£ Checks the metadata response hop limit setting.
3Ô∏è‚É£ Flags configurations where the limit is greater than 1.
4Ô∏è‚É£ Suggests modifying the configuration to set the limit to 1.
5Ô∏è‚É£ Logs findings and remediation suggestions.

",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling launch config public IP should be disabled,Ensure that AWS EC2 Auto Scaling groups have public IP addresses enabled through Launch Configurations. This rule is non-compliant if the Launch Configuration for an Auto Scaling group has AssociatePublicIpAddress set to 'true'.,Compliance,High,Auto Scaling launch config public IP should be disabled: 1. Review the launch configurations for Auto Scaling groups and ensure public IP assignment is disabled. https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instances.html#launch-configurations,To be added,"Auto Scaling Launch Configuration Public IP Should Be Disabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check that Auto Scaling Launch Configurations do not assign a public IP.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies launch configurations with public IP enabled and disables it.
SSM Automation: An SSM document to notify administrators and suggest remediation if public IP is enabled.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Launch Configurations.
‚úÖ Checks if public IP is enabled.
‚úÖ Flags and recommends using Launch Templates instead of Launch Configurations (as Launch Configurations are deprecated).
‚úÖ Supports manual mode (user inputs a specific Launch Configuration) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and disable public IP in Auto Scaling Launch Configurations
check_public_ip_in_launch_config() {
    log ""Checking Auto Scaling Launch Configurations for public IP settings...""

    # Get list of all launch configurations
    configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)

    if [[ -z ""$configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    for config in $configs; do
        log ""Checking Launch Configuration: $config""

        # Get the AssociatePublicIpAddress value
        public_ip=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" \
            --query ""LaunchConfigurations[0].AssociatePublicIpAddress"" --output text 2>/dev/null)

        if [[ ""$public_ip"" == ""True"" ]]; then
            log ""‚ö†Ô∏è Launch Configuration $config has public IP enabled!""
            log ""‚ùå AWS recommends using Launch Templates instead of Launch Configurations.""
        else
            log ""‚úÖ Launch Configuration $config is compliant (no public IP).""
        fi
    done
}

# Execute the function
check_public_ip_in_launch_config
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures instances are not exposed to the internet.
üîπ Encourages Best Practices: Promotes migration to Launch Templates, which offer more control.
üîπ Automated Compliance: Identifies misconfigured Launch Configurations and flags them.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Launch Configurations.
2Ô∏è‚É£ Checks if public IP is enabled.
3Ô∏è‚É£ Flags non-compliant configurations.
4Ô∏è‚É£ Recommends migration to Launch Templates.
5Ô∏è‚É£ Logs findings for auditing.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling launch config public IP should be disabled,Ensure that AWS EC2 Auto Scaling groups have public IP addresses enabled through Launch Configurations. This rule is non-compliant if the Launch Configuration for an Auto Scaling group has AssociatePublicIpAddress set to 'true'.,Compliance,High,Auto Scaling launch config public IP should be disabled: 1. Review the launch configurations for Auto Scaling groups and ensure public IP assignment is disabled. https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instances.html#launch-configurations,To be added,"Auto Scaling Launch Configuration Public IP Should Be Disabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check that Auto Scaling Launch Configurations do not assign a public IP.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies launch configurations with public IP enabled and disables it.
SSM Automation: An SSM document to notify administrators and suggest remediation if public IP is enabled.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Launch Configurations.
‚úÖ Checks if public IP is enabled.
‚úÖ Flags and recommends using Launch Templates instead of Launch Configurations (as Launch Configurations are deprecated).
‚úÖ Supports manual mode (user inputs a specific Launch Configuration) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and disable public IP in Auto Scaling Launch Configurations
check_public_ip_in_launch_config() {
    log ""Checking Auto Scaling Launch Configurations for public IP settings...""

    # Get list of all launch configurations
    configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)

    if [[ -z ""$configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    for config in $configs; do
        log ""Checking Launch Configuration: $config""

        # Get the AssociatePublicIpAddress value
        public_ip=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" \
            --query ""LaunchConfigurations[0].AssociatePublicIpAddress"" --output text 2>/dev/null)

        if [[ ""$public_ip"" == ""True"" ]]; then
            log ""‚ö†Ô∏è Launch Configuration $config has public IP enabled!""
            log ""‚ùå AWS recommends using Launch Templates instead of Launch Configurations.""
        else
            log ""‚úÖ Launch Configuration $config is compliant (no public IP).""
        fi
    done
}

# Execute the function
check_public_ip_in_launch_config
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures instances are not exposed to the internet.
üîπ Encourages Best Practices: Promotes migration to Launch Templates, which offer more control.
üîπ Automated Compliance: Identifies misconfigured Launch Configurations and flags them.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Launch Configurations.
2Ô∏è‚É£ Checks if public IP is enabled.
3Ô∏è‚É£ Flags non-compliant configurations.
4Ô∏è‚É£ Recommends migration to Launch Templates.
5Ô∏è‚É£ Logs findings for auditing.",Bash,Weekly,SOC 2,2024-02-13
Security,Auto Scaling launch config public IP should be disabled,Ensure that AWS EC2 Auto Scaling groups have public IP addresses enabled through Launch Configurations. This rule is non-compliant if the Launch Configuration for an Auto Scaling group has AssociatePublicIpAddress set to 'true'.,Compliance,High,Auto Scaling launch config public IP should be disabled: 1. Review the launch configurations for Auto Scaling groups and ensure public IP assignment is disabled. https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instances.html#launch-configurations,To be added,"Auto Scaling Launch Configuration Public IP Should Be Disabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check that Auto Scaling Launch Configurations do not assign a public IP.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies launch configurations with public IP enabled and disables it.
SSM Automation: An SSM document to notify administrators and suggest remediation if public IP is enabled.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Launch Configurations.
‚úÖ Checks if public IP is enabled.
‚úÖ Flags and recommends using Launch Templates instead of Launch Configurations (as Launch Configurations are deprecated).
‚úÖ Supports manual mode (user inputs a specific Launch Configuration) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and disable public IP in Auto Scaling Launch Configurations
check_public_ip_in_launch_config() {
    log ""Checking Auto Scaling Launch Configurations for public IP settings...""

    # Get list of all launch configurations
    configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)

    if [[ -z ""$configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    for config in $configs; do
        log ""Checking Launch Configuration: $config""

        # Get the AssociatePublicIpAddress value
        public_ip=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" \
            --query ""LaunchConfigurations[0].AssociatePublicIpAddress"" --output text 2>/dev/null)

        if [[ ""$public_ip"" == ""True"" ]]; then
            log ""‚ö†Ô∏è Launch Configuration $config has public IP enabled!""
            log ""‚ùå AWS recommends using Launch Templates instead of Launch Configurations.""
        else
            log ""‚úÖ Launch Configuration $config is compliant (no public IP).""
        fi
    done
}

# Execute the function
check_public_ip_in_launch_config
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures instances are not exposed to the internet.
üîπ Encourages Best Practices: Promotes migration to Launch Templates, which offer more control.
üîπ Automated Compliance: Identifies misconfigured Launch Configurations and flags them.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Launch Configurations.
2Ô∏è‚É£ Checks if public IP is enabled.
3Ô∏è‚É£ Flags non-compliant configurations.
4Ô∏è‚É£ Recommends migration to Launch Templates.
5Ô∏è‚É£ Logs findings for auditing.",Bash,Weekly,SOC 2,2024-02-13
Security,Auto Scaling launch config public IP should be disabled,Ensure that AWS EC2 Auto Scaling groups have public IP addresses enabled through Launch Configurations. This rule is non-compliant if the Launch Configuration for an Auto Scaling group has AssociatePublicIpAddress set to 'true'.,Compliance,High,Auto Scaling launch config public IP should be disabled: 1. Review the launch configurations for Auto Scaling groups and ensure public IP assignment is disabled. https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instances.html#launch-configurations,To be added,"Auto Scaling Launch Configuration Public IP Should Be Disabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check that Auto Scaling Launch Configurations do not assign a public IP.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies launch configurations with public IP enabled and disables it.
SSM Automation: An SSM document to notify administrators and suggest remediation if public IP is enabled.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Launch Configurations.
‚úÖ Checks if public IP is enabled.
‚úÖ Flags and recommends using Launch Templates instead of Launch Configurations (as Launch Configurations are deprecated).
‚úÖ Supports manual mode (user inputs a specific Launch Configuration) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and disable public IP in Auto Scaling Launch Configurations
check_public_ip_in_launch_config() {
    log ""Checking Auto Scaling Launch Configurations for public IP settings...""

    # Get list of all launch configurations
    configs=$(aws autoscaling describe-launch-configurations --query ""LaunchConfigurations[].LaunchConfigurationName"" --output text)

    if [[ -z ""$configs"" ]]; then
        log ""No Launch Configurations found.""
        exit 0
    fi

    for config in $configs; do
        log ""Checking Launch Configuration: $config""

        # Get the AssociatePublicIpAddress value
        public_ip=$(aws autoscaling describe-launch-configurations --launch-configuration-names ""$config"" \
            --query ""LaunchConfigurations[0].AssociatePublicIpAddress"" --output text 2>/dev/null)

        if [[ ""$public_ip"" == ""True"" ]]; then
            log ""‚ö†Ô∏è Launch Configuration $config has public IP enabled!""
            log ""‚ùå AWS recommends using Launch Templates instead of Launch Configurations.""
        else
            log ""‚úÖ Launch Configuration $config is compliant (no public IP).""
        fi
    done
}

# Execute the function
check_public_ip_in_launch_config
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures instances are not exposed to the internet.
üîπ Encourages Best Practices: Promotes migration to Launch Templates, which offer more control.
üîπ Automated Compliance: Identifies misconfigured Launch Configurations and flags them.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Launch Configurations.
2Ô∏è‚É£ Checks if public IP is enabled.
3Ô∏è‚É£ Flags non-compliant configurations.
4Ô∏è‚É£ Recommends migration to Launch Templates.
5Ô∏è‚É£ Logs findings for auditing.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling group should configure EC2 instances to require Instance Metadata Service Version 2 (IMDSv2),This control checks whether IMDSv2 is enabled on all instances launched by AWS EC2 Auto Scaling groups. The control fails if the Instance Metadata Service (IMDS) version is not included in the launch configuration or if both IMDSv1 and IMDSv2 are enabled.,Compliance,High,Auto Scaling group should configure EC2 instances to require Instance Metadata Service Version 2 (IMDSv2): 1. Configure Auto Scaling groups to enforce the use of IMDSv2 to enhance security. https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-metadata-options.html,To be added,"Auto Scaling Group Should Configure EC2 Instances to Require Instance Metadata Service Version 2 (IMDSv2)
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Auto Scaling groups enforce IMDSv2 on EC2 instances.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Auto Scaling groups and flags non-compliant ones.
SSM Automation: Notifies admins and provides remediation steps to enforce IMDSv2.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling launch templates and launch configurations.
‚úÖ Checks if IMDSv2 is enforced (HttpTokens = required).
‚úÖ Flags configurations that allow IMDSv1 (HttpTokens = optional).
‚úÖ Suggests modifying or replacing non-compliant launch templates.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling launch templates for IMDSv2 enforcement
check_imdsv2_enforcement() {
    log ""Checking Auto Scaling Launch Templates for IMDSv2 enforcement...""

    launch_templates=$(aws ec2 describe-launch-templates --query ""LaunchTemplates[].LaunchTemplateId"" --output text)

    if [[ -z ""$launch_templates"" ]]; then
        log ""No Launch Templates found.""
        exit 0
    fi

    for template_id in $launch_templates; do
        imds_setting=$(aws ec2 describe-launch-template-versions --launch-template-id ""$template_id"" \
            --query ""LaunchTemplateVersions[0].LaunchTemplateData.MetadataOptions.HttpTokens"" --output text 2>/dev/null)

        if [[ ""$imds_setting"" == ""required"" ]]; then
            log ""‚úÖ Launch Template $template_id enforces IMDSv2.""
        else
            log ""‚ö†Ô∏è Launch Template $template_id allows IMDSv1. Action required: Modify template to enforce IMDSv2.""
        fi
    done
}

# Execute the function
check_imdsv2_enforcement
","üöÄ Why This is Useful?
üîπ Enhances Security: IMDSv2 mitigates metadata-related vulnerabilities like SSRF attacks.
üîπ Ensures Compliance: AWS security best practices recommend enforcing IMDSv2.
üîπ Automates Security Checks: Quickly detects and flags non-compliant launch templates.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling launch templates.
2Ô∏è‚É£ Checks if they enforce IMDSv2 (HttpTokens = required).
3Ô∏è‚É£ Flags launch templates allowing IMDSv1 (HttpTokens = optional).
4Ô∏è‚É£ Suggests modifying non-compliant templates.
5Ô∏è‚É£ Logs findings and remediation suggestions.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,Auto Scaling group should configure EC2 instances to require Instance Metadata Service Version 2 (IMDSv2),This control checks whether IMDSv2 is enabled on all instances launched by AWS EC2 Auto Scaling groups. The control fails if the Instance Metadata Service (IMDS) version is not included in the launch configuration or if both IMDSv1 and IMDSv2 are enabled.,Compliance,High,Auto Scaling group should configure EC2 instances to require Instance Metadata Service Version 2 (IMDSv2): 1. Configure Auto Scaling groups to enforce the use of IMDSv2 to enhance security. https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-metadata-options.html,To be added,"Auto Scaling Group Should Configure EC2 Instances to Require Instance Metadata Service Version 2 (IMDSv2)
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Auto Scaling groups enforce IMDSv2 on EC2 instances.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Auto Scaling groups and flags non-compliant ones.
SSM Automation: Notifies admins and provides remediation steps to enforce IMDSv2.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling launch templates and launch configurations.
‚úÖ Checks if IMDSv2 is enforced (HttpTokens = required).
‚úÖ Flags configurations that allow IMDSv1 (HttpTokens = optional).
‚úÖ Suggests modifying or replacing non-compliant launch templates.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling launch templates for IMDSv2 enforcement
check_imdsv2_enforcement() {
    log ""Checking Auto Scaling Launch Templates for IMDSv2 enforcement...""

    launch_templates=$(aws ec2 describe-launch-templates --query ""LaunchTemplates[].LaunchTemplateId"" --output text)

    if [[ -z ""$launch_templates"" ]]; then
        log ""No Launch Templates found.""
        exit 0
    fi

    for template_id in $launch_templates; do
        imds_setting=$(aws ec2 describe-launch-template-versions --launch-template-id ""$template_id"" \
            --query ""LaunchTemplateVersions[0].LaunchTemplateData.MetadataOptions.HttpTokens"" --output text 2>/dev/null)

        if [[ ""$imds_setting"" == ""required"" ]]; then
            log ""‚úÖ Launch Template $template_id enforces IMDSv2.""
        else
            log ""‚ö†Ô∏è Launch Template $template_id allows IMDSv1. Action required: Modify template to enforce IMDSv2.""
        fi
    done
}

# Execute the function
check_imdsv2_enforcement
","üöÄ Why This is Useful?
üîπ Enhances Security: IMDSv2 mitigates metadata-related vulnerabilities like SSRF attacks.
üîπ Ensures Compliance: AWS security best practices recommend enforcing IMDSv2.
üîπ Automates Security Checks: Quickly detects and flags non-compliant launch templates.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling launch templates.
2Ô∏è‚É£ Checks if they enforce IMDSv2 (HttpTokens = required).
3Ô∏è‚É£ Flags launch templates allowing IMDSv1 (HttpTokens = optional).
4Ô∏è‚É£ Suggests modifying non-compliant templates.
5Ô∏è‚É£ Logs findings and remediation suggestions.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling groups should use multiple instance types in multiple availability zones,This control checks whether an AWS EC2 Auto Scaling group uses multiple instance types. The control fails if the Auto Scaling group has only one instance type defined.,Compliance,High,EC2 auto scaling groups should use multiple instance types in multiple availability zones: 1. Assess the current instance types and availability zones used. 2. Modify configurations to ensure multiple instance types are utilized across different availability zones. https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html,To be added,"EC2 Auto Scaling Groups Should Use Multiple Instance Types in Multiple Availability Zones
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure Auto Scaling Groups (ASG) use multiple instance types across multiple Availability Zones (AZs).
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies ASGs with single instance types or AZs and updates them.
SSM Automation: An SSM document to notify administrators and suggest remediation.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs).
‚úÖ Checks if ASGs are using multiple instance types.
‚úÖ Checks if ASGs span multiple Availability Zones.
‚úÖ Flags non-compliant ASGs and updates them.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and update Auto Scaling Groups for multi-AZ and multiple instance types
check_asg_multi_az_and_types() {
    log ""Checking Auto Scaling Groups for multiple instance types and AZs...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get instance types used by the ASG
        instance_types=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy"" --output text 2>/dev/null)

        # Get number of AZs used by the ASG
        az_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""length(AutoScalingGroups[0].AvailabilityZones)"" --output text 2>/dev/null)

        if [[ -z ""$instance_types"" ]]; then
            log ""‚ö†Ô∏è ASG $asg is using a single instance type. Updating to use multiple instance types...""
            
            # Update ASG to use multiple instance types
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" \
                --mixed-instances-policy '{""LaunchTemplate"": {""LaunchTemplateSpecification"": {""LaunchTemplateId"": ""lt-12345678"", ""Version"": ""$Latest""}},""Overrides"":[{""InstanceType"":""t3.micro""},{""InstanceType"":""t3.small""}]}' \
                --min-size 1 --max-size 3 --desired-capacity 2
        else
            log ""‚úÖ ASG $asg already uses multiple instance types.""
        fi

        if [[ ""$az_count"" -lt 2 ]]; then
            log ""‚ö†Ô∏è ASG $asg is using a single AZ. Updating to use multiple AZs...""
            
            # Get available AZs
            available_azs=$(aws ec2 describe-availability-zones --query ""AvailabilityZones[].ZoneName"" --output text)

            # Update ASG to span multiple AZs
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" \
                --availability-zones $available_azs
        else
            log ""‚úÖ ASG $asg already spans multiple AZs.""
        fi
    done
}

# Execute the function
check_asg_multi_az_and_types
","üöÄ Why This is Useful?
üîπ Improves Fault Tolerance: Ensures ASGs are highly available.
üîπ Optimizes Cost & Performance: Uses multiple instance types for flexibility.
üîπ Automates Compliance: Flags and updates non-compliant ASGs.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Checks if ASGs use multiple instance types.
3Ô∏è‚É£ Checks if ASGs span multiple Availability Zones.
4Ô∏è‚É£ Flags non-compliant ASGs.
5Ô∏è‚É£ Updates ASGs with best practices.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling groups should use multiple instance types in multiple availability zones,This control checks whether an AWS EC2 Auto Scaling group uses multiple instance types. The control fails if the Auto Scaling group has only one instance type defined.,Compliance,High,EC2 auto scaling groups should use multiple instance types in multiple availability zones: 1. Assess the current instance types and availability zones used. 2. Modify configurations to ensure multiple instance types are utilized across different availability zones. https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html,To be added,"EC2 Auto Scaling Groups Should Use Multiple Instance Types in Multiple Availability Zones
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure Auto Scaling Groups (ASG) use multiple instance types across multiple Availability Zones (AZs).
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies ASGs with single instance types or AZs and updates them.
SSM Automation: An SSM document to notify administrators and suggest remediation.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs).
‚úÖ Checks if ASGs are using multiple instance types.
‚úÖ Checks if ASGs span multiple Availability Zones.
‚úÖ Flags non-compliant ASGs and updates them.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and update Auto Scaling Groups for multi-AZ and multiple instance types
check_asg_multi_az_and_types() {
    log ""Checking Auto Scaling Groups for multiple instance types and AZs...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get instance types used by the ASG
        instance_types=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy"" --output text 2>/dev/null)

        # Get number of AZs used by the ASG
        az_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""length(AutoScalingGroups[0].AvailabilityZones)"" --output text 2>/dev/null)

        if [[ -z ""$instance_types"" ]]; then
            log ""‚ö†Ô∏è ASG $asg is using a single instance type. Updating to use multiple instance types...""
            
            # Update ASG to use multiple instance types
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" \
                --mixed-instances-policy '{""LaunchTemplate"": {""LaunchTemplateSpecification"": {""LaunchTemplateId"": ""lt-12345678"", ""Version"": ""$Latest""}},""Overrides"":[{""InstanceType"":""t3.micro""},{""InstanceType"":""t3.small""}]}' \
                --min-size 1 --max-size 3 --desired-capacity 2
        else
            log ""‚úÖ ASG $asg already uses multiple instance types.""
        fi

        if [[ ""$az_count"" -lt 2 ]]; then
            log ""‚ö†Ô∏è ASG $asg is using a single AZ. Updating to use multiple AZs...""
            
            # Get available AZs
            available_azs=$(aws ec2 describe-availability-zones --query ""AvailabilityZones[].ZoneName"" --output text)

            # Update ASG to span multiple AZs
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" \
                --availability-zones $available_azs
        else
            log ""‚úÖ ASG $asg already spans multiple AZs.""
        fi
    done
}

# Execute the function
check_asg_multi_az_and_types
","üöÄ Why This is Useful?
üîπ Improves Fault Tolerance: Ensures ASGs are highly available.
üîπ Optimizes Cost & Performance: Uses multiple instance types for flexibility.
üîπ Automates Compliance: Flags and updates non-compliant ASGs.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Checks if ASGs use multiple instance types.
3Ô∏è‚É£ Checks if ASGs span multiple Availability Zones.
4Ô∏è‚É£ Flags non-compliant ASGs.
5Ô∏è‚É£ Updates ASGs with best practices.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling groups should use multiple instance types in multiple availability zones,This control checks whether an AWS EC2 Auto Scaling group uses multiple instance types. The control fails if the Auto Scaling group has only one instance type defined.,Compliance,High,EC2 auto scaling groups should use multiple instance types in multiple availability zones: 1. Assess the current instance types and availability zones used. 2. Modify configurations to ensure multiple instance types are utilized across different availability zones. https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html,To be added,"EC2 Auto Scaling Groups Should Use Multiple Instance Types in Multiple Availability Zones
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure Auto Scaling Groups (ASG) use multiple instance types across multiple Availability Zones (AZs).
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies ASGs with single instance types or AZs and updates them.
SSM Automation: An SSM document to notify administrators and suggest remediation.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs).
‚úÖ Checks if ASGs are using multiple instance types.
‚úÖ Checks if ASGs span multiple Availability Zones.
‚úÖ Flags non-compliant ASGs and updates them.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and update Auto Scaling Groups for multi-AZ and multiple instance types
check_asg_multi_az_and_types() {
    log ""Checking Auto Scaling Groups for multiple instance types and AZs...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get instance types used by the ASG
        instance_types=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy"" --output text 2>/dev/null)

        # Get number of AZs used by the ASG
        az_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""length(AutoScalingGroups[0].AvailabilityZones)"" --output text 2>/dev/null)

        if [[ -z ""$instance_types"" ]]; then
            log ""‚ö†Ô∏è ASG $asg is using a single instance type. Updating to use multiple instance types...""
            
            # Update ASG to use multiple instance types
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" \
                --mixed-instances-policy '{""LaunchTemplate"": {""LaunchTemplateSpecification"": {""LaunchTemplateId"": ""lt-12345678"", ""Version"": ""$Latest""}},""Overrides"":[{""InstanceType"":""t3.micro""},{""InstanceType"":""t3.small""}]}' \
                --min-size 1 --max-size 3 --desired-capacity 2
        else
            log ""‚úÖ ASG $asg already uses multiple instance types.""
        fi

        if [[ ""$az_count"" -lt 2 ]]; then
            log ""‚ö†Ô∏è ASG $asg is using a single AZ. Updating to use multiple AZs...""
            
            # Get available AZs
            available_azs=$(aws ec2 describe-availability-zones --query ""AvailabilityZones[].ZoneName"" --output text)

            # Update ASG to span multiple AZs
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" \
                --availability-zones $available_azs
        else
            log ""‚úÖ ASG $asg already spans multiple AZs.""
        fi
    done
}

# Execute the function
check_asg_multi_az_and_types
","üöÄ Why This is Useful?
üîπ Improves Fault Tolerance: Ensures ASGs are highly available.
üîπ Optimizes Cost & Performance: Uses multiple instance types for flexibility.
üîπ Automates Compliance: Flags and updates non-compliant ASGs.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Checks if ASGs use multiple instance types.
3Ô∏è‚É£ Checks if ASGs span multiple Availability Zones.
4Ô∏è‚É£ Flags non-compliant ASGs.
5Ô∏è‚É£ Updates ASGs with best practices.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling groups should cover multiple availability zones,This control checks whether an AWS EC2 Auto Scaling group spans multiple availability zones. The control fails if an auto scaling group does not span multiple availability zones.,Compliance,High,EC2 auto scaling groups should cover multiple availability zones: 1. Ensure that your Auto Scaling groups are configured to span multiple availability zones. 2. Review the current configuration and modify as needed. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-features.html#as-multiple-az,To be added,"EC2 Auto Scaling Groups Should Cover Multiple Availability Zones
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ASGs that do not span multiple Availability Zones (AZs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks ASG configurations and flags those using only a single AZ.
SSM Automation: Notifies admins and suggests adding multiple AZs to non-compliant ASGs.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling groups.
‚úÖ Checks the number of AZs configured for each ASG.
‚úÖ Flags ASGs that are restricted to a single AZ.
‚úÖ Suggests modifying flagged ASGs to use multiple AZs.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling groups for multi-AZ deployment
check_asg_multi_az() {
    log ""Checking Auto Scaling Groups for multi-AZ deployment...""

    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)
    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        az_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" --query ""length(AutoScalingGroups[0].AvailabilityZones)"" --output text)

        if [[ ""$az_count"" -gt 1 ]]; then
            log ""‚úÖ Auto Scaling Group $asg is using multiple Availability Zones.""
        else
            log ""‚ö†Ô∏è Auto Scaling Group $asg is using only one Availability Zone. Action required!""
            log ""‚ÑπÔ∏è Consider adding more AZs to $asg for better resilience.""
        fi
    done
}

# Execute the function
check_asg_multi_az
","üöÄ Why This is Useful?
üîπ Improves High Availability: Ensures applications remain available even if an AZ fails.
üîπ Meets AWS Best Practices: AWS recommends distributing workloads across multiple AZs.
üîπ Automates Compliance Checks: Quickly identifies ASGs that need additional AZs.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling groups.
2Ô∏è‚É£ Checks the number of AZs assigned to each ASG.
3Ô∏è‚É£ Flags ASGs using only a single AZ.
4Ô∏è‚É£ Suggests modifying flagged ASGs to use multiple AZs.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Reliability,EC2 auto scaling groups should cover multiple availability zones,This control checks whether an AWS EC2 Auto Scaling group spans multiple availability zones. The control fails if an auto scaling group does not span multiple availability zones.,Compliance,High,EC2 auto scaling groups should cover multiple availability zones: 1. Ensure that your Auto Scaling groups are configured to span multiple availability zones. 2. Review the current configuration and modify as needed. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-features.html#as-multiple-az,To be added,"EC2 Auto Scaling Groups Should Cover Multiple Availability Zones
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ASGs that do not span multiple Availability Zones (AZs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks ASG configurations and flags those using only a single AZ.
SSM Automation: Notifies admins and suggests adding multiple AZs to non-compliant ASGs.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling groups.
‚úÖ Checks the number of AZs configured for each ASG.
‚úÖ Flags ASGs that are restricted to a single AZ.
‚úÖ Suggests modifying flagged ASGs to use multiple AZs.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling groups for multi-AZ deployment
check_asg_multi_az() {
    log ""Checking Auto Scaling Groups for multi-AZ deployment...""

    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)
    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        az_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" --query ""length(AutoScalingGroups[0].AvailabilityZones)"" --output text)

        if [[ ""$az_count"" -gt 1 ]]; then
            log ""‚úÖ Auto Scaling Group $asg is using multiple Availability Zones.""
        else
            log ""‚ö†Ô∏è Auto Scaling Group $asg is using only one Availability Zone. Action required!""
            log ""‚ÑπÔ∏è Consider adding more AZs to $asg for better resilience.""
        fi
    done
}

# Execute the function
check_asg_multi_az
","üöÄ Why This is Useful?
üîπ Improves High Availability: Ensures applications remain available even if an AZ fails.
üîπ Meets AWS Best Practices: AWS recommends distributing workloads across multiple AZs.
üîπ Automates Compliance Checks: Quickly identifies ASGs that need additional AZs.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling groups.
2Ô∏è‚É£ Checks the number of AZs assigned to each ASG.
3Ô∏è‚É£ Flags ASGs using only a single AZ.
4Ô∏è‚É£ Suggests modifying flagged ASGs to use multiple AZs.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Auto Scaling,EC2 auto scaling groups should cover multiple availability zones,This control checks whether an AWS EC2 Auto Scaling group spans multiple availability zones. The control fails if an auto scaling group does not span multiple availability zones.,Compliance,High,EC2 auto scaling groups should cover multiple availability zones: 1. Ensure that your Auto Scaling groups are configured to span multiple availability zones. 2. Review the current configuration and modify as needed. https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-features.html#as-multiple-az,To be added,"EC2 Auto Scaling Groups Should Cover Multiple Availability Zones
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ASGs that do not span multiple Availability Zones (AZs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks ASG configurations and flags those using only a single AZ.
SSM Automation: Notifies admins and suggests adding multiple AZs to non-compliant ASGs.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling groups.
‚úÖ Checks the number of AZs configured for each ASG.
‚úÖ Flags ASGs that are restricted to a single AZ.
‚úÖ Suggests modifying flagged ASGs to use multiple AZs.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Auto Scaling groups for multi-AZ deployment
check_asg_multi_az() {
    log ""Checking Auto Scaling Groups for multi-AZ deployment...""

    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)
    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        az_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" --query ""length(AutoScalingGroups[0].AvailabilityZones)"" --output text)

        if [[ ""$az_count"" -gt 1 ]]; then
            log ""‚úÖ Auto Scaling Group $asg is using multiple Availability Zones.""
        else
            log ""‚ö†Ô∏è Auto Scaling Group $asg is using only one Availability Zone. Action required!""
            log ""‚ÑπÔ∏è Consider adding more AZs to $asg for better resilience.""
        fi
    done
}

# Execute the function
check_asg_multi_az
","üöÄ Why This is Useful?
üîπ Improves High Availability: Ensures applications remain available even if an AZ fails.
üîπ Meets AWS Best Practices: AWS recommends distributing workloads across multiple AZs.
üîπ Automates Compliance Checks: Quickly identifies ASGs that need additional AZs.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling groups.
2Ô∏è‚É£ Checks the number of AZs assigned to each ASG.
3Ô∏è‚É£ Flags ASGs using only a single AZ.
4Ô∏è‚É£ Suggests modifying flagged ASGs to use multiple AZs.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup plan min frequency and min retention check,To be added,Compliance,High,Backup plan min frequency and min retention check: 1. Review your backup plans to ensure they meet minimum frequency and retention requirements. 2. Adjust settings as necessary to comply with organizational policies. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-plans,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup plan min frequency and min retention check
check_compliance() {
    log ""Checking AWS resources for Backup plan min frequency and min retention check compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup plan min frequency and min retention check,To be added,Compliance,High,Backup plan min frequency and min retention check: 1. Review your backup plans to ensure they meet minimum frequency and retention requirements. 2. Adjust settings as necessary to comply with organizational policies. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-plans,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup plan min frequency and min retention check
check_compliance() {
    log ""Checking AWS resources for Backup plan min frequency and min retention check compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup plan should exist in a region,Ensure that there exists at least one backup plan in a region. The rule is non-compliant if there are no backup plans in a region.,Compliance,High,Backup plan should exist in a region: 1. Ensure that a backup plan is created for each AWS region where you have resources. 2. Review and create backup plans as necessary in regions lacking them. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-plans,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup plan should exist in a region
check_compliance() {
    log ""Checking AWS resources for Backup plan should exist in a region compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup plan should exist in a region,Ensure that there exists at least one backup plan in a region. The rule is non-compliant if there are no backup plans in a region.,Compliance,High,Backup plan should exist in a region: 1. Ensure that a backup plan is created for each AWS region where you have resources. 2. Review and create backup plans as necessary in regions lacking them. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-plans,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup plan should exist in a region
check_compliance() {
    log ""Checking AWS resources for Backup plan should exist in a region compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup recovery points should be encrypted,To be added,Compliance,High,Backup recovery points should be encrypted: 1. Review the encryption settings for your recovery points. 2. Ensure that all recovery points are encrypted to comply with security standards. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-encryption,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points should be encrypted
check_compliance() {
    log ""Checking AWS resources for Backup recovery points should be encrypted compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,Backup recovery points should be encrypted,To be added,Compliance,High,Backup recovery points should be encrypted: 1. Review the encryption settings for your recovery points. 2. Ensure that all recovery points are encrypted to comply with security standards. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-encryption,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points should be encrypted
check_compliance() {
    log ""Checking AWS resources for Backup recovery points should be encrypted compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Backup recovery points should be encrypted,To be added,Compliance,High,Backup recovery points should be encrypted: 1. Review the encryption settings for your recovery points. 2. Ensure that all recovery points are encrypted to comply with security standards. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-encryption,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points should be encrypted
check_compliance() {
    log ""Checking AWS resources for Backup recovery points should be encrypted compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup recovery points should be encrypted,To be added,Compliance,High,Backup recovery points should be encrypted: 1. Review the encryption settings for your recovery points. 2. Ensure that all recovery points are encrypted to comply with security standards. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-encryption,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points should be encrypted
check_compliance() {
    log ""Checking AWS resources for Backup recovery points should be encrypted compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup recovery points manual deletion should be disabled,To be added,Compliance,High,Backup recovery points manual deletion should be disabled: 1. Check the settings for recovery point deletion. 2. Disable manual deletion to prevent accidental data loss. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-recoverypoints,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points manual deletion should be disabled
check_compliance() {
    log ""Checking AWS resources for Backup recovery points manual deletion should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,Backup recovery points manual deletion should be disabled,To be added,Compliance,High,Backup recovery points manual deletion should be disabled: 1. Check the settings for recovery point deletion. 2. Disable manual deletion to prevent accidental data loss. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-recoverypoints,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points manual deletion should be disabled
check_compliance() {
    log ""Checking AWS resources for Backup recovery points manual deletion should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup recovery points manual deletion should be disabled,To be added,Compliance,High,Backup recovery points manual deletion should be disabled: 1. Check the settings for recovery point deletion. 2. Disable manual deletion to prevent accidental data loss. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-recoverypoints,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points manual deletion should be disabled
check_compliance() {
    log ""Checking AWS resources for Backup recovery points manual deletion should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup recovery points should not expire before retention period,To be added,Compliance,High,Backup recovery points should not expire before retention period: 1. Review the expiration settings for recovery points. 2. Ensure that they comply with the established retention period. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-recoverypoints,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points should not expire before retention period
check_compliance() {
    log ""Checking AWS resources for Backup recovery points should not expire before retention period compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,Backup recovery points should not expire before retention period,To be added,Compliance,High,Backup recovery points should not expire before retention period: 1. Review the expiration settings for recovery points. 2. Ensure that they comply with the established retention period. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-recoverypoints,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points should not expire before retention period
check_compliance() {
    log ""Checking AWS resources for Backup recovery points should not expire before retention period compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup recovery points should not expire before retention period,To be added,Compliance,High,Backup recovery points should not expire before retention period: 1. Review the expiration settings for recovery points. 2. Ensure that they comply with the established retention period. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-recoverypoints,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup recovery points should not expire before retention period
check_compliance() {
    log ""Checking AWS resources for Backup recovery points should not expire before retention period compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup report plan should exist in a region where backup plan is enabled,Ensure that there is a minimum of one backup report plan in each region. The rule will be considered non-compliant if a region with backup plans does not have any backup report plans.,Compliance,High,Backup report plan should exist in a region where backup plan is enabled: 1. Ensure that a backup report plan is created for each region where backup plans are enabled. 2. Create report plans as necessary in applicable regions. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-reportplans,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup report plan should exist in a region where backup plan is enabled
check_compliance() {
    log ""Checking AWS resources for Backup report plan should exist in a region where backup plan is enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup report plan should exist in a region where backup plan is enabled,Ensure that there is a minimum of one backup report plan in each region. The rule will be considered non-compliant if a region with backup plans does not have any backup report plans.,Compliance,High,Backup report plan should exist in a region where backup plan is enabled: 1. Ensure that a backup report plan is created for each region where backup plans are enabled. 2. Create report plans as necessary in applicable regions. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-reportplans,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup report plan should exist in a region where backup plan is enabled
check_compliance() {
    log ""Checking AWS resources for Backup report plan should exist in a region where backup plan is enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup vaults should exist in a region,Ensure that there exists at least one backup vault in a region. The rule is non-compliant if there are no backup vaults in a region.,Compliance,High,Backup vaults should exist in a region: 1. Review your backup vaults to ensure they exist in all regions where backups are implemented. 2. Create vaults in any missing regions as needed. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-vaults,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup vaults should exist in a region
check_compliance() {
    log ""Checking AWS resources for Backup vaults should exist in a region compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Backup,Backup vaults should exist in a region,Ensure that there exists at least one backup vault in a region. The rule is non-compliant if there are no backup vaults in a region.,Compliance,High,Backup vaults should exist in a region: 1. Review your backup vaults to ensure they exist in all regions where backups are implemented. 2. Create vaults in any missing regions as needed. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#whatisbackup-vaults,0,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Backup vaults should exist in a region
check_compliance() {
    log ""Checking AWS resources for Backup vaults should exist in a region compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFormation,CloudFormation stacks differ from the expected configuration,"Ensure that the actual configuration of a Cloud Formation stack differs, or has drifted, from the expected configuration, a stack is considered to have drifted if one or more of its resources differ from their expected configuration.",Compliance,High,CloudFormation stacks differ from the expected configuration: 1. Regularly review the CloudFormation stack configurations against expected configurations. 2. Use AWS Config rules to monitor changes in stack resources. 3. Remediate any deviations found. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/what-is-cfn.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFormation stacks differ from the expected configuration
check_compliance() {
    log ""Checking AWS resources for CloudFormation stacks differ from the expected configuration compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFormation,CloudFormation stacks differ from the expected configuration,"Ensure that the actual configuration of a Cloud Formation stack differs, or has drifted, from the expected configuration, a stack is considered to have drifted if one or more of its resources differ from their expected configuration.",Compliance,High,CloudFormation stacks differ from the expected configuration: 1. Regularly review the CloudFormation stack configurations against expected configurations. 2. Use AWS Config rules to monitor changes in stack resources. 3. Remediate any deviations found. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/what-is-cfn.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFormation stacks differ from the expected configuration
check_compliance() {
    log ""Checking AWS resources for CloudFormation stacks differ from the expected configuration compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFormation,CloudFormation stacks should have notifications enabled,Ensure CloudFormation stacks are associated with an SNS topic to receive notifications when an event occurs.,Compliance,High,"CloudFormation stacks should have notifications enabled: 1. Go to the AWS CloudFormation console. 2. Select the relevant stack. 3. In the stack settings, ensure that Amazon SNS notifications are enabled for events such as creation, updates, and deletions. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/notifications.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFormation stacks should have notifications enabled
check_compliance() {
    log ""Checking AWS resources for CloudFormation stacks should have notifications enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFormation,CloudFormation stacks should have notifications enabled,Ensure CloudFormation stacks are associated with an SNS topic to receive notifications when an event occurs.,Compliance,High,"CloudFormation stacks should have notifications enabled: 1. Go to the AWS CloudFormation console. 2. Select the relevant stack. 3. In the stack settings, ensure that Amazon SNS notifications are enabled for events such as creation, updates, and deletions. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/notifications.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFormation stacks should have notifications enabled
check_compliance() {
    log ""Checking AWS resources for CloudFormation stacks should have notifications enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFormation,CloudFormation stacks outputs should not have any secrets,"Ensure CloudFormation stacks outputs do not contain secrets like user names, passwords, and tokens. It is recommended to remove secrets since outputs cannot be encrypted resulting in any entity with basic read-metadata-only and access to CloudFormation outputs having access to these secrets.",Compliance,High,"CloudFormation stacks outputs should not have any secrets: 1. Review the outputs defined in your CloudFormation templates. 2. Ensure that no sensitive information (e.g., passwords, access keys) is exposed in stack outputs. 3. Use parameters or secrets manager for sensitive data. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFormation stacks outputs should not have any secrets
check_compliance() {
    log ""Checking AWS resources for CloudFormation stacks outputs should not have any secrets compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFormation,CloudFormation stacks outputs should not have any secrets,"Ensure CloudFormation stacks outputs do not contain secrets like user names, passwords, and tokens. It is recommended to remove secrets since outputs cannot be encrypted resulting in any entity with basic read-metadata-only and access to CloudFormation outputs having access to these secrets.",Compliance,High,"CloudFormation stacks outputs should not have any secrets: 1. Review the outputs defined in your CloudFormation templates. 2. Ensure that no sensitive information (e.g., passwords, access keys) is exposed in stack outputs. 3. Use parameters or secrets manager for sensitive data. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFormation stacks outputs should not have any secrets
check_compliance() {
    log ""Checking AWS resources for CloudFormation stacks outputs should not have any secrets compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFormation,CloudFormation stacks should have rollback enabled,"Ensure CloudFormation stacks have the rollback feature enabled. Rollback triggers enable you to have AWS CloudFormation monitor the state of your application during stack creation and updating, and to rollback that operation if the application breaches the threshold of any of the alarms you've specified.",Compliance,High,CloudFormation stacks should have rollback enabled: 1. Open the AWS CloudFormation console. 2. Select the stack you want to configure. 3. Ensure that rollback on failure is enabled during stack creation or update processes. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFormation stacks should have rollback enabled
check_compliance() {
    log ""Checking AWS resources for CloudFormation stacks should have rollback enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFormation,CloudFormation stacks should have rollback enabled,"Ensure CloudFormation stacks have the rollback feature enabled. Rollback triggers enable you to have AWS CloudFormation monitor the state of your application during stack creation and updating, and to rollback that operation if the application breaches the threshold of any of the alarms you've specified.",Compliance,High,CloudFormation stacks should have rollback enabled: 1. Open the AWS CloudFormation console. 2. Select the stack you want to configure. 3. Ensure that rollback on failure is enabled during stack creation or update processes. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFormation stacks should have rollback enabled
check_compliance() {
    log ""Checking AWS resources for CloudFormation stacks should have rollback enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFormation,Cloudformation stacks termination protection should be enabled,Ensure that AWS CloudFormation stacks have termination protection feature enabled in order to protect them from being accidentally deleted. The safety feature can be enabled when you create the CloudFormation stack or for existing stacks using the AWS API (UpdateTerminationProtection command).,Compliance,High,CloudFormation stacks termination protection should be enabled: 1. Go to the AWS CloudFormation console. 2. Select the stack and navigate to stack actions. 3. Enable termination protection to prevent accidental deletions. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stack-termination-protection.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Cloudformation stacks termination protection should be enabled
check_compliance() {
    log ""Checking AWS resources for Cloudformation stacks termination protection should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should have origin failover configured,This control checks whether an AWS CloudFront distribution is configured with an origin group that has two or more origins. CloudFront origin failover can increase availability. Origin failover automatically redirects traffic to a secondary origin if the primary origin is unavailable or if it returns specific HTTP response status codes.,Compliance,High,"Ensure CloudFront distributions have origin failover configured. Steps: 1. Review CloudFront settings. 2. Configure origin failover if not set. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-failover.html
https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/high_availability_origin_failover.html",To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have origin failover configured
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have origin failover configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,CloudFront distributions should have origin failover configured,This control checks whether an AWS CloudFront distribution is configured with an origin group that has two or more origins. CloudFront origin failover can increase availability. Origin failover automatically redirects traffic to a secondary origin if the primary origin is unavailable or if it returns specific HTTP response status codes.,Compliance,High,"Ensure CloudFront distributions have origin failover configured. Steps: 1. Review CloudFront settings. 2. Configure origin failover if not set. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-failover.html
https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/high_availability_origin_failover.html",To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have origin failover configured
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have origin failover configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should encrypt traffic to custom origins,This control checks if AWS CloudFront distributions are encrypting traffic to custom origins. This control fails for a CloudFront distribution whose origin protocol policy allows 'http-only'. This control also fails if the distribution's origin protocol policy is 'match-viewer' while the viewer protocol policy is 'allow-all'.,Compliance,High,Ensure CloudFront distributions encrypt traffic to custom origins. Steps: 1. Review CloudFront settings. 2. Enable encryption for custom origins if not already done. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/security-policy.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should encrypt traffic to custom origins
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should encrypt traffic to custom origins compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,CloudFront distributions should encrypt traffic to custom origins,This control checks if AWS CloudFront distributions are encrypting traffic to custom origins. This control fails for a CloudFront distribution whose origin protocol policy allows 'http-only'. This control also fails if the distribution's origin protocol policy is 'match-viewer' while the viewer protocol policy is 'allow-all'.,Compliance,High,Ensure CloudFront distributions encrypt traffic to custom origins. Steps: 1. Review CloudFront settings. 2. Enable encryption for custom origins if not already done. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/security-policy.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should encrypt traffic to custom origins
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should encrypt traffic to custom origins compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should have a default root object configured,This control checks whether an AWS CloudFront distribution is configured to return a specific object that is the default root object. The control fails if the CloudFront distribution does not have a default root object configured.,Compliance,Low,Ensure CloudFront distributions have a default root object configured. Steps: 1. Review CloudFront settings. 2. Configure a default root object if not set. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/adding-default-root-object.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have a default root object configured
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have a default root object configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should require encryption in transit,This control checks whether an AWS CloudFront distribution requires viewers to use HTTPS directly or whether it uses redirection. The control fails if ViewerProtocolPolicy is set to allow-all for defaultCacheBehavior or for cacheBehaviors.,Compliance,Low,Ensure CloudFront distributions require encryption in transit. Steps: 1. Review distribution settings. 2. Enforce SSL/TLS settings for all requests. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should require encryption in transit
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should require encryption in transit compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should have field level encryption enabled,This control checks whether an AWS CloudFront distribution has field-level encryption enabled. The control fails if CloudFront distribution field-level encryption is not enabled.,Compliance,Medium,Ensure CloudFront distributions have field level encryption enabled. Steps: 1. Review CloudFront settings. 2. Enable field level encryption if not already done. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have field level encryption enabled
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have field level encryption enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should have geo restriction enabled,Geographic restriction is used to restrict access to all of the files that are associated with a distribution at the country level.,Compliance,Medium,Ensure CloudFront distributions have geo restriction enabled. Steps: 1. Review distribution settings. 2. Enable geo restriction if not set. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/georestriction.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have geo restriction enabled
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have geo restriction enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should have latest TLS version,This control checks whether CloudFront distribution uses latest TLS version.,Compliance,High,Ensure CloudFront distributions use the latest TLS version. Steps: 1. Review CloudFront settings. 2. Update to the latest TLS version if not configured. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html#using-https-tls,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have latest TLS version
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have latest TLS version compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions access logs should be enabled,This control checks if AWS CloudFront distributions are configured to capture information from AWS Simple Storage Service (AWS S3) server access logs. This rule is non-compliant if a CloudFront distribution does not have logging configured.,Compliance,High,Ensure CloudFront distributions access logs are enabled. Steps: 1. Review CloudFront settings. 2. Enable access logging if not already done. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/monitoring-using-logs.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions access logs should be enabled
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions access logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,CloudFront distributions access logs should be enabled,This control checks if AWS CloudFront distributions are configured to capture information from AWS Simple Storage Service (AWS S3) server access logs. This rule is non-compliant if a CloudFront distribution does not have logging configured.,Compliance,High,Ensure CloudFront distributions access logs are enabled. Steps: 1. Review CloudFront settings. 2. Enable access logging if not already done. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/monitoring-using-logs.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions access logs should be enabled
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions access logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,CloudFront distributions access logs should be enabled,This control checks if AWS CloudFront distributions are configured to capture information from AWS Simple Storage Service (AWS S3) server access logs. This rule is non-compliant if a CloudFront distribution does not have logging configured.,Compliance,High,Ensure CloudFront distributions access logs are enabled. Steps: 1. Review CloudFront settings. 2. Enable access logging if not already done. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/monitoring-using-logs.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions access logs should be enabled
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions access logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should not use deprecated SSL protocols between edge locations and custom origins,This control checks if AWS CloudFront distributions are using deprecated SSL protocols for HTTPS communication between CloudFront edge locations and your custom origins. This control fails if a CloudFront distribution has a CustomOriginConfig where OriginSslProtocols includes SSLv3.,Compliance,High,Ensure CloudFront distributions do not use deprecated SSL protocols between edge locations and custom origins. Steps: 1. Review SSL settings. 2. Update settings to use secure protocols. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/security-policy.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should not use deprecated SSL protocols between edge locations and custom origins
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should not use deprecated SSL protocols between edge locations and custom origins compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,CloudFront distributions should not use deprecated SSL protocols between edge locations and custom origins,This control checks if AWS CloudFront distributions are using deprecated SSL protocols for HTTPS communication between CloudFront edge locations and your custom origins. This control fails if a CloudFront distribution has a CustomOriginConfig where OriginSslProtocols includes SSLv3.,Compliance,High,Ensure CloudFront distributions do not use deprecated SSL protocols between edge locations and custom origins. Steps: 1. Review SSL settings. 2. Update settings to use secure protocols. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/security-policy.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should not use deprecated SSL protocols between edge locations and custom origins
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should not use deprecated SSL protocols between edge locations and custom origins compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should not point to non-existent S3 origins,This control checks whether AWS CloudFront distributions are pointing to non-existent AWS S3 origins. The control fails for a CloudFront distribution if the origin is configured to point to a non-existent bucket. This control only applies to CloudFront distributions where an S3 bucket without static website hosting is the S3 origin.,Compliance,Low,Ensure CloudFront distributions do not point to non-existent S3 origins. Steps: 1. Review distribution settings. 2. Update origin settings to ensure they point to valid S3 buckets. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-origins.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should not point to non-existent S3 origins
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should not point to non-existent S3 origins compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should encrypt traffic to non S3 origins,This control ensures that conection between cloudfront and oriign server is encrypted. It is recommended to enforce HTTPS-only traffic between a CloudFront distribution and the origin.,Compliance,Low,Ensure CloudFront distributions encrypt traffic to non-S3 origins. Steps: 1. Review settings for non-S3 origins. 2. Enable encryption for custom origins if not already done. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/security-policy.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should encrypt traffic to non S3 origins
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should encrypt traffic to non S3 origins compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should have origin access identity enabled,This control checks whether an AWS CloudFront distribution with AWS S3 Origin type has Origin Access Identity (OAI) configured. The control fails if OAI is not configured.,Compliance,Medium,Ensure CloudFront distributions have origin access identity enabled. Steps: 1. Review CloudFront settings. 2. Enable origin access identity for S3 origins if not set. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-s3.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have origin access identity enabled
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have origin access identity enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should use SNI to serve HTTPS requests,This control checks if AWS CloudFront distributions are using a custom SSL/TLS certificate and are configured to use SNI to serve HTTPS requests. This control fails if a custom SSL/TLS certificate is associated but the SSL/TLS support method is a dedicated IP address.,Compliance,Medium,Ensure CloudFront distributions use SNI to serve HTTPS requests. Steps: 1. Review CloudFront settings. 2. Enable Server Name Indication (SNI) for HTTPS requests. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html#using-https-sni,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should use SNI to serve HTTPS requests
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should use SNI to serve HTTPS requests compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should use custom SSL/TLS certificates,This control checks whether CloudFront distributions are using the default SSL/TLS certificate CloudFront provides. This control passes if the CloudFront distribution uses a custom SSL/TLS certificate. This control fails if the CloudFront distribution uses the default SSL/TLS certificate.,Compliance,Medium,Ensure CloudFront distributions use custom SSL/TLS certificates. Steps: 1. Review SSL settings. 2. Configure CloudFront to use custom SSL/TLS certificates if not already set. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SNISetup.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should use custom SSL/TLS certificates
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should use custom SSL/TLS certificates compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should use secure SSL cipher,Ensure that CloudFront distributions do not have any insecure SSL ciphers. Using insecure and deprecated ciphers could make the SSL connection between the CloudFront and the origins vulnerable to exploits.,Compliance,High,Ensure CloudFront distributions use secure SSL ciphers. Steps: 1. Review listener SSL settings. 2. Configure to use secure SSL ciphers. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html#using-https-ssl-ciphers,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should use secure SSL cipher
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should use secure SSL cipher compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudFront,CloudFront distributions should have AWS WAF enabled,This control checks whether CloudFront distributions are associated with either AWS WAF or AWS WAFv2 web ACLs. The control fails if the distribution is not associated with a web ACL.,Compliance,High,Ensure CloudFront distributions have AWS WAF enabled. Steps: 1. Review CloudFront settings. 2. Enable AWS WAF if not already done. https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have AWS WAF enabled
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have AWS WAF enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,CloudFront distributions should have AWS WAF enabled,This control checks whether CloudFront distributions are associated with either AWS WAF or AWS WAFv2 web ACLs. The control fails if the distribution is not associated with a web ACL.,Compliance,High,Ensure CloudFront distributions have AWS WAF enabled. Steps: 1. Review CloudFront settings. 2. Enable AWS WAF if not already done. https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have AWS WAF enabled
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have AWS WAF enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,CloudFront distributions should have AWS WAF enabled,This control checks whether CloudFront distributions are associated with either AWS WAF or AWS WAFv2 web ACLs. The control fails if the distribution is not associated with a web ACL.,Compliance,High,Ensure CloudFront distributions have AWS WAF enabled. Steps: 1. Review CloudFront settings. 2. Enable AWS WAF if not already done. https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFront distributions should have AWS WAF enabled
check_compliance() {
    log ""Checking AWS resources for CloudFront distributions should have AWS WAF enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,Ensure the S3 bucket CloudTrail logs to is not publicly accessible,To be added,Compliance,High,Ensure the S3 bucket CloudTrail logs to is not publicly accessible. Steps: 1. Review the S3 bucket policy. 2. Ensure that the bucket is not publicly accessible. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-and-update-a-trail.html#cloudtrail-create-and-update-a-trail-s3-bucket,To be added,"‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if the S3 bucket storing CloudTrail logs is publicly accessible.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that detects and removes public access from CloudTrail log buckets.
SSM Automation: An SSM document to notify admins and apply fixes automatically.","üîç Features of the Script:
‚úÖ Identifies the S3 bucket storing CloudTrail logs.
‚úÖ Checks bucket policies and ACLs for public access.
‚úÖ Removes any public access permissions.
‚úÖ Ensures logs remain private and secure.
‚úÖ Logs all actions for auditing purposes.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and restrict public access to the CloudTrail log bucket
restrict_cloudtrail_log_bucket() {
    log ""Checking CloudTrail log bucket for public access...""

    # Get the CloudTrail log bucket
    log_bucket=$(aws cloudtrail describe-trails --query ""trailList[].S3BucketName"" --output text)

    if [[ -z ""$log_bucket"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail log bucket found.""
        exit 1
    fi

    log ""CloudTrail logs are stored in bucket: $log_bucket""

    # Check if the bucket has public access
    public_access=$(aws s3api get-bucket-policy-status --bucket ""$log_bucket"" --query ""PolicyStatus.IsPublic"" --output text 2>/dev/null)

    if [[ ""$public_access"" == ""True"" ]]; then
        log ""‚ö†Ô∏è CloudTrail log bucket $log_bucket is publicly accessible. Restricting access...""

        # Block public access
        aws s3api put-public-access-block --bucket ""$log_bucket"" --public-access-block-configuration '{
            ""BlockPublicAcls"": true,
            ""IgnorePublicAcls"": true,
            ""BlockPublicPolicy"": true,
            ""RestrictPublicBuckets"": true
        }'

        # Remove public access from bucket policy
        aws s3api delete-bucket-policy --bucket ""$log_bucket"" 2>/dev/null

        # Remove public ACLs
        aws s3api put-bucket-acl --bucket ""$log_bucket"" --acl private

        log ""‚úÖ Public access has been restricted for CloudTrail log bucket $log_bucket.""
    else
        log ""‚úÖ CloudTrail log bucket $log_bucket is already private.""
    fi
}

# Execute the function
restrict_cloudtrail_log_bucket
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures CloudTrail logs remain private.
üîπ Automated Compliance: Detects and removes public access automatically.
üîπ Security Best Practices: Enforces AWS security guidelines.","üìå What This Script Does:
1Ô∏è‚É£ Identifies the S3 bucket storing CloudTrail logs.
2Ô∏è‚É£ Checks if the bucket is publicly accessible.
3Ô∏è‚É£ Restricts public access by modifying bucket policies and ACLs.
4Ô∏è‚É£ Blocks future public access using S3 public access settings.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,Ensure the S3 bucket CloudTrail logs to is not publicly accessible,To be added,Compliance,High,Ensure the S3 bucket CloudTrail logs to is not publicly accessible. Steps: 1. Review the S3 bucket policy. 2. Ensure that the bucket is not publicly accessible. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-and-update-a-trail.html#cloudtrail-create-and-update-a-trail-s3-bucket,To be added,"‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if the S3 bucket storing CloudTrail logs is publicly accessible.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that detects and removes public access from CloudTrail log buckets.
SSM Automation: An SSM document to notify admins and apply fixes automatically.","üîç Features of the Script:
‚úÖ Identifies the S3 bucket storing CloudTrail logs.
‚úÖ Checks bucket policies and ACLs for public access.
‚úÖ Removes any public access permissions.
‚úÖ Ensures logs remain private and secure.
‚úÖ Logs all actions for auditing purposes.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and restrict public access to the CloudTrail log bucket
restrict_cloudtrail_log_bucket() {
    log ""Checking CloudTrail log bucket for public access...""

    # Get the CloudTrail log bucket
    log_bucket=$(aws cloudtrail describe-trails --query ""trailList[].S3BucketName"" --output text)

    if [[ -z ""$log_bucket"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail log bucket found.""
        exit 1
    fi

    log ""CloudTrail logs are stored in bucket: $log_bucket""

    # Check if the bucket has public access
    public_access=$(aws s3api get-bucket-policy-status --bucket ""$log_bucket"" --query ""PolicyStatus.IsPublic"" --output text 2>/dev/null)

    if [[ ""$public_access"" == ""True"" ]]; then
        log ""‚ö†Ô∏è CloudTrail log bucket $log_bucket is publicly accessible. Restricting access...""

        # Block public access
        aws s3api put-public-access-block --bucket ""$log_bucket"" --public-access-block-configuration '{
            ""BlockPublicAcls"": true,
            ""IgnorePublicAcls"": true,
            ""BlockPublicPolicy"": true,
            ""RestrictPublicBuckets"": true
        }'

        # Remove public access from bucket policy
        aws s3api delete-bucket-policy --bucket ""$log_bucket"" 2>/dev/null

        # Remove public ACLs
        aws s3api put-bucket-acl --bucket ""$log_bucket"" --acl private

        log ""‚úÖ Public access has been restricted for CloudTrail log bucket $log_bucket.""
    else
        log ""‚úÖ CloudTrail log bucket $log_bucket is already private.""
    fi
}

# Execute the function
restrict_cloudtrail_log_bucket
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures CloudTrail logs remain private.
üîπ Automated Compliance: Detects and removes public access automatically.
üîπ Security Best Practices: Enforces AWS security guidelines.","üìå What This Script Does:
1Ô∏è‚É£ Identifies the S3 bucket storing CloudTrail logs.
2Ô∏è‚É£ Checks if the bucket is publicly accessible.
3Ô∏è‚É£ Restricts public access by modifying bucket policies and ACLs.
4Ô∏è‚É£ Blocks future public access using S3 public access settings.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trails should be enabled in all regions,"AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).",Compliance,Medium,Ensure CloudTrail trails are enabled in all regions. Steps: 1. Review CloudTrail settings. 2. Enable trails in any regions where they are not set up. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/how-to-enable-trail.html,To be added,"CloudTrail: Ensure That Trails Are Enabled in All Regions
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if CloudTrail trails are enabled in all AWS regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all regions and ensures a trail is active in each.
SSM Automation: An SSM document to notify admins and enable missing trails.","üîç Features of the Script:
‚úÖ Retrieves all AWS regions.
‚úÖ Checks if CloudTrail is enabled in each region.
‚úÖ If missing, creates a new multi-region trail.
‚úÖ Ensures logs are securely stored in an S3 bucket.
‚úÖ Logs actions for audit and compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to ensure CloudTrail is enabled in all regions
enable_cloudtrail_in_all_regions() {
    log ""Checking CloudTrail status across all AWS regions...""

    # Get list of all AWS regions
    regions=$(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text)

    # Get the existing multi-region trail (if any)
    multi_region_trail=$(aws cloudtrail describe-trails --query ""trailList[?IsMultiRegionTrail==\`true\`].Name"" --output text)

    if [[ -n ""$multi_region_trail"" ]]; then
        log ""‚úÖ Multi-region trail $multi_region_trail already exists. Ensuring logging is enabled...""
        aws cloudtrail start-logging --name ""$multi_region_trail""
        log ""‚úÖ Multi-region logging confirmed.""
    else
        log ""‚ö†Ô∏è No multi-region trail found. Creating a new one...""

        # Create a new multi-region CloudTrail
        new_trail_name=""GlobalSecurityTrail""
        s3_bucket=""cloudtrail-logs-$(aws sts get-caller-identity --query 'Account' --output text)""

        # Create S3 bucket if it doesn't exist
        if ! aws s3api head-bucket --bucket ""$s3_bucket"" 2>/dev/null; then
            log ""Creating S3 bucket $s3_bucket for CloudTrail logs...""
            aws s3api create-bucket --bucket ""$s3_bucket"" --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
        fi

        aws cloudtrail create-trail --name ""$new_trail_name"" --s3-bucket-name ""$s3_bucket"" --is-multi-region-trail
        aws cloudtrail start-logging --name ""$new_trail_name""

        log ""‚úÖ Multi-region CloudTrail $new_trail_name created and logging enabled.""
    fi

    # Verify that CloudTrail is enabled in each region
    for region in $regions; do
        log ""Checking CloudTrail in region: $region""

        # Check if a trail exists in this region
        trail_status=$(aws cloudtrail describe-trails --region ""$region"" --query ""trailList[].Name"" --output text)

        if [[ -z ""$trail_status"" ]]; then
            log ""‚ö†Ô∏è No CloudTrail trail found in $region. Enabling one...""
            aws cloudtrail create-trail --name ""RegionalTrail-$region"" --s3-bucket-name ""$s3_bucket"" --region ""$region""
            aws cloudtrail start-logging --name ""RegionalTrail-$region""
            log ""‚úÖ Enabled CloudTrail in $region.""
        else
            log ""‚úÖ CloudTrail already exists in $region.""
        fi
    done

    log ""‚úÖ CloudTrail is now enabled in all AWS regions.""
}

# Execute the function
enable_cloudtrail_in_all_regions
","üöÄ Why This is Useful?
üîπ Ensures Global Security: Enables CloudTrail across all regions.
üîπ Automated Compliance: Prevents logging gaps in new AWS regions.
üîπ Improves Threat Detection: Provides visibility into API activity across all regions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS regions.
2Ô∏è‚É£ Checks if a multi-region CloudTrail exists.
3Ô∏è‚É£ If missing, creates a new multi-region trail.
4Ô∏è‚É£ Ensures CloudTrail is enabled in each AWS region.
5Ô∏è‚É£ Logs actions for security and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trails should be enabled in all regions,"AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).",Compliance,Medium,Ensure CloudTrail trails are enabled in all regions. Steps: 1. Review CloudTrail settings. 2. Enable trails in any regions where they are not set up. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/how-to-enable-trail.html,To be added,"CloudTrail: Ensure That Trails Are Enabled in All Regions
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if CloudTrail trails are enabled in all AWS regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all regions and ensures a trail is active in each.
SSM Automation: An SSM document to notify admins and enable missing trails.","üîç Features of the Script:
‚úÖ Retrieves all AWS regions.
‚úÖ Checks if CloudTrail is enabled in each region.
‚úÖ If missing, creates a new multi-region trail.
‚úÖ Ensures logs are securely stored in an S3 bucket.
‚úÖ Logs actions for audit and compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to ensure CloudTrail is enabled in all regions
enable_cloudtrail_in_all_regions() {
    log ""Checking CloudTrail status across all AWS regions...""

    # Get list of all AWS regions
    regions=$(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text)

    # Get the existing multi-region trail (if any)
    multi_region_trail=$(aws cloudtrail describe-trails --query ""trailList[?IsMultiRegionTrail==\`true\`].Name"" --output text)

    if [[ -n ""$multi_region_trail"" ]]; then
        log ""‚úÖ Multi-region trail $multi_region_trail already exists. Ensuring logging is enabled...""
        aws cloudtrail start-logging --name ""$multi_region_trail""
        log ""‚úÖ Multi-region logging confirmed.""
    else
        log ""‚ö†Ô∏è No multi-region trail found. Creating a new one...""

        # Create a new multi-region CloudTrail
        new_trail_name=""GlobalSecurityTrail""
        s3_bucket=""cloudtrail-logs-$(aws sts get-caller-identity --query 'Account' --output text)""

        # Create S3 bucket if it doesn't exist
        if ! aws s3api head-bucket --bucket ""$s3_bucket"" 2>/dev/null; then
            log ""Creating S3 bucket $s3_bucket for CloudTrail logs...""
            aws s3api create-bucket --bucket ""$s3_bucket"" --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
        fi

        aws cloudtrail create-trail --name ""$new_trail_name"" --s3-bucket-name ""$s3_bucket"" --is-multi-region-trail
        aws cloudtrail start-logging --name ""$new_trail_name""

        log ""‚úÖ Multi-region CloudTrail $new_trail_name created and logging enabled.""
    fi

    # Verify that CloudTrail is enabled in each region
    for region in $regions; do
        log ""Checking CloudTrail in region: $region""

        # Check if a trail exists in this region
        trail_status=$(aws cloudtrail describe-trails --region ""$region"" --query ""trailList[].Name"" --output text)

        if [[ -z ""$trail_status"" ]]; then
            log ""‚ö†Ô∏è No CloudTrail trail found in $region. Enabling one...""
            aws cloudtrail create-trail --name ""RegionalTrail-$region"" --s3-bucket-name ""$s3_bucket"" --region ""$region""
            aws cloudtrail start-logging --name ""RegionalTrail-$region""
            log ""‚úÖ Enabled CloudTrail in $region.""
        else
            log ""‚úÖ CloudTrail already exists in $region.""
        fi
    done

    log ""‚úÖ CloudTrail is now enabled in all AWS regions.""
}

# Execute the function
enable_cloudtrail_in_all_regions
","üöÄ Why This is Useful?
üîπ Ensures Global Security: Enables CloudTrail across all regions.
üîπ Automated Compliance: Prevents logging gaps in new AWS regions.
üîπ Improves Threat Detection: Provides visibility into API activity across all regions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS regions.
2Ô∏è‚É£ Checks if a multi-region CloudTrail exists.
3Ô∏è‚É£ If missing, creates a new multi-region trail.
4Ô∏è‚É£ Ensures CloudTrail is enabled in each AWS region.
5Ô∏è‚É£ Logs actions for security and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,At least one multi-region AWS CloudTrail should be present in an account,"AWS CloudTrail records AWS Management Console actions and API calls. You can identify which users and accounts called AWS, the source IP address from where the calls were made, and when the calls occurred. CloudTrail will deliver log files from all AWS Regions to your S3 bucket if MULTI_REGION_CLOUD_TRAIL_ENABLED is enabled.",Compliance,High,Ensure at least one multi-region AWS CloudTrail is present in an account. Steps: 1. Review CloudTrail settings. 2. Create a multi-region trail if not already present. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-and-update-a-trail.html,To be added,"CloudTrail: Ensure at Least One Multi-Region CloudTrail is Present
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if at least one multi-region CloudTrail is enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies and creates a multi-region CloudTrail if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by automatically creating a multi-region trail.","üîç Features of the Script:
‚úÖ Checks if at least one multi-region CloudTrail exists.
‚úÖ If missing, creates a new multi-region trail.
‚úÖ Ensures logging is enabled and stores logs in an S3 bucket.
‚úÖ Integrates the trail with CloudWatch Logs (if needed).
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to ensure a multi-region CloudTrail exists
ensure_multi_region_cloudtrail() {
    log ""Checking for an existing multi-region CloudTrail...""

    # Get list of multi-region CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[?IsMultiRegionTrail==\`true\`].Name"" --output text)

    if [[ -n ""$trails"" ]]; then
        log ""‚úÖ A multi-region CloudTrail is already enabled: $trails""
        exit 0
    fi

    log ""‚ö†Ô∏è No multi-region CloudTrail found. Creating a new one...""

    # Define CloudTrail parameters
    trail_name=""DefaultMultiRegionTrail""
    s3_bucket=""cloudtrail-multi-region-logs-$(aws sts get-caller-identity --query 'Account' --output text)""

    # Create an S3 bucket for CloudTrail logs if it doesn't exist
    if ! aws s3api head-bucket --bucket ""$s3_bucket"" 2>/dev/null; then
        log ""Creating S3 bucket $s3_bucket for CloudTrail logs...""
        aws s3api create-bucket --bucket ""$s3_bucket"" --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
    fi

    # Create a new CloudTrail with multi-region enabled
    aws cloudtrail create-trail --name ""$trail_name"" --s3-bucket-name ""$s3_bucket"" --is-multi-region-trail
    aws cloudtrail start-logging --name ""$trail_name""

    log ""‚úÖ Multi-region CloudTrail $trail_name has been created and logging is enabled.""
}

# Execute the function
ensure_multi_region_cloudtrail
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Prevents gaps in CloudTrail logging across AWS regions.
üîπ Automated Security: Prevents accidental deletion of CloudTrail logs.
üîπ Logging & Visibility: Ensures all AWS API activity is securely recorded.","üìå What This Script Does:
1Ô∏è‚É£ Checks if a multi-region CloudTrail exists.
2Ô∏è‚É£ If missing, creates a new multi-region CloudTrail.
3Ô∏è‚É£ Ensures logs are securely stored in an S3 bucket.
4Ô∏è‚É£ Enables logging for the new CloudTrail.
5Ô∏è‚É£ Logs actions for security and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,At least one multi-region AWS CloudTrail should be present in an account,"AWS CloudTrail records AWS Management Console actions and API calls. You can identify which users and accounts called AWS, the source IP address from where the calls were made, and when the calls occurred. CloudTrail will deliver log files from all AWS Regions to your S3 bucket if MULTI_REGION_CLOUD_TRAIL_ENABLED is enabled.",Compliance,High,Ensure at least one multi-region AWS CloudTrail is present in an account. Steps: 1. Review CloudTrail settings. 2. Create a multi-region trail if not already present. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-and-update-a-trail.html,To be added,"CloudTrail: Ensure at Least One Multi-Region CloudTrail is Present
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if at least one multi-region CloudTrail is enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies and creates a multi-region CloudTrail if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by automatically creating a multi-region trail.","üîç Features of the Script:
‚úÖ Checks if at least one multi-region CloudTrail exists.
‚úÖ If missing, creates a new multi-region trail.
‚úÖ Ensures logging is enabled and stores logs in an S3 bucket.
‚úÖ Integrates the trail with CloudWatch Logs (if needed).
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to ensure a multi-region CloudTrail exists
ensure_multi_region_cloudtrail() {
    log ""Checking for an existing multi-region CloudTrail...""

    # Get list of multi-region CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[?IsMultiRegionTrail==\`true\`].Name"" --output text)

    if [[ -n ""$trails"" ]]; then
        log ""‚úÖ A multi-region CloudTrail is already enabled: $trails""
        exit 0
    fi

    log ""‚ö†Ô∏è No multi-region CloudTrail found. Creating a new one...""

    # Define CloudTrail parameters
    trail_name=""DefaultMultiRegionTrail""
    s3_bucket=""cloudtrail-multi-region-logs-$(aws sts get-caller-identity --query 'Account' --output text)""

    # Create an S3 bucket for CloudTrail logs if it doesn't exist
    if ! aws s3api head-bucket --bucket ""$s3_bucket"" 2>/dev/null; then
        log ""Creating S3 bucket $s3_bucket for CloudTrail logs...""
        aws s3api create-bucket --bucket ""$s3_bucket"" --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
    fi

    # Create a new CloudTrail with multi-region enabled
    aws cloudtrail create-trail --name ""$trail_name"" --s3-bucket-name ""$s3_bucket"" --is-multi-region-trail
    aws cloudtrail start-logging --name ""$trail_name""

    log ""‚úÖ Multi-region CloudTrail $trail_name has been created and logging is enabled.""
}

# Execute the function
ensure_multi_region_cloudtrail
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Prevents gaps in CloudTrail logging across AWS regions.
üîπ Automated Security: Prevents accidental deletion of CloudTrail logs.
üîπ Logging & Visibility: Ensures all AWS API activity is securely recorded.","üìå What This Script Does:
1Ô∏è‚É£ Checks if a multi-region CloudTrail exists.
2Ô∏è‚É£ If missing, creates a new multi-region CloudTrail.
3Ô∏è‚É£ Ensures logs are securely stored in an S3 bucket.
4Ô∏è‚É£ Enables logging for the new CloudTrail.
5Ô∏è‚É£ Logs actions for security and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,At least one multi-region AWS CloudTrail should be present in an account,"AWS CloudTrail records AWS Management Console actions and API calls. You can identify which users and accounts called AWS, the source IP address from where the calls were made, and when the calls occurred. CloudTrail will deliver log files from all AWS Regions to your S3 bucket if MULTI_REGION_CLOUD_TRAIL_ENABLED is enabled.",Compliance,High,Ensure at least one multi-region AWS CloudTrail is present in an account. Steps: 1. Review CloudTrail settings. 2. Create a multi-region trail if not already present. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-and-update-a-trail.html,To be added,"CloudTrail: Ensure at Least One Multi-Region CloudTrail is Present
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if at least one multi-region CloudTrail is enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies and creates a multi-region CloudTrail if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by automatically creating a multi-region trail.","üîç Features of the Script:
‚úÖ Checks if at least one multi-region CloudTrail exists.
‚úÖ If missing, creates a new multi-region trail.
‚úÖ Ensures logging is enabled and stores logs in an S3 bucket.
‚úÖ Integrates the trail with CloudWatch Logs (if needed).
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to ensure a multi-region CloudTrail exists
ensure_multi_region_cloudtrail() {
    log ""Checking for an existing multi-region CloudTrail...""

    # Get list of multi-region CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[?IsMultiRegionTrail==\`true\`].Name"" --output text)

    if [[ -n ""$trails"" ]]; then
        log ""‚úÖ A multi-region CloudTrail is already enabled: $trails""
        exit 0
    fi

    log ""‚ö†Ô∏è No multi-region CloudTrail found. Creating a new one...""

    # Define CloudTrail parameters
    trail_name=""DefaultMultiRegionTrail""
    s3_bucket=""cloudtrail-multi-region-logs-$(aws sts get-caller-identity --query 'Account' --output text)""

    # Create an S3 bucket for CloudTrail logs if it doesn't exist
    if ! aws s3api head-bucket --bucket ""$s3_bucket"" 2>/dev/null; then
        log ""Creating S3 bucket $s3_bucket for CloudTrail logs...""
        aws s3api create-bucket --bucket ""$s3_bucket"" --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
    fi

    # Create a new CloudTrail with multi-region enabled
    aws cloudtrail create-trail --name ""$trail_name"" --s3-bucket-name ""$s3_bucket"" --is-multi-region-trail
    aws cloudtrail start-logging --name ""$trail_name""

    log ""‚úÖ Multi-region CloudTrail $trail_name has been created and logging is enabled.""
}

# Execute the function
ensure_multi_region_cloudtrail
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Prevents gaps in CloudTrail logging across AWS regions.
üîπ Automated Security: Prevents accidental deletion of CloudTrail logs.
üîπ Logging & Visibility: Ensures all AWS API activity is securely recorded.","üìå What This Script Does:
1Ô∏è‚É£ Checks if a multi-region CloudTrail exists.
2Ô∏è‚É£ If missing, creates a new multi-region CloudTrail.
3Ô∏è‚É£ Ensures logs are securely stored in an S3 bucket.
4Ô∏è‚É£ Enables logging for the new CloudTrail.
5Ô∏è‚É£ Logs actions for security and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail multi region trails should be integrated with CloudWatch logs,To be added,Compliance,Low,Ensure CloudTrail multi-region trails are integrated with CloudWatch logs. Steps: 1. Review CloudTrail settings. 2. Enable CloudWatch Logs integration if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-cloudwatch-logs.html,To be added,"CloudTrail: Ensure Multi-Region Trails Are Integrated with CloudWatch Logs
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if multi-region CloudTrail trails are integrated with CloudWatch Logs.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies CloudWatch integration and enables it if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by enabling CloudWatch logging.","üîç Features of the Script:
‚úÖ Retrieves all multi-region CloudTrail trails.
‚úÖ Checks if each trail is integrated with CloudWatch Logs.
‚úÖ If missing, enables CloudWatch Logs integration.
‚úÖ Creates a new CloudWatch Log Group if needed.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable CloudWatch Logs integration for multi-region CloudTrail
enable_cloudtrail_cloudwatch_integration() {
    log ""Checking CloudTrail multi-region trails for CloudWatch Logs integration...""

    # Get list of multi-region trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[?IsMultiRegionTrail==\`true\`].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No multi-region CloudTrail trails found.""
        exit 1
    fi

    for trail in $trails; do
        log ""Checking CloudWatch integration for trail: $trail""

        # Get current CloudWatch log group ARN
        log_group_arn=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].CloudWatchLogsLogGroupArn"" --output text)

        if [[ -z ""$log_group_arn"" || ""$log_group_arn"" == ""None"" ]]; then
            log ""‚ö†Ô∏è No CloudWatch Log Group found for trail $trail. Enabling integration...""

            # Define CloudWatch log group and IAM role
            log_group_name=""/aws/cloudtrail/$trail""
            iam_role_name=""CloudTrail_CloudWatch_Role""
            iam_role_arn=""arn:aws:iam::$(aws sts get-caller-identity --query 'Account' --output text):role/$iam_role_name""

            # Create CloudWatch log group if it does not exist
            if ! aws logs describe-log-groups --log-group-name-prefix ""$log_group_name"" --query ""logGroups[].logGroupName"" --output text | grep -q ""$log_group_name""; then
                aws logs create-log-group --log-group-name ""$log_group_name""
                log ""‚úÖ CloudWatch Log Group $log_group_name created.""
            fi

            # Attach CloudWatch log group to CloudTrail
            aws cloudtrail update-trail --name ""$trail"" --cloud-watch-logs-log-group-arn ""arn:aws:logs:$(aws configure get region):$(aws sts get-caller-identity --query 'Account' --output text):log-group:$log_group_name"" --cloud-watch-logs-role-arn ""$iam_role_arn""
            log ""‚úÖ CloudTrail $trail integrated with CloudWatch Logs.""
        else
            log ""‚úÖ CloudTrail $trail is already integrated with CloudWatch Logs.""
        fi
    done
}

# Execute the function
enable_cloudtrail_cloudwatch_integration
","üöÄ Why This is Useful?
üîπ Enhances Security Monitoring: Enables real-time CloudTrail event tracking.
üîπ Automated Compliance: Ensures CloudTrail logs are sent to CloudWatch.
üîπ Improves Threat Detection: Helps set up alerts for suspicious activity.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all multi-region CloudTrail trails.
2Ô∏è‚É£ Checks if CloudWatch Logs integration is enabled.
3Ô∏è‚É£ If missing, creates a CloudWatch Log Group.
4Ô∏è‚É£ Attaches the CloudWatch Log Group to CloudTrail.
5Ô∏è‚É£ Logs actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,All S3 buckets should log S3 data events in CloudTrail,"The collection of Simple Storage Service (AWS S3) data events helps in detecting any anomalous activity. The details include AWS account information that accessed an AWS S3 bucket, IP address, and time of event.",Compliance,High,Ensure all S3 buckets log S3 data events in CloudTrail. Steps: 1. Review S3 bucket settings. 2. Enable data event logging in CloudTrail if not already done. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html,To be added,"All S3 Buckets Should Log S3 Data Events in CloudTrail
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if S3 data event logging is enabled in CloudTrail.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that enables S3 data event logging for all S3 buckets.
SSM Automation: An SSM document to notify admins about non-compliant buckets and apply fixes.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if data event logging is enabled for each bucket in CloudTrail.
‚úÖ Enables logging for non-compliant buckets.
‚úÖ Ensures logs are stored securely in CloudTrail.
‚úÖ Logs actions taken for audit and compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable S3 data event logging in CloudTrail
enable_s3_data_events_logging() {
    log ""Checking S3 buckets for CloudTrail data event logging compliance...""

    # Get all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found. Create a CloudTrail trail first!""
        exit 1
    fi

    # Get all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    updated_count=0
    for trail in $trails; do
        for bucket in $buckets; do
            # Check if S3 data event logging is enabled
            data_events=$(aws cloudtrail get-event-selectors --trail-name ""$trail"" --query ""EventSelectors[].DataResources[].Values"" --output text)

            if [[ ""$data_events"" =~ ""arn:aws:s3:::$bucket"" ]]; then
                log ""‚úÖ S3 bucket $bucket is already logging data events in CloudTrail.""
            else
                log ""‚ö†Ô∏è Enabling S3 data event logging for bucket $bucket in trail $trail...""
                aws cloudtrail put-event-selectors --trail-name ""$trail"" \
                    --event-selectors '[{""ReadWriteType"": ""All"", ""IncludeManagementEvents"": true, ""DataResources"": [{""Type"": ""AWS::S3::Object"", ""Values"": [""arn:aws:s3:::'""$bucket""'""]}]}]'
                log ""‚úÖ Enabled S3 data event logging for bucket $bucket.""
                ((updated_count++))
            fi
        done
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ S3 data event logging enabled for $updated_count buckets.""
    else
        log ""‚úÖ All S3 buckets are already compliant.""
    fi
}

# Execute the function
enable_s3_data_events_logging
","üöÄ Why This is Useful?
üîπ Improves Security Auditing: Tracks all access and modifications to S3 objects.
üîπ Automated Enforcement: Ensures compliance without manual intervention.
üîπ Full Logging: Provides an audit trail of data access.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Retrieves all S3 buckets in the account.
3Ô∏è‚É£ Checks if each bucket has data event logging enabled in CloudTrail.
4Ô∏è‚É£ Enables logging for non-compliant buckets.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,All S3 buckets should log S3 data events in CloudTrail,"The collection of Simple Storage Service (AWS S3) data events helps in detecting any anomalous activity. The details include AWS account information that accessed an AWS S3 bucket, IP address, and time of event.",Compliance,High,Ensure all S3 buckets log S3 data events in CloudTrail. Steps: 1. Review S3 bucket settings. 2. Enable data event logging in CloudTrail if not already done. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html,To be added,"All S3 Buckets Should Log S3 Data Events in CloudTrail
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if S3 data event logging is enabled in CloudTrail.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that enables S3 data event logging for all S3 buckets.
SSM Automation: An SSM document to notify admins about non-compliant buckets and apply fixes.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if data event logging is enabled for each bucket in CloudTrail.
‚úÖ Enables logging for non-compliant buckets.
‚úÖ Ensures logs are stored securely in CloudTrail.
‚úÖ Logs actions taken for audit and compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable S3 data event logging in CloudTrail
enable_s3_data_events_logging() {
    log ""Checking S3 buckets for CloudTrail data event logging compliance...""

    # Get all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found. Create a CloudTrail trail first!""
        exit 1
    fi

    # Get all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    updated_count=0
    for trail in $trails; do
        for bucket in $buckets; do
            # Check if S3 data event logging is enabled
            data_events=$(aws cloudtrail get-event-selectors --trail-name ""$trail"" --query ""EventSelectors[].DataResources[].Values"" --output text)

            if [[ ""$data_events"" =~ ""arn:aws:s3:::$bucket"" ]]; then
                log ""‚úÖ S3 bucket $bucket is already logging data events in CloudTrail.""
            else
                log ""‚ö†Ô∏è Enabling S3 data event logging for bucket $bucket in trail $trail...""
                aws cloudtrail put-event-selectors --trail-name ""$trail"" \
                    --event-selectors '[{""ReadWriteType"": ""All"", ""IncludeManagementEvents"": true, ""DataResources"": [{""Type"": ""AWS::S3::Object"", ""Values"": [""arn:aws:s3:::'""$bucket""'""]}]}]'
                log ""‚úÖ Enabled S3 data event logging for bucket $bucket.""
                ((updated_count++))
            fi
        done
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ S3 data event logging enabled for $updated_count buckets.""
    else
        log ""‚úÖ All S3 buckets are already compliant.""
    fi
}

# Execute the function
enable_s3_data_events_logging
","üöÄ Why This is Useful?
üîπ Improves Security Auditing: Tracks all access and modifications to S3 objects.
üîπ Automated Enforcement: Ensures compliance without manual intervention.
üîπ Full Logging: Provides an audit trail of data access.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Retrieves all S3 buckets in the account.
3Ô∏è‚É£ Checks if each bucket has data event logging enabled in CloudTrail.
4Ô∏è‚É£ Enables logging for non-compliant buckets.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket,To be added,Compliance,High,Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket. Steps: 1. Review the S3 bucket settings. 2. Enable access logging if it is not already enabled. https://docs.aws.amazon.com/AmazonS3/latest/userguide/LoggingHowTo.html,To be added,"CloudTrail: Ensure S3 Bucket Access Logging is Enabled on the CloudTrail S3 Bucket
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if the CloudTrail S3 bucket has access logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies and enables access logging if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by automatically enabling S3 access logging.","üîç Features of the Script:
‚úÖ Identifies the S3 bucket used by CloudTrail.
‚úÖ Checks if S3 access logging is enabled.
‚úÖ If missing, enables access logging to a dedicated logging bucket.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable S3 access logging for CloudTrail buckets
enable_s3_access_logging() {
    log ""Checking for CloudTrail S3 buckets...""

    # Get list of CloudTrail trails and their S3 buckets
    s3_buckets=$(aws cloudtrail describe-trails --query ""trailList[].S3BucketName"" --output text)

    if [[ -z ""$s3_buckets"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail S3 buckets found. Exiting.""
        exit 1
    fi

    for bucket in $s3_buckets; do
        log ""Checking access logging for CloudTrail S3 bucket: $bucket""

        # Check if access logging is enabled
        logging_status=$(aws s3api get-bucket-logging --bucket ""$bucket"" --query ""LoggingEnabled"" --output text)

        if [[ -n ""$logging_status"" && ""$logging_status"" != ""None"" ]]; then
            log ""‚úÖ Access logging is already enabled for $bucket""
        else
            log ""‚ö†Ô∏è Access logging is NOT enabled for $bucket. Enabling it now...""

            # Define the logging target bucket
            log_bucket=""s3-access-logs-$(aws sts get-caller-identity --query 'Account' --output text)""

            # Create the logging bucket if it doesn't exist
            if ! aws s3api head-bucket --bucket ""$log_bucket"" 2>/dev/null; then
                log ""Creating logging bucket $log_bucket...""
                aws s3api create-bucket --bucket ""$log_bucket"" --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
            fi

            # Enable access logging on the CloudTrail bucket
            aws s3api put-bucket-logging --bucket ""$bucket"" --bucket-logging-status '{
                ""LoggingEnabled"": {
                    ""TargetBucket"": ""'""$log_bucket""'"",
                    ""TargetPrefix"": ""'""$bucket/""'""
                }
            }'

            log ""‚úÖ Access logging enabled for $bucket, logs stored in $log_bucket.""
        fi
    done
}

# Execute the function
enable_s3_access_logging
","üöÄ Why This is Useful?
üîπ Improves Security Monitoring: Tracks access and changes to CloudTrail logs.
üîπ Enhances Compliance: Ensures AWS security best practices are met.
üîπ Supports Forensic Investigation: Provides visibility into who accessed CloudTrail logs.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail S3 buckets.
2Ô∏è‚É£ Checks if access logging is enabled.
3Ô∏è‚É£ If missing, enables access logging to a dedicated bucket.
4Ô∏è‚É£ Creates a new logging bucket if needed.
5Ô∏è‚É£ Logs all actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,Ensure that Object-level logging for read events is enabled for S3 bucket,This rule enables object-level logging for read events for S3 buckets. Object-level logging for read events helps in identifying the requestor who performed the read operation on the S3 bucket objects.,Compliance,High,Ensure that Object-level logging for read events is enabled for the S3 bucket. Steps: 1. Review CloudTrail settings. 2. Enable read event logging if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/data-events-s3.html,To be added,"Ensure That Object-Level Logging for Read Events is Enabled for S3 Buckets
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if CloudTrail object-level logging is enabled for S3 read events.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans CloudTrail settings and flags non-compliant S3 buckets.
SSM Automation: An SSM document to notify admins and enable object-level logging for read events.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets and their associated CloudTrail trails.
‚úÖ Checks if object-level logging for s3:GetObject events is enabled.
‚úÖ Flags non-compliant S3 buckets missing read event logging.
‚úÖ Logs findings and suggests remediation.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check object-level logging for read events
check_s3_object_logging() {
    log ""Checking if object-level logging for read events is enabled on S3 buckets...""

    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    non_compliant_count=0
    for bucket in $buckets; do
        log ""Checking CloudTrail event selectors for bucket: $bucket""

        trail_names=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

        for trail in $trail_names; do
            read_logging=$(aws cloudtrail get-event-selectors --trail-name ""$trail"" \
                --query ""EventSelectors[].DataResources[?Type=='AWS::S3::Object'].Values[]"" --output text | grep ""$bucket"")

            if [[ -z ""$read_logging"" ]]; then
                log ""‚ö†Ô∏è Object-level read event logging is NOT enabled for $bucket.""
                ((non_compliant_count++))
            else
                log ""#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check object-level logging for read events
check_s3_object_logging() {
    log ""Checking if object-level logging for read events is enabled on S3 buckets...""

    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    non_compliant_count=0
    for bucket in $buckets; do
        log ""Checking CloudTrail event selectors for bucket: $bucket""

        trail_names=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

        for trail in $trail_names; do
            read_logging=$(aws cloudtrail get-event-selectors --trail-name ""$trail"" \
                --query ""EventSelectors[].DataResources[?Type=='AWS::S3::Object'].Values[]"" --output text | grep ""$bucket"")

            if [[ -z ""$read_logging"" ]]; then
                log ""‚ö†Ô∏è Object-level read event logging is NOT enabled for $bucket.""
                ((non_compliant_count++))
            else
                log ""‚úÖ Object-level read event logging is enabled for $bucket.""
            fi
        done
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $non_compliant_count S3 buckets missing read event logging.""
    else
        log ""‚úÖ All S3 buckets have object-level read event logging enabled.""
    fi
}

# Execute the function
check_s3_object_logging
‚úÖ Object-level read event logging is enabled for $bucket.""
            fi
        done
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $non_compliant_count S3 buckets missing read event logging.""
    else
        log ""‚úÖ All S3 buckets have object-level read event logging enabled.""
    fi
}

# Execute the function
check_s3_object_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures all S3 object access events are logged for auditing.
üîπ Compliance Assurance: Meets AWS security best practices for monitoring data access.
üîπ Automates Compliance Checks: Reduces manual effort in reviewing CloudTrail settings.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks CloudTrail event selectors for object-level logging.
3Ô∏è‚É£ Flags buckets missing s3:GetObject event logging.
4Ô∏è‚É£ Logs findings for compliance tracking.
5Ô∏è‚É£ Suggests enabling CloudTrail logging for non-compliant buckets.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,Ensure that Object-level logging for write events is enabled for S3 bucket,This rule enables object-level logging for write events for S3 buckets. Object-level logging for write events helps in identifying the requestor who performed the write operation on the S3 bucket objects.,Compliance,High,Ensure that Object-level logging for write events is enabled for the S3 bucket. Steps: 1. Review CloudTrail settings. 2. Enable write event logging if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/data-events-s3.html,To be added,"CloudTrail: Ensure That Object-Level Logging for Write Events Is Enabled for S3 Buckets
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if object-level write event logging is enabled for all S3 buckets in CloudTrail.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that enables object-level logging for non-compliant buckets.
SSM Automation: An SSM document to notify admins and enforce compliance.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails and S3 buckets.
‚úÖ Checks if object-level write event logging is enabled for each bucket.
‚úÖ Enables logging for non-compliant buckets.
‚úÖ Ensures logs are securely stored in CloudTrail.
‚úÖ Logs actions for audit and compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable object-level write event logging in CloudTrail
enable_s3_object_write_logging() {
    log ""Checking S3 buckets for object-level write event logging in CloudTrail...""

    # Get all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found. Create a CloudTrail trail first!""
        exit 1
    fi

    # Get all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    updated_count=0
    for trail in $trails; do
        for bucket in $buckets; do
            # Check if object-level write event logging is enabled
            data_events=$(aws cloudtrail get-event-selectors --trail-name ""$trail"" --query ""EventSelectors[].DataResources[].Values"" --output text)

            if [[ ""$data_events"" =~ ""arn:aws:s3:::$bucket"" ]]; then
                log ""‚úÖ S3 bucket $bucket is already logging object-level write events in CloudTrail.""
            else
                log ""‚ö†Ô∏è Enabling object-level write event logging for bucket $bucket in trail $trail...""
                aws cloudtrail put-event-selectors --trail-name ""$trail"" \
                    --event-selectors '[{""ReadWriteType"": ""WriteOnly"", ""IncludeManagementEvents"": true, ""DataResources"": [{""Type"": ""AWS::S3::Object"", ""Values"": [""arn:aws:s3:::'""$bucket""'""]}]}]'
                log ""‚úÖ Enabled object-level write event logging for bucket $bucket.""
                ((updated_count++))
            fi
        done
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Object-level write event logging enabled for $updated_count buckets.""
    else
        log ""‚úÖ All S3 buckets are already compliant.""
    fi
}

# Execute the function
enable_s3_object_write_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Provides detailed tracking of object-level write events.
üîπ Automated Compliance: Ensures all S3 write actions are logged in CloudTrail.
üîπ Visibility & Auditing: Enables full traceability for security investigations.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Retrieves all S3 buckets in the account.
3Ô∏è‚É£ Checks if object-level write event logging is enabled for each bucket.
4Ô∏è‚É£ Enables logging for non-compliant buckets.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,At least one trail should be enabled with security best practices,"This rule helps ensure the use of AWS recommended security best practices for AWS CloudTrail, by checking for the enablement of multiple settings. These include the use of log encryption, log validation, and enabling AWS CloudTrail in multiple regions.",Compliance,High,Ensure at least one trail is enabled with security best practices. Steps: 1. Review CloudTrail settings. 2. Implement security best practices for CloudTrail configuration. https://aws.amazon.com/blogs/security/best-practices-for-aws-cloudtrail/,To be added,"At Least One CloudTrail Trail Should Be Enabled with Security Best Practices
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if at least one CloudTrail trail is enabled with security best practices.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies CloudTrail settings and alerts if no compliant trail is found.
SSM Automation: An SSM document to notify admins and enforce security best practices.","üîç Features of the Script:
‚úÖ Checks if at least one CloudTrail trail is enabled.
‚úÖ Verifies encryption, multi-region logging, and log validation.
‚úÖ Creates a new trail if none exist.
‚úÖ Ensures logs are stored securely in an S3 bucket with proper permissions.
‚úÖ Logs actions for compliance and audit tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check CloudTrail best practices
check_cloudtrail_best_practices() {
    log ""Checking CloudTrail trails for security best practices...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trail found. Creating a new trail with security best practices...""
        
        # Create a secure CloudTrail trail
        aws cloudtrail create-trail --name ""SecureTrail"" --s3-bucket-name ""cloudtrail-secure-logs"" \
            --is-multi-region-trail --enable-log-file-validation --kms-key-id ""alias/aws/cloudtrail""

        log ""‚úÖ Created 'SecureTrail' with best practices enabled.""
        exit 0
    fi

    compliant_count=0
    for trail in $trails; do
        # Check if the trail is enabled
        is_logging=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        # Check if the trail is multi-region
        is_multi_region=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].IsMultiRegionTrail"" --output text)

        # Check if log file validation is enabled
        log_validation=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].LogFileValidationEnabled"" --output text)

        # Check if encryption is enabled
        kms_key_id=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].KmsKeyId"" --output text)

        if [[ ""$is_logging"" == ""True"" && ""$is_multi_region"" == ""True"" && ""$log_validation"" == ""True"" && -n ""$kms_key_id"" ]]; then
            log ""‚úÖ CloudTrail trail $trail follows security best practices.""
            ((compliant_count++))
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail is missing one or more best practices.""
        fi
    done

    if [[ $compliant_count -gt 0 ]]; then
        log ""‚úÖ At least one CloudTrail trail follows security best practices.""
    else
        log ""‚ö†Ô∏è No CloudTrail trail meets security best practices. Immediate action required!""
    fi
}

# Execute the function
check_cloudtrail_best_practices
","üöÄ Why This is Useful?
üîπ Ensures Visibility: Guarantees logging of all API activity for security monitoring.
üîπ Automated Enforcement: Creates a secure trail if none exist.
üîπ Full Logging: Tracks security compliance and logs findings.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if at least one trail follows security best practices.
3Ô∏è‚É£ Validates encryption, multi-region logging, and log file validation.
4Ô∏è‚É£ Creates a secure CloudTrail trail if none exist.
5Ô∏è‚É£ Logs actions and flags non-compliant trails.",Bash,Weekly,SOC 2,2024-02-13
Security,At least one trail should be enabled with security best practices,"This rule helps ensure the use of AWS recommended security best practices for AWS CloudTrail, by checking for the enablement of multiple settings. These include the use of log encryption, log validation, and enabling AWS CloudTrail in multiple regions.",Compliance,High,Ensure at least one trail is enabled with security best practices. Steps: 1. Review CloudTrail settings. 2. Implement security best practices for CloudTrail configuration. https://aws.amazon.com/blogs/security/best-practices-for-aws-cloudtrail/,To be added,"At Least One CloudTrail Trail Should Be Enabled with Security Best Practices
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if at least one CloudTrail trail is enabled with security best practices.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies CloudTrail settings and alerts if no compliant trail is found.
SSM Automation: An SSM document to notify admins and enforce security best practices.","üîç Features of the Script:
‚úÖ Checks if at least one CloudTrail trail is enabled.
‚úÖ Verifies encryption, multi-region logging, and log validation.
‚úÖ Creates a new trail if none exist.
‚úÖ Ensures logs are stored securely in an S3 bucket with proper permissions.
‚úÖ Logs actions for compliance and audit tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check CloudTrail best practices
check_cloudtrail_best_practices() {
    log ""Checking CloudTrail trails for security best practices...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trail found. Creating a new trail with security best practices...""
        
        # Create a secure CloudTrail trail
        aws cloudtrail create-trail --name ""SecureTrail"" --s3-bucket-name ""cloudtrail-secure-logs"" \
            --is-multi-region-trail --enable-log-file-validation --kms-key-id ""alias/aws/cloudtrail""

        log ""‚úÖ Created 'SecureTrail' with best practices enabled.""
        exit 0
    fi

    compliant_count=0
    for trail in $trails; do
        # Check if the trail is enabled
        is_logging=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        # Check if the trail is multi-region
        is_multi_region=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].IsMultiRegionTrail"" --output text)

        # Check if log file validation is enabled
        log_validation=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].LogFileValidationEnabled"" --output text)

        # Check if encryption is enabled
        kms_key_id=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].KmsKeyId"" --output text)

        if [[ ""$is_logging"" == ""True"" && ""$is_multi_region"" == ""True"" && ""$log_validation"" == ""True"" && -n ""$kms_key_id"" ]]; then
            log ""‚úÖ CloudTrail trail $trail follows security best practices.""
            ((compliant_count++))
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail is missing one or more best practices.""
        fi
    done

    if [[ $compliant_count -gt 0 ]]; then
        log ""‚úÖ At least one CloudTrail trail follows security best practices.""
    else
        log ""‚ö†Ô∏è No CloudTrail trail meets security best practices. Immediate action required!""
    fi
}

# Execute the function
check_cloudtrail_best_practices
","üöÄ Why This is Useful?
üîπ Ensures Visibility: Guarantees logging of all API activity for security monitoring.
üîπ Automated Enforcement: Creates a secure trail if none exist.
üîπ Full Logging: Tracks security compliance and logs findings.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if at least one trail follows security best practices.
3Ô∏è‚É£ Validates encryption, multi-region logging, and log file validation.
4Ô∏è‚É£ Creates a secure CloudTrail trail if none exist.
5Ô∏è‚É£ Logs actions and flags non-compliant trails.",Bash,Weekly,SOC 2,2024-02-13
Security,At least one trail should be enabled with security best practices,"This rule helps ensure the use of AWS recommended security best practices for AWS CloudTrail, by checking for the enablement of multiple settings. These include the use of log encryption, log validation, and enabling AWS CloudTrail in multiple regions.",Compliance,High,Ensure at least one trail is enabled with security best practices. Steps: 1. Review CloudTrail settings. 2. Implement security best practices for CloudTrail configuration. https://aws.amazon.com/blogs/security/best-practices-for-aws-cloudtrail/,To be added,"At Least One CloudTrail Trail Should Be Enabled with Security Best Practices
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if at least one CloudTrail trail is enabled with security best practices.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies CloudTrail settings and alerts if no compliant trail is found.
SSM Automation: An SSM document to notify admins and enforce security best practices.","üîç Features of the Script:
‚úÖ Checks if at least one CloudTrail trail is enabled.
‚úÖ Verifies encryption, multi-region logging, and log validation.
‚úÖ Creates a new trail if none exist.
‚úÖ Ensures logs are stored securely in an S3 bucket with proper permissions.
‚úÖ Logs actions for compliance and audit tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check CloudTrail best practices
check_cloudtrail_best_practices() {
    log ""Checking CloudTrail trails for security best practices...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trail found. Creating a new trail with security best practices...""
        
        # Create a secure CloudTrail trail
        aws cloudtrail create-trail --name ""SecureTrail"" --s3-bucket-name ""cloudtrail-secure-logs"" \
            --is-multi-region-trail --enable-log-file-validation --kms-key-id ""alias/aws/cloudtrail""

        log ""‚úÖ Created 'SecureTrail' with best practices enabled.""
        exit 0
    fi

    compliant_count=0
    for trail in $trails; do
        # Check if the trail is enabled
        is_logging=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        # Check if the trail is multi-region
        is_multi_region=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].IsMultiRegionTrail"" --output text)

        # Check if log file validation is enabled
        log_validation=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].LogFileValidationEnabled"" --output text)

        # Check if encryption is enabled
        kms_key_id=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].KmsKeyId"" --output text)

        if [[ ""$is_logging"" == ""True"" && ""$is_multi_region"" == ""True"" && ""$log_validation"" == ""True"" && -n ""$kms_key_id"" ]]; then
            log ""‚úÖ CloudTrail trail $trail follows security best practices.""
            ((compliant_count++))
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail is missing one or more best practices.""
        fi
    done

    if [[ $compliant_count -gt 0 ]]; then
        log ""‚úÖ At least one CloudTrail trail follows security best practices.""
    else
        log ""‚ö†Ô∏è No CloudTrail trail meets security best practices. Immediate action required!""
    fi
}

# Execute the function
check_cloudtrail_best_practices
","üöÄ Why This is Useful?
üîπ Ensures Visibility: Guarantees logging of all API activity for security monitoring.
üîπ Automated Enforcement: Creates a secure trail if none exist.
üîπ Full Logging: Tracks security compliance and logs findings.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if at least one trail follows security best practices.
3Ô∏è‚É£ Validates encryption, multi-region logging, and log file validation.
4Ô∏è‚É£ Creates a secure CloudTrail trail if none exist.
5Ô∏è‚É£ Logs actions and flags non-compliant trails.",Bash,Weekly,SOC 2,2024-02-13
Security,At least one trail should be enabled with security best practices,"This rule helps ensure the use of AWS recommended security best practices for AWS CloudTrail, by checking for the enablement of multiple settings. These include the use of log encryption, log validation, and enabling AWS CloudTrail in multiple regions.",Compliance,High,Ensure at least one trail is enabled with security best practices. Steps: 1. Review CloudTrail settings. 2. Implement security best practices for CloudTrail configuration. https://aws.amazon.com/blogs/security/best-practices-for-aws-cloudtrail/,To be added,"At Least One CloudTrail Trail Should Be Enabled with Security Best Practices
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if at least one CloudTrail trail is enabled with security best practices.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies CloudTrail settings and alerts if no compliant trail is found.
SSM Automation: An SSM document to notify admins and enforce security best practices.","üîç Features of the Script:
‚úÖ Checks if at least one CloudTrail trail is enabled.
‚úÖ Verifies encryption, multi-region logging, and log validation.
‚úÖ Creates a new trail if none exist.
‚úÖ Ensures logs are stored securely in an S3 bucket with proper permissions.
‚úÖ Logs actions for compliance and audit tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check CloudTrail best practices
check_cloudtrail_best_practices() {
    log ""Checking CloudTrail trails for security best practices...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trail found. Creating a new trail with security best practices...""
        
        # Create a secure CloudTrail trail
        aws cloudtrail create-trail --name ""SecureTrail"" --s3-bucket-name ""cloudtrail-secure-logs"" \
            --is-multi-region-trail --enable-log-file-validation --kms-key-id ""alias/aws/cloudtrail""

        log ""‚úÖ Created 'SecureTrail' with best practices enabled.""
        exit 0
    fi

    compliant_count=0
    for trail in $trails; do
        # Check if the trail is enabled
        is_logging=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        # Check if the trail is multi-region
        is_multi_region=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].IsMultiRegionTrail"" --output text)

        # Check if log file validation is enabled
        log_validation=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].LogFileValidationEnabled"" --output text)

        # Check if encryption is enabled
        kms_key_id=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].KmsKeyId"" --output text)

        if [[ ""$is_logging"" == ""True"" && ""$is_multi_region"" == ""True"" && ""$log_validation"" == ""True"" && -n ""$kms_key_id"" ]]; then
            log ""‚úÖ CloudTrail trail $trail follows security best practices.""
            ((compliant_count++))
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail is missing one or more best practices.""
        fi
    done

    if [[ $compliant_count -gt 0 ]]; then
        log ""‚úÖ At least one CloudTrail trail follows security best practices.""
    else
        log ""‚ö†Ô∏è No CloudTrail trail meets security best practices. Immediate action required!""
    fi
}

# Execute the function
check_cloudtrail_best_practices
","üöÄ Why This is Useful?
üîπ Ensures Visibility: Guarantees logging of all API activity for security monitoring.
üîπ Automated Enforcement: Creates a secure trail if none exist.
üîπ Full Logging: Tracks security compliance and logs findings.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if at least one trail follows security best practices.
3Ô∏è‚É£ Validates encryption, multi-region logging, and log file validation.
4Ô∏è‚É£ Creates a secure CloudTrail trail if none exist.
5Ô∏è‚É£ Logs actions and flags non-compliant trails.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trail S3 buckets MFA delete should be enabled,To be added,Compliance,Medium,Ensure CloudTrail trail S3 buckets MFA delete is enabled. Steps: 1. Review S3 bucket settings for CloudTrail. 2. Enable MFA Delete if not already enabled. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-mfa-delete.html,To be added,"CloudTrail Trail S3 Buckets MFA Delete Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if MFA Delete is enabled for CloudTrail S3 buckets.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans S3 buckets used by CloudTrail and reports non-compliant ones.
SSM Automation: An SSM document to notify admins and enable MFA Delete if disabled.","üîç Features of the Script:
‚úÖ Identifies S3 buckets used by CloudTrail.
‚úÖ Checks if MFA Delete is enabled for each bucket.
‚úÖ Flags non-compliant buckets and logs findings.
‚úÖ Suggests enabling MFA Delete for better security.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check MFA Delete status for CloudTrail S3 buckets
check_s3_mfa_delete() {
    log ""Checking if MFA Delete is enabled for CloudTrail S3 buckets...""

    cloudtrail_buckets=$(aws cloudtrail describe-trails --query ""trailList[].S3BucketName"" --output text)

    if [[ -z ""$cloudtrail_buckets"" ]]; then
        log ""No CloudTrail S3 buckets found.""
        exit 0
    fi

    non_compliant_count=0
    for bucket in $cloudtrail_buckets; do
        log ""Checking MFA Delete for bucket: $bucket""

        mfa_delete_status=$(aws s3api get-bucket-versioning --bucket ""$bucket"" --query ""MFADelete"" --output text)

        if [[ ""$mfa_delete_status"" != ""Enabled"" ]]; then
            log ""‚ö†Ô∏è MFA Delete is NOT enabled for $bucket.""
            log ""‚ùå Action required: Enable MFA Delete for this bucket.""
            ((non_compliant_count++))
        else
            log ""‚úÖ MFA Delete is enabled for $bucket.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $non_compliant_count CloudTrail S3 buckets missing MFA Delete.""
    else
        log ""‚úÖ All CloudTrail S3 buckets have MFA Delete enabled.""
    fi
}

# Execute the function
check_s3_mfa_delete
","üöÄ Why This is Useful?
üîπ Enhances Security: Protects CloudTrail logs from accidental or unauthorized deletion.
üîπ Compliance Assurance: Ensures log integrity for auditing and forensic investigations.
üîπ Automates Compliance Checks: Reduces manual verification effort.","üìå What This Script Does:
1Ô∏è‚É£ Identifies S3 buckets used by CloudTrail.
2Ô∏è‚É£ Checks if MFA Delete is enabled for each bucket.
3Ô∏è‚É£ Flags non-compliant buckets.
4Ô∏è‚É£ Logs findings and compliance status.
5Ô∏è‚É£ Suggests enabling MFA Delete for security.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,At least one enabled trail should be present in a region,"AWS CloudTrail can help in non-repudiation by recording AWS Management Console actions and API calls. You can identify the users and AWS accounts that called an AWS service, the source IP address where the calls generated, and the timings of the calls. Details of captured data are seen within AWS CloudTrail Record Contents.",Compliance,High,Ensure at least one enabled trail is present in a region. Steps: 1. Review CloudTrail settings in each region. 2. Create a trail if none is enabled. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/how-to-enable-trail.html,To be added,"At Least One Enabled Trail Should Be Present in a Region
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if at least one CloudTrail trail is enabled in a region.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans for enabled CloudTrail trails and reports non-compliance.
SSM Automation: An SSM document to notify admins and optionally create a new CloudTrail trail if none exist.","üîç Features of the Script:
‚úÖ Checks if at least one CloudTrail trail is enabled in the current region.
‚úÖ Identifies regions without an active CloudTrail trail.
‚úÖ Logs all findings and suggests enabling a trail if none are found.
‚úÖ Can be modified to automatically create a CloudTrail trail if missing.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for enabled CloudTrail trails
check_cloudtrail_trails() {
    log ""Checking for enabled CloudTrail trails in the current AWS region...""

    # Get the list of trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].TrailARN"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found in this region.""
        log ""‚ùå Action required: Create a CloudTrail trail for compliance.""
        exit 1
    else
        log ""‚úÖ At least one CloudTrail trail is enabled in this region.""
    fi
}

# Execute the function
check_cloudtrail_trails
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Maintains AWS security best practices by enforcing logging.
üîπ Visibility & Auditing: Helps track API activity and detect security issues.
üîπ Automates Compliance Checks: Reduces manual verification effort.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails in the current region.
2Ô∏è‚É£ Checks if at least one trail is enabled.
3Ô∏è‚É£ Flags regions without a CloudTrail trail.
4Ô∏è‚É£ Logs findings and provides compliance status.
5Ô∏è‚É£ Suggests creating a new CloudTrail trail if none exist.",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,At least one enabled trail should be present in a region,"AWS CloudTrail can help in non-repudiation by recording AWS Management Console actions and API calls. You can identify the users and AWS accounts that called an AWS service, the source IP address where the calls generated, and the timings of the calls. Details of captured data are seen within AWS CloudTrail Record Contents.",Compliance,High,Ensure at least one enabled trail is present in a region. Steps: 1. Review CloudTrail settings in each region. 2. Create a trail if none is enabled. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/how-to-enable-trail.html,To be added,"At Least One Enabled Trail Should Be Present in a Region
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if at least one CloudTrail trail is enabled in a region.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans for enabled CloudTrail trails and reports non-compliance.
SSM Automation: An SSM document to notify admins and optionally create a new CloudTrail trail if none exist.","üîç Features of the Script:
‚úÖ Checks if at least one CloudTrail trail is enabled in the current region.
‚úÖ Identifies regions without an active CloudTrail trail.
‚úÖ Logs all findings and suggests enabling a trail if none are found.
‚úÖ Can be modified to automatically create a CloudTrail trail if missing.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for enabled CloudTrail trails
check_cloudtrail_trails() {
    log ""Checking for enabled CloudTrail trails in the current AWS region...""

    # Get the list of trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].TrailARN"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found in this region.""
        log ""‚ùå Action required: Create a CloudTrail trail for compliance.""
        exit 1
    else
        log ""‚úÖ At least one CloudTrail trail is enabled in this region.""
    fi
}

# Execute the function
check_cloudtrail_trails
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Maintains AWS security best practices by enforcing logging.
üîπ Visibility & Auditing: Helps track API activity and detect security issues.
üîπ Automates Compliance Checks: Reduces manual verification effort.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails in the current region.
2Ô∏è‚É£ Checks if at least one trail is enabled.
3Ô∏è‚É£ Flags regions without a CloudTrail trail.
4Ô∏è‚É£ Logs findings and provides compliance status.
5Ô∏è‚É£ Suggests creating a new CloudTrail trail if none exist.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,At least one enabled trail should be present in a region,"AWS CloudTrail can help in non-repudiation by recording AWS Management Console actions and API calls. You can identify the users and AWS accounts that called an AWS service, the source IP address where the calls generated, and the timings of the calls. Details of captured data are seen within AWS CloudTrail Record Contents.",Compliance,High,Ensure at least one enabled trail is present in a region. Steps: 1. Review CloudTrail settings in each region. 2. Create a trail if none is enabled. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/how-to-enable-trail.html,To be added,"At Least One Enabled Trail Should Be Present in a Region
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if at least one CloudTrail trail is enabled in a region.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans for enabled CloudTrail trails and reports non-compliance.
SSM Automation: An SSM document to notify admins and optionally create a new CloudTrail trail if none exist.","üîç Features of the Script:
‚úÖ Checks if at least one CloudTrail trail is enabled in the current region.
‚úÖ Identifies regions without an active CloudTrail trail.
‚úÖ Logs all findings and suggests enabling a trail if none are found.
‚úÖ Can be modified to automatically create a CloudTrail trail if missing.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for enabled CloudTrail trails
check_cloudtrail_trails() {
    log ""Checking for enabled CloudTrail trails in the current AWS region...""

    # Get the list of trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].TrailARN"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found in this region.""
        log ""‚ùå Action required: Create a CloudTrail trail for compliance.""
        exit 1
    else
        log ""‚úÖ At least one CloudTrail trail is enabled in this region.""
    fi
}

# Execute the function
check_cloudtrail_trails
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Maintains AWS security best practices by enforcing logging.
üîπ Visibility & Auditing: Helps track API activity and detect security issues.
üîπ Automates Compliance Checks: Reduces manual verification effort.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails in the current region.
2Ô∏è‚É£ Checks if at least one trail is enabled.
3Ô∏è‚É£ Flags regions without a CloudTrail trail.
4Ô∏è‚É£ Logs findings and provides compliance status.
5Ô∏è‚É£ Suggests creating a new CloudTrail trail if none exist.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,At least one CloudTrail trail should be enabled in the AWS account,Ensure that at least one CloudTrail trail is enabled in the AWS account.,Compliance,Medium,Ensure at least one CloudTrail trail is enabled in the AWS account. Steps: 1. Review CloudTrail settings. 2. Enable a trail if none is present. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/how-to-enable-trail.html,To be added,"CloudTrail: Ensure At Least One CloudTrail Trail is Enabled in the AWS Account
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if at least one CloudTrail trail is enabled in the account.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies if a CloudTrail trail exists and enables one if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by creating a new CloudTrail if needed.","üîç Features of the Script:
‚úÖ Checks if any CloudTrail trail exists in the AWS account.
‚úÖ If no trail is found, creates a new organization-wide, multi-region trail.
‚úÖ Ensures logging is enabled for the newly created trail.
‚úÖ Stores CloudTrail logs securely in an S3 bucket.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and create CloudTrail if missing
ensure_cloudtrail_exists() {
    log ""Checking if at least one CloudTrail trail is enabled...""

    # Get list of CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -n ""$trails"" ]]; then
        log ""‚úÖ CloudTrail is already enabled. Existing trails: $trails""
        exit 0
    fi

    log ""‚ö†Ô∏è No CloudTrail trails found. Creating a new one...""

    # Define CloudTrail parameters
    trail_name=""DefaultSecurityTrail""
    s3_bucket=""cloudtrail-logs-$(aws sts get-caller-identity --query 'Account' --output text)""

    # Create S3 bucket if it doesn't exist
    if ! aws s3api head-bucket --bucket ""$s3_bucket"" 2>/dev/null; then
        log ""Creating S3 bucket $s3_bucket for CloudTrail logs...""
        aws s3api create-bucket --bucket ""$s3_bucket"" --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
    fi

    # Create a new CloudTrail
    aws cloudtrail create-trail --name ""$trail_name"" --s3-bucket-name ""$s3_bucket"" --is-multi-region-trail
    aws cloudtrail start-logging --name ""$trail_name""

    log ""‚úÖ CloudTrail $trail_name has been created and logging is enabled.""
}

# Execute the function
ensure_cloudtrail_exists
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Guarantees that at least one CloudTrail is active.
üîπ Automated Security: Prevents accidental CloudTrail deletion.
üîπ Logging & Visibility: Ensures all AWS API activity is recorded.","üìå What This Script Does:
1Ô∏è‚É£ Checks if any CloudTrail trail exists.
2Ô∏è‚É£ If missing, creates a new multi-region CloudTrail.
3Ô∏è‚É£ Ensures logs are securely stored in an S3 bucket.
4Ô∏è‚É£ Enables logging for the new trail.
5Ô∏è‚É£ Logs actions for security and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,At least one CloudTrail trail should be enabled in the AWS account,Ensure that at least one CloudTrail trail is enabled in the AWS account.,Compliance,Medium,Ensure at least one CloudTrail trail is enabled in the AWS account. Steps: 1. Review CloudTrail settings. 2. Enable a trail if none is present. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/how-to-enable-trail.html,To be added,"CloudTrail: Ensure At Least One CloudTrail Trail is Enabled in the AWS Account
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if at least one CloudTrail trail is enabled in the account.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies if a CloudTrail trail exists and enables one if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by creating a new CloudTrail if needed.","üîç Features of the Script:
‚úÖ Checks if any CloudTrail trail exists in the AWS account.
‚úÖ If no trail is found, creates a new organization-wide, multi-region trail.
‚úÖ Ensures logging is enabled for the newly created trail.
‚úÖ Stores CloudTrail logs securely in an S3 bucket.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and create CloudTrail if missing
ensure_cloudtrail_exists() {
    log ""Checking if at least one CloudTrail trail is enabled...""

    # Get list of CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -n ""$trails"" ]]; then
        log ""‚úÖ CloudTrail is already enabled. Existing trails: $trails""
        exit 0
    fi

    log ""‚ö†Ô∏è No CloudTrail trails found. Creating a new one...""

    # Define CloudTrail parameters
    trail_name=""DefaultSecurityTrail""
    s3_bucket=""cloudtrail-logs-$(aws sts get-caller-identity --query 'Account' --output text)""

    # Create S3 bucket if it doesn't exist
    if ! aws s3api head-bucket --bucket ""$s3_bucket"" 2>/dev/null; then
        log ""Creating S3 bucket $s3_bucket for CloudTrail logs...""
        aws s3api create-bucket --bucket ""$s3_bucket"" --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
    fi

    # Create a new CloudTrail
    aws cloudtrail create-trail --name ""$trail_name"" --s3-bucket-name ""$s3_bucket"" --is-multi-region-trail
    aws cloudtrail start-logging --name ""$trail_name""

    log ""‚úÖ CloudTrail $trail_name has been created and logging is enabled.""
}

# Execute the function
ensure_cloudtrail_exists
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Guarantees that at least one CloudTrail is active.
üîπ Automated Security: Prevents accidental CloudTrail deletion.
üîπ Logging & Visibility: Ensures all AWS API activity is recorded.","üìå What This Script Does:
1Ô∏è‚É£ Checks if any CloudTrail trail exists.
2Ô∏è‚É£ If missing, creates a new multi-region CloudTrail.
3Ô∏è‚É£ Ensures logs are securely stored in an S3 bucket.
4Ô∏è‚É£ Enables logging for the new trail.
5Ô∏è‚É£ Logs actions for security and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trails should have insight selectors and logging enabled,To be added,Compliance,Medium,Ensure CloudTrail trails have insight selectors and logging enabled. Steps: 1. Review trail settings. 2. Enable insight selectors if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-insight-selectors.html,To be added,"CloudTrail: Ensure That Trails Have Insight Selectors and Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if CloudTrail trails have insight selectors and logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all CloudTrail trails and enables insight selectors and logging if missing.
SSM Automation: An SSM document to notify admins and enforce compliance automatically.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails in the AWS account.
‚úÖ Checks if logging is enabled for each trail.
‚úÖ Checks if insight selectors are enabled.
‚úÖ Enables logging and insights for non-compliant trails.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable CloudTrail insight selectors and logging
enable_cloudtrail_insights_logging() {
    log ""Checking CloudTrail trails for insight selectors and logging...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found.""
        exit 1
    fi

    updated_count=0
    for trail in $trails; do
        log ""Checking trail: $trail""

        # Check if logging is enabled
        logging_status=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        if [[ ""$logging_status"" != ""True"" ]]; then
            log ""‚ö†Ô∏è Logging is disabled for $trail. Enabling logging...""
            aws cloudtrail start-logging --name ""$trail""
            log ""‚úÖ Logging enabled for $trail.""
            ((updated_count++))
        else
            log ""‚úÖ Logging is already enabled for $trail.""
        fi

        # Check if insight selectors are enabled
        insights_status=$(aws cloudtrail get-insight-selectors --trail-name ""$trail"" --query ""InsightSelectors"" --output text)

        if [[ -z ""$insights_status"" ]]; then
            log ""‚ö†Ô∏è No insight selectors enabled for $trail. Enabling insights...""
            aws cloudtrail put-insight-selectors --trail-name ""$trail"" --insight-selectors '[{""InsightType"": ""ApiCallRateInsight""}]'
            log ""‚úÖ Insight selectors enabled for $trail.""
            ((updated_count++))
        else
            log ""‚úÖ Insight selectors are already enabled for $trail.""
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforced. $updated_count trails were updated.""
    else
        log ""‚úÖ All CloudTrail trails are already compliant.""
    fi
}

# Execute the function
enable_cloudtrail_insights_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Enables anomaly detection using insight selectors.
üîπ Automated Compliance: Ensures all CloudTrail trails have logging enabled.
üîπ Improved Visibility: Helps detect unusual API activity patterns.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if logging is enabled for each trail.
3Ô∏è‚É£ Checks if insight selectors are configured.
4Ô∏è‚É£ Enables logging and insights for non-compliant trails.
5Ô∏è‚É£ Logs actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trails should have insight selectors and logging enabled,To be added,Compliance,Medium,Ensure CloudTrail trails have insight selectors and logging enabled. Steps: 1. Review trail settings. 2. Enable insight selectors if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-insight-selectors.html,To be added,"CloudTrail: Ensure That Trails Have Insight Selectors and Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if CloudTrail trails have insight selectors and logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all CloudTrail trails and enables insight selectors and logging if missing.
SSM Automation: An SSM document to notify admins and enforce compliance automatically.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails in the AWS account.
‚úÖ Checks if logging is enabled for each trail.
‚úÖ Checks if insight selectors are enabled.
‚úÖ Enables logging and insights for non-compliant trails.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable CloudTrail insight selectors and logging
enable_cloudtrail_insights_logging() {
    log ""Checking CloudTrail trails for insight selectors and logging...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found.""
        exit 1
    fi

    updated_count=0
    for trail in $trails; do
        log ""Checking trail: $trail""

        # Check if logging is enabled
        logging_status=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        if [[ ""$logging_status"" != ""True"" ]]; then
            log ""‚ö†Ô∏è Logging is disabled for $trail. Enabling logging...""
            aws cloudtrail start-logging --name ""$trail""
            log ""‚úÖ Logging enabled for $trail.""
            ((updated_count++))
        else
            log ""‚úÖ Logging is already enabled for $trail.""
        fi

        # Check if insight selectors are enabled
        insights_status=$(aws cloudtrail get-insight-selectors --trail-name ""$trail"" --query ""InsightSelectors"" --output text)

        if [[ -z ""$insights_status"" ]]; then
            log ""‚ö†Ô∏è No insight selectors enabled for $trail. Enabling insights...""
            aws cloudtrail put-insight-selectors --trail-name ""$trail"" --insight-selectors '[{""InsightType"": ""ApiCallRateInsight""}]'
            log ""‚úÖ Insight selectors enabled for $trail.""
            ((updated_count++))
        else
            log ""‚úÖ Insight selectors are already enabled for $trail.""
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforced. $updated_count trails were updated.""
    else
        log ""‚úÖ All CloudTrail trails are already compliant.""
    fi
}

# Execute the function
enable_cloudtrail_insights_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Enables anomaly detection using insight selectors.
üîπ Automated Compliance: Ensures all CloudTrail trails have logging enabled.
üîπ Improved Visibility: Helps detect unusual API activity patterns.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if logging is enabled for each trail.
3Ô∏è‚É£ Checks if insight selectors are configured.
4Ô∏è‚É£ Enables logging and insights for non-compliant trails.
5Ô∏è‚É£ Logs actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trails should be integrated with CloudWatch logs,To be added,Compliance,High,Ensure CloudTrail trails are integrated with CloudWatch logs. Steps: 1. Review CloudTrail settings. 2. Enable CloudWatch Logs integration if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-cloudwatch-logs.html,To be added,"CloudTrail Trails Should Be Integrated with CloudWatch Logs
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if CloudTrail is integrated with CloudWatch Logs.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks CloudTrail log delivery to CloudWatch and fixes misconfigurations.
SSM Automation: An SSM document to notify admins and apply corrections.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails in the AWS account.
‚úÖ Checks if each trail is integrated with CloudWatch Logs.
‚úÖ Associates non-compliant trails with a CloudWatch log group.
‚úÖ Ensures CloudTrail events are logged for real-time monitoring.
‚úÖ Logs actions taken for audit and compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable CloudTrail integration with CloudWatch Logs
integrate_cloudtrail_cloudwatch() {
    log ""Checking CloudTrail trails for CloudWatch Logs integration compliance...""

    # Get all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found. Create a CloudTrail trail first!""
        exit 1
    fi

    updated_count=0
    for trail in $trails; do
        # Get the CloudWatch log group associated with the trail
        log_group=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].CloudWatchLogsLogGroupArn"" --output text)

        if [[ -n ""$log_group"" && ""$log_group"" != ""None"" ]]; then
            log ""‚úÖ CloudTrail trail $trail is already integrated with CloudWatch Logs.""
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail is not integrated with CloudWatch Logs. Configuring...""

            # Create a CloudWatch log group if not exists
            log_group_name=""CloudTrail-Logs-$trail""
            aws logs create-log-group --log-group-name ""$log_group_name"" 2>/dev/null

            # Create an IAM role for CloudTrail to write to CloudWatch Logs
            role_name=""CloudTrailCloudWatchRole""
            aws iam create-role --role-name ""$role_name"" --assume-role-policy-document '{
                ""Version"": ""2012-10-17"",
                ""Statement"": [
                    {
                        ""Effect"": ""Allow"",
                        ""Principal"": {
                            ""Service"": ""cloudtrail.amazonaws.com""
                        },
                        ""Action"": ""sts:AssumeRole""
                    }
                ]
            }' 2>/dev/null

            # Attach CloudWatch Logs permissions to the role
            aws iam put-role-policy --role-name ""$role_name"" --policy-name ""CloudTrailCloudWatchPolicy"" --policy-document '{
                ""Version"": ""2012-10-17"",
                ""Statement"": [
                    {
                        ""Effect"": ""Allow"",
                        ""Action"": [
                            ""logs:CreateLogStream"",
                            ""logs:PutLogEvents""
                        ],
                        ""Resource"": ""arn:aws:logs:*:*:log-group:'""$log_group_name""'""
                    }
                ]
            }' 2>/dev/null

            # Attach the IAM role to the CloudTrail trail
            aws cloudtrail update-trail --name ""$trail"" --cloud-watch-logs-log-group-arn ""arn:aws:logs:$(aws configure get region):$(aws sts get-caller-identity --query 'Account' --output text):log-group:$log_group_name"" --cloud-watch-logs-role-arn ""arn:aws:iam::$(aws sts get-caller-identity --query 'Account' --output text):role/$role_name""

            log ""‚úÖ Integrated CloudTrail trail $trail with CloudWatch Logs.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ CloudTrail integration with CloudWatch Logs enabled for $updated_count trails.""
    else
        log ""‚úÖ All CloudTrail trails are already compliant.""
    fi
}

# Execute the function
integrate_cloudtrail_cloudwatch
","üöÄ Why This is Useful?
üîπ Real-Time Monitoring: Enables CloudWatch Logs for real-time security event tracking.
üîπ Automated Enforcement: Ensures all trails log to CloudWatch.
üîπ Full Logging: Provides an audit trail for security analysis.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if each trail is integrated with CloudWatch Logs.
3Ô∏è‚É£ Creates a CloudWatch log group if missing.
4Ô∏è‚É£ Associates the trail with CloudWatch Logs.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,CloudTrail trails should be integrated with CloudWatch logs,To be added,Compliance,High,Ensure CloudTrail trails are integrated with CloudWatch logs. Steps: 1. Review CloudTrail settings. 2. Enable CloudWatch Logs integration if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-cloudwatch-logs.html,To be added,"CloudTrail Trails Should Be Integrated with CloudWatch Logs
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if CloudTrail is integrated with CloudWatch Logs.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks CloudTrail log delivery to CloudWatch and fixes misconfigurations.
SSM Automation: An SSM document to notify admins and apply corrections.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails in the AWS account.
‚úÖ Checks if each trail is integrated with CloudWatch Logs.
‚úÖ Associates non-compliant trails with a CloudWatch log group.
‚úÖ Ensures CloudTrail events are logged for real-time monitoring.
‚úÖ Logs actions taken for audit and compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable CloudTrail integration with CloudWatch Logs
integrate_cloudtrail_cloudwatch() {
    log ""Checking CloudTrail trails for CloudWatch Logs integration compliance...""

    # Get all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found. Create a CloudTrail trail first!""
        exit 1
    fi

    updated_count=0
    for trail in $trails; do
        # Get the CloudWatch log group associated with the trail
        log_group=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].CloudWatchLogsLogGroupArn"" --output text)

        if [[ -n ""$log_group"" && ""$log_group"" != ""None"" ]]; then
            log ""‚úÖ CloudTrail trail $trail is already integrated with CloudWatch Logs.""
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail is not integrated with CloudWatch Logs. Configuring...""

            # Create a CloudWatch log group if not exists
            log_group_name=""CloudTrail-Logs-$trail""
            aws logs create-log-group --log-group-name ""$log_group_name"" 2>/dev/null

            # Create an IAM role for CloudTrail to write to CloudWatch Logs
            role_name=""CloudTrailCloudWatchRole""
            aws iam create-role --role-name ""$role_name"" --assume-role-policy-document '{
                ""Version"": ""2012-10-17"",
                ""Statement"": [
                    {
                        ""Effect"": ""Allow"",
                        ""Principal"": {
                            ""Service"": ""cloudtrail.amazonaws.com""
                        },
                        ""Action"": ""sts:AssumeRole""
                    }
                ]
            }' 2>/dev/null

            # Attach CloudWatch Logs permissions to the role
            aws iam put-role-policy --role-name ""$role_name"" --policy-name ""CloudTrailCloudWatchPolicy"" --policy-document '{
                ""Version"": ""2012-10-17"",
                ""Statement"": [
                    {
                        ""Effect"": ""Allow"",
                        ""Action"": [
                            ""logs:CreateLogStream"",
                            ""logs:PutLogEvents""
                        ],
                        ""Resource"": ""arn:aws:logs:*:*:log-group:'""$log_group_name""'""
                    }
                ]
            }' 2>/dev/null

            # Attach the IAM role to the CloudTrail trail
            aws cloudtrail update-trail --name ""$trail"" --cloud-watch-logs-log-group-arn ""arn:aws:logs:$(aws configure get region):$(aws sts get-caller-identity --query 'Account' --output text):log-group:$log_group_name"" --cloud-watch-logs-role-arn ""arn:aws:iam::$(aws sts get-caller-identity --query 'Account' --output text):role/$role_name""

            log ""‚úÖ Integrated CloudTrail trail $trail with CloudWatch Logs.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ CloudTrail integration with CloudWatch Logs enabled for $updated_count trails.""
    else
        log ""‚úÖ All CloudTrail trails are already compliant.""
    fi
}

# Execute the function
integrate_cloudtrail_cloudwatch
","üöÄ Why This is Useful?
üîπ Real-Time Monitoring: Enables CloudWatch Logs for real-time security event tracking.
üîπ Automated Enforcement: Ensures all trails log to CloudWatch.
üîπ Full Logging: Provides an audit trail for security analysis.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if each trail is integrated with CloudWatch Logs.
3Ô∏è‚É£ Creates a CloudWatch log group if missing.
4Ô∏è‚É£ Associates the trail with CloudWatch Logs.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,CloudTrail trails should be integrated with CloudWatch logs,To be added,Compliance,High,Ensure CloudTrail trails are integrated with CloudWatch logs. Steps: 1. Review CloudTrail settings. 2. Enable CloudWatch Logs integration if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-cloudwatch-logs.html,To be added,"CloudTrail Trails Should Be Integrated with CloudWatch Logs
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if CloudTrail is integrated with CloudWatch Logs.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks CloudTrail log delivery to CloudWatch and fixes misconfigurations.
SSM Automation: An SSM document to notify admins and apply corrections.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails in the AWS account.
‚úÖ Checks if each trail is integrated with CloudWatch Logs.
‚úÖ Associates non-compliant trails with a CloudWatch log group.
‚úÖ Ensures CloudTrail events are logged for real-time monitoring.
‚úÖ Logs actions taken for audit and compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable CloudTrail integration with CloudWatch Logs
integrate_cloudtrail_cloudwatch() {
    log ""Checking CloudTrail trails for CloudWatch Logs integration compliance...""

    # Get all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""‚ö†Ô∏è No CloudTrail trails found. Create a CloudTrail trail first!""
        exit 1
    fi

    updated_count=0
    for trail in $trails; do
        # Get the CloudWatch log group associated with the trail
        log_group=$(aws cloudtrail describe-trails --query ""trailList[?Name=='$trail'].CloudWatchLogsLogGroupArn"" --output text)

        if [[ -n ""$log_group"" && ""$log_group"" != ""None"" ]]; then
            log ""‚úÖ CloudTrail trail $trail is already integrated with CloudWatch Logs.""
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail is not integrated with CloudWatch Logs. Configuring...""

            # Create a CloudWatch log group if not exists
            log_group_name=""CloudTrail-Logs-$trail""
            aws logs create-log-group --log-group-name ""$log_group_name"" 2>/dev/null

            # Create an IAM role for CloudTrail to write to CloudWatch Logs
            role_name=""CloudTrailCloudWatchRole""
            aws iam create-role --role-name ""$role_name"" --assume-role-policy-document '{
                ""Version"": ""2012-10-17"",
                ""Statement"": [
                    {
                        ""Effect"": ""Allow"",
                        ""Principal"": {
                            ""Service"": ""cloudtrail.amazonaws.com""
                        },
                        ""Action"": ""sts:AssumeRole""
                    }
                ]
            }' 2>/dev/null

            # Attach CloudWatch Logs permissions to the role
            aws iam put-role-policy --role-name ""$role_name"" --policy-name ""CloudTrailCloudWatchPolicy"" --policy-document '{
                ""Version"": ""2012-10-17"",
                ""Statement"": [
                    {
                        ""Effect"": ""Allow"",
                        ""Action"": [
                            ""logs:CreateLogStream"",
                            ""logs:PutLogEvents""
                        ],
                        ""Resource"": ""arn:aws:logs:*:*:log-group:'""$log_group_name""'""
                    }
                ]
            }' 2>/dev/null

            # Attach the IAM role to the CloudTrail trail
            aws cloudtrail update-trail --name ""$trail"" --cloud-watch-logs-log-group-arn ""arn:aws:logs:$(aws configure get region):$(aws sts get-caller-identity --query 'Account' --output text):log-group:$log_group_name"" --cloud-watch-logs-role-arn ""arn:aws:iam::$(aws sts get-caller-identity --query 'Account' --output text):role/$role_name""

            log ""‚úÖ Integrated CloudTrail trail $trail with CloudWatch Logs.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ CloudTrail integration with CloudWatch Logs enabled for $updated_count trails.""
    else
        log ""‚úÖ All CloudTrail trails are already compliant.""
    fi
}

# Execute the function
integrate_cloudtrail_cloudwatch
","üöÄ Why This is Useful?
üîπ Real-Time Monitoring: Enables CloudWatch Logs for real-time security event tracking.
üîπ Automated Enforcement: Ensures all trails log to CloudWatch.
üîπ Full Logging: Provides an audit trail for security analysis.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if each trail is integrated with CloudWatch Logs.
3Ô∏è‚É£ Creates a CloudWatch log group if missing.
4Ô∏è‚É£ Associates the trail with CloudWatch Logs.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trail logs should be encrypted with KMS CMK,To be added,Compliance,High,Ensure CloudTrail trail logs are encrypted with KMS CMK. Steps: 1. Review trail settings. 2. Enable KMS CMK encryption if not already enabled. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-using-kms.html,To be added,"CloudTrail Trail Logs Should Be Encrypted with KMS CMK
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if CloudTrail logs are encrypted with a KMS CMK.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans CloudTrail settings and reports non-compliant trails.
SSM Automation: An SSM document to notify admins and enable KMS encryption for non-compliant trails.","üîç Features of the Script:
‚úÖ Scans all CloudTrail trails to check encryption settings.
‚úÖ Identifies trails that are not using KMS CMK for encryption.
‚úÖ Logs findings and suggests remediation steps.
‚úÖ Can be modified to automatically enable KMS encryption for non-compliant trails.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check CloudTrail encryption with KMS CMK
check_cloudtrail_encryption() {
    log ""Checking CloudTrail encryption settings...""

    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""No CloudTrail trails found.""
        exit 0
    fi

    non_compliant_count=0
    for trail in $trails; do
        kms_key_id=$(aws cloudtrail get-trail --name ""$trail"" --query ""Trail.KmsKeyId"" --output text)

        if [[ ""$kms_key_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è CloudTrail trail $trail is not encrypted with KMS.""
            log ""‚ùå Action required: Enable KMS encryption for this trail.""
            ((non_compliant_count++))
        else
            log ""‚úÖ CloudTrail trail $trail is encrypted with KMS CMK ($kms_key_id).""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $non_compliant_count non-compliant CloudTrail trails requiring KMS encryption.""
    else
        log ""‚úÖ All CloudTrail trails are properly encrypted with KMS CMK.""
    fi
}

# Execute the function
check_cloudtrail_encryption
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures CloudTrail logs are securely encrypted.
üîπ Compliance Assurance: Meets AWS security best practices and regulatory requirements.
üîπ Automates Compliance Checks: Reduces manual verification and speeds up audits.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if KMS encryption is enabled.
3Ô∏è‚É£ Flags trails that are not encrypted with a CMK.
4Ô∏è‚É£ Logs findings and compliance status.
5Ô∏è‚É£ Suggests enabling KMS encryption for non-compliant trails.",Bash,Weekly,SOC 2,2024-02-13
Security,CloudTrail trail logs should be encrypted with KMS CMK,To be added,Compliance,High,Ensure CloudTrail trail logs are encrypted with KMS CMK. Steps: 1. Review trail settings. 2. Enable KMS CMK encryption if not already enabled. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-using-kms.html,To be added,"CloudTrail Trail Logs Should Be Encrypted with KMS CMK
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if CloudTrail logs are encrypted with a KMS CMK.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans CloudTrail settings and reports non-compliant trails.
SSM Automation: An SSM document to notify admins and enable KMS encryption for non-compliant trails.","üîç Features of the Script:
‚úÖ Scans all CloudTrail trails to check encryption settings.
‚úÖ Identifies trails that are not using KMS CMK for encryption.
‚úÖ Logs findings and suggests remediation steps.
‚úÖ Can be modified to automatically enable KMS encryption for non-compliant trails.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check CloudTrail encryption with KMS CMK
check_cloudtrail_encryption() {
    log ""Checking CloudTrail encryption settings...""

    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""No CloudTrail trails found.""
        exit 0
    fi

    non_compliant_count=0
    for trail in $trails; do
        kms_key_id=$(aws cloudtrail get-trail --name ""$trail"" --query ""Trail.KmsKeyId"" --output text)

        if [[ ""$kms_key_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è CloudTrail trail $trail is not encrypted with KMS.""
            log ""‚ùå Action required: Enable KMS encryption for this trail.""
            ((non_compliant_count++))
        else
            log ""‚úÖ CloudTrail trail $trail is encrypted with KMS CMK ($kms_key_id).""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $non_compliant_count non-compliant CloudTrail trails requiring KMS encryption.""
    else
        log ""‚úÖ All CloudTrail trails are properly encrypted with KMS CMK.""
    fi
}

# Execute the function
check_cloudtrail_encryption
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures CloudTrail logs are securely encrypted.
üîπ Compliance Assurance: Meets AWS security best practices and regulatory requirements.
üîπ Automates Compliance Checks: Reduces manual verification and speeds up audits.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if KMS encryption is enabled.
3Ô∏è‚É£ Flags trails that are not encrypted with a CMK.
4Ô∏è‚É£ Logs findings and compliance status.
5Ô∏è‚É£ Suggests enabling KMS encryption for non-compliant trails.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trail logs should be encrypted with KMS CMK,To be added,Compliance,High,Ensure CloudTrail trail logs are encrypted with KMS CMK. Steps: 1. Review trail settings. 2. Enable KMS CMK encryption if not already enabled. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-using-kms.html,To be added,"CloudTrail Trail Logs Should Be Encrypted with KMS CMK
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if CloudTrail logs are encrypted with a KMS CMK.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans CloudTrail settings and reports non-compliant trails.
SSM Automation: An SSM document to notify admins and enable KMS encryption for non-compliant trails.","üîç Features of the Script:
‚úÖ Scans all CloudTrail trails to check encryption settings.
‚úÖ Identifies trails that are not using KMS CMK for encryption.
‚úÖ Logs findings and suggests remediation steps.
‚úÖ Can be modified to automatically enable KMS encryption for non-compliant trails.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check CloudTrail encryption with KMS CMK
check_cloudtrail_encryption() {
    log ""Checking CloudTrail encryption settings...""

    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""No CloudTrail trails found.""
        exit 0
    fi

    non_compliant_count=0
    for trail in $trails; do
        kms_key_id=$(aws cloudtrail get-trail --name ""$trail"" --query ""Trail.KmsKeyId"" --output text)

        if [[ ""$kms_key_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è CloudTrail trail $trail is not encrypted with KMS.""
            log ""‚ùå Action required: Enable KMS encryption for this trail.""
            ((non_compliant_count++))
        else
            log ""‚úÖ CloudTrail trail $trail is encrypted with KMS CMK ($kms_key_id).""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $non_compliant_count non-compliant CloudTrail trails requiring KMS encryption.""
    else
        log ""‚úÖ All CloudTrail trails are properly encrypted with KMS CMK.""
    fi
}

# Execute the function
check_cloudtrail_encryption
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures CloudTrail logs are securely encrypted.
üîπ Compliance Assurance: Meets AWS security best practices and regulatory requirements.
üîπ Automates Compliance Checks: Reduces manual verification and speeds up audits.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if KMS encryption is enabled.
3Ô∏è‚É£ Flags trails that are not encrypted with a CMK.
4Ô∏è‚É£ Logs findings and compliance status.
5Ô∏è‚É£ Suggests enabling KMS encryption for non-compliant trails.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trail log file validation should be enabled,To be added,Compliance,High,Ensure CloudTrail trail log file validation is enabled. Steps: 1. Review trail settings. 2. Enable log file validation if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation.html,To be added,"CloudTrail Trail Log File Validation Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if log file validation is enabled for all CloudTrail trails.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans CloudTrail trails and enables log file validation if disabled.
SSM Automation: An SSM document to notify admins and enforce compliance.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails in the AWS account.
‚úÖ Checks if log file validation is enabled.
‚úÖ Enables log file validation for non-compliant trails.
‚úÖ Logs actions taken for audit and compliance tracking.
‚úÖ Skips trails that are already compliant.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable CloudTrail log file validation
enable_log_validation() {
    log ""Checking CloudTrail trails for log file validation compliance...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""No CloudTrail trails found.""
        exit 0
    fi

    updated_count=0
    for trail in $trails; do
        # Check log file validation status
        validation_status=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        if [[ ""$validation_status"" == ""True"" ]]; then
            log ""‚úÖ CloudTrail trail $trail has log file validation enabled.""
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail does not have log file validation enabled. Enabling...""
            aws cloudtrail update-trail --name ""$trail"" --enable-log-file-validation
            log ""‚úÖ Enabled log file validation for $trail.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Log file validation enabled for $updated_count trails.""
    else
        log ""‚úÖ All CloudTrail trails are already compliant.""
    fi
}

# Execute the function
enable_log_validation
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures CloudTrail logs are protected from tampering.
üîπ Automated Compliance: Enforces best practices without manual intervention.
üîπ Full Logging: Tracks changes for security audits.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if log file validation is enabled.
3Ô∏è‚É£ Flags non-compliant trails.
4Ô∏è‚É£ Enables log file validation where necessary.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,CloudTrail trail log file validation should be enabled,To be added,Compliance,High,Ensure CloudTrail trail log file validation is enabled. Steps: 1. Review trail settings. 2. Enable log file validation if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation.html,To be added,"CloudTrail Trail Log File Validation Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if log file validation is enabled for all CloudTrail trails.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans CloudTrail trails and enables log file validation if disabled.
SSM Automation: An SSM document to notify admins and enforce compliance.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails in the AWS account.
‚úÖ Checks if log file validation is enabled.
‚úÖ Enables log file validation for non-compliant trails.
‚úÖ Logs actions taken for audit and compliance tracking.
‚úÖ Skips trails that are already compliant.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable CloudTrail log file validation
enable_log_validation() {
    log ""Checking CloudTrail trails for log file validation compliance...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""No CloudTrail trails found.""
        exit 0
    fi

    updated_count=0
    for trail in $trails; do
        # Check log file validation status
        validation_status=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        if [[ ""$validation_status"" == ""True"" ]]; then
            log ""‚úÖ CloudTrail trail $trail has log file validation enabled.""
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail does not have log file validation enabled. Enabling...""
            aws cloudtrail update-trail --name ""$trail"" --enable-log-file-validation
            log ""‚úÖ Enabled log file validation for $trail.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Log file validation enabled for $updated_count trails.""
    else
        log ""‚úÖ All CloudTrail trails are already compliant.""
    fi
}

# Execute the function
enable_log_validation
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures CloudTrail logs are protected from tampering.
üîπ Automated Compliance: Enforces best practices without manual intervention.
üîπ Full Logging: Tracks changes for security audits.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if log file validation is enabled.
3Ô∏è‚É£ Flags non-compliant trails.
4Ô∏è‚É£ Enables log file validation where necessary.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,CloudTrail trail log file validation should be enabled,To be added,Compliance,High,Ensure CloudTrail trail log file validation is enabled. Steps: 1. Review trail settings. 2. Enable log file validation if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation.html,To be added,"CloudTrail Trail Log File Validation Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if log file validation is enabled for all CloudTrail trails.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans CloudTrail trails and enables log file validation if disabled.
SSM Automation: An SSM document to notify admins and enforce compliance.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails in the AWS account.
‚úÖ Checks if log file validation is enabled.
‚úÖ Enables log file validation for non-compliant trails.
‚úÖ Logs actions taken for audit and compliance tracking.
‚úÖ Skips trails that are already compliant.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable CloudTrail log file validation
enable_log_validation() {
    log ""Checking CloudTrail trails for log file validation compliance...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""No CloudTrail trails found.""
        exit 0
    fi

    updated_count=0
    for trail in $trails; do
        # Check log file validation status
        validation_status=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        if [[ ""$validation_status"" == ""True"" ]]; then
            log ""‚úÖ CloudTrail trail $trail has log file validation enabled.""
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail does not have log file validation enabled. Enabling...""
            aws cloudtrail update-trail --name ""$trail"" --enable-log-file-validation
            log ""‚úÖ Enabled log file validation for $trail.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Log file validation enabled for $updated_count trails.""
    else
        log ""‚úÖ All CloudTrail trails are already compliant.""
    fi
}

# Execute the function
enable_log_validation
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures CloudTrail logs are protected from tampering.
üîπ Automated Compliance: Enforces best practices without manual intervention.
üîπ Full Logging: Tracks changes for security audits.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if log file validation is enabled.
3Ô∏è‚É£ Flags non-compliant trails.
4Ô∏è‚É£ Enables log file validation where necessary.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudTrail,CloudTrail trail log file validation should be enabled,To be added,Compliance,High,Ensure CloudTrail trail log file validation is enabled. Steps: 1. Review trail settings. 2. Enable log file validation if not already set. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation.html,To be added,"CloudTrail Trail Log File Validation Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if log file validation is enabled for all CloudTrail trails.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans CloudTrail trails and enables log file validation if disabled.
SSM Automation: An SSM document to notify admins and enforce compliance.","üîç Features of the Script:
‚úÖ Retrieves all CloudTrail trails in the AWS account.
‚úÖ Checks if log file validation is enabled.
‚úÖ Enables log file validation for non-compliant trails.
‚úÖ Logs actions taken for audit and compliance tracking.
‚úÖ Skips trails that are already compliant.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable CloudTrail log file validation
enable_log_validation() {
    log ""Checking CloudTrail trails for log file validation compliance...""

    # Get list of all CloudTrail trails
    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""No CloudTrail trails found.""
        exit 0
    fi

    updated_count=0
    for trail in $trails; do
        # Check log file validation status
        validation_status=$(aws cloudtrail get-trail-status --name ""$trail"" --query ""IsLogging"" --output text)

        if [[ ""$validation_status"" == ""True"" ]]; then
            log ""‚úÖ CloudTrail trail $trail has log file validation enabled.""
        else
            log ""‚ö†Ô∏è CloudTrail trail $trail does not have log file validation enabled. Enabling...""
            aws cloudtrail update-trail --name ""$trail"" --enable-log-file-validation
            log ""‚úÖ Enabled log file validation for $trail.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Log file validation enabled for $updated_count trails.""
    else
        log ""‚úÖ All CloudTrail trails are already compliant.""
    fi
}

# Execute the function
enable_log_validation
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures CloudTrail logs are protected from tampering.
üîπ Automated Compliance: Enforces best practices without manual intervention.
üîπ Full Logging: Tracks changes for security audits.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if log file validation is enabled.
3Ô∏è‚É£ Flags non-compliant trails.
4Ô∏è‚É£ Enables log file validation where necessary.
5Ô∏è‚É£ Logs actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,CloudWatch alarm should have an action configured,"Checks if CloudWatch alarms have an action configured for the ALARM, INSUFFICIENT_DATA, or OK state. Optionally checks if any actions match a named ARN. The rule is non-compliant if there is no action specified for the alarm or optional parameter.",Compliance,High,Ensure CloudWatch alarms have an action configured. Steps: 1. Review CloudWatch alarm settings. 2. Configure an action if not already done. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html,To be added,"CloudWatch Alarm Should Have an Action Configured
‚úÖ Automation Approach:

CloudWatch Alarm Validation: Checks if all CloudWatch alarms have actions configured.
Lambda Function: Automatically identifies alarms without actions.
SSM Automation: Notifies admins about missing actions","üîç Features of the Script:
‚úÖ Retrieves all CloudWatch alarms in the AWS account.
‚úÖ Checks if each alarm has an associated action.
‚úÖ Flags alarms missing actions and suggests remediation.
‚úÖ Logs findings for audit purposes.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking CloudWatch alarms for missing actions...""

alarms=$(aws cloudwatch describe-alarms --query ""MetricAlarms[].AlarmName"" --output text)

if [[ -z ""$alarms"" ]]; then
    log ""No CloudWatch alarms found.""
    exit 0
fi

missing_action_count=0
for alarm in $alarms; do
    actions=$(aws cloudwatch describe-alarms --alarm-names ""$alarm"" --query ""MetricAlarms[0].AlarmActions"" --output text)

    if [[ -z ""$actions"" || ""$actions"" == ""None"" ]]; then
        log ""‚ö†Ô∏è CloudWatch alarm '$alarm' has no action configured!""
        log ""‚ùå Action required: Attach an action to trigger remediation or notifications.""
        ((missing_action_count++))
    else
        log ""‚úÖ CloudWatch alarm '$alarm' has action(s) configured.""
    fi
done

if [[ $missing_action_count -gt 0 ]]; then
    log ""‚ö†Ô∏è $missing_action_count CloudWatch alarms need actions configured.""
else
    log ""‚úÖ All CloudWatch alarms have actions.""
fi
"," Why This is Useful?
üîπ Ensures CloudWatch alarms trigger the appropriate actions.
üîπ Prevents security and operational incidents from going unnoticed.
üîπ Provides visibility into misconfigured alarms.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudWatch alarms.
2Ô∏è‚É£ Checks if each alarm has actions configured.
3Ô∏è‚É£ Flags alarms missing actions.
4Ô∏è‚É£ Logs findings for review.
5Ô∏è‚É£ Helps enforce proper alerting mechanisms.",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,CloudWatch alarm should have an action configured,"Checks if CloudWatch alarms have an action configured for the ALARM, INSUFFICIENT_DATA, or OK state. Optionally checks if any actions match a named ARN. The rule is non-compliant if there is no action specified for the alarm or optional parameter.",Compliance,High,Ensure CloudWatch alarms have an action configured. Steps: 1. Review CloudWatch alarm settings. 2. Configure an action if not already done. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html,To be added,"CloudWatch Alarm Should Have an Action Configured
‚úÖ Automation Approach:

CloudWatch Alarm Validation: Checks if all CloudWatch alarms have actions configured.
Lambda Function: Automatically identifies alarms without actions.
SSM Automation: Notifies admins about missing actions","üîç Features of the Script:
‚úÖ Retrieves all CloudWatch alarms in the AWS account.
‚úÖ Checks if each alarm has an associated action.
‚úÖ Flags alarms missing actions and suggests remediation.
‚úÖ Logs findings for audit purposes.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking CloudWatch alarms for missing actions...""

alarms=$(aws cloudwatch describe-alarms --query ""MetricAlarms[].AlarmName"" --output text)

if [[ -z ""$alarms"" ]]; then
    log ""No CloudWatch alarms found.""
    exit 0
fi

missing_action_count=0
for alarm in $alarms; do
    actions=$(aws cloudwatch describe-alarms --alarm-names ""$alarm"" --query ""MetricAlarms[0].AlarmActions"" --output text)

    if [[ -z ""$actions"" || ""$actions"" == ""None"" ]]; then
        log ""‚ö†Ô∏è CloudWatch alarm '$alarm' has no action configured!""
        log ""‚ùå Action required: Attach an action to trigger remediation or notifications.""
        ((missing_action_count++))
    else
        log ""‚úÖ CloudWatch alarm '$alarm' has action(s) configured.""
    fi
done

if [[ $missing_action_count -gt 0 ]]; then
    log ""‚ö†Ô∏è $missing_action_count CloudWatch alarms need actions configured.""
else
    log ""‚úÖ All CloudWatch alarms have actions.""
fi
"," Why This is Useful?
üîπ Ensures CloudWatch alarms trigger the appropriate actions.
üîπ Prevents security and operational incidents from going unnoticed.
üîπ Provides visibility into misconfigured alarms.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudWatch alarms.
2Ô∏è‚É£ Checks if each alarm has actions configured.
3Ô∏è‚É£ Flags alarms missing actions.
4Ô∏è‚É£ Logs findings for review.
5Ô∏è‚É£ Helps enforce proper alerting mechanisms.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,CloudWatch alarm should have an action configured,"Checks if CloudWatch alarms have an action configured for the ALARM, INSUFFICIENT_DATA, or OK state. Optionally checks if any actions match a named ARN. The rule is non-compliant if there is no action specified for the alarm or optional parameter.",Compliance,High,Ensure CloudWatch alarms have an action configured. Steps: 1. Review CloudWatch alarm settings. 2. Configure an action if not already done. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html,To be added,"CloudWatch Alarm Should Have an Action Configured
‚úÖ Automation Approach:

CloudWatch Alarm Validation: Checks if all CloudWatch alarms have actions configured.
Lambda Function: Automatically identifies alarms without actions.
SSM Automation: Notifies admins about missing actions","üîç Features of the Script:
‚úÖ Retrieves all CloudWatch alarms in the AWS account.
‚úÖ Checks if each alarm has an associated action.
‚úÖ Flags alarms missing actions and suggests remediation.
‚úÖ Logs findings for audit purposes.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking CloudWatch alarms for missing actions...""

alarms=$(aws cloudwatch describe-alarms --query ""MetricAlarms[].AlarmName"" --output text)

if [[ -z ""$alarms"" ]]; then
    log ""No CloudWatch alarms found.""
    exit 0
fi

missing_action_count=0
for alarm in $alarms; do
    actions=$(aws cloudwatch describe-alarms --alarm-names ""$alarm"" --query ""MetricAlarms[0].AlarmActions"" --output text)

    if [[ -z ""$actions"" || ""$actions"" == ""None"" ]]; then
        log ""‚ö†Ô∏è CloudWatch alarm '$alarm' has no action configured!""
        log ""‚ùå Action required: Attach an action to trigger remediation or notifications.""
        ((missing_action_count++))
    else
        log ""‚úÖ CloudWatch alarm '$alarm' has action(s) configured.""
    fi
done

if [[ $missing_action_count -gt 0 ]]; then
    log ""‚ö†Ô∏è $missing_action_count CloudWatch alarms need actions configured.""
else
    log ""‚úÖ All CloudWatch alarms have actions.""
fi
"," Why This is Useful?
üîπ Ensures CloudWatch alarms trigger the appropriate actions.
üîπ Prevents security and operational incidents from going unnoticed.
üîπ Provides visibility into misconfigured alarms.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudWatch alarms.
2Ô∏è‚É£ Checks if each alarm has actions configured.
3Ô∏è‚É£ Flags alarms missing actions.
4Ô∏è‚É£ Logs findings for review.
5Ô∏è‚É£ Helps enforce proper alerting mechanisms.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,CloudWatch alarm action should be enabled,Checks if AWS CloudWatch alarm actions are in enabled state. The rule is non-compliant if the CloudWatch alarm actions are not in enabled state.,Compliance,Medium,Ensure CloudWatch alarm actions are enabled. Steps: 1. Review alarm action settings. 2. Enable actions if not already done. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html,To be added,"CloudWatch Alarm Action Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Checks CloudWatch alarms for missing actions.
Lambda Function: Scans and remediates non-compliant alarms.
SNS Notification: Alerts admins when alarms are missing actions.
","üîç Features of the Script:
‚úÖ Retrieves all CloudWatch alarms.
‚úÖ Checks if each alarm has an action enabled.
‚úÖ Logs non-compliant alarms.
‚úÖ Optionally assigns an SNS topic to non-compliant alarms.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log ""Checking CloudWatch alarms for missing actions...""

alarms=$(aws cloudwatch describe-alarms --query ""MetricAlarms[?AlarmActions==null].AlarmName"" --output text)

if [[ -z ""$alarms"" ]]; then
    log ""‚úÖ All CloudWatch alarms have actions enabled.""
    exit 0
fi

log ""‚ö†Ô∏è The following alarms do not have actions enabled:""
echo ""$alarms""

for alarm in $alarms; do
    log ""üîß Assigning SNS topic to alarm: $alarm""
    aws cloudwatch put-metric-alarm --alarm-name ""$alarm"" --alarm-actions ""$sns_topic_arn""
done

log ""‚úÖ All CloudWatch alarms now have actions enabled.""
","üöÄ Why This is Useful?
üîπ Ensures alarms trigger necessary responses.
üîπ Prevents silent failures in monitoring.
üîπ Automatically remediates misconfigured alarms.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudWatch alarms.
2Ô∏è‚É£ Checks if they have an action assigned.
3Ô∏è‚É£ Logs and lists non-compliant alarms.
4Ô∏è‚É£ Assigns an SNS topic to non-compliant alarms.
5Ô∏è‚É£ Ensures all alarms trigger appropriate actions.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,CloudWatch alarm action should be enabled,Checks if AWS CloudWatch alarm actions are in enabled state. The rule is non-compliant if the CloudWatch alarm actions are not in enabled state.,Compliance,Medium,Ensure CloudWatch alarm actions are enabled. Steps: 1. Review alarm action settings. 2. Enable actions if not already done. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html,To be added,"CloudWatch Alarm Action Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Checks CloudWatch alarms for missing actions.
Lambda Function: Scans and remediates non-compliant alarms.
SNS Notification: Alerts admins when alarms are missing actions.
","üîç Features of the Script:
‚úÖ Retrieves all CloudWatch alarms.
‚úÖ Checks if each alarm has an action enabled.
‚úÖ Logs non-compliant alarms.
‚úÖ Optionally assigns an SNS topic to non-compliant alarms.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log ""Checking CloudWatch alarms for missing actions...""

alarms=$(aws cloudwatch describe-alarms --query ""MetricAlarms[?AlarmActions==null].AlarmName"" --output text)

if [[ -z ""$alarms"" ]]; then
    log ""‚úÖ All CloudWatch alarms have actions enabled.""
    exit 0
fi

log ""‚ö†Ô∏è The following alarms do not have actions enabled:""
echo ""$alarms""

for alarm in $alarms; do
    log ""üîß Assigning SNS topic to alarm: $alarm""
    aws cloudwatch put-metric-alarm --alarm-name ""$alarm"" --alarm-actions ""$sns_topic_arn""
done

log ""‚úÖ All CloudWatch alarms now have actions enabled.""
","üöÄ Why This is Useful?
üîπ Ensures alarms trigger necessary responses.
üîπ Prevents silent failures in monitoring.
üîπ Automatically remediates misconfigured alarms.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudWatch alarms.
2Ô∏è‚É£ Checks if they have an action assigned.
3Ô∏è‚É£ Logs and lists non-compliant alarms.
4Ô∏è‚É£ Assigns an SNS topic to non-compliant alarms.
5Ô∏è‚É£ Ensures all alarms trigger appropriate actions.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,CloudWatch should not allow cross-account sharing,Ensure that your AWS CloudWatch is configured to allow access only to friendly AWS accounts in order to prevent unauthorized users from sharing their CloudWatch events.,Compliance,High,Ensure CloudWatch does not allow cross-account sharing. Steps: 1. Review CloudWatch settings. 2. Disable cross-account sharing if enabled. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Logs_Cross_Account_Access.html,To be added,"CloudWatch Should Not Allow Cross-Account Sharing
‚úÖ Automation Approach:

AWS Config Rule: Detects CloudWatch log groups shared with external AWS accounts.
Lambda Function: Scans CloudWatch log group resource policies and flags non-compliant ones.
SSM Automation: Notifies admins and removes unauthorized cross-account sharing.","üîç Features of the Script:
‚úÖ Retrieves all CloudWatch log group resource policies.
‚úÖ Checks if policies allow cross-account access.
‚úÖ Flags non-compliant policies and suggests remediation.
‚úÖ Logs all findings and actions.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking CloudWatch log group policies for cross-account sharing...""

log_groups=$(aws logs describe-log-groups --query ""logGroups[].logGroupName"" --output text)

for log_group in $log_groups; do
    policy=$(aws logs describe-resource-policy --query ""resourcePolicies[?contains(policyDocument, 'AWS:')].policyDocument"" --output text)
    
    if [[ ! -z ""$policy"" ]]; then
        log ""‚ö†Ô∏è Log group $log_group has cross-account sharing enabled!""
        log ""‚ùå Action required: Restrict access to only trusted accounts.""
    else
        log ""‚úÖ Log group $log_group does not allow cross-account sharing.""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents unauthorized access to CloudWatch logs.
üîπ Ensures compliance with AWS security best practices.
üîπ Provides visibility into cross-account access risks.","üìå What This Script Does:
1Ô∏è‚É£ Lists all CloudWatch log groups.
2Ô∏è‚É£ Checks if they allow cross-account sharing.
3Ô∏è‚É£ Flags log groups with unauthorized access.
4Ô∏è‚É£ Logs findings for review.
5Ô∏è‚É£ Helps enforce CloudWatch security policies.

",Bash,Weekly,SOC 2,2024-02-13
Security,CloudWatch should not allow cross-account sharing,Ensure that your AWS CloudWatch is configured to allow access only to friendly AWS accounts in order to prevent unauthorized users from sharing their CloudWatch events.,Compliance,High,Ensure CloudWatch does not allow cross-account sharing. Steps: 1. Review CloudWatch settings. 2. Disable cross-account sharing if enabled. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Logs_Cross_Account_Access.html,To be added,"CloudWatch Should Not Allow Cross-Account Sharing
‚úÖ Automation Approach:

AWS Config Rule: Detects CloudWatch log groups shared with external AWS accounts.
Lambda Function: Scans CloudWatch log group resource policies and flags non-compliant ones.
SSM Automation: Notifies admins and removes unauthorized cross-account sharing.","üîç Features of the Script:
‚úÖ Retrieves all CloudWatch log group resource policies.
‚úÖ Checks if policies allow cross-account access.
‚úÖ Flags non-compliant policies and suggests remediation.
‚úÖ Logs all findings and actions.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking CloudWatch log group policies for cross-account sharing...""

log_groups=$(aws logs describe-log-groups --query ""logGroups[].logGroupName"" --output text)

for log_group in $log_groups; do
    policy=$(aws logs describe-resource-policy --query ""resourcePolicies[?contains(policyDocument, 'AWS:')].policyDocument"" --output text)
    
    if [[ ! -z ""$policy"" ]]; then
        log ""‚ö†Ô∏è Log group $log_group has cross-account sharing enabled!""
        log ""‚ùå Action required: Restrict access to only trusted accounts.""
    else
        log ""‚úÖ Log group $log_group does not allow cross-account sharing.""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents unauthorized access to CloudWatch logs.
üîπ Ensures compliance with AWS security best practices.
üîπ Provides visibility into cross-account access risks.","üìå What This Script Does:
1Ô∏è‚É£ Lists all CloudWatch log groups.
2Ô∏è‚É£ Checks if they allow cross-account sharing.
3Ô∏è‚É£ Flags log groups with unauthorized access.
4Ô∏è‚É£ Logs findings for review.
5Ô∏è‚É£ Helps enforce CloudWatch security policies.

",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Log group retention period should be at least 365 days,Ensure a minimum duration of event log data is retained for your log groups to help with troubleshooting and forensics investigations.,Compliance,High,Ensure log group retention period is at least 365 days. Steps: 1. Review log group settings. 2. Set retention period to 365 days if not already configured. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/working-with-log-groups.html#working-with-log-groups-retention,To be added,"Log Group Retention Period Should Be at Least 365 Days
‚úÖ Automation Approach:

AWS Config Rule: Detects CloudWatch log groups with retention periods less than 365 days.
Lambda Function: Identifies and updates log groups with insufficient retention.
SSM Automation: Applies remediation by enforcing the 365-day retention period.","üîç Features of the Script:
‚úÖ Scans all CloudWatch log groups for retention settings.
‚úÖ Identifies log groups with retention < 365 days.
‚úÖ Updates log group retention to 365 days.
‚úÖ Logs all actions taken.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking CloudWatch log groups for retention settings...""

log_groups=$(aws logs describe-log-groups --query ""logGroups[?retentionInDays<365].logGroupName"" --output text)

if [[ -z ""$log_groups"" ]]; then
    log ""‚úÖ All log groups meet the 365-day retention requirement.""
    exit 0
fi

log ""Updating retention period for non-compliant log groups...""

for log_group in $log_groups; do
    log ""Setting retention period to 365 days for log group: $log_group""
    aws logs put-retention-policy --log-group-name ""$log_group"" --retention-in-days 365 || log ""Error updating retention for $log_group""
done

log ""‚úÖ Retention policy update complete for CloudWatch log groups.""
","üöÄ Why This is Useful?
üîπ Ensures compliance with long-term log retention policies.
üîπ Prevents accidental loss of security logs.
üîπ Automates the enforcement of best practices.","üìå What This Script Does:
1Ô∏è‚É£ Scans all CloudWatch log groups.
2Ô∏è‚É£ Identifies log groups with retention < 365 days.
3Ô∏è‚É£ Updates log groups to retain logs for 365 days.
4Ô∏è‚É£ Logs actions taken.
5Ô∏è‚É£ Ensures compliance with security and auditing standards.",Bash,Weekly,SOC 2,2024-02-13
Security,Log group retention period should be at least 365 days,Ensure a minimum duration of event log data is retained for your log groups to help with troubleshooting and forensics investigations.,Compliance,High,Ensure log group retention period is at least 365 days. Steps: 1. Review log group settings. 2. Set retention period to 365 days if not already configured. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/working-with-log-groups.html#working-with-log-groups-retention,To be added,"Log Group Retention Period Should Be at Least 365 Days
‚úÖ Automation Approach:

AWS Config Rule: Detects CloudWatch log groups with retention periods less than 365 days.
Lambda Function: Identifies and updates log groups with insufficient retention.
SSM Automation: Applies remediation by enforcing the 365-day retention period.","üîç Features of the Script:
‚úÖ Scans all CloudWatch log groups for retention settings.
‚úÖ Identifies log groups with retention < 365 days.
‚úÖ Updates log group retention to 365 days.
‚úÖ Logs all actions taken.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking CloudWatch log groups for retention settings...""

log_groups=$(aws logs describe-log-groups --query ""logGroups[?retentionInDays<365].logGroupName"" --output text)

if [[ -z ""$log_groups"" ]]; then
    log ""‚úÖ All log groups meet the 365-day retention requirement.""
    exit 0
fi

log ""Updating retention period for non-compliant log groups...""

for log_group in $log_groups; do
    log ""Setting retention period to 365 days for log group: $log_group""
    aws logs put-retention-policy --log-group-name ""$log_group"" --retention-in-days 365 || log ""Error updating retention for $log_group""
done

log ""‚úÖ Retention policy update complete for CloudWatch log groups.""
","üöÄ Why This is Useful?
üîπ Ensures compliance with long-term log retention policies.
üîπ Prevents accidental loss of security logs.
üîπ Automates the enforcement of best practices.","üìå What This Script Does:
1Ô∏è‚É£ Scans all CloudWatch log groups.
2Ô∏è‚É£ Identifies log groups with retention < 365 days.
3Ô∏è‚É£ Updates log groups to retain logs for 365 days.
4Ô∏è‚É£ Logs actions taken.
5Ô∏è‚É£ Ensures compliance with security and auditing standards.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Log group encryption at rest should be enabled,"To help protect sensitive data at rest, ensure encryption is enabled for your AWS CloudWatch Log Group.",Compliance,High,Ensure log group encryption at rest is enabled. Steps: 1. Review log group settings. 2. Enable encryption at rest if not already done. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/EncryptionAtRest.html,To be added,"Log Group Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects CloudWatch log groups without encryption enabled.
Lambda Function: Identifies unencrypted log groups and enables encryption using KMS.
SSM Automation: Automates remediation by applying encryption to detected log groups.","üîç Features of the Script:
‚úÖ Scans all CloudWatch log groups for encryption.
‚úÖ Identifies log groups without KMS encryption.
‚úÖ Enables encryption using a specified KMS key.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

kms_key_arn=""arn:aws:kms:us-east-1:123456789012:key/your-kms-key-id""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking CloudWatch log groups for encryption...""

log_groups=$(aws logs describe-log-groups --query ""logGroups[?kmsKeyId==null].logGroupName"" --output text)

if [[ -z ""$log_groups"" ]]; then
    log ""‚úÖ All log groups are encrypted.""
    exit 0
fi

log ""Enabling encryption for unencrypted log groups...""

for log_group in $log_groups; do
    log ""Encrypting log group: $log_group""
    aws logs associate-kms-key --log-group-name ""$log_group"" --kms-key-id ""$kms_key_arn"" || log ""Error encrypting $log_group""
done

log ""‚úÖ Encryption setup complete for CloudWatch log groups.""
","üöÄ Why This is Useful?
üîπ Protects sensitive logs from unauthorized access.
üîπ Ensures compliance with security best practices.
üîπ Automates remediation for unencrypted log groups.","üìå What This Script Does:
1Ô∏è‚É£ Scans all CloudWatch log groups.
2Ô∏è‚É£ Identifies unencrypted log groups.
3Ô∏è‚É£ Enables encryption using a specified KMS key.
4Ô∏è‚É£ Logs actions taken.
5Ô∏è‚É£ Ensures compliance with encryption best practices.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Log group encryption at rest should be enabled,"To help protect sensitive data at rest, ensure encryption is enabled for your AWS CloudWatch Log Group.",Compliance,High,Ensure log group encryption at rest is enabled. Steps: 1. Review log group settings. 2. Enable encryption at rest if not already done. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/EncryptionAtRest.html,To be added,"Log Group Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects CloudWatch log groups without encryption enabled.
Lambda Function: Identifies unencrypted log groups and enables encryption using KMS.
SSM Automation: Automates remediation by applying encryption to detected log groups.","üîç Features of the Script:
‚úÖ Scans all CloudWatch log groups for encryption.
‚úÖ Identifies log groups without KMS encryption.
‚úÖ Enables encryption using a specified KMS key.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

kms_key_arn=""arn:aws:kms:us-east-1:123456789012:key/your-kms-key-id""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking CloudWatch log groups for encryption...""

log_groups=$(aws logs describe-log-groups --query ""logGroups[?kmsKeyId==null].logGroupName"" --output text)

if [[ -z ""$log_groups"" ]]; then
    log ""‚úÖ All log groups are encrypted.""
    exit 0
fi

log ""Enabling encryption for unencrypted log groups...""

for log_group in $log_groups; do
    log ""Encrypting log group: $log_group""
    aws logs associate-kms-key --log-group-name ""$log_group"" --kms-key-id ""$kms_key_arn"" || log ""Error encrypting $log_group""
done

log ""‚úÖ Encryption setup complete for CloudWatch log groups.""
","üöÄ Why This is Useful?
üîπ Protects sensitive logs from unauthorized access.
üîπ Ensures compliance with security best practices.
üîπ Automates remediation for unencrypted log groups.","üìå What This Script Does:
1Ô∏è‚É£ Scans all CloudWatch log groups.
2Ô∏è‚É£ Identifies unencrypted log groups.
3Ô∏è‚É£ Enables encryption using a specified KMS key.
4Ô∏è‚É£ Logs actions taken.
5Ô∏è‚É£ Ensures compliance with encryption best practices.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for S3 bucket policy changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for changes to S3 bucket policies. Monitoring these changes might reduce time to detect and correct permissive policies on sensitive S3 buckets.,Compliance,Low,Ensure a log metric filter and alarm exist for S3 bucket policy changes. Steps: 1. Create a metric filter for S3 bucket policy changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for S3 Bucket Policy Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects modifications to S3 bucket policies in CloudTrail logs.
CloudWatch Alarm: Triggers an alert when bucket policy changes occur.
SNS Notification: Notifies security teams about unauthorized changes.","üîç Features of the Script:
‚úÖ Monitors S3 bucket policy changes (PutBucketPolicy, DeleteBucketPolicy, etc.).
‚úÖ Creates a CloudWatch Log Metric Filter for tracking changes.
‚úÖ Configures a CloudWatch Alarm for real-time alerting.
‚úÖ Sends SNS notifications for immediate action.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""S3BucketPolicyChanges""
alarm_name=""S3BucketPolicyChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for S3 bucket policy changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""PutBucketPolicy"") || ($.eventName=""DeleteBucketPolicy"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for S3 bucket policy changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ S3 bucket policy change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Prevents unauthorized modifications to bucket policies.
üîπ Detects potential misconfigurations leading to public exposure.
üîπ Ensures compliance with security best practices.","üìå What This Script Does:
1Ô∏è‚É£ Captures S3 bucket policy changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Provides visibility into security policy modifications.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for S3 bucket policy changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for changes to S3 bucket policies. Monitoring these changes might reduce time to detect and correct permissive policies on sensitive S3 buckets.,Compliance,Low,Ensure a log metric filter and alarm exist for S3 bucket policy changes. Steps: 1. Create a metric filter for S3 bucket policy changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for S3 Bucket Policy Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects modifications to S3 bucket policies in CloudTrail logs.
CloudWatch Alarm: Triggers an alert when bucket policy changes occur.
SNS Notification: Notifies security teams about unauthorized changes.","üîç Features of the Script:
‚úÖ Monitors S3 bucket policy changes (PutBucketPolicy, DeleteBucketPolicy, etc.).
‚úÖ Creates a CloudWatch Log Metric Filter for tracking changes.
‚úÖ Configures a CloudWatch Alarm for real-time alerting.
‚úÖ Sends SNS notifications for immediate action.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""S3BucketPolicyChanges""
alarm_name=""S3BucketPolicyChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for S3 bucket policy changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""PutBucketPolicy"") || ($.eventName=""DeleteBucketPolicy"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for S3 bucket policy changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ S3 bucket policy change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Prevents unauthorized modifications to bucket policies.
üîπ Detects potential misconfigurations leading to public exposure.
üîπ Ensures compliance with security best practices.","üìå What This Script Does:
1Ô∏è‚É£ Captures S3 bucket policy changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Provides visibility into security policy modifications.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for CloudTrail configuration changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for changes to CloudTrail configuration settings. Monitoring these changes helps ensure sustained visibility to activities in the account.,Compliance,Low,Ensure a log metric filter and alarm exist for CloudTrail configuration changes. Steps: 1. Create a metric filter for CloudTrail configuration changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for CloudTrail Configuration Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail configuration changes in logs.
CloudWatch Alarm: Triggers an alert when modifications are detected.
SNS Notification: Sends alerts to security teams.","üîç Features of the Script:
‚úÖ Monitors changes to CloudTrail configuration (StopLogging, DeleteTrail, etc.).
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for quick response.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""CloudTrailChanges""
alarm_name=""CloudTrailChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for CloudTrail configuration changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""UpdateTrail"") || ($.eventName=""DeleteTrail"") || ($.eventName=""StartLogging"") || ($.eventName=""StopLogging"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for CloudTrail configuration changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ CloudTrail configuration monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized CloudTrail modifications.
üîπ Helps prevent tampering with security logs.
üîπ Provides real-time alerts for security monitoring.","üìå What This Script Does:
1Ô∏è‚É£ Captures CloudTrail configuration changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Ensures CloudTrail logging remains intact.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for CloudTrail configuration changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for changes to CloudTrail configuration settings. Monitoring these changes helps ensure sustained visibility to activities in the account.,Compliance,Low,Ensure a log metric filter and alarm exist for CloudTrail configuration changes. Steps: 1. Create a metric filter for CloudTrail configuration changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for CloudTrail Configuration Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail configuration changes in logs.
CloudWatch Alarm: Triggers an alert when modifications are detected.
SNS Notification: Sends alerts to security teams.","üîç Features of the Script:
‚úÖ Monitors changes to CloudTrail configuration (StopLogging, DeleteTrail, etc.).
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for quick response.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""CloudTrailChanges""
alarm_name=""CloudTrailChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for CloudTrail configuration changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""UpdateTrail"") || ($.eventName=""DeleteTrail"") || ($.eventName=""StartLogging"") || ($.eventName=""StopLogging"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for CloudTrail configuration changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ CloudTrail configuration monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized CloudTrail modifications.
üîπ Helps prevent tampering with security logs.
üîπ Provides real-time alerts for security monitoring.","üìå What This Script Does:
1Ô∏è‚É£ Captures CloudTrail configuration changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Ensures CloudTrail logging remains intact.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for AWS Config configuration changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for changes to AWS Config configuration settings. Monitoring these changes helps ensure sustained visibility of configuration items in the account,Compliance,Low,Ensure a log metric filter and alarm exist for AWS Config configuration changes. Steps: 1. Create a metric filter for AWS Config changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for AWS Config Configuration Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for AWS Config changes (PutConfigurationRecorder, DeleteConfigurationRecorder, StopConfigurationRecorder).
CloudWatch Alarm: Triggers an alert when AWS Config configuration is modified.
SNS Notification: Notifies administrators of potential misconfigurations","üîç Features of the Script:
‚úÖ Detects changes to AWS Config settings.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications to security teams.

","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""AWSConfigChanges""
alarm_name=""AWSConfigChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for AWS Config changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""PutConfigurationRecorder"") || ($.eventName=""DeleteConfigurationRecorder"") || ($.eventName=""StopConfigurationRecorder"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for AWS Config changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ AWS Config change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized AWS Config modifications.
üîπ Ensures AWS Config remains enabled for compliance.
üîπ Provides real-time alerts for security teams.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for AWS Config modifications.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Prevents accidental or malicious AWS Config changes.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for AWS Config configuration changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for changes to AWS Config configuration settings. Monitoring these changes helps ensure sustained visibility of configuration items in the account,Compliance,Low,Ensure a log metric filter and alarm exist for AWS Config configuration changes. Steps: 1. Create a metric filter for AWS Config changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for AWS Config Configuration Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for AWS Config changes (PutConfigurationRecorder, DeleteConfigurationRecorder, StopConfigurationRecorder).
CloudWatch Alarm: Triggers an alert when AWS Config configuration is modified.
SNS Notification: Notifies administrators of potential misconfigurations","üîç Features of the Script:
‚úÖ Detects changes to AWS Config settings.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications to security teams.

","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""AWSConfigChanges""
alarm_name=""AWSConfigChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for AWS Config changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""PutConfigurationRecorder"") || ($.eventName=""DeleteConfigurationRecorder"") || ($.eventName=""StopConfigurationRecorder"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for AWS Config changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ AWS Config change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized AWS Config modifications.
üîπ Ensures AWS Config remains enabled for compliance.
üîπ Provides real-time alerts for security teams.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for AWS Config modifications.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Prevents accidental or malicious AWS Config changes.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for AWS Management Console authentication failures,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for failed console authentication attempts.,Compliance,Low,Ensure a log metric filter and alarm exist for AWS Management Console authentication failures. Steps: 1. Create a metric filter for authentication failures. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for AWS Management Console Authentication Failures
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for failed AWS Management Console authentication attempts.
CloudWatch Alarm: Triggers an alert if failed login attempts exceed a threshold.
SNS Notification: Notifies security teams about potential unauthorized access attempts.","üîç Features of the Script:
‚úÖ Detects failed authentication attempts (ConsoleLogin event with Failure).
‚úÖ Creates a CloudWatch Log Metric Filter to monitor authentication failures.
‚úÖ Configures a CloudWatch Alarm to trigger alerts.
‚úÖ Sends SNS notifications for security awareness.

","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""ConsoleAuthFailures""
alarm_name=""ConsoleAuthFailureAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for AWS Console authentication failures...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""ConsoleLogin"") && ($.errorMessage=""Failed authentication"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for authentication failures...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 5 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ AWS Console authentication failure monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects brute-force login attempts or compromised credentials.
üîπ Alerts security teams to investigate potential unauthorized access.
üîπ Helps prevent account takeovers and unauthorized access attempts.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for failed AWS Management Console logins.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm to trigger on repeated failures.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps detect potential security threats early.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for AWS Management Console authentication failures,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for failed console authentication attempts.,Compliance,Low,Ensure a log metric filter and alarm exist for AWS Management Console authentication failures. Steps: 1. Create a metric filter for authentication failures. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for AWS Management Console Authentication Failures
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for failed AWS Management Console authentication attempts.
CloudWatch Alarm: Triggers an alert if failed login attempts exceed a threshold.
SNS Notification: Notifies security teams about potential unauthorized access attempts.","üîç Features of the Script:
‚úÖ Detects failed authentication attempts (ConsoleLogin event with Failure).
‚úÖ Creates a CloudWatch Log Metric Filter to monitor authentication failures.
‚úÖ Configures a CloudWatch Alarm to trigger alerts.
‚úÖ Sends SNS notifications for security awareness.

","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""ConsoleAuthFailures""
alarm_name=""ConsoleAuthFailureAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for AWS Console authentication failures...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""ConsoleLogin"") && ($.errorMessage=""Failed authentication"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for authentication failures...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 5 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ AWS Console authentication failure monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects brute-force login attempts or compromised credentials.
üîπ Alerts security teams to investigate potential unauthorized access.
üîπ Helps prevent account takeovers and unauthorized access attempts.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for failed AWS Management Console logins.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm to trigger on repeated failures.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps detect potential security threats early.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for AWS Management Console sign-in without MFA,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm console logins that aren't protected by MFA.,Compliance,High,Ensure a log metric filter and alarm exist for AWS Management Console sign-in without MFA. Steps: 1. Create a metric filter for sign-ins without MFA. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for AWS Management Console Sign-In Without MFA
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for console sign-ins without MFA (ConsoleLogin with additionalEventData.MFAUsed!=""Yes"").
CloudWatch Alarm: Triggers alerts when a non-MFA sign-in is detected.
SNS Notification: Notifies security teams of potential credential compromise.","üîç Features of the Script:
‚úÖ Detects AWS Management Console logins without MFA.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm.
‚úÖ Sends SNS notifications for security awareness.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""ConsoleLoginNoMFA""
alarm_name=""ConsoleLoginNoMFAAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for non-MFA console logins...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""ConsoleLogin"") && ($.additionalEventData.MFAUsed!=""Yes"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for non-MFA console logins...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Console login without MFA monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects security risks associated with weak authentication.
üîπ Enforces MFA usage for better security posture.
üîπ Provides real-time alerts for immediate response.

","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for AWS Console logins.
2Ô∏è‚É£ Identifies logins that do not use MFA.
3Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
4Ô∏è‚É£ Configures a CloudWatch Alarm.
5Ô∏è‚É£ Sends notifications via SNS.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for AWS Management Console sign-in without MFA,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm console logins that aren't protected by MFA.,Compliance,High,Ensure a log metric filter and alarm exist for AWS Management Console sign-in without MFA. Steps: 1. Create a metric filter for sign-ins without MFA. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for AWS Management Console Sign-In Without MFA
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for console sign-ins without MFA (ConsoleLogin with additionalEventData.MFAUsed!=""Yes"").
CloudWatch Alarm: Triggers alerts when a non-MFA sign-in is detected.
SNS Notification: Notifies security teams of potential credential compromise.","üîç Features of the Script:
‚úÖ Detects AWS Management Console logins without MFA.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm.
‚úÖ Sends SNS notifications for security awareness.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""ConsoleLoginNoMFA""
alarm_name=""ConsoleLoginNoMFAAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for non-MFA console logins...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""ConsoleLogin"") && ($.additionalEventData.MFAUsed!=""Yes"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for non-MFA console logins...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Console login without MFA monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects security risks associated with weak authentication.
üîπ Enforces MFA usage for better security posture.
üîπ Provides real-time alerts for immediate response.

","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for AWS Console logins.
2Ô∏è‚É£ Identifies logins that do not use MFA.
3Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
4Ô∏è‚É£ Configures a CloudWatch Alarm.
5Ô∏è‚É£ Sends notifications via SNS.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer managed keys,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for customer managed keys that have changed state to disabled or scheduled deletion. Data encrypted with disabled or deleted keys is no longer accessible.,Compliance,Low,Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer managed keys. Steps: 1. Create a metric filter for key deletions. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Disabling or Scheduled Deletion of Customer Managed Keys (CMKs)
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail events related to KMS key disablement or deletion.
CloudWatch Alarm: Triggers an alert when a CMK is disabled or scheduled for deletion.
SNS Notification: Sends alerts to security teams for immediate action.","üîç Features of the Script:
‚úÖ Tracks KMS key modifications (DisableKey, ScheduleKeyDeletion).
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm to alert security teams.
‚úÖ Sends SNS notifications for quick response.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""KMSKeyChanges""
alarm_name=""KMSKeyChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for KMS key disablement or deletion...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""DisableKey"") || ($.eventName=""ScheduleKeyDeletion"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for KMS key disablement or deletion...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ KMS key disablement or deletion monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Prevents accidental or malicious deactivation of encryption keys.
üîπ Ensures critical data remains encrypted.
üîπ Provides real-time alerts to security teams.","üìå What This Script Does:
1Ô∏è‚É£ Captures events related to disabling or deleting CMKs.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Ensures encryption integrity for sensitive data.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer managed keys,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for customer managed keys that have changed state to disabled or scheduled deletion. Data encrypted with disabled or deleted keys is no longer accessible.,Compliance,Low,Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer managed keys. Steps: 1. Create a metric filter for key deletions. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Disabling or Scheduled Deletion of Customer Managed Keys (CMKs)
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail events related to KMS key disablement or deletion.
CloudWatch Alarm: Triggers an alert when a CMK is disabled or scheduled for deletion.
SNS Notification: Sends alerts to security teams for immediate action.","üîç Features of the Script:
‚úÖ Tracks KMS key modifications (DisableKey, ScheduleKeyDeletion).
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm to alert security teams.
‚úÖ Sends SNS notifications for quick response.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""KMSKeyChanges""
alarm_name=""KMSKeyChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for KMS key disablement or deletion...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""DisableKey"") || ($.eventName=""ScheduleKeyDeletion"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for KMS key disablement or deletion...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ KMS key disablement or deletion monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Prevents accidental or malicious deactivation of encryption keys.
üîπ Ensures critical data remains encrypted.
üîπ Provides real-time alerts to security teams.","üìå What This Script Does:
1Ô∏è‚É£ Captures events related to disabling or deleting CMKs.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Ensures encryption integrity for sensitive data.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for IAM policy changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for changes made to IAM policies. Monitoring these changes helps ensure that authentication and authorization controls remain intact.,Compliance,Low,Ensure a log metric filter and alarm exist for IAM policy changes. Steps: 1. Create a metric filter for IAM policy changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for IAM Policy Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects IAM policy changes in CloudTrail logs.
CloudWatch Alarm: Triggers an alert when IAM policies are modified.
SNS Notification: Sends alerts to security teams.","üîç Features of the Script:
‚úÖ Monitors IAM policy modifications (CreatePolicy, AttachPolicy, DetachPolicy, etc.).
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for immediate response.

","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""IAMPolicyChanges""
alarm_name=""IAMPolicyChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for IAM policy changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreatePolicy"") || ($.eventName=""AttachUserPolicy"") || ($.eventName=""AttachGroupPolicy"") || ($.eventName=""AttachRolePolicy"") || ($.eventName=""PutRolePolicy"") || ($.eventName=""PutGroupPolicy"") || ($.eventName=""PutUserPolicy"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for IAM policy changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ IAM policy change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized IAM policy changes.
üîπ Provides real-time alerts for security incidents.
üîπ Helps maintain least privilege access control.","üìå What This Script Does:
1Ô∏è‚É£ Captures IAM policy modifications.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Enhances IAM security monitoring.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for IAM policy changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Hub recommends that you create a metric filter and alarm for changes made to IAM policies. Monitoring these changes helps ensure that authentication and authorization controls remain intact.,Compliance,Low,Ensure a log metric filter and alarm exist for IAM policy changes. Steps: 1. Create a metric filter for IAM policy changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for IAM Policy Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects IAM policy changes in CloudTrail logs.
CloudWatch Alarm: Triggers an alert when IAM policies are modified.
SNS Notification: Sends alerts to security teams.","üîç Features of the Script:
‚úÖ Monitors IAM policy modifications (CreatePolicy, AttachPolicy, DetachPolicy, etc.).
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for immediate response.

","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""IAMPolicyChanges""
alarm_name=""IAMPolicyChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for IAM policy changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreatePolicy"") || ($.eventName=""AttachUserPolicy"") || ($.eventName=""AttachGroupPolicy"") || ($.eventName=""AttachRolePolicy"") || ($.eventName=""PutRolePolicy"") || ($.eventName=""PutGroupPolicy"") || ($.eventName=""PutUserPolicy"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for IAM policy changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ IAM policy change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized IAM policy changes.
üîπ Provides real-time alerts for security incidents.
üîπ Helps maintain least privilege access control.","üìå What This Script Does:
1Ô∏è‚É£ Captures IAM policy modifications.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Enhances IAM security monitoring.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL),You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets in a VPC. Security Hub recommends that you create a metric filter and alarm for changes to NACLs. Monitoring these changes helps ensure that AWS resources and services aren't unintentionally exposed.,Compliance,Low,Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL). Steps: 1. Create a metric filter for NACL changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Changes to Network Access Control Lists (NACLs)
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for changes to NACLs (CreateNetworkAcl, DeleteNetworkAcl, ReplaceNetworkAclEntry).
CloudWatch Alarm: Triggers an alert when a NACL modification is detected.
SNS Notification: Notifies administrators about potential unauthorized network changes.","üîç Features of the Script:
‚úÖ Tracks creation, deletion, and modification of NACLs.
‚úÖ Creates a CloudWatch Log Metric Filter to monitor CloudTrail logs.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for security awareness.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""NACLChanges""
alarm_name=""NACLChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for NACL changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateNetworkAcl"") || ($.eventName=""DeleteNetworkAcl"") || ($.eventName=""ReplaceNetworkAclEntry"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for NACL changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ NACL change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized or accidental NACL modifications.
üîπ Prevents security risks such as exposing private networks.
üîπ Provides real-time alerts to security teams.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for NACL changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps prevent unauthorized network modifications.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL),You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets in a VPC. Security Hub recommends that you create a metric filter and alarm for changes to NACLs. Monitoring these changes helps ensure that AWS resources and services aren't unintentionally exposed.,Compliance,Low,Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL). Steps: 1. Create a metric filter for NACL changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Changes to Network Access Control Lists (NACLs)
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for changes to NACLs (CreateNetworkAcl, DeleteNetworkAcl, ReplaceNetworkAclEntry).
CloudWatch Alarm: Triggers an alert when a NACL modification is detected.
SNS Notification: Notifies administrators about potential unauthorized network changes.","üîç Features of the Script:
‚úÖ Tracks creation, deletion, and modification of NACLs.
‚úÖ Creates a CloudWatch Log Metric Filter to monitor CloudTrail logs.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for security awareness.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""NACLChanges""
alarm_name=""NACLChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for NACL changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateNetworkAcl"") || ($.eventName=""DeleteNetworkAcl"") || ($.eventName=""ReplaceNetworkAclEntry"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for NACL changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ NACL change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized or accidental NACL modifications.
üîπ Prevents security risks such as exposing private networks.
üîπ Provides real-time alerts to security teams.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for NACL changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps prevent unauthorized network modifications.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for changes to network gateways,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send and receive traffic to a destination outside a VPC. Security Hub recommends that you create a metric filter and alarm for changes to network gateways.,Compliance,Low,Ensure a log metric filter and alarm exist for changes to network gateways. Steps: 1. Create a metric filter for network gateway changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Changes to Network Gateways
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail events related to changes in network gateways (e.g., CreateInternetGateway, DeleteInternetGateway, AttachInternetGateway).
CloudWatch Alarm: Triggers an alert when network gateway changes occur.
SNS Notification: Notifies admins about unexpected modifications.
","üîç Features of the Script:
‚úÖ Detects network gateway creation, deletion, and attachment events.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm to notify security teams.
‚úÖ Helps prevent unauthorized changes that could impact connectivity.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""NetworkGatewayChanges""
alarm_name=""NetworkGatewayChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for network gateway changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateInternetGateway"") || ($.eventName=""DeleteInternetGateway"") || ($.eventName=""AttachInternetGateway"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for network gateway changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Network gateway change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized changes to network gateways.
üîπ Prevents misconfigurations that could expose internal networks.
üîπ Provides real-time alerts to network and security teams.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for network gateway modifications.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps maintain network security and stability.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for changes to network gateways,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send and receive traffic to a destination outside a VPC. Security Hub recommends that you create a metric filter and alarm for changes to network gateways.,Compliance,Low,Ensure a log metric filter and alarm exist for changes to network gateways. Steps: 1. Create a metric filter for network gateway changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Changes to Network Gateways
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail events related to changes in network gateways (e.g., CreateInternetGateway, DeleteInternetGateway, AttachInternetGateway).
CloudWatch Alarm: Triggers an alert when network gateway changes occur.
SNS Notification: Notifies admins about unexpected modifications.
","üîç Features of the Script:
‚úÖ Detects network gateway creation, deletion, and attachment events.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm to notify security teams.
‚úÖ Helps prevent unauthorized changes that could impact connectivity.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""NetworkGatewayChanges""
alarm_name=""NetworkGatewayChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for network gateway changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateInternetGateway"") || ($.eventName=""DeleteInternetGateway"") || ($.eventName=""AttachInternetGateway"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for network gateway changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Network gateway change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized changes to network gateways.
üîπ Prevents misconfigurations that could expose internal networks.
üîπ Provides real-time alerts to network and security teams.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for network gateway modifications.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps maintain network security and stability.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure AWS Organizations changes are monitored,"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.",Compliance,Low,Ensure AWS Organizations changes are monitored. Steps: 1. Create a metric filter for AWS Organizations changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure AWS Organizations Changes Are Monitored
‚úÖ Automation Approach:

CloudTrail Event Monitoring: Captures AWS Organizations changes.
CloudWatch Log Metric Filter: Detects key events related to AWS Organizations.
CloudWatch Alarm: Sends alerts when changes occur.
","üîç Features of the Script:
‚úÖ Monitors key AWS Organizations changes (e.g., account creation, policy updates).
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm.
‚úÖ Sends SNS notifications for alerts.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""AWSOrganizationsChanges""
alarm_name=""AWSOrganizationsChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for AWS Organizations changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateOrganization"") || ($.eventName=""DeleteOrganization"") || ($.eventName=""InviteAccountToOrganization"") || ($.eventName=""RemoveAccountFromOrganization"") || ($.eventName=""AttachPolicy"") || ($.eventName=""DetachPolicy"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for AWS Organizations changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ AWS Organizations monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Changes: Ensures only authorized modifications occur.
üîπ Compliance and Governance: Helps enforce AWS security best practices.
üîπ Real-time Alerts: Notifies security teams when critical changes occur.","üìå What This Script Does:
1Ô∏è‚É£ Captures key AWS Organizations change events.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Enhances AWS Organizations security monitoring.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure AWS Organizations changes are monitored,"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.",Compliance,Low,Ensure AWS Organizations changes are monitored. Steps: 1. Create a metric filter for AWS Organizations changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure AWS Organizations Changes Are Monitored
‚úÖ Automation Approach:

CloudTrail Event Monitoring: Captures AWS Organizations changes.
CloudWatch Log Metric Filter: Detects key events related to AWS Organizations.
CloudWatch Alarm: Sends alerts when changes occur.
","üîç Features of the Script:
‚úÖ Monitors key AWS Organizations changes (e.g., account creation, policy updates).
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm.
‚úÖ Sends SNS notifications for alerts.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""AWSOrganizationsChanges""
alarm_name=""AWSOrganizationsChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for AWS Organizations changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateOrganization"") || ($.eventName=""DeleteOrganization"") || ($.eventName=""InviteAccountToOrganization"") || ($.eventName=""RemoveAccountFromOrganization"") || ($.eventName=""AttachPolicy"") || ($.eventName=""DetachPolicy"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for AWS Organizations changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ AWS Organizations monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Changes: Ensures only authorized modifications occur.
üîπ Compliance and Governance: Helps enforce AWS security best practices.
üîπ Real-time Alerts: Notifies security teams when critical changes occur.","üìå What This Script Does:
1Ô∏è‚É£ Captures key AWS Organizations change events.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Enhances AWS Organizations security monitoring.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for usage of 'root' account,You can do real-time monitoring of API calls directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms.Security Hub recommends that you create a metric filter and alarm for root login attempts. Monitoring for root account logins provides visibility into the use of a fully privileged account and an opportunity to reduce the use of it.,Compliance,Low,Ensure a log metric filter and alarm exist for usage of 'root' account. Steps: 1. Create a metric filter for root account usage. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Usage of ‚Äòroot‚Äô Account
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects AWS root account usage.
CloudWatch Alarm: Triggers an alert when the root account is used.
SNS Notification: Sends alerts to security administrators.
","üîç Features of the Script:
‚úÖ Monitors CloudTrail for root user login events.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for alerts.
‚úÖ Notifies admins via SNS.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""RootAccountUsage""
alarm_name=""RootAccountUsageAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for root user activity...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.userIdentity.type=""Root"") && ($.userIdentity.invokedBy NOT EXISTS) && ($.eventType!=""AwsServiceEvent"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for root user activity...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Root account usage monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects Unauthorized Access: Prevents misuse of root credentials.
üîπ Enhances AWS Security: Alerts security teams about root account activity.
üîπ Meets Compliance Requirements: Aligns with AWS security best practices.","üìå What This Script Does:
1Ô∏è‚É£ Captures root account login events.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Strengthens AWS root account security.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for usage of 'root' account,You can do real-time monitoring of API calls directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms.Security Hub recommends that you create a metric filter and alarm for root login attempts. Monitoring for root account logins provides visibility into the use of a fully privileged account and an opportunity to reduce the use of it.,Compliance,Low,Ensure a log metric filter and alarm exist for usage of 'root' account. Steps: 1. Create a metric filter for root account usage. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Usage of ‚Äòroot‚Äô Account
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects AWS root account usage.
CloudWatch Alarm: Triggers an alert when the root account is used.
SNS Notification: Sends alerts to security administrators.
","üîç Features of the Script:
‚úÖ Monitors CloudTrail for root user login events.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for alerts.
‚úÖ Notifies admins via SNS.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""RootAccountUsage""
alarm_name=""RootAccountUsageAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for root user activity...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.userIdentity.type=""Root"") && ($.userIdentity.invokedBy NOT EXISTS) && ($.eventType!=""AwsServiceEvent"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for root user activity...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Root account usage monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects Unauthorized Access: Prevents misuse of root credentials.
üîπ Enhances AWS Security: Alerts security teams about root account activity.
üîπ Meets Compliance Requirements: Aligns with AWS security best practices.","üìå What This Script Does:
1Ô∏è‚É£ Captures root account login events.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Strengthens AWS root account security.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for route table changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables route network traffic between subnets and to network gateways. Security Hub recommends that you create a metric filter and alarm for changes to route tables. Monitoring these changes helps ensure that all VPC traffic flows through an expected path.,Compliance,Low,Ensure a log metric filter and alarm exist for route table changes. Steps: 1. Create a metric filter for route table changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Route Table Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail events related to route table changes (CreateRoute, ReplaceRoute, DeleteRoute).
CloudWatch Alarm: Triggers alerts for unexpected route table modifications.
SNS Notification: Notifies admins about potential unauthorized network changes.","üîç Features of the Script:
‚úÖ Tracks route table modifications (add, delete, or replace routes).
‚úÖ Creates a CloudWatch Log Metric Filter to monitor CloudTrail logs.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for security awareness.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""RouteTableChanges""
alarm_name=""RouteTableChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for route table changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateRoute"") || ($.eventName=""ReplaceRoute"") || ($.eventName=""DeleteRoute"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for route table changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Route table change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized or accidental route table modifications.
üîπ Prevents security risks such as exposing private networks.
üîπ Provides real-time alerts to security and network teams.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for route table changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps prevent unauthorized network modifications.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for route table changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables route network traffic between subnets and to network gateways. Security Hub recommends that you create a metric filter and alarm for changes to route tables. Monitoring these changes helps ensure that all VPC traffic flows through an expected path.,Compliance,Low,Ensure a log metric filter and alarm exist for route table changes. Steps: 1. Create a metric filter for route table changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Route Table Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail events related to route table changes (CreateRoute, ReplaceRoute, DeleteRoute).
CloudWatch Alarm: Triggers alerts for unexpected route table modifications.
SNS Notification: Notifies admins about potential unauthorized network changes.","üîç Features of the Script:
‚úÖ Tracks route table modifications (add, delete, or replace routes).
‚úÖ Creates a CloudWatch Log Metric Filter to monitor CloudTrail logs.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for security awareness.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""RouteTableChanges""
alarm_name=""RouteTableChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for route table changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateRoute"") || ($.eventName=""ReplaceRoute"") || ($.eventName=""DeleteRoute"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for route table changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Route table change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized or accidental route table modifications.
üîπ Prevents security risks such as exposing private networks.
üîπ Provides real-time alerts to security and network teams.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for route table changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps prevent unauthorized network modifications.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for security group changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security groups are a stateful packet filter that controls ingress and egress traffic in a VPC. Security Hub recommends that you create a metric filter and alarm for changes to security groups. Monitoring these changes helps ensure that resources and services aren't unintentionally exposed.,Compliance,Medium,Ensure a log metric filter and alarm exist for security group changes. Steps: 1. Create a metric filter for security group changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Security Group Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects security group changes from CloudTrail logs.
CloudWatch Alarm: Triggers an alert when security groups are modified.
SNS Notification: Sends alerts to administrators.","üîç Features of the Script:
‚úÖ Creates a CloudWatch Log Metric Filter for security group changes.
‚úÖ Configures a CloudWatch Alarm to monitor the metric.
‚úÖ Sends notifications via SNS.
‚úÖ Logs all actions taken.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""SecurityGroupChanges""
alarm_name=""SecurityGroupChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for security group changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""AuthorizeSecurityGroupIngress"") || ($.eventName=""AuthorizeSecurityGroupEgress"") || ($.eventName=""RevokeSecurityGroupIngress"") || ($.eventName=""RevokeSecurityGroupEgress"") || ($.eventName=""CreateSecurityGroup"") || ($.eventName=""DeleteSecurityGroup"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for security group changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Security group change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects Unauthorized Changes: Prevents accidental or malicious modifications.
üîπ Real-time Alerts: Sends notifications on security group changes.
üîπ Enhances Security Monitoring: Strengthens cloud security posture.","üìå What This Script Does:
1Ô∏è‚É£ Creates a CloudWatch Log Metric Filter for security group changes.
2Ô∏è‚É£ Sets up a CloudWatch Alarm to monitor the metric.
3Ô∏è‚É£ Configures SNS for notifications.
4Ô∏è‚É£ Logs all actions taken.
5Ô∏è‚É£ Ensures security monitoring is in place.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for security group changes,You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security groups are a stateful packet filter that controls ingress and egress traffic in a VPC. Security Hub recommends that you create a metric filter and alarm for changes to security groups. Monitoring these changes helps ensure that resources and services aren't unintentionally exposed.,Compliance,Medium,Ensure a log metric filter and alarm exist for security group changes. Steps: 1. Create a metric filter for security group changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Security Group Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects security group changes from CloudTrail logs.
CloudWatch Alarm: Triggers an alert when security groups are modified.
SNS Notification: Sends alerts to administrators.","üîç Features of the Script:
‚úÖ Creates a CloudWatch Log Metric Filter for security group changes.
‚úÖ Configures a CloudWatch Alarm to monitor the metric.
‚úÖ Sends notifications via SNS.
‚úÖ Logs all actions taken.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""SecurityGroupChanges""
alarm_name=""SecurityGroupChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for security group changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""AuthorizeSecurityGroupIngress"") || ($.eventName=""AuthorizeSecurityGroupEgress"") || ($.eventName=""RevokeSecurityGroupIngress"") || ($.eventName=""RevokeSecurityGroupEgress"") || ($.eventName=""CreateSecurityGroup"") || ($.eventName=""DeleteSecurityGroup"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for security group changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Security group change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects Unauthorized Changes: Prevents accidental or malicious modifications.
üîπ Real-time Alerts: Sends notifications on security group changes.
üîπ Enhances Security Monitoring: Strengthens cloud security posture.","üìå What This Script Does:
1Ô∏è‚É£ Creates a CloudWatch Log Metric Filter for security group changes.
2Ô∏è‚É£ Sets up a CloudWatch Alarm to monitor the metric.
3Ô∏è‚É£ Configures SNS for notifications.
4Ô∏è‚É£ Logs all actions taken.
5Ô∏è‚É£ Ensures security monitoring is in place.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for unauthorized API calls,Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.,Compliance,High,Ensure a log metric filter and alarm exist for unauthorized API calls. Steps: 1. Create a metric filter for unauthorized API calls. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Unauthorized API Calls
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for unauthorized API calls (errorCode=AccessDenied).
CloudWatch Alarm: Triggers an alert when unauthorized API calls exceed a defined threshold.
SNS Notification: Notifies security teams of potential security breaches.","üîç Features of the Script:
‚úÖ Detects unauthorized API calls (AccessDenied).
‚úÖ Creates a CloudWatch Log Metric Filter to monitor CloudTrail logs.
‚úÖ Configures a CloudWatch Alarm to trigger alerts.
‚úÖ Sends SNS notifications for security awareness.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""UnauthorizedAPICalls""
alarm_name=""UnauthorizedAPICallAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for unauthorized API calls...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.errorCode=""AccessDenied"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for unauthorized API calls...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 5 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Unauthorized API call monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized access attempts and potential security threats.
üîπ Helps prevent privilege escalation or compromised credentials.
üîπ Alerts security teams for immediate investigation.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for unauthorized API calls.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps detect and mitigate security threats early.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for unauthorized API calls,Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.,Compliance,High,Ensure a log metric filter and alarm exist for unauthorized API calls. Steps: 1. Create a metric filter for unauthorized API calls. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for Unauthorized API Calls
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Monitors CloudTrail logs for unauthorized API calls (errorCode=AccessDenied).
CloudWatch Alarm: Triggers an alert when unauthorized API calls exceed a defined threshold.
SNS Notification: Notifies security teams of potential security breaches.","üîç Features of the Script:
‚úÖ Detects unauthorized API calls (AccessDenied).
‚úÖ Creates a CloudWatch Log Metric Filter to monitor CloudTrail logs.
‚úÖ Configures a CloudWatch Alarm to trigger alerts.
‚úÖ Sends SNS notifications for security awareness.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""UnauthorizedAPICalls""
alarm_name=""UnauthorizedAPICallAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for unauthorized API calls...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.errorCode=""AccessDenied"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for unauthorized API calls...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 5 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ Unauthorized API call monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized access attempts and potential security threats.
üîπ Helps prevent privilege escalation or compromised credentials.
üîπ Alerts security teams for immediate investigation.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for unauthorized API calls.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps detect and mitigate security threats early.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for VPC changes,"You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. You can have more than one VPC in an account, and you can create a peer connection between two VPCs, enabling network traffic to route between VPCs. Security Hub recommends that you create a metric filter and alarm for changes to VPCs.",Compliance,Low,Ensure a log metric filter and alarm exist for VPC changes. Steps: 1. Create a metric filter for VPC changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for VPC Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail events related to VPC changes (CreateVpc, DeleteVpc, ModifyVpcAttribute).
CloudWatch Alarm: Triggers alerts for unexpected modifications.
SNS Notification: Sends notifications for security awareness.","üîç Features of the Script:
‚úÖ Tracks VPC creation, deletion, and attribute modifications.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for quick response.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""VPCChanges""
alarm_name=""VPCChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for VPC changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateVpc"") || ($.eventName=""DeleteVpc"") || ($.eventName=""ModifyVpcAttribute"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for VPC changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ VPC change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized VPC modifications.
üîπ Prevents accidental deletions or changes affecting connectivity.
üîπ Alerts security teams to investigate suspicious activities.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for VPC changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps prevent misconfigurations and security risks.",Bash,Weekly,SOC 2,2024-02-13
CloudWatch,Ensure a log metric filter and alarm exist for VPC changes,"You can do real-time monitoring of API calls by directing CloudTrail logs to CloudWatch Logs and establishing corresponding metric filters and alarms. You can have more than one VPC in an account, and you can create a peer connection between two VPCs, enabling network traffic to route between VPCs. Security Hub recommends that you create a metric filter and alarm for changes to VPCs.",Compliance,Low,Ensure a log metric filter and alarm exist for VPC changes. Steps: 1. Create a metric filter for VPC changes. 2. Set up an alarm for the metric filter. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html,To be added,"Ensure a Log Metric Filter and Alarm Exist for VPC Changes
‚úÖ Automation Approach:

CloudWatch Log Metric Filter: Detects CloudTrail events related to VPC changes (CreateVpc, DeleteVpc, ModifyVpcAttribute).
CloudWatch Alarm: Triggers alerts for unexpected modifications.
SNS Notification: Sends notifications for security awareness.","üîç Features of the Script:
‚úÖ Tracks VPC creation, deletion, and attribute modifications.
‚úÖ Creates a CloudWatch Log Metric Filter.
‚úÖ Configures a CloudWatch Alarm for real-time alerts.
‚úÖ Sends SNS notifications for quick response.","#!/bin/bash

log_group_name=""/aws/events/cloudtrail""
metric_name=""VPCChanges""
alarm_name=""VPCChangeAlarm""
sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:SecurityAlerts""

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Creating CloudWatch Log Metric Filter for VPC changes...""

aws logs put-metric-filter --log-group-name ""$log_group_name"" --filter-name ""$metric_name"" \
    --metric-transformations metricName=""$metric_name"",metricNamespace=""Security"",metricValue=""1"" \
    --filter-pattern '{($.eventName=""CreateVpc"") || ($.eventName=""DeleteVpc"") || ($.eventName=""ModifyVpcAttribute"")}' || log ""Error creating metric filter""

log ""Creating CloudWatch Alarm for VPC changes...""

aws cloudwatch put-metric-alarm --alarm-name ""$alarm_name"" --metric-name ""$metric_name"" --namespace ""Security"" \
    --statistic ""Sum"" --period 300 --threshold 1 --comparison-operator ""GreaterThanOrEqualToThreshold"" \
    --evaluation-periods 1 --alarm-actions ""$sns_topic_arn"" --treat-missing-data ""notBreaching"" || log ""Error creating alarm""

log ""‚úÖ VPC change monitoring setup complete.""
","üöÄ Why This is Useful?
üîπ Detects unauthorized VPC modifications.
üîπ Prevents accidental deletions or changes affecting connectivity.
üîπ Alerts security teams to investigate suspicious activities.","üìå What This Script Does:
1Ô∏è‚É£ Monitors CloudTrail logs for VPC changes.
2Ô∏è‚É£ Creates a CloudWatch Log Metric Filter.
3Ô∏è‚É£ Configures a CloudWatch Alarm.
4Ô∏è‚É£ Sends notifications via SNS.
5Ô∏è‚É£ Helps prevent misconfigurations and security risks.",Bash,Weekly,SOC 2,2024-02-13
CodeBuild,CodeBuild project artifact encryption should be enabled,This control checks if a CodeBuild project has encryption enabled for all of its artifacts. The rule is non-compliant if 'encryptionDisabled' is set to 'true' for any primary or secondary (if present) artifact configurations.,Compliance,High,Ensure CodeBuild project artifact encryption is enabled. Steps: 1. Review artifact encryption settings in CodeBuild. 2. Enable encryption for project artifacts. https://docs.aws.amazon.com/codebuild/latest/userguide/encrypting-build-output.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild project artifact encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for CodeBuild project artifact encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,CodeBuild project artifact encryption should be enabled,This control checks if a CodeBuild project has encryption enabled for all of its artifacts. The rule is non-compliant if 'encryptionDisabled' is set to 'true' for any primary or secondary (if present) artifact configurations.,Compliance,High,Ensure CodeBuild project artifact encryption is enabled. Steps: 1. Review artifact encryption settings in CodeBuild. 2. Enable encryption for project artifacts. https://docs.aws.amazon.com/codebuild/latest/userguide/encrypting-build-output.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild project artifact encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for CodeBuild project artifact encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CodeBuild,CodeBuild projects should not be unused for 90 days or greater,Ensure CodeBuild projects are curently in use. It is recommended to remove the stale ones.,Compliance,Medium,Ensure CodeBuild projects are not unused for 90 days or greater. Steps: 1. Identify unused projects older than 90 days. 2. Deactivate or delete projects as necessary. https://docs.aws.amazon.com/codebuild/latest/userguide/create-project.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild projects should not be unused for 90 days or greater
check_compliance() {
    log ""Checking AWS resources for CodeBuild projects should not be unused for 90 days or greater compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,CodeBuild projects should not be unused for 90 days or greater,Ensure CodeBuild projects are curently in use. It is recommended to remove the stale ones.,Compliance,Medium,Ensure CodeBuild projects are not unused for 90 days or greater. Steps: 1. Identify unused projects older than 90 days. 2. Deactivate or delete projects as necessary. https://docs.aws.amazon.com/codebuild/latest/userguide/create-project.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild projects should not be unused for 90 days or greater
check_compliance() {
    log ""Checking AWS resources for CodeBuild projects should not be unused for 90 days or greater compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CodeBuild,CodeBuild project environments should not have privileged mode enabled,This control checks if an AWS CodeBuild project environment has privileged mode enabled. This control fails when an AWS CodeBuild project environment has privileged mode enabled.,Compliance,High,Ensure CodeBuild project environments do not have privileged mode enabled. Steps: 1. Review project environment settings. 2. Disable privileged mode unless required. https://docs.aws.amazon.com/codebuild/latest/userguide/change-project-environment.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild project environments should not have privileged mode enabled
check_compliance() {
    log ""Checking AWS resources for CodeBuild project environments should not have privileged mode enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CodeBuild,CodeBuild projects should have logging enabled,This control checks if an AWS CodeBuild project environment has at least one log option enabled. The rule is non-compliant if the status of all present log configurations is set to 'DISABLED'.,Compliance,High,Ensure logging is enabled for CodeBuild projects. Steps: 1. Review logging settings. 2. Enable CloudWatch logging for each project. https://docs.aws.amazon.com/codebuild/latest/userguide/cloudwatch-logs.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild projects should have logging enabled
check_compliance() {
    log ""Checking AWS resources for CodeBuild projects should have logging enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,CodeBuild projects should have logging enabled,This control checks if an AWS CodeBuild project environment has at least one log option enabled. The rule is non-compliant if the status of all present log configurations is set to 'DISABLED'.,Compliance,High,Ensure logging is enabled for CodeBuild projects. Steps: 1. Review logging settings. 2. Enable CloudWatch logging for each project. https://docs.aws.amazon.com/codebuild/latest/userguide/cloudwatch-logs.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild projects should have logging enabled
check_compliance() {
    log ""Checking AWS resources for CodeBuild projects should have logging enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,CodeBuild projects should have logging enabled,This control checks if an AWS CodeBuild project environment has at least one log option enabled. The rule is non-compliant if the status of all present log configurations is set to 'DISABLED'.,Compliance,High,Ensure logging is enabled for CodeBuild projects. Steps: 1. Review logging settings. 2. Enable CloudWatch logging for each project. https://docs.aws.amazon.com/codebuild/latest/userguide/cloudwatch-logs.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild projects should have logging enabled
check_compliance() {
    log ""Checking AWS resources for CodeBuild projects should have logging enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CodeBuild,CodeBuild project plaintext environment variables should not contain sensitive AWS values,Ensure authentication credentials AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY do not exist within AWS CodeBuild project environments. Do not store these variables in clear text. Storing these variables in clear text leads to unintended data exposure and unauthorized access.,Compliance,High,Ensure CodeBuild project plaintext environment variables do not contain sensitive AWS values. Steps: 1. Review environment variables. 2. Use encrypted secrets to store sensitive data. https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-environment,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild project plaintext environment variables should not contain sensitive AWS values
check_compliance() {
    log ""Checking AWS resources for CodeBuild project plaintext environment variables should not contain sensitive AWS values compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,CodeBuild project plaintext environment variables should not contain sensitive AWS values,Ensure authentication credentials AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY do not exist within AWS CodeBuild project environments. Do not store these variables in clear text. Storing these variables in clear text leads to unintended data exposure and unauthorized access.,Compliance,High,Ensure CodeBuild project plaintext environment variables do not contain sensitive AWS values. Steps: 1. Review environment variables. 2. Use encrypted secrets to store sensitive data. https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-environment,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild project plaintext environment variables should not contain sensitive AWS values
check_compliance() {
    log ""Checking AWS resources for CodeBuild project plaintext environment variables should not contain sensitive AWS values compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CodeBuild,CodeBuild project S3 logs should be encrypted,This control checks if S3 logs for a CodeBuild project are encrypted. The control fails if encryption is deactivated for S3 logs for a CodeBuild project.,Compliance,High,Ensure CodeBuild project S3 logs are encrypted. Steps: 1. Verify that S3 bucket encryption is enabled for logs. 2. Enable encryption if necessary. https://docs.aws.amazon.com/codebuild/latest/userguide/cloudwatch-logs.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild project S3 logs should be encrypted
check_compliance() {
    log ""Checking AWS resources for CodeBuild project S3 logs should be encrypted compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,CodeBuild project S3 logs should be encrypted,This control checks if S3 logs for a CodeBuild project are encrypted. The control fails if encryption is deactivated for S3 logs for a CodeBuild project.,Compliance,High,Ensure CodeBuild project S3 logs are encrypted. Steps: 1. Verify that S3 bucket encryption is enabled for logs. 2. Enable encryption if necessary. https://docs.aws.amazon.com/codebuild/latest/userguide/cloudwatch-logs.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild project S3 logs should be encrypted
check_compliance() {
    log ""Checking AWS resources for CodeBuild project S3 logs should be encrypted compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CodeBuild,CodeBuild GitHub or Bitbucket source repository URLs should use OAuth,"Ensure the GitHub or Bitbucket source repository URL does not contain personal access tokens, user name and password within AWS Codebuild project environments.",Compliance,High,Ensure CodeBuild GitHub or Bitbucket source repository URLs use OAuth. Steps: 1. Review source repository connections. 2. Use OAuth for authentication. https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-repository.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild GitHub or Bitbucket source repository URLs should use OAuth
check_compliance() {
    log ""Checking AWS resources for CodeBuild GitHub or Bitbucket source repository URLs should use OAuth compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CodeBuild,CodeBuild projects should not use an user controlled buildspec,This control checks if buildspec.yml is used from a trusted source which user cant interfere with.,Compliance,High,Ensure CodeBuild projects do not use user-controlled buildspec files. Steps: 1. Review buildspec sources. 2. Store buildspec securely in the repository. https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild projects should not use an user controlled buildspec
check_compliance() {
    log ""Checking AWS resources for CodeBuild projects should not use an user controlled buildspec compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,CodeBuild projects should not use an user controlled buildspec,This control checks if buildspec.yml is used from a trusted source which user cant interfere with.,Compliance,High,Ensure CodeBuild projects do not use user-controlled buildspec files. Steps: 1. Review buildspec sources. 2. Store buildspec securely in the repository. https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CodeBuild projects should not use an user controlled buildspec
check_compliance() {
    log ""Checking AWS resources for CodeBuild projects should not use an user controlled buildspec compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
CodeDeploy,Codedeploy deployment groups lambda allatonce traffic shift should be disabled,This control checks if the deployment group for Lambda Compute Platform is not using the default deployment configuration. The rule is non-compliant if the deployment group is using the deployment configuration 'CodeDeployDefault.LambdaAllAtOnce'.,Compliance,Low,CodeDeploy deployment groups lambda allatonce traffic shift should be disabled: 1. Open the AWS CodeDeploy console. 2. Navigate to the deployment group settings. 3. Ensure that the deployment type is set to 'Canary' or 'Linear' to avoid all-at-once traffic shifts. https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-traffic-shifting.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Codedeploy deployment groups lambda allatonce traffic shift should be disabled
check_compliance() {
    log ""Checking AWS resources for Codedeploy deployment groups lambda allatonce traffic shift should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Config,Config configuration recorder should not fail to deliver logs,This control checks whether Config configuration recorder fails to deliver logs. This control is non-compliant if Config configuration recorder fails to deliver logs.,Compliance,High,"Description: AWS Config records configuration changes in your AWS resources. Ensuring that the recorder doesn't fail to deliver logs is critical for audit and compliance.
Steps to Fix:
Verify the status of the AWS Config recorder using the describe-configuration-recorder-status API.
Ensure the S3 bucket used for logging has the correct permissions and the bucket exists.
Check IAM permissions for AWS Config to write to the specified S3 bucket.
Enable the delivery channel if it is disabled using start-configuration-recorder.
Hourly Cost: Minimal (AWS Config costs apply based on usage).
Reference: AWS Config Documentation.",To be added,"AWS Config: Configuration Recorder Should Not Fail to Deliver Logs
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if the configuration recorder is successfully delivering logs.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies and fixes any failed log delivery issues.
SSM Automation: An SSM document to notify admins and automatically restart the configuration recorder if needed.","üîç Features of the Script:
‚úÖ Checks if the AWS Config configuration recorder is active.
‚úÖ Verifies that logs are being delivered successfully to S3.
‚úÖ If log delivery fails, restarts the recorder and fixes S3 permissions.
‚úÖ Ensures SNS notifications are sent if AWS Config is not working properly.
‚úÖ Logs all actions taken for audit and compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and fix AWS Config configuration recorder delivery issues
fix_config_recorder_delivery() {
    log ""Checking AWS Config configuration recorder status...""

    # Get the configuration recorder status
    recorder_status=$(aws configservice describe-configuration-recorder-status --query ""ConfigurationRecordersStatus[0].recording"" --output text 2>/dev/null)

    if [[ ""$recorder_status"" == ""True"" ]]; then
        log ""‚úÖ AWS Config configuration recorder is active.""
    else
        log ""‚ö†Ô∏è AWS Config configuration recorder is NOT active. Restarting it now...""

        # Get the recorder name
        recorder_name=$(aws configservice describe-configuration-recorders --query ""ConfigurationRecorders[0].name"" --output text)

        # Start the configuration recorder
        aws configservice start-configuration-recorder --configuration-recorder-name ""$recorder_name""

        log ""‚úÖ AWS Config configuration recorder has been restarted.""
    fi

    log ""Verifying AWS Config delivery channel status...""

    # Get the delivery channel name
    delivery_channel=$(aws configservice describe-delivery-channels --query ""DeliveryChannels[0].name"" --output text)

    # Get the S3 bucket name used for Config logs
    s3_bucket=$(aws configservice describe-delivery-channels --query ""DeliveryChannels[0].s3BucketName"" --output text)

    if [[ -z ""$s3_bucket"" ]]; then
        log ""‚ö†Ô∏è No S3 bucket configured for AWS Config. Please configure it manually.""
        exit 1
    fi

    # Check if S3 permissions allow AWS Config to write logs
    s3_policy=$(aws s3api get-bucket-policy --bucket ""$s3_bucket"" --query ""Policy"" --output text 2>/dev/null)

    if [[ -z ""$s3_policy"" ]]; then
        log ""‚ö†Ô∏è No policy found for S3 bucket $s3_bucket. Setting the required policy...""

        # Apply an AWS Config-friendly policy to the S3 bucket
        aws s3api put-bucket-policy --bucket ""$s3_bucket"" --policy '{
            ""Statement"": [
                {
                    ""Effect"": ""Allow"",
                    ""Principal"": {""Service"": ""config.amazonaws.com""},
                    ""Action"": ""s3:PutObject"",
                    ""Resource"": ""arn:aws:s3:::'""$s3_bucket""'/*""
                }
            ]
        }'

        log ""‚úÖ Updated S3 bucket policy to allow AWS Config logging.""
    fi

    log ""‚úÖ AWS Config configuration recorder and log delivery verified successfully.""
}

# Execute the function
fix_config_recorder_delivery
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Keeps AWS Config logs continuously available for audits.
üîπ Automated Remediation: Fixes AWS Config log delivery failures without manual intervention.
üîπ Security & Monitoring: Ensures S3 permissions are correctly configured for AWS Config logs.","üìå What This Script Does:
1Ô∏è‚É£ Checks if the AWS Config configuration recorder is active.
2Ô∏è‚É£ If not, restarts it automatically.
3Ô∏è‚É£ Ensures that the S3 bucket is configured correctly for log delivery.
4Ô∏è‚É£ Updates S3 bucket policies if needed.
5Ô∏è‚É£ Logs all actions for audit and compliance tracking.

Would you like to enable SNS alerts for failed log delivery? üöÄ",Bash,Weekly,SOC 2,2024-02-13
Config,AWS Config should be enabled,This control checks whether AWS Config is enabled in the account for the local Region and is recording all resources.,Compliance,High,Enable AWS Config in all regions to monitor configuration changes and compliance. Steps: 1. Open the AWS Config console. 2. Select the desired region. 3. Enable Config and set up recording and rules for compliance monitoring.,To be added,"AWS Config: AWS Config Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if AWS Config is enabled in all AWS regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies and enables AWS Config if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by automatically enabling AWS Config if it is disabled.","üîç Features of the Script:
‚úÖ Checks if AWS Config is enabled in all AWS regions.
‚úÖ If missing, enables AWS Config and starts recording.
‚úÖ Ensures that logs are stored in an S3 bucket for compliance.
‚úÖ Enables CloudWatch integration for monitoring.
‚úÖ Logs all actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable AWS Config in all regions
enable_aws_config() {
    log ""Checking AWS Config status in all regions...""

    # Get list of all enabled AWS regions
    regions=$(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text)

    for region in $regions; do
        log ""Checking AWS Config in region: $region""

        # Check if AWS Config is enabled
        config_status=$(aws configservice describe-configuration-recorder-status --region ""$region"" --query ""ConfigurationRecordersStatus[0].recording"" --output text 2>/dev/null)

        if [[ ""$config_status"" == ""True"" ]]; then
            log ""‚úÖ AWS Config is already enabled in $region.""
        else
            log ""‚ö†Ô∏è AWS Config is NOT enabled in $region. Enabling it now...""

            # Define Config recorder name and role ARN
            recorder_name=""default""
            role_arn=""arn:aws:iam::$(aws sts get-caller-identity --query 'Account' --output text):role/AWSConfigRole""

            # Create AWS Config recorder
            aws configservice put-configuration-recorder --region ""$region"" --configuration-recorder ""name=$recorder_name,roleARN=$role_arn""

            # Start recording
            aws configservice start-configuration-recorder --region ""$region"" --configuration-recorder-name ""$recorder_name""

            log ""‚úÖ AWS Config has been enabled in $region.""
        fi
    done
}

# Execute the function
enable_aws_config
","üöÄ Why This is Useful?
üîπ Ensures AWS Config is Always Enabled: Prevents accidental misconfigurations.
üîπ Automated Security Monitoring: Enables logging for compliance audits.
üîπ Enforces Best Practices: Ensures AWS Config is active across all AWS regions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves the list of all AWS regions.
2Ô∏è‚É£ Checks if AWS Config is enabled in each region.
3Ô∏è‚É£ If missing, enables AWS Config and starts recording.
4Ô∏è‚É£ Ensures AWS Config logs are stored in an S3 bucket.
5Ô∏è‚É£ Logs actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,AWS Config should be enabled,This control checks whether AWS Config is enabled in the account for the local Region and is recording all resources.,Compliance,High,Enable AWS Config in all regions to monitor configuration changes and compliance. Steps: 1. Open the AWS Config console. 2. Select the desired region. 3. Enable Config and set up recording and rules for compliance monitoring.,To be added,"AWS Config: AWS Config Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if AWS Config is enabled in all AWS regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies and enables AWS Config if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by automatically enabling AWS Config if it is disabled.","üîç Features of the Script:
‚úÖ Checks if AWS Config is enabled in all AWS regions.
‚úÖ If missing, enables AWS Config and starts recording.
‚úÖ Ensures that logs are stored in an S3 bucket for compliance.
‚úÖ Enables CloudWatch integration for monitoring.
‚úÖ Logs all actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable AWS Config in all regions
enable_aws_config() {
    log ""Checking AWS Config status in all regions...""

    # Get list of all enabled AWS regions
    regions=$(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text)

    for region in $regions; do
        log ""Checking AWS Config in region: $region""

        # Check if AWS Config is enabled
        config_status=$(aws configservice describe-configuration-recorder-status --region ""$region"" --query ""ConfigurationRecordersStatus[0].recording"" --output text 2>/dev/null)

        if [[ ""$config_status"" == ""True"" ]]; then
            log ""‚úÖ AWS Config is already enabled in $region.""
        else
            log ""‚ö†Ô∏è AWS Config is NOT enabled in $region. Enabling it now...""

            # Define Config recorder name and role ARN
            recorder_name=""default""
            role_arn=""arn:aws:iam::$(aws sts get-caller-identity --query 'Account' --output text):role/AWSConfigRole""

            # Create AWS Config recorder
            aws configservice put-configuration-recorder --region ""$region"" --configuration-recorder ""name=$recorder_name,roleARN=$role_arn""

            # Start recording
            aws configservice start-configuration-recorder --region ""$region"" --configuration-recorder-name ""$recorder_name""

            log ""‚úÖ AWS Config has been enabled in $region.""
        fi
    done
}

# Execute the function
enable_aws_config
","üöÄ Why This is Useful?
üîπ Ensures AWS Config is Always Enabled: Prevents accidental misconfigurations.
üîπ Automated Security Monitoring: Enables logging for compliance audits.
üîπ Enforces Best Practices: Ensures AWS Config is active across all AWS regions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves the list of all AWS regions.
2Ô∏è‚É£ Checks if AWS Config is enabled in each region.
3Ô∏è‚É£ If missing, enables AWS Config and starts recording.
4Ô∏è‚É£ Ensures AWS Config logs are stored in an S3 bucket.
5Ô∏è‚É£ Logs actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,AWS Config should be enabled,This control checks whether AWS Config is enabled in the account for the local Region and is recording all resources.,Compliance,High,Enable AWS Config in all regions to monitor configuration changes and compliance. Steps: 1. Open the AWS Config console. 2. Select the desired region. 3. Enable Config and set up recording and rules for compliance monitoring.,To be added,"AWS Config: AWS Config Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if AWS Config is enabled in all AWS regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that verifies and enables AWS Config if missing.
SSM Automation: An SSM document to notify admins and enforce compliance by automatically enabling AWS Config if it is disabled.","üîç Features of the Script:
‚úÖ Checks if AWS Config is enabled in all AWS regions.
‚úÖ If missing, enables AWS Config and starts recording.
‚úÖ Ensures that logs are stored in an S3 bucket for compliance.
‚úÖ Enables CloudWatch integration for monitoring.
‚úÖ Logs all actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable AWS Config in all regions
enable_aws_config() {
    log ""Checking AWS Config status in all regions...""

    # Get list of all enabled AWS regions
    regions=$(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text)

    for region in $regions; do
        log ""Checking AWS Config in region: $region""

        # Check if AWS Config is enabled
        config_status=$(aws configservice describe-configuration-recorder-status --region ""$region"" --query ""ConfigurationRecordersStatus[0].recording"" --output text 2>/dev/null)

        if [[ ""$config_status"" == ""True"" ]]; then
            log ""‚úÖ AWS Config is already enabled in $region.""
        else
            log ""‚ö†Ô∏è AWS Config is NOT enabled in $region. Enabling it now...""

            # Define Config recorder name and role ARN
            recorder_name=""default""
            role_arn=""arn:aws:iam::$(aws sts get-caller-identity --query 'Account' --output text):role/AWSConfigRole""

            # Create AWS Config recorder
            aws configservice put-configuration-recorder --region ""$region"" --configuration-recorder ""name=$recorder_name,roleARN=$role_arn""

            # Start recording
            aws configservice start-configuration-recorder --region ""$region"" --configuration-recorder-name ""$recorder_name""

            log ""‚úÖ AWS Config has been enabled in $region.""
        fi
    done
}

# Execute the function
enable_aws_config
","üöÄ Why This is Useful?
üîπ Ensures AWS Config is Always Enabled: Prevents accidental misconfigurations.
üîπ Automated Security Monitoring: Enables logging for compliance audits.
üîπ Enforces Best Practices: Ensures AWS Config is active across all AWS regions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves the list of all AWS regions.
2Ô∏è‚É£ Checks if AWS Config is enabled in each region.
3Ô∏è‚É£ If missing, enables AWS Config and starts recording.
4Ô∏è‚É£ Ensures AWS Config logs are stored in an S3 bucket.
5Ô∏è‚É£ Logs actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
DAX,DynamoDB Accelerator (DAX) clusters should be encrypted at rest,To be added,Compliance,High,DynamoDB Accelerator (DAX) clusters should be encrypted at rest: 1. Navigate to the DAX console. 2. Select your DAX cluster and check the encryption settings. 3. Ensure that encryption at rest is enabled. 4. Modify the settings if necessary to protect data at rest. https://docs.aws.amazon.com/amazon-dax/latest/developerguide/dax-encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB Accelerator (DAX) clusters should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for DynamoDB Accelerator (DAX) clusters should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DAX,Directory Service,To be added,Compliance,Low,"Securely configure Directory Service for Amazon DynamoDB Accelerator (DAX). Ensure encryption, strong IAM roles, and monitoring are enabled.",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Directory Service
check_compliance() {
    log ""Checking AWS resources for Directory Service compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DAX,Directory Service certificates should not expire within 90 days,To be added,Compliance,High,Directory Service certificates should not expire within 90 days: 1. Go to the AWS Directory Service console. 2. Check the expiration dates of the certificates. 3. Renew any certificates that are due to expire within the next 90 days to maintain secure communication. https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directoryservice_security.html#directoryservice_security_certs,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Directory Service certificates should not expire within 90 days
check_compliance() {
    log ""Checking AWS resources for Directory Service certificates should not expire within 90 days compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DAX,Directory Service directories manual snapshots limit should not be less than 2,To be added,Compliance,High,"Directory Service directories manual snapshots limit should not be less than 2: 1. In the AWS Directory Service console, review the manual snapshot settings. 2. Ensure that the manual snapshots limit is set to at least 2. 3. Adjust the settings if necessary to avoid data loss. https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directoryservice_snapshots.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Directory Service directories manual snapshots limit should not be less than 2
check_compliance() {
    log ""Checking AWS resources for Directory Service directories manual snapshots limit should not be less than 2 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DAX,Directory Service directories should have SNS notification enabled,To be added,Compliance,High,Directory Service directories should have SNS notification enabled: 1. Access the Directory Service console. 2. Check if SNS notifications are configured for your directories. 3. Enable SNS notifications to receive alerts about important events and changes. https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directoryservice_notifications.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Directory Service directories should have SNS notification enabled
check_compliance() {
    log ""Checking AWS resources for Directory Service directories should have SNS notification enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DLM,DLM EBS snapshot lifecycle policy should be enabled,Ensure DLM EBS snapshot lifecycle policy is enabled in all the regions with EBS snapshots.,Compliance,Medium,DLM EBS snapshot lifecycle policy should be enabled: 1. Open the Amazon Data Lifecycle Manager (DLM) console. 2. Check the lifecycle policies for EBS snapshots. 3. Ensure that at least one policy is enabled for automatic management of snapshots. 4. Create or modify a policy as needed. https://docs.aws.amazon.com/dlm/latest/userguide/what-is-dlm.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DLM EBS snapshot lifecycle policy should be enabled
check_compliance() {
    log ""Checking AWS resources for DLM EBS snapshot lifecycle policy should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DLM,DLM EBS snapshot lifecycle policy should be enabled,Ensure DLM EBS snapshot lifecycle policy is enabled in all the regions with EBS snapshots.,Compliance,Medium,DLM EBS snapshot lifecycle policy should be enabled: 1. Open the Amazon Data Lifecycle Manager (DLM) console. 2. Check the lifecycle policies for EBS snapshots. 3. Ensure that at least one policy is enabled for automatic management of snapshots. 4. Create or modify a policy as needed. https://docs.aws.amazon.com/dlm/latest/userguide/what-is-dlm.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DLM EBS snapshot lifecycle policy should be enabled
check_compliance() {
    log ""Checking AWS resources for DLM EBS snapshot lifecycle policy should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DMS,Ensure that all the expired DMS certificates are removed,To be added,Compliance,High,Ensure that all the expired DMS certificates are removed: 1. Go to the AWS DMS console and navigate to the Certificates section. 2. Identify any certificates that are marked as expired. 3. Remove expired certificates to avoid any security issues. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#DMS-Security.Certificates,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure that all the expired DMS certificates are removed
check_compliance() {
    log ""Checking AWS resources for Ensure that all the expired DMS certificates are removed compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DMS,DMS endpoints should use SSL,This control checks whether an AWS DMS endpoint uses an SSL connection. The control fails if the endpoint doesn't use SSL.,Compliance,High,"DMS endpoints should use SSL: 1. In the DMS console, review all endpoints. 2. Ensure that the option Use SSL is enabled for all endpoints. 3. Modify endpoints to use SSL where necessary to ensure data is encrypted in transit. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#DMS-Security.SSL",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS endpoints should use SSL
check_compliance() {
    log ""Checking AWS resources for DMS endpoints should use SSL compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DMS,DMS replication instances should have automatic minor version upgrade enabled,This control checks if automatic minor version upgrade is enabled for an AWS DMS replication instance. The control fails if automatic minor version upgrade isn't enabled for a DMS replication instance.,Compliance,High,DMS replication instances should have automatic minor version upgrade enabled: 1. Navigate to the DMS replication instances in the console. 2. Select the instance and check the Auto minor version upgrade setting. 3. Enable this setting if it is not already enabled to keep the instance updated. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstances.html#ReplicationInstances.MinorVersionUpgrade,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS replication instances should have automatic minor version upgrade enabled
check_compliance() {
    log ""Checking AWS resources for DMS replication instances should have automatic minor version upgrade enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DMS,DMS replication instances should not be publicly accessible,Manage access to the AWS Cloud by ensuring DMS replication instances cannot be publicly accessed.,Compliance,High,DMS replication instances should not be publicly accessible: 1. Check the configuration of each replication instance in the DMS console. 2. Ensure that the Publicly accessible option is set to No. 3. Modify the instances to restrict public access if necessary. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstances.html#ReplicationInstances.PubliclyAccessible,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS replication instances should not be publicly accessible
check_compliance() {
    log ""Checking AWS resources for DMS replication instances should not be publicly accessible compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,DMS replication instances should not be publicly accessible,Manage access to the AWS Cloud by ensuring DMS replication instances cannot be publicly accessed.,Compliance,High,DMS replication instances should not be publicly accessible: 1. Check the configuration of each replication instance in the DMS console. 2. Ensure that the Publicly accessible option is set to No. 3. Modify the instances to restrict public access if necessary. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstances.html#ReplicationInstances.PubliclyAccessible,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS replication instances should not be publicly accessible
check_compliance() {
    log ""Checking AWS resources for DMS replication instances should not be publicly accessible compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,DMS replication instances should not be publicly accessible,Manage access to the AWS Cloud by ensuring DMS replication instances cannot be publicly accessed.,Compliance,High,DMS replication instances should not be publicly accessible: 1. Check the configuration of each replication instance in the DMS console. 2. Ensure that the Publicly accessible option is set to No. 3. Modify the instances to restrict public access if necessary. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstances.html#ReplicationInstances.PubliclyAccessible,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS replication instances should not be publicly accessible
check_compliance() {
    log ""Checking AWS resources for DMS replication instances should not be publicly accessible compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,DMS replication instances should not be publicly accessible,Manage access to the AWS Cloud by ensuring DMS replication instances cannot be publicly accessed.,Compliance,High,DMS replication instances should not be publicly accessible: 1. Check the configuration of each replication instance in the DMS console. 2. Ensure that the Publicly accessible option is set to No. 3. Modify the instances to restrict public access if necessary. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstances.html#ReplicationInstances.PubliclyAccessible,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS replication instances should not be publicly accessible
check_compliance() {
    log ""Checking AWS resources for DMS replication instances should not be publicly accessible compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,DMS replication instances should not be publicly accessible,Manage access to the AWS Cloud by ensuring DMS replication instances cannot be publicly accessed.,Compliance,High,DMS replication instances should not be publicly accessible: 1. Check the configuration of each replication instance in the DMS console. 2. Ensure that the Publicly accessible option is set to No. 3. Modify the instances to restrict public access if necessary. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstances.html#ReplicationInstances.PubliclyAccessible,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS replication instances should not be publicly accessible
check_compliance() {
    log ""Checking AWS resources for DMS replication instances should not be publicly accessible compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,DMS replication instances should not be publicly accessible,Manage access to the AWS Cloud by ensuring DMS replication instances cannot be publicly accessed.,Compliance,High,DMS replication instances should not be publicly accessible: 1. Check the configuration of each replication instance in the DMS console. 2. Ensure that the Publicly accessible option is set to No. 3. Modify the instances to restrict public access if necessary. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstances.html#ReplicationInstances.PubliclyAccessible,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS replication instances should not be publicly accessible
check_compliance() {
    log ""Checking AWS resources for DMS replication instances should not be publicly accessible compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DMS,DMS replication tasks for the source database should have logging enabled,This control checks whether logging is enabled with the minimum severity level of LOGGER_SEVERITY_DEFAULT for DMS replication tasks SOURCE_CAPTURE and SOURCE_UNLOAD. The control fails if logging isn't enabled for these tasks or if the minimum severity level is less than LOGGER_SEVERITY_DEFAULT.,Compliance,High,DMS replication tasks for the source database should have logging enabled: 1. Review each replication task in the DMS console. 2. Ensure that logging is enabled for the source database. 3. Modify the task settings to enable logging if not already done. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationTasks.html#ReplicationTasks.Logging,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS replication tasks for the source database should have logging enabled
check_compliance() {
    log ""Checking AWS resources for DMS replication tasks for the source database should have logging enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DMS,DMS replication tasks for the target database should have logging enabled,This control checks whether logging is enabled with the minimum severity level of LOGGER_SEVERITY_DEFAULT for DMS replication tasks TARGET_APPLY and TARGET_LOAD. The control fails if logging isn't enabled for these tasks or if the minimum severity level is less than LOGGER_SEVERITY_DEFAULT.,Compliance,High,"DMS replication tasks for the target database should have logging enabled: 1. Similar to the source database, check each replication task. 2. Ensure logging is enabled for the target database. 3. Enable logging in the task settings if it is not already configured. https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationTasks.html#ReplicationTasks.Logging",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DMS replication tasks for the target database should have logging enabled
check_compliance() {
    log ""Checking AWS resources for DMS replication tasks for the target database should have logging enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DocumentDB,AWS DocumentDB clusters should have an adequate backup retention period,To be added,Compliance,Medium,Ensure AWS DocumentDB clusters have an adequate backup retention period. Steps: 1. Review the backup settings for DocumentDB clusters. 2. Configure backup retention policies as per compliance requirements. https://docs.aws.amazon.com/documentdb/latest/developerguide/backup.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS DocumentDB clusters should have an adequate backup retention period
check_compliance() {
    log ""Checking AWS resources for AWS DocumentDB clusters should have an adequate backup retention period compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DocumentDB,DocumentDB clusters should have deletion protection enabled,To be added,Compliance,Medium,Ensure DocumentDB clusters have deletion protection enabled. Steps: 1. Review the cluster settings. 2. Enable deletion protection if not already set. https://docs.aws.amazon.com/documentdb/latest/developerguide/managed-clusters.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DocumentDB clusters should have deletion protection enabled
check_compliance() {
    log ""Checking AWS resources for DocumentDB clusters should have deletion protection enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DocumentDB,AWS DocumentDB clusters should be encrypted at rest,To be added,Compliance,High,Ensure AWS DocumentDB clusters are encrypted at rest. Steps: 1. Review encryption settings. 2. Enable encryption for DocumentDB clusters using AWS KMS. https://docs.aws.amazon.com/documentdb/latest/developerguide/security.encryption.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS DocumentDB clusters should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for AWS DocumentDB clusters should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DocumentDB,DocumentDB instance should be encrypted at rest,To be added,Compliance,Low,Ensure DocumentDB instances are encrypted at rest. Steps: 1. Review instance settings. 2. Enable encryption for instances if not already set. https://docs.aws.amazon.com/documentdb/latest/developerguide/security.encryption.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DocumentDB instance should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for DocumentDB instance should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DocumentDB,DocumentDB instance logging should be enabled,To be added,Compliance,High,Ensure DocumentDB instance logging is enabled. Steps: 1. Review logging settings. 2. Enable logging for DocumentDB instances to capture access and activity logs. https://docs.aws.amazon.com/documentdb/latest/developerguide/logging.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DocumentDB instance logging should be enabled
check_compliance() {
    log ""Checking AWS resources for DocumentDB instance logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DocumentDB,Amazon DocumentDB manual cluster snapshots should not be public,To be added,Compliance,High,Ensure Amazon DocumentDB manual cluster snapshots are not public. Steps: 1. Review snapshot settings. 2. Ensure manual snapshots are private and not shared publicly. https://docs.aws.amazon.com/documentdb/latest/developerguide/backup.html#backup-snapshots,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Amazon DocumentDB manual cluster snapshots should not be public
check_compliance() {
    log ""Checking AWS resources for Amazon DocumentDB manual cluster snapshots should not be public compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DynamoDB,DynamoDB table auto scaling should be enabled,To be added,Compliance,Medium,Ensure DynamoDB table auto scaling is enabled. Steps: 1. Review DynamoDB table settings. 2. Enable auto scaling to adjust capacity automatically. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/AutoScaling.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table auto scaling should be enabled
check_compliance() {
    log ""Checking AWS resources for DynamoDB table auto scaling should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,DynamoDB table auto scaling should be enabled,To be added,Compliance,Medium,Ensure DynamoDB table auto scaling is enabled. Steps: 1. Review DynamoDB table settings. 2. Enable auto scaling to adjust capacity automatically. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/AutoScaling.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table auto scaling should be enabled
check_compliance() {
    log ""Checking AWS resources for DynamoDB table auto scaling should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DynamoDB,DynamoDB table should have deletion protection enabled,To be added,Compliance,High,Ensure DynamoDB table deletion protection is enabled. Steps: 1. Review DynamoDB table settings. 2. Enable deletion protection to avoid accidental table deletion. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DeletionProtection.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table should have deletion protection enabled
check_compliance() {
    log ""Checking AWS resources for DynamoDB table should have deletion protection enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DynamoDB,DynamoDB table should be encrypted with AWS KMS,To be added,Compliance,High,Ensure DynamoDB table is encrypted with AWS KMS. Steps: 1. Review DynamoDB table encryption settings. 2. Ensure AWS KMS encryption is enabled for all tables. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/EncryptionAtRest.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table should be encrypted with AWS KMS
check_compliance() {
    log ""Checking AWS resources for DynamoDB table should be encrypted with AWS KMS compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DynamoDB,DynamoDB table should have encryption enabled,To be added,Compliance,High,Ensure DynamoDB table has encryption enabled. Steps: 1. Review the table encryption configuration. 2. Enable encryption if it is not already enabled. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/EncryptionAtRest.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table should have encryption enabled
check_compliance() {
    log ""Checking AWS resources for DynamoDB table should have encryption enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,DynamoDB table should have encryption enabled,To be added,Compliance,High,Ensure DynamoDB table has encryption enabled. Steps: 1. Review the table encryption configuration. 2. Enable encryption if it is not already enabled. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/EncryptionAtRest.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table should have encryption enabled
check_compliance() {
    log ""Checking AWS resources for DynamoDB table should have encryption enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,DynamoDB table should have encryption enabled,To be added,Compliance,High,Ensure DynamoDB table has encryption enabled. Steps: 1. Review the table encryption configuration. 2. Enable encryption if it is not already enabled. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/EncryptionAtRest.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table should have encryption enabled
check_compliance() {
    log ""Checking AWS resources for DynamoDB table should have encryption enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DynamoDB,DynamoDB tables should be in a backup plan,To be added,Compliance,Medium,Ensure DynamoDB tables are in a backup plan. Steps: 1. Review the backup configurations. 2. Add all DynamoDB tables to a backup plan if not already included. https://docs.aws.amazon.com/aws-backup/latest/devguide/dynamo-db-backup.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB tables should be in a backup plan
check_compliance() {
    log ""Checking AWS resources for DynamoDB tables should be in a backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,DynamoDB tables should be in a backup plan,To be added,Compliance,Medium,Ensure DynamoDB tables are in a backup plan. Steps: 1. Review the backup configurations. 2. Add all DynamoDB tables to a backup plan if not already included. https://docs.aws.amazon.com/aws-backup/latest/devguide/dynamo-db-backup.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB tables should be in a backup plan
check_compliance() {
    log ""Checking AWS resources for DynamoDB tables should be in a backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DynamoDB,DynamoDB table point-in-time recovery should be enabled,To be added,Compliance,High,Ensure DynamoDB table point-in-time recovery is enabled. Steps: 1. Review table settings to verify point-in-time recovery. 2. Enable point-in-time recovery for continuous backups. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table point-in-time recovery should be enabled
check_compliance() {
    log ""Checking AWS resources for DynamoDB table point-in-time recovery should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,DynamoDB table point-in-time recovery should be enabled,To be added,Compliance,High,Ensure DynamoDB table point-in-time recovery is enabled. Steps: 1. Review table settings to verify point-in-time recovery. 2. Enable point-in-time recovery for continuous backups. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table point-in-time recovery should be enabled
check_compliance() {
    log ""Checking AWS resources for DynamoDB table point-in-time recovery should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DynamoDB,DynamoDB table should be protected by backup plan,To be added,Compliance,Medium,Ensure DynamoDB table is protected by a backup plan. Steps: 1. Verify that all tables are protected by a backup plan. 2. Create a backup plan if necessary. https://docs.aws.amazon.com/aws-backup/latest/devguide/dynamo-db-backup.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table should be protected by backup plan
check_compliance() {
    log ""Checking AWS resources for DynamoDB table should be protected by backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,DynamoDB table should be protected by backup plan,To be added,Compliance,Medium,Ensure DynamoDB table is protected by a backup plan. Steps: 1. Verify that all tables are protected by a backup plan. 2. Create a backup plan if necessary. https://docs.aws.amazon.com/aws-backup/latest/devguide/dynamo-db-backup.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DynamoDB table should be protected by backup plan
check_compliance() {
    log ""Checking AWS resources for DynamoDB table should be protected by backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DRS,DRS jobs should be enabled,Ensure that DRS is enabled with jobs. This rule is non-compliant if DRS is not enabled with jobs for a particular region.,Compliance,High,Ensure DRS jobs are enabled. Steps: 1. Review the DRS job settings. 2. Enable DRS jobs for necessary resources to ensure effective disaster recovery. https://docs.aws.amazon.com/drs/latest/userguide/enable-dr.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DRS jobs should be enabled
check_compliance() {
    log ""Checking AWS resources for DRS jobs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
DRS,DRS jobs should be enabled,Ensure that DRS is enabled with jobs. This rule is non-compliant if DRS is not enabled with jobs for a particular region.,Compliance,High,Ensure DRS jobs are enabled. Steps: 1. Review the DRS job settings. 2. Enable DRS jobs for necessary resources to ensure effective disaster recovery. https://docs.aws.amazon.com/drs/latest/userguide/enable-dr.html,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for DRS jobs should be enabled
check_compliance() {
    log ""Checking AWS resources for DRS jobs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EBS,Attached EBS volumes should have delete on termination enabled,This rule ensures that AWS Elastic Block Store volumes that are attached to AWS Elastic Compute Cloud (AWS EC2) instances are marked for deletion when an instance is terminated.,Compliance,High,"Attached EBS volumes should have delete on termination enabled: 1. Open the EC2 console and select ""Volumes."" 2. Identify the attached EBS volumes. 3. Modify the volume settings to enable ""Delete on termination."" https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html",Cost: None/$0 ,"Attached EBS Volumes Should Have ""Delete on Termination"" Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects if EBS volumes that are attached to EC2 instances have the ""Delete on Termination"" flag disabled.
Lambda Function: A scheduled Lambda function that scans all attached EBS volumes and ensures the ""Delete on Termination"" flag is enabled.
SSM Automation: An SSM document to enable the ""Delete on Termination"" flag for attached volumes that are missing this setting.","Features of the Script:
‚úÖ Retrieves all EBS volumes attached to EC2 instances and checks the ""Delete on Termination"" status.
‚úÖ Identifies volumes that do not have the delete on termination flag enabled.
‚úÖ Logs each action, including volumes where the flag is enabled or updated.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EBS volume check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check attached volumes (or press Enter to auto-scan all): "" user_instance_id
}

# Function to ensure ""Delete on Termination"" is enabled for attached EBS volumes
ensure_delete_on_termination() {
    log ""üîç Starting 'Delete on Termination' check for attached EBS volumes...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EC2 instances found.""
        exit 0
    fi

    update_count=0
    for instance_id in ""${instances[@]}""; do
        log ""üîé Checking attached volumes for instance: $instance_id""

        # Get attached volumes for the instance
        volume_ids=$(aws ec2 describe-instances --instance-ids ""$instance_id"" --query ""Reservations[].Instances[].BlockDeviceMappings[].Ebs.VolumeId"" --output text)

        for volume_id in $volume_ids; do
            log ""üîé Checking 'Delete on Termination' status for volume: $volume_id""

            # Check if the ""Delete on Termination"" flag is enabled
            delete_on_termination=$(aws ec2 describe-volumes --volume-id ""$volume_id"" --query ""Volumes[].Attachments[].DeleteOnTermination"" --output text)

            if [[ ""$delete_on_termination"" != ""True"" ]]; then
                log ""‚ùå Volume $volume_id does not have 'Delete on Termination' enabled. Enabling now...""

                # Enable ""Delete on Termination"" for the volume
                aws ec2 modify-volume-attachment --volume-id ""$volume_id"" --instance-id ""$instance_id"" --delete-on-termination

                log ""‚úÖ 'Delete on Termination' enabled for volume $volume_id.""
                ((update_count++))
            else
                log ""‚úÖ Volume $volume_id already has 'Delete on Termination' enabled.""
            fi
        done
    done

    if [[ $update_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $update_count volumes were updated to have 'Delete on Termination' enabled.""
    else
        log ""‚úÖ All volumes already have 'Delete on Termination' enabled.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_delete_on_termination
","Why This is Useful?
üîπ Prevents Unintended Data Loss ‚Äì Ensures that EBS volumes are automatically deleted when the EC2 instance is terminated.
üîπ Cost Management ‚Äì Prevents orphaned EBS volumes from incurring unnecessary costs when EC2 instances are deleted.
üîπ Full Logging ‚Äì Tracks volumes that were missing the flag and automatically enables it.","What This Script Does?
1Ô∏è‚É£ Retrieves all EC2 instances and the attached EBS volumes.
2Ô∏è‚É£ Checks if the ""Delete on Termination"" flag is enabled for each attached volume.
3Ô∏è‚É£ Enables the flag if missing, ensuring that the volume is deleted when the instance terminates.
4Ô∏è‚É£ Logs all actions, making it easy to track changes.",Bash,Weekly,SOC 2,2024-02-13
EBS,Attached EBS volumes should have delete on termination enabled,This rule ensures that AWS Elastic Block Store volumes that are attached to AWS Elastic Compute Cloud (AWS EC2) instances are marked for deletion when an instance is terminated.,Compliance,High,"Attached EBS volumes should have delete on termination enabled: 1. Open the EC2 console and select ""Volumes."" 2. Identify the attached EBS volumes. 3. Modify the volume settings to enable ""Delete on termination."" https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html",Cost: None/$0 ,"Attached EBS Volumes Should Have ""Delete on Termination"" Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects if EBS volumes that are attached to EC2 instances have the ""Delete on Termination"" flag disabled.
Lambda Function: A scheduled Lambda function that scans all attached EBS volumes and ensures the ""Delete on Termination"" flag is enabled.
SSM Automation: An SSM document to enable the ""Delete on Termination"" flag for attached volumes that are missing this setting.","Features of the Script:
‚úÖ Retrieves all EBS volumes attached to EC2 instances and checks the ""Delete on Termination"" status.
‚úÖ Identifies volumes that do not have the delete on termination flag enabled.
‚úÖ Logs each action, including volumes where the flag is enabled or updated.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EBS volume check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check attached volumes (or press Enter to auto-scan all): "" user_instance_id
}

# Function to ensure ""Delete on Termination"" is enabled for attached EBS volumes
ensure_delete_on_termination() {
    log ""üîç Starting 'Delete on Termination' check for attached EBS volumes...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EC2 instances found.""
        exit 0
    fi

    update_count=0
    for instance_id in ""${instances[@]}""; do
        log ""üîé Checking attached volumes for instance: $instance_id""

        # Get attached volumes for the instance
        volume_ids=$(aws ec2 describe-instances --instance-ids ""$instance_id"" --query ""Reservations[].Instances[].BlockDeviceMappings[].Ebs.VolumeId"" --output text)

        for volume_id in $volume_ids; do
            log ""üîé Checking 'Delete on Termination' status for volume: $volume_id""

            # Check if the ""Delete on Termination"" flag is enabled
            delete_on_termination=$(aws ec2 describe-volumes --volume-id ""$volume_id"" --query ""Volumes[].Attachments[].DeleteOnTermination"" --output text)

            if [[ ""$delete_on_termination"" != ""True"" ]]; then
                log ""‚ùå Volume $volume_id does not have 'Delete on Termination' enabled. Enabling now...""

                # Enable ""Delete on Termination"" for the volume
                aws ec2 modify-volume-attachment --volume-id ""$volume_id"" --instance-id ""$instance_id"" --delete-on-termination

                log ""‚úÖ 'Delete on Termination' enabled for volume $volume_id.""
                ((update_count++))
            else
                log ""‚úÖ Volume $volume_id already has 'Delete on Termination' enabled.""
            fi
        done
    done

    if [[ $update_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $update_count volumes were updated to have 'Delete on Termination' enabled.""
    else
        log ""‚úÖ All volumes already have 'Delete on Termination' enabled.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_delete_on_termination
","Why This is Useful?
üîπ Prevents Unintended Data Loss ‚Äì Ensures that EBS volumes are automatically deleted when the EC2 instance is terminated.
üîπ Cost Management ‚Äì Prevents orphaned EBS volumes from incurring unnecessary costs when EC2 instances are deleted.
üîπ Full Logging ‚Äì Tracks volumes that were missing the flag and automatically enables it.","What This Script Does?
1Ô∏è‚É£ Retrieves all EC2 instances and the attached EBS volumes.
2Ô∏è‚É£ Checks if the ""Delete on Termination"" flag is enabled for each attached volume.
3Ô∏è‚É£ Enables the flag if missing, ensuring that the volume is deleted when the instance terminates.
4Ô∏è‚É£ Logs all actions, making it easy to track changes.",Bash,Weekly,SOC 2,2024-02-13
EBS,Attached EBS volumes should have encryption enabled,"Because sensitive data can exist and to help protect data at rest, ensure encryption is enabled for your AWS Elastic Block Store (AWS EBS) volumes.",Compliance,High,Attached EBS volumes should have encryption enabled: 1. Review all attached EBS volumes in the EC2 console. 2. Ensure that encryption is enabled for each volume. 3. Use AWS Key Management Service (KMS) for managing encryption keys. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html,Cost: None/$0 ,"Attached EBS Volumes Should Have Encryption Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not encrypted.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS volumes and ensures they are encrypted.
SSM Automation: An SSM document to automatically remediate non-compliant EBS volumes by enabling encryption.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if they are encrypted.
‚úÖ Identifies volumes that are not encrypted.
‚úÖ If found, enables encryption on the volume.
‚úÖ Logs each action, including volumes that are already encrypted.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to enforce encryption on EBS volumes
ensure_encrypted_volumes() {
    log ""üîç Starting EBS volume encryption review...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    fixed_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking encryption status for EBS volume: $volume_id""

        # Get encryption status of the volume
        encryption_status=$(aws ec2 describe-volumes --volume-ids ""$volume_id"" --query ""Volumes[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ùå EBS volume $volume_id is not encrypted. Encrypting now...""

            # Enable encryption (create a snapshot first)
            snapshot_id=$(aws ec2 create-snapshot --volume-id ""$volume_id"" --query ""SnapshotId"" --output text)
            aws ec2 copy-snapshot --source-snapshot-id ""$snapshot_id"" --encrypted --query ""SnapshotId"" --output text
            new_volume_id=$(aws ec2 create-volume --snapshot-id ""$snapshot_id"" --encrypted --query ""VolumeId"" --output text)

            log ""‚úÖ EBS volume $volume_id has been encrypted with a new volume created from the snapshot.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS volume $volume_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption completed. $fixed_count EBS volumes were encrypted.""
    else
        log ""‚úÖ All EBS volumes are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_encrypted_volumes
","Why This is Useful?
üîπ Protects Data at Rest ‚Äì Ensures all EBS volumes are encrypted to safeguard sensitive data.
üîπ Compliance and Security ‚Äì Meets regulatory requirements (e.g., HIPAA, PCI-DSS).
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips volumes that are already encrypted.
üîπ Full Logging ‚Äì Keeps a detailed log of all actions taken.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if each volume is encrypted.
3Ô∏è‚É£ Encrypts volumes that are not encrypted by creating a snapshot and copying it with encryption enabled.
4Ô∏è‚É£ Logs every action, ensuring visibility and compliance.",Bash,Weekly,SOC 2,2024-02-13
EBS,Attached EBS volumes should have encryption enabled,"Because sensitive data can exist and to help protect data at rest, ensure encryption is enabled for your AWS Elastic Block Store (AWS EBS) volumes.",Compliance,High,Attached EBS volumes should have encryption enabled: 1. Review all attached EBS volumes in the EC2 console. 2. Ensure that encryption is enabled for each volume. 3. Use AWS Key Management Service (KMS) for managing encryption keys. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html,Cost: None/$0 ,"Attached EBS Volumes Should Have Encryption Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not encrypted.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS volumes and ensures they are encrypted.
SSM Automation: An SSM document to automatically remediate non-compliant EBS volumes by enabling encryption.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if they are encrypted.
‚úÖ Identifies volumes that are not encrypted.
‚úÖ If found, enables encryption on the volume.
‚úÖ Logs each action, including volumes that are already encrypted.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to enforce encryption on EBS volumes
ensure_encrypted_volumes() {
    log ""üîç Starting EBS volume encryption review...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    fixed_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking encryption status for EBS volume: $volume_id""

        # Get encryption status of the volume
        encryption_status=$(aws ec2 describe-volumes --volume-ids ""$volume_id"" --query ""Volumes[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ùå EBS volume $volume_id is not encrypted. Encrypting now...""

            # Enable encryption (create a snapshot first)
            snapshot_id=$(aws ec2 create-snapshot --volume-id ""$volume_id"" --query ""SnapshotId"" --output text)
            aws ec2 copy-snapshot --source-snapshot-id ""$snapshot_id"" --encrypted --query ""SnapshotId"" --output text
            new_volume_id=$(aws ec2 create-volume --snapshot-id ""$snapshot_id"" --encrypted --query ""VolumeId"" --output text)

            log ""‚úÖ EBS volume $volume_id has been encrypted with a new volume created from the snapshot.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS volume $volume_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption completed. $fixed_count EBS volumes were encrypted.""
    else
        log ""‚úÖ All EBS volumes are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_encrypted_volumes
","Why This is Useful?
üîπ Protects Data at Rest ‚Äì Ensures all EBS volumes are encrypted to safeguard sensitive data.
üîπ Compliance and Security ‚Äì Meets regulatory requirements (e.g., HIPAA, PCI-DSS).
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips volumes that are already encrypted.
üîπ Full Logging ‚Äì Keeps a detailed log of all actions taken.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if each volume is encrypted.
3Ô∏è‚É£ Encrypts volumes that are not encrypted by creating a snapshot and copying it with encryption enabled.
4Ô∏è‚É£ Logs every action, ensuring visibility and compliance.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS snapshots should be encrypted,Ensure that EBS snapshots are encrypted. This rule is non-compliant if the EBS snapshot is not encrypted.,Compliance,High,"EBS snapshots should be encrypted: 1. Review existing EBS snapshots in the AWS console. 2. Ensure all snapshots are encrypted. 3. If not, create new encrypted snapshots from existing volumes. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-snapshot.html",Cost: None/$0 ,"EBS Snapshots Should Be Encrypted
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS snapshots that are not encrypted.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS snapshots and ensures that they are encrypted.
SSM Automation: An SSM document to automatically remediate non-compliant snapshots by encrypting them.","Features of the Script:
‚úÖ Retrieves all EBS snapshots and checks if they are encrypted.
‚úÖ Identifies snapshots without encryption.
‚úÖ If found, creates a new encrypted snapshot from the original.
‚úÖ Logs each action, including snapshots that are already encrypted.
‚úÖ Supports both manual mode (user inputs a snapshot ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual snapshot check
get_user_input() {
    read -p ""Enter the EBS Snapshot ID to check (or press Enter to auto-scan all): "" user_snapshot
}

# Function to check if EBS snapshots are encrypted
ensure_encrypted_snapshots() {
    log ""üîç Starting EBS snapshot encryption review...""

    # Get list of EBS snapshots
    if [[ -n ""$user_snapshot"" ]]; then
        snapshots=(""$user_snapshot"")
    else
        snapshots=($(aws ec2 describe-snapshots --query ""Snapshots[].SnapshotId"" --output text))
    fi

    if [[ ${#snapshots[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS snapshots found.""
        exit 0
    fi

    fixed_count=0
    for snapshot_id in ""${snapshots[@]}""; do
        log ""üîé Checking encryption status for snapshot: $snapshot_id""

        # Check encryption status of the snapshot
        encryption_status=$(aws ec2 describe-snapshots --snapshot-id ""$snapshot_id"" --query ""Snapshots[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ùå Snapshot $snapshot_id is not encrypted. Encrypting now...""

            # Copy the snapshot and enable encryption
            new_snapshot_id=$(aws ec2 copy-snapshot --source-snapshot-id ""$snapshot_id"" --encrypted --query ""SnapshotId"" --output text)

            log ""‚úÖ Snapshot $snapshot_id has been encrypted with a new snapshot: $new_snapshot_id.""
            ((fixed_count++))
        else
            log ""‚úÖ Snapshot $snapshot_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption completed. $fixed_count snapshots were encrypted.""
    else
        log ""‚úÖ All snapshots are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_encrypted_snapshots
","Why This is Useful?
üîπ Protects Sensitive Data ‚Äì Ensures that EBS snapshots are encrypted for data protection.
üîπ Compliance with Security Standards ‚Äì Meets regulatory requirements for data encryption (e.g., HIPAA, PCI-DSS).
üîπ Automated or Manual ‚Äì Users can specify a snapshot ID or scan all snapshots.
üîπ Failsafe Mechanism ‚Äì Skips snapshots that are already encrypted.
üîπ Full Logging ‚Äì Keeps detailed logs for visibility and auditing.","What This Script Does?
1Ô∏è‚É£ Retrieves all EBS snapshots.
2Ô∏è‚É£ Checks if encryption is enabled.
3Ô∏è‚É£ If not encrypted, copies the snapshot and enables encryption.
4Ô∏è‚É£ Logs every action, ensuring compliance with encryption policies.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS snapshots should be encrypted,Ensure that EBS snapshots are encrypted. This rule is non-compliant if the EBS snapshot is not encrypted.,Compliance,High,"EBS snapshots should be encrypted: 1. Review existing EBS snapshots in the AWS console. 2. Ensure all snapshots are encrypted. 3. If not, create new encrypted snapshots from existing volumes. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-snapshot.html",Cost: None/$0 ,"EBS Snapshots Should Be Encrypted
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS snapshots that are not encrypted.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS snapshots and ensures that they are encrypted.
SSM Automation: An SSM document to automatically remediate non-compliant snapshots by encrypting them.","Features of the Script:
‚úÖ Retrieves all EBS snapshots and checks if they are encrypted.
‚úÖ Identifies snapshots without encryption.
‚úÖ If found, creates a new encrypted snapshot from the original.
‚úÖ Logs each action, including snapshots that are already encrypted.
‚úÖ Supports both manual mode (user inputs a snapshot ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual snapshot check
get_user_input() {
    read -p ""Enter the EBS Snapshot ID to check (or press Enter to auto-scan all): "" user_snapshot
}

# Function to check if EBS snapshots are encrypted
ensure_encrypted_snapshots() {
    log ""üîç Starting EBS snapshot encryption review...""

    # Get list of EBS snapshots
    if [[ -n ""$user_snapshot"" ]]; then
        snapshots=(""$user_snapshot"")
    else
        snapshots=($(aws ec2 describe-snapshots --query ""Snapshots[].SnapshotId"" --output text))
    fi

    if [[ ${#snapshots[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS snapshots found.""
        exit 0
    fi

    fixed_count=0
    for snapshot_id in ""${snapshots[@]}""; do
        log ""üîé Checking encryption status for snapshot: $snapshot_id""

        # Check encryption status of the snapshot
        encryption_status=$(aws ec2 describe-snapshots --snapshot-id ""$snapshot_id"" --query ""Snapshots[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ùå Snapshot $snapshot_id is not encrypted. Encrypting now...""

            # Copy the snapshot and enable encryption
            new_snapshot_id=$(aws ec2 copy-snapshot --source-snapshot-id ""$snapshot_id"" --encrypted --query ""SnapshotId"" --output text)

            log ""‚úÖ Snapshot $snapshot_id has been encrypted with a new snapshot: $new_snapshot_id.""
            ((fixed_count++))
        else
            log ""‚úÖ Snapshot $snapshot_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption completed. $fixed_count snapshots were encrypted.""
    else
        log ""‚úÖ All snapshots are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_encrypted_snapshots
","Why This is Useful?
üîπ Protects Sensitive Data ‚Äì Ensures that EBS snapshots are encrypted for data protection.
üîπ Compliance with Security Standards ‚Äì Meets regulatory requirements for data encryption (e.g., HIPAA, PCI-DSS).
üîπ Automated or Manual ‚Äì Users can specify a snapshot ID or scan all snapshots.
üîπ Failsafe Mechanism ‚Äì Skips snapshots that are already encrypted.
üîπ Full Logging ‚Äì Keeps detailed logs for visibility and auditing.","What This Script Does?
1Ô∏è‚É£ Retrieves all EBS snapshots.
2Ô∏è‚É£ Checks if encryption is enabled.
3Ô∏è‚É£ If not encrypted, copies the snapshot and enables encryption.
4Ô∏è‚É£ Logs every action, ensuring compliance with encryption policies.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS snapshots should not be publicly restorable,Manage access to the AWS Cloud by ensuring EBS snapshots are not publicly restorable.,Compliance,High,EBS snapshots should not be publicly restorable: 1. Check the permissions of EBS snapshots in the console. 2. Ensure snapshots are not shared publicly. 3. Modify the permissions to restrict public access if necessary. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot.html,Cost: None/$0 ,"EBS Snapshots Should Not Be Publicly Restorable
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS snapshots that are marked as publicly restorable.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS snapshots and ensures that no snapshot is publicly restorable.
SSM Automation: An SSM document to automatically remediate non-compliant EBS snapshots by changing their access control to prevent public restoration.","Features of the Script:
‚úÖ Retrieves all EBS snapshots and checks their restoration permissions.
‚úÖ Identifies snapshots that are publicly restorable.
‚úÖ If found, modifies the snapshot's permissions to ensure it‚Äôs private.
‚úÖ Logs each action, including snapshots that are already private.
‚úÖ Supports both manual mode (user inputs a snapshot ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual snapshot check
get_user_input() {
    read -p ""Enter the EBS Snapshot ID to check (or press Enter to auto-scan all): "" user_snapshot
}

# Function to ensure EBS snapshots are not publicly restorable
ensure_private_snapshots() {
    log ""üîç Starting EBS snapshot public access review...""

    # Get list of EBS snapshots
    if [[ -n ""$user_snapshot"" ]]; then
        snapshots=(""$user_snapshot"")
    else
        snapshots=($(aws ec2 describe-snapshots --query ""Snapshots[].SnapshotId"" --output text))
    fi

    if [[ ${#snapshots[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS snapshots found.""
        exit 0
    fi

    fixed_count=0
    for snapshot_id in ""${snapshots[@]}""; do
        log ""üîé Checking public access for EBS snapshot: $snapshot_id""

        # Check the snapshot's public permissions
        public_permission=$(aws ec2 describe-snapshot-permissions --snapshot-id ""$snapshot_id"" --query ""SnapshotPermissions[].Principal"" --output text)

        if [[ ""$public_permission"" == ""all"" ]]; then
            log ""‚ùå EBS snapshot $snapshot_id is publicly accessible. Making it private...""

            # Remove public access to the snapshot
            aws ec2 modify-snapshot-attribute --snapshot-id ""$snapshot_id"" --no-create-volume-permission

            log ""‚úÖ EBS snapshot $snapshot_id is now private.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS snapshot $snapshot_id is already private.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Public access removal completed. $fixed_count EBS snapshots were made private.""
    else
        log ""‚úÖ All EBS snapshots are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_private_snapshots
","Why This is Useful?
üîπ Prevents Data Exposure ‚Äì Ensures EBS snapshots are not publicly accessible and protects sensitive data.
üîπ Security Compliance ‚Äì Ensures compliance with best practices for data protection.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips snapshots that are already private.
üîπ Full Logging ‚Äì Provides detailed logs for visibility and auditing.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS snapshots.
2Ô∏è‚É£ Checks the snapshot‚Äôs public access permissions.
3Ô∏è‚É£ Ensures snapshots are private, removing any public access if needed.
4Ô∏è‚É£ Logs every action, ensuring compliance and security.",Bash,Weekly,SOC 2,2024-02-13
Security,EBS snapshots should not be publicly restorable,Manage access to the AWS Cloud by ensuring EBS snapshots are not publicly restorable.,Compliance,High,EBS snapshots should not be publicly restorable: 1. Check the permissions of EBS snapshots in the console. 2. Ensure snapshots are not shared publicly. 3. Modify the permissions to restrict public access if necessary. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot.html,Cost: None/$0 ,"EBS Snapshots Should Not Be Publicly Restorable
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS snapshots that are marked as publicly restorable.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS snapshots and ensures that no snapshot is publicly restorable.
SSM Automation: An SSM document to automatically remediate non-compliant EBS snapshots by changing their access control to prevent public restoration.","Features of the Script:
‚úÖ Retrieves all EBS snapshots and checks their restoration permissions.
‚úÖ Identifies snapshots that are publicly restorable.
‚úÖ If found, modifies the snapshot's permissions to ensure it‚Äôs private.
‚úÖ Logs each action, including snapshots that are already private.
‚úÖ Supports both manual mode (user inputs a snapshot ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual snapshot check
get_user_input() {
    read -p ""Enter the EBS Snapshot ID to check (or press Enter to auto-scan all): "" user_snapshot
}

# Function to ensure EBS snapshots are not publicly restorable
ensure_private_snapshots() {
    log ""üîç Starting EBS snapshot public access review...""

    # Get list of EBS snapshots
    if [[ -n ""$user_snapshot"" ]]; then
        snapshots=(""$user_snapshot"")
    else
        snapshots=($(aws ec2 describe-snapshots --query ""Snapshots[].SnapshotId"" --output text))
    fi

    if [[ ${#snapshots[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS snapshots found.""
        exit 0
    fi

    fixed_count=0
    for snapshot_id in ""${snapshots[@]}""; do
        log ""üîé Checking public access for EBS snapshot: $snapshot_id""

        # Check the snapshot's public permissions
        public_permission=$(aws ec2 describe-snapshot-permissions --snapshot-id ""$snapshot_id"" --query ""SnapshotPermissions[].Principal"" --output text)

        if [[ ""$public_permission"" == ""all"" ]]; then
            log ""‚ùå EBS snapshot $snapshot_id is publicly accessible. Making it private...""

            # Remove public access to the snapshot
            aws ec2 modify-snapshot-attribute --snapshot-id ""$snapshot_id"" --no-create-volume-permission

            log ""‚úÖ EBS snapshot $snapshot_id is now private.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS snapshot $snapshot_id is already private.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Public access removal completed. $fixed_count EBS snapshots were made private.""
    else
        log ""‚úÖ All EBS snapshots are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_private_snapshots
","Why This is Useful?
üîπ Prevents Data Exposure ‚Äì Ensures EBS snapshots are not publicly accessible and protects sensitive data.
üîπ Security Compliance ‚Äì Ensures compliance with best practices for data protection.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips snapshots that are already private.
üîπ Full Logging ‚Äì Provides detailed logs for visibility and auditing.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS snapshots.
2Ô∏è‚É£ Checks the snapshot‚Äôs public access permissions.
3Ô∏è‚É£ Ensures snapshots are private, removing any public access if needed.
4Ô∏è‚É£ Logs every action, ensuring compliance and security.",Bash,Weekly,SOC 2,2024-02-13
Security,EBS snapshots should not be publicly restorable,Manage access to the AWS Cloud by ensuring EBS snapshots are not publicly restorable.,Compliance,High,EBS snapshots should not be publicly restorable: 1. Check the permissions of EBS snapshots in the console. 2. Ensure snapshots are not shared publicly. 3. Modify the permissions to restrict public access if necessary. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot.html,Cost: None/$0 ,"EBS Snapshots Should Not Be Publicly Restorable
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS snapshots that are marked as publicly restorable.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS snapshots and ensures that no snapshot is publicly restorable.
SSM Automation: An SSM document to automatically remediate non-compliant EBS snapshots by changing their access control to prevent public restoration.","Features of the Script:
‚úÖ Retrieves all EBS snapshots and checks their restoration permissions.
‚úÖ Identifies snapshots that are publicly restorable.
‚úÖ If found, modifies the snapshot's permissions to ensure it‚Äôs private.
‚úÖ Logs each action, including snapshots that are already private.
‚úÖ Supports both manual mode (user inputs a snapshot ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual snapshot check
get_user_input() {
    read -p ""Enter the EBS Snapshot ID to check (or press Enter to auto-scan all): "" user_snapshot
}

# Function to ensure EBS snapshots are not publicly restorable
ensure_private_snapshots() {
    log ""üîç Starting EBS snapshot public access review...""

    # Get list of EBS snapshots
    if [[ -n ""$user_snapshot"" ]]; then
        snapshots=(""$user_snapshot"")
    else
        snapshots=($(aws ec2 describe-snapshots --query ""Snapshots[].SnapshotId"" --output text))
    fi

    if [[ ${#snapshots[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS snapshots found.""
        exit 0
    fi

    fixed_count=0
    for snapshot_id in ""${snapshots[@]}""; do
        log ""üîé Checking public access for EBS snapshot: $snapshot_id""

        # Check the snapshot's public permissions
        public_permission=$(aws ec2 describe-snapshot-permissions --snapshot-id ""$snapshot_id"" --query ""SnapshotPermissions[].Principal"" --output text)

        if [[ ""$public_permission"" == ""all"" ]]; then
            log ""‚ùå EBS snapshot $snapshot_id is publicly accessible. Making it private...""

            # Remove public access to the snapshot
            aws ec2 modify-snapshot-attribute --snapshot-id ""$snapshot_id"" --no-create-volume-permission

            log ""‚úÖ EBS snapshot $snapshot_id is now private.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS snapshot $snapshot_id is already private.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Public access removal completed. $fixed_count EBS snapshots were made private.""
    else
        log ""‚úÖ All EBS snapshots are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_private_snapshots
","Why This is Useful?
üîπ Prevents Data Exposure ‚Äì Ensures EBS snapshots are not publicly accessible and protects sensitive data.
üîπ Security Compliance ‚Äì Ensures compliance with best practices for data protection.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips snapshots that are already private.
üîπ Full Logging ‚Äì Provides detailed logs for visibility and auditing.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS snapshots.
2Ô∏è‚É£ Checks the snapshot‚Äôs public access permissions.
3Ô∏è‚É£ Ensures snapshots are private, removing any public access if needed.
4Ô∏è‚É£ Logs every action, ensuring compliance and security.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volume encryption at rest should be enabled,To be added,Compliance,High,"EBS volume encryption at rest should be enabled: 1. Go to the EC2 console and select ""Volumes."" 2. Ensure that all volumes have encryption enabled. 3. For volumes without encryption, create encrypted copies. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",Cost: None/$0 ,"EBS Volume Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not encrypted at rest.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS volumes and ensures that all volumes are encrypted at rest.
SSM Automation: An SSM document to automatically remediate non-compliant EBS volumes by enabling encryption.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if encryption at rest is enabled.
‚úÖ Identifies volumes without encryption.
‚úÖ If found, enables encryption on the volume.
‚úÖ Logs each action, including volumes that are already encrypted.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to ensure EBS volumes have encryption at rest enabled
ensure_encrypted_volumes() {
    log ""üîç Starting EBS volume encryption review...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    fixed_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking encryption status for EBS volume: $volume_id""

        # Check encryption status of the volume
        encryption_status=$(aws ec2 describe-volumes --volume-ids ""$volume_id"" --query ""Volumes[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ùå EBS volume $volume_id is not encrypted. Encrypting now...""

            # Enable encryption (create a snapshot first)
            snapshot_id=$(aws ec2 create-snapshot --volume-id ""$volume_id"" --query ""SnapshotId"" --output text)
            aws ec2 copy-snapshot --source-snapshot-id ""$snapshot_id"" --encrypted --query ""SnapshotId"" --output text
            new_volume_id=$(aws ec2 create-volume --snapshot-id ""$snapshot_id"" --encrypted --query ""VolumeId"" --output text)

            log ""‚úÖ EBS volume $volume_id has been encrypted with a new volume created from the snapshot.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS volume $volume_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption completed. $fixed_count EBS volumes were encrypted.""
    else
        log ""‚úÖ All EBS volumes are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_encrypted_volumes
","Why This is Useful?
üîπ Ensures Data Protection ‚Äì Enforces encryption at rest for EBS volumes, ensuring sensitive data is protected.
üîπ Compliance and Security ‚Äì Meets regulatory compliance (e.g., HIPAA, PCI-DSS) for data security.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips volumes that are already encrypted.
üîπ Full Logging ‚Äì Keeps detailed logs for visibility and auditing."," What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if each volume is encrypted at rest.
3Ô∏è‚É£ Encrypts volumes that are not encrypted by creating a snapshot and copying it with encryption enabled.
4Ô∏è‚É£ Logs every action, ensuring compliance and security.

",Bash,Weekly,SOC 2,2024-02-13
Reliability,EBS volume encryption at rest should be enabled,To be added,Compliance,High,"EBS volume encryption at rest should be enabled: 1. Go to the EC2 console and select ""Volumes."" 2. Ensure that all volumes have encryption enabled. 3. For volumes without encryption, create encrypted copies. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",Cost: None/$0 ,"EBS Volume Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not encrypted at rest.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS volumes and ensures that all volumes are encrypted at rest.
SSM Automation: An SSM document to automatically remediate non-compliant EBS volumes by enabling encryption.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if encryption at rest is enabled.
‚úÖ Identifies volumes without encryption.
‚úÖ If found, enables encryption on the volume.
‚úÖ Logs each action, including volumes that are already encrypted.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to ensure EBS volumes have encryption at rest enabled
ensure_encrypted_volumes() {
    log ""üîç Starting EBS volume encryption review...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    fixed_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking encryption status for EBS volume: $volume_id""

        # Check encryption status of the volume
        encryption_status=$(aws ec2 describe-volumes --volume-ids ""$volume_id"" --query ""Volumes[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ùå EBS volume $volume_id is not encrypted. Encrypting now...""

            # Enable encryption (create a snapshot first)
            snapshot_id=$(aws ec2 create-snapshot --volume-id ""$volume_id"" --query ""SnapshotId"" --output text)
            aws ec2 copy-snapshot --source-snapshot-id ""$snapshot_id"" --encrypted --query ""SnapshotId"" --output text
            new_volume_id=$(aws ec2 create-volume --snapshot-id ""$snapshot_id"" --encrypted --query ""VolumeId"" --output text)

            log ""‚úÖ EBS volume $volume_id has been encrypted with a new volume created from the snapshot.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS volume $volume_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption completed. $fixed_count EBS volumes were encrypted.""
    else
        log ""‚úÖ All EBS volumes are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_encrypted_volumes
","Why This is Useful?
üîπ Ensures Data Protection ‚Äì Enforces encryption at rest for EBS volumes, ensuring sensitive data is protected.
üîπ Compliance and Security ‚Äì Meets regulatory compliance (e.g., HIPAA, PCI-DSS) for data security.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips volumes that are already encrypted.
üîπ Full Logging ‚Äì Keeps detailed logs for visibility and auditing."," What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if each volume is encrypted at rest.
3Ô∏è‚É£ Encrypts volumes that are not encrypted by creating a snapshot and copying it with encryption enabled.
4Ô∏è‚É£ Logs every action, ensuring compliance and security.

",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volume encryption at rest should be enabled,To be added,Compliance,High,"EBS volume encryption at rest should be enabled: 1. Go to the EC2 console and select ""Volumes."" 2. Ensure that all volumes have encryption enabled. 3. For volumes without encryption, create encrypted copies. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",Cost: None/$0 ,"EBS Volume Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not encrypted at rest.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS volumes and ensures that all volumes are encrypted at rest.
SSM Automation: An SSM document to automatically remediate non-compliant EBS volumes by enabling encryption.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if encryption at rest is enabled.
‚úÖ Identifies volumes without encryption.
‚úÖ If found, enables encryption on the volume.
‚úÖ Logs each action, including volumes that are already encrypted.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to ensure EBS volumes have encryption at rest enabled
ensure_encrypted_volumes() {
    log ""üîç Starting EBS volume encryption review...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    fixed_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking encryption status for EBS volume: $volume_id""

        # Check encryption status of the volume
        encryption_status=$(aws ec2 describe-volumes --volume-ids ""$volume_id"" --query ""Volumes[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ùå EBS volume $volume_id is not encrypted. Encrypting now...""

            # Enable encryption (create a snapshot first)
            snapshot_id=$(aws ec2 create-snapshot --volume-id ""$volume_id"" --query ""SnapshotId"" --output text)
            aws ec2 copy-snapshot --source-snapshot-id ""$snapshot_id"" --encrypted --query ""SnapshotId"" --output text
            new_volume_id=$(aws ec2 create-volume --snapshot-id ""$snapshot_id"" --encrypted --query ""VolumeId"" --output text)

            log ""‚úÖ EBS volume $volume_id has been encrypted with a new volume created from the snapshot.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS volume $volume_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption completed. $fixed_count EBS volumes were encrypted.""
    else
        log ""‚úÖ All EBS volumes are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_encrypted_volumes
","Why This is Useful?
üîπ Ensures Data Protection ‚Äì Enforces encryption at rest for EBS volumes, ensuring sensitive data is protected.
üîπ Compliance and Security ‚Äì Meets regulatory compliance (e.g., HIPAA, PCI-DSS) for data security.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips volumes that are already encrypted.
üîπ Full Logging ‚Äì Keeps detailed logs for visibility and auditing."," What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if each volume is encrypted at rest.
3Ô∏è‚É£ Encrypts volumes that are not encrypted by creating a snapshot and copying it with encryption enabled.
4Ô∏è‚É£ Logs every action, ensuring compliance and security.

",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volumes should be in a backup plan,"To help with data back-up processes, ensure your AWS Elastic Block Store (AWS EBS) volumes are a part of an AWS Backup plan.",Compliance,High,EBS volumes should be in a backup plan: 1. Review the backup plans set in your AWS account. 2. Ensure that all EBS volumes are included in a defined backup plan. 3. Create or modify backup plans as necessary. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html,Cost: None/$0 ,"EBS Volumes Should Be in a Backup Plan
‚úÖ Automation Approach:

AWS Config Rule: Detects if an EBS volume is not part of a backup plan.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS volumes and checks if they are part of a backup plan (e.g., AWS Backup).
SSM Automation: An SSM document to automatically add EBS volumes to a backup plan if they are not already included.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if they are part of a backup plan.
‚úÖ Identifies volumes not protected by a backup plan.
‚úÖ Logs each action, including volumes added to the backup plan or skipped if already compliant.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EBS volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check backup plan (or press Enter to auto-scan all): "" user_volume
}

# Function to check if EBS volumes are part of a backup plan
ensure_ebs_in_backup_plan() {
    log ""üîç Starting EBS volume backup plan check...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    backup_missing_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking backup plan for volume: $volume_id""

        # Check if volume is part of a backup plan (AWS Backup)
        backup_plan_check=$(aws backup list-protected-resources --resource-arn ""arn:aws:ec2:${AWS_REGION}:${AWS_ACCOUNT_ID}:volume/$volume_id"" --query ""Results[]"" --output text)

        if [[ -z ""$backup_plan_check"" ]]; then
            log ""‚ùå Volume $volume_id is not part of any backup plan. Adding to AWS Backup now...""

            # Add the volume to a backup plan (example backup plan ID)
            backup_plan_id=""your-backup-plan-id""  # Replace with your backup plan ID
            aws backup start-backup-job --resource-arn ""arn:aws:ec2:${AWS_REGION}:${AWS_ACCOUNT_ID}:volume/$volume_id"" --backup-plan-id ""$backup_plan_id""

            log ""‚úÖ Volume $volume_id added to the backup plan.""
            ((backup_missing_count++))
        else
            log ""‚úÖ Volume $volume_id is already part of a backup plan.""
        fi
    done

    if [[ $backup_missing_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $backup_missing_count EBS volumes were added to a backup plan.""
    else
        log ""‚úÖ All EBS volumes are already in a backup plan.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ebs_in_backup_plan
","Why This is Useful?
üîπ Data Protection ‚Äì Ensures all EBS volumes are included in a backup plan, which helps protect them against data loss.
üîπ Automates Backups ‚Äì Automatically adds volumes to a backup plan to ensure compliance.
üîπ Full Logging ‚Äì Tracks volumes added to the backup plan, making it easier to review and maintain backup status.","What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if each volume is part of a backup plan (e.g., AWS Backup).
3Ô∏è‚É£ Adds volumes to the backup plan if they are not already included.
4Ô∏è‚É£ Logs each action, including volumes added to the backup plan.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volumes should be in a backup plan,"To help with data back-up processes, ensure your AWS Elastic Block Store (AWS EBS) volumes are a part of an AWS Backup plan.",Compliance,High,EBS volumes should be in a backup plan: 1. Review the backup plans set in your AWS account. 2. Ensure that all EBS volumes are included in a defined backup plan. 3. Create or modify backup plans as necessary. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html,Cost: None/$0 ,"EBS Volumes Should Be in a Backup Plan
‚úÖ Automation Approach:

AWS Config Rule: Detects if an EBS volume is not part of a backup plan.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS volumes and checks if they are part of a backup plan (e.g., AWS Backup).
SSM Automation: An SSM document to automatically add EBS volumes to a backup plan if they are not already included.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if they are part of a backup plan.
‚úÖ Identifies volumes not protected by a backup plan.
‚úÖ Logs each action, including volumes added to the backup plan or skipped if already compliant.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EBS volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check backup plan (or press Enter to auto-scan all): "" user_volume
}

# Function to check if EBS volumes are part of a backup plan
ensure_ebs_in_backup_plan() {
    log ""üîç Starting EBS volume backup plan check...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    backup_missing_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking backup plan for volume: $volume_id""

        # Check if volume is part of a backup plan (AWS Backup)
        backup_plan_check=$(aws backup list-protected-resources --resource-arn ""arn:aws:ec2:${AWS_REGION}:${AWS_ACCOUNT_ID}:volume/$volume_id"" --query ""Results[]"" --output text)

        if [[ -z ""$backup_plan_check"" ]]; then
            log ""‚ùå Volume $volume_id is not part of any backup plan. Adding to AWS Backup now...""

            # Add the volume to a backup plan (example backup plan ID)
            backup_plan_id=""your-backup-plan-id""  # Replace with your backup plan ID
            aws backup start-backup-job --resource-arn ""arn:aws:ec2:${AWS_REGION}:${AWS_ACCOUNT_ID}:volume/$volume_id"" --backup-plan-id ""$backup_plan_id""

            log ""‚úÖ Volume $volume_id added to the backup plan.""
            ((backup_missing_count++))
        else
            log ""‚úÖ Volume $volume_id is already part of a backup plan.""
        fi
    done

    if [[ $backup_missing_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $backup_missing_count EBS volumes were added to a backup plan.""
    else
        log ""‚úÖ All EBS volumes are already in a backup plan.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ebs_in_backup_plan
","Why This is Useful?
üîπ Data Protection ‚Äì Ensures all EBS volumes are included in a backup plan, which helps protect them against data loss.
üîπ Automates Backups ‚Äì Automatically adds volumes to a backup plan to ensure compliance.
üîπ Full Logging ‚Äì Tracks volumes added to the backup plan, making it easier to review and maintain backup status.","What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if each volume is part of a backup plan (e.g., AWS Backup).
3Ô∏è‚É£ Adds volumes to the backup plan if they are not already included.
4Ô∏è‚É£ Logs each action, including volumes added to the backup plan.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volumes should be protected by a backup plan,Ensure that AWS Elastic Block Store (AWS EBS) volumes are protected by a backup plan. The rule is non-compliant if the AWS EBS volume is not covered by a backup plan.,Compliance,High,EBS volumes should be protected by a backup plan: 1. Verify that all EBS volumes are included in an active backup plan. 2. Check backup schedules and retention policies. 3. Implement backup protection where necessary. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html,Cost: None/$0 ,"EBS Volumes Should Be Protected by a Backup Plan
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not protected by a backup plan.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS volumes and ensures they are backed up by an appropriate backup plan (e.g., through AWS Backup).
SSM Automation: An SSM document to automatically remediate non-compliant EBS volumes by associating them with a backup plan.
","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if they are protected by a backup plan.
‚úÖ Identifies volumes without backup protection.
‚úÖ If found, associates the volume with a backup plan.
‚úÖ Logs each action, including volumes already protected by a backup plan.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to check if EBS volume is protected by a backup plan
ensure_backup_plan() {
    log ""üîç Starting EBS volume backup protection review...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    fixed_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking backup protection for EBS volume: $volume_id""

        # Check if the EBS volume is associated with a backup plan (AWS Backup)
        backup_plan_association=$(aws backup list-protected-resources --resource-arn ""arn:aws:ec2:$(aws sts get-caller-identity --query Account --output text):volume/$volume_id"" --query ""BackupVaultName"" --output text)

        if [[ ""$backup_plan_association"" == ""None"" ]]; then
            log ""‚ùå EBS volume $volume_id is not protected by a backup plan. Adding backup...""

            # Attach the volume to a backup plan (replace 'your-backup-plan-id' with the actual plan ID)
            aws backup start-backup-job --resource-arn ""arn:aws:ec2:$(aws sts get-caller-identity --query Account --output text):volume/$volume_id"" --backup-plan-id ""your-backup-plan-id""

            log ""‚úÖ EBS volume $volume_id is now protected by a backup plan.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS volume $volume_id is already protected by a backup plan.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Backup protection completed. $fixed_count EBS volumes were associated with a backup plan.""
    else
        log ""‚úÖ All EBS volumes are already protected by a backup plan. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_backup_plan
","Why This is Useful?
üîπ Ensures Data Durability ‚Äì Ensures that EBS volumes are properly backed up to protect against data loss.
üîπ Compliance with Backup Policies ‚Äì Helps meet regulatory and operational requirements for data protection.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips volumes that are already protected by a backup plan.
üîπ Full Logging ‚Äì Keeps detailed logs for visibility and auditing.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if each volume is protected by a backup plan.
3Ô∏è‚É£ Associates volumes without protection to a backup plan.
4Ô∏è‚É£ Logs each action, ensuring compliance with backup policies.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volumes should be protected by a backup plan,Ensure that AWS Elastic Block Store (AWS EBS) volumes are protected by a backup plan. The rule is non-compliant if the AWS EBS volume is not covered by a backup plan.,Compliance,High,EBS volumes should be protected by a backup plan: 1. Verify that all EBS volumes are included in an active backup plan. 2. Check backup schedules and retention policies. 3. Implement backup protection where necessary. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html,Cost: None/$0 ,"EBS Volumes Should Be Protected by a Backup Plan
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not protected by a backup plan.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EBS volumes and ensures they are backed up by an appropriate backup plan (e.g., through AWS Backup).
SSM Automation: An SSM document to automatically remediate non-compliant EBS volumes by associating them with a backup plan.
","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if they are protected by a backup plan.
‚úÖ Identifies volumes without backup protection.
‚úÖ If found, associates the volume with a backup plan.
‚úÖ Logs each action, including volumes already protected by a backup plan.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to check if EBS volume is protected by a backup plan
ensure_backup_plan() {
    log ""üîç Starting EBS volume backup protection review...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    fixed_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking backup protection for EBS volume: $volume_id""

        # Check if the EBS volume is associated with a backup plan (AWS Backup)
        backup_plan_association=$(aws backup list-protected-resources --resource-arn ""arn:aws:ec2:$(aws sts get-caller-identity --query Account --output text):volume/$volume_id"" --query ""BackupVaultName"" --output text)

        if [[ ""$backup_plan_association"" == ""None"" ]]; then
            log ""‚ùå EBS volume $volume_id is not protected by a backup plan. Adding backup...""

            # Attach the volume to a backup plan (replace 'your-backup-plan-id' with the actual plan ID)
            aws backup start-backup-job --resource-arn ""arn:aws:ec2:$(aws sts get-caller-identity --query Account --output text):volume/$volume_id"" --backup-plan-id ""your-backup-plan-id""

            log ""‚úÖ EBS volume $volume_id is now protected by a backup plan.""
            ((fixed_count++))
        else
            log ""‚úÖ EBS volume $volume_id is already protected by a backup plan.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Backup protection completed. $fixed_count EBS volumes were associated with a backup plan.""
    else
        log ""‚úÖ All EBS volumes are already protected by a backup plan. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_backup_plan
","Why This is Useful?
üîπ Ensures Data Durability ‚Äì Ensures that EBS volumes are properly backed up to protect against data loss.
üîπ Compliance with Backup Policies ‚Äì Helps meet regulatory and operational requirements for data protection.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips volumes that are already protected by a backup plan.
üîπ Full Logging ‚Äì Keeps detailed logs for visibility and auditing.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if each volume is protected by a backup plan.
3Ô∏è‚É£ Associates volumes without protection to a backup plan.
4Ô∏è‚É£ Logs each action, ensuring compliance with backup policies.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volume snapshots should exist,Ensure that EBS volume snapshots exist. This rule is non-compliant if the EBS volume does not have any snapshot.,Compliance,High,EBS volume snapshots should exist: 1. Ensure that each EBS volume has at least one snapshot created. 2. Schedule regular snapshots to ensure data recovery capabilities. 3. Monitor the snapshot lifecycle and retention. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-snapshot.html,Cost: None/$0 ,"EBS Volume Snapshots Should Exist
‚úÖ Automation Approach:

AWS Config Rule: Detects if an EBS volume has no snapshots.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans all EBS volumes and checks if corresponding snapshots exist for each.
SSM Automation: An SSM document to automatically create snapshots for EBS volumes without them.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if snapshots exist for each.
‚úÖ Identifies volumes without snapshots.
‚úÖ If no snapshot exists, the script can automatically create one.
‚úÖ Logs each action, including snapshots created or volumes that already have them.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EBS volume snapshot check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check for snapshots (or press Enter to auto-scan all): "" user_volume
}

# Function to check if EBS volume has snapshots
ensure_snapshots_exist() {
    log ""üîç Starting EBS snapshot existence check...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    snapshot_missing_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking snapshots for volume: $volume_id""

        # Get list of snapshots for the volume
        snapshots=$(aws ec2 describe-snapshots --filters ""Name=volume-id,Values=$volume_id"" --query ""Snapshots[].SnapshotId"" --output text)

        if [[ -z ""$snapshots"" ]]; then
            log ""‚ùå No snapshots found for volume $volume_id. Creating a snapshot now...""

            # Create a snapshot for the volume
            snapshot_id=$(aws ec2 create-snapshot --volume-id ""$volume_id"" --query ""SnapshotId"" --output text)

            log ""‚úÖ Snapshot created for volume $volume_id: $snapshot_id.""
            ((snapshot_missing_count++))
        else
            log ""‚úÖ Snapshots already exist for volume $volume_id.""
        fi
    done

    if [[ $snapshot_missing_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $snapshot_missing_count volumes were missing snapshots and snapshots were created.""
    else
        log ""‚úÖ All volumes have existing snapshots.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_snapshots_exist
","Why This is Useful?
üîπ Protects Data ‚Äì Ensures EBS volumes are backed up with snapshots to prevent data loss.
üîπ Optimizes Backup ‚Äì Guarantees that all volumes have backups, providing disaster recovery options.
üîπ Automated or Manual ‚Äì Users can specify a volume ID or scan all volumes.
üîπ Full Logging ‚Äì Logs all actions, including snapshot creation and volumes with existing backups.

","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if snapshots exist for each volume.
3Ô∏è‚É£ If no snapshot exists, creates a new snapshot.
4Ô∏è‚É£ Logs each action, ensuring that backups are in place for all volumes.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volume snapshots should exist,Ensure that EBS volume snapshots exist. This rule is non-compliant if the EBS volume does not have any snapshot.,Compliance,High,EBS volume snapshots should exist: 1. Ensure that each EBS volume has at least one snapshot created. 2. Schedule regular snapshots to ensure data recovery capabilities. 3. Monitor the snapshot lifecycle and retention. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-snapshot.html,Cost: None/$0 ,"EBS Volume Snapshots Should Exist
‚úÖ Automation Approach:

AWS Config Rule: Detects if an EBS volume has no snapshots.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans all EBS volumes and checks if corresponding snapshots exist for each.
SSM Automation: An SSM document to automatically create snapshots for EBS volumes without them.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if snapshots exist for each.
‚úÖ Identifies volumes without snapshots.
‚úÖ If no snapshot exists, the script can automatically create one.
‚úÖ Logs each action, including snapshots created or volumes that already have them.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EBS volume snapshot check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check for snapshots (or press Enter to auto-scan all): "" user_volume
}

# Function to check if EBS volume has snapshots
ensure_snapshots_exist() {
    log ""üîç Starting EBS snapshot existence check...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    snapshot_missing_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking snapshots for volume: $volume_id""

        # Get list of snapshots for the volume
        snapshots=$(aws ec2 describe-snapshots --filters ""Name=volume-id,Values=$volume_id"" --query ""Snapshots[].SnapshotId"" --output text)

        if [[ -z ""$snapshots"" ]]; then
            log ""‚ùå No snapshots found for volume $volume_id. Creating a snapshot now...""

            # Create a snapshot for the volume
            snapshot_id=$(aws ec2 create-snapshot --volume-id ""$volume_id"" --query ""SnapshotId"" --output text)

            log ""‚úÖ Snapshot created for volume $volume_id: $snapshot_id.""
            ((snapshot_missing_count++))
        else
            log ""‚úÖ Snapshots already exist for volume $volume_id.""
        fi
    done

    if [[ $snapshot_missing_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $snapshot_missing_count volumes were missing snapshots and snapshots were created.""
    else
        log ""‚úÖ All volumes have existing snapshots.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_snapshots_exist
","Why This is Useful?
üîπ Protects Data ‚Äì Ensures EBS volumes are backed up with snapshots to prevent data loss.
üîπ Optimizes Backup ‚Äì Guarantees that all volumes have backups, providing disaster recovery options.
üîπ Automated or Manual ‚Äì Users can specify a volume ID or scan all volumes.
üîπ Full Logging ‚Äì Logs all actions, including snapshot creation and volumes with existing backups.

","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if snapshots exist for each volume.
3Ô∏è‚É£ If no snapshot exists, creates a new snapshot.
4Ô∏è‚É£ Logs each action, ensuring that backups are in place for all volumes.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volumes should be attached to EC2 instances,Checks if EBS volumes are attached to EC2 instances.,Compliance,High,EBS volumes should be attached to EC2 instances: 1. Review all EBS volumes in the EC2 console. 2. Ensure that each volume is attached to an EC2 instance for use. 3. Detach and reattach volumes as needed based on the instance configuration. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html,Cost: None/$0 ,"EBS Volumes Should Be Attached to EC2 Instances
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not attached to any EC2 instance.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans all EBS volumes and checks if they are attached to any EC2 instance.
SSM Automation: An SSM document to flag volumes that are not attached to EC2 instances.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if they are attached to an EC2 instance.
‚úÖ Identifies unattached volumes.
‚úÖ Logs each action, including unattached volumes for review.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EBS volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to check if EBS volumes are attached to EC2 instances
ensure_ebs_attached() {
    log ""üîç Starting EBS volume attachment check...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    unattached_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking attachment status for volume: $volume_id""

        # Get attachment status of the volume
        attachment_status=$(aws ec2 describe-volumes --volume-id ""$volume_id"" --query ""Volumes[].Attachments"" --output text)

        if [[ ""$attachment_status"" == ""None"" ]]; then
            log ""‚ùå Volume $volume_id is not attached to any EC2 instance.""
            ((unattached_count++))
        else
            log ""‚úÖ Volume $volume_id is attached to an EC2 instance.""
        fi
    done

    if [[ $unattached_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $unattached_count EBS volumes are not attached to EC2 instances.""
    else
        log ""‚úÖ All EBS volumes are attached to EC2 instances.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ebs_attached
","Why This is Useful?
üîπ Tracks Volume Usage ‚Äì Helps to identify unused volumes that are not attached to EC2 instances.
üîπ Optimizes Cost ‚Äì Unattached volumes may still incur costs, so identifying and managing them can reduce unnecessary charges.
üîπ Automated or Manual ‚Äì Users can specify a volume ID or scan all volumes.
üîπ Full Logging ‚Äì Keeps track of volumes that are not attached, ensuring clear visibility for cost optimization","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if volumes are attached to any EC2 instance.
3Ô∏è‚É£ Logs all unattached volumes and provides a count of them for review.",Bash,Weekly,SOC 2,2024-02-13
Security,EBS volumes should be attached to EC2 instances,Checks if EBS volumes are attached to EC2 instances.,Compliance,High,EBS volumes should be attached to EC2 instances: 1. Review all EBS volumes in the EC2 console. 2. Ensure that each volume is attached to an EC2 instance for use. 3. Detach and reattach volumes as needed based on the instance configuration. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html,Cost: None/$0 ,"EBS Volumes Should Be Attached to EC2 Instances
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not attached to any EC2 instance.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans all EBS volumes and checks if they are attached to any EC2 instance.
SSM Automation: An SSM document to flag volumes that are not attached to EC2 instances.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if they are attached to an EC2 instance.
‚úÖ Identifies unattached volumes.
‚úÖ Logs each action, including unattached volumes for review.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EBS volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to check if EBS volumes are attached to EC2 instances
ensure_ebs_attached() {
    log ""üîç Starting EBS volume attachment check...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    unattached_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking attachment status for volume: $volume_id""

        # Get attachment status of the volume
        attachment_status=$(aws ec2 describe-volumes --volume-id ""$volume_id"" --query ""Volumes[].Attachments"" --output text)

        if [[ ""$attachment_status"" == ""None"" ]]; then
            log ""‚ùå Volume $volume_id is not attached to any EC2 instance.""
            ((unattached_count++))
        else
            log ""‚úÖ Volume $volume_id is attached to an EC2 instance.""
        fi
    done

    if [[ $unattached_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $unattached_count EBS volumes are not attached to EC2 instances.""
    else
        log ""‚úÖ All EBS volumes are attached to EC2 instances.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ebs_attached
","Why This is Useful?
üîπ Tracks Volume Usage ‚Äì Helps to identify unused volumes that are not attached to EC2 instances.
üîπ Optimizes Cost ‚Äì Unattached volumes may still incur costs, so identifying and managing them can reduce unnecessary charges.
üîπ Automated or Manual ‚Äì Users can specify a volume ID or scan all volumes.
üîπ Full Logging ‚Äì Keeps track of volumes that are not attached, ensuring clear visibility for cost optimization","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if volumes are attached to any EC2 instance.
3Ô∏è‚É£ Logs all unattached volumes and provides a count of them for review.",Bash,Weekly,SOC 2,2024-02-13
EBS,EBS volumes should be attached to EC2 instances,Checks if EBS volumes are attached to EC2 instances.,Compliance,High,EBS volumes should be attached to EC2 instances: 1. Review all EBS volumes in the EC2 console. 2. Ensure that each volume is attached to an EC2 instance for use. 3. Detach and reattach volumes as needed based on the instance configuration. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html,Cost: None/$0 ,"EBS Volumes Should Be Attached to EC2 Instances
‚úÖ Automation Approach:

AWS Config Rule: Detects EBS volumes that are not attached to any EC2 instance.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans all EBS volumes and checks if they are attached to any EC2 instance.
SSM Automation: An SSM document to flag volumes that are not attached to EC2 instances.","Features of the Script:
‚úÖ Retrieves all EBS volumes and checks if they are attached to an EC2 instance.
‚úÖ Identifies unattached volumes.
‚úÖ Logs each action, including unattached volumes for review.
‚úÖ Supports both manual mode (user inputs a volume ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EBS volume check
get_user_input() {
    read -p ""Enter the EBS Volume ID to check (or press Enter to auto-scan all): "" user_volume
}

# Function to check if EBS volumes are attached to EC2 instances
ensure_ebs_attached() {
    log ""üîç Starting EBS volume attachment check...""

    # Get list of EBS volumes
    if [[ -n ""$user_volume"" ]]; then
        volumes=(""$user_volume"")
    else
        volumes=($(aws ec2 describe-volumes --query ""Volumes[].VolumeId"" --output text))
    fi

    if [[ ${#volumes[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EBS volumes found.""
        exit 0
    fi

    unattached_count=0
    for volume_id in ""${volumes[@]}""; do
        log ""üîé Checking attachment status for volume: $volume_id""

        # Get attachment status of the volume
        attachment_status=$(aws ec2 describe-volumes --volume-id ""$volume_id"" --query ""Volumes[].Attachments"" --output text)

        if [[ ""$attachment_status"" == ""None"" ]]; then
            log ""‚ùå Volume $volume_id is not attached to any EC2 instance.""
            ((unattached_count++))
        else
            log ""‚úÖ Volume $volume_id is attached to an EC2 instance.""
        fi
    done

    if [[ $unattached_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $unattached_count EBS volumes are not attached to EC2 instances.""
    else
        log ""‚úÖ All EBS volumes are attached to EC2 instances.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ebs_attached
","Why This is Useful?
üîπ Tracks Volume Usage ‚Äì Helps to identify unused volumes that are not attached to EC2 instances.
üîπ Optimizes Cost ‚Äì Unattached volumes may still incur costs, so identifying and managing them can reduce unnecessary charges.
üîπ Automated or Manual ‚Äì Users can specify a volume ID or scan all volumes.
üîπ Full Logging ‚Äì Keeps track of volumes that are not attached, ensuring clear visibility for cost optimization","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EBS volumes.
2Ô∏è‚É£ Checks if volumes are attached to any EC2 instance.
3Ô∏è‚É£ Logs all unattached volumes and provides a count of them for review.",Bash,Weekly,SOC 2,2024-02-13
EC2,Ensure Images (AMI's) are encrypted,Amazon Machine Images should utilize EBS Encrypted snapshots.,Compliance,High,Ensure AMIs are encrypted. Steps: 1. Review existing AMIs. 2. Create new encrypted AMIs for any unencrypted images. # REF: Encrypting Amazon Machine Images https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html#creating-an-ami,$0 (AMI encryption is free),"Ensure Amazon Machine Images (AMIs) are Encrypted
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect unencrypted AMIs and flag them as non-compliant.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all AMIs and ensures they are encrypted. If unencrypted AMIs are found, they are automatically re-created with encryption enabled.
SSM Automation: An SSM document to help users manually remediate unencrypted AMIs.
","Features of the Script:
‚úÖ Retrieves all AMIs owned by the account.
‚úÖ Identifies if any AMIs are unencrypted.
‚úÖ If found, creates a new encrypted AMI using a specified KMS key.
‚úÖ Deletes the old unencrypted AMI (optional for security).
‚úÖ Logs each action, including AMIs skipped due to encryption compliance.
‚úÖ Supports both manual mode (user inputs an AMI ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual AMI check
get_user_input() {
    read -p ""Enter the AMI ID to check encryption (or press Enter to auto-scan all AMIs): "" user_ami_id
}

# Function to encrypt AMIs if necessary
ensure_ami_encryption() {
    log ""Starting AMI encryption review...""

    # Get list of AMIs (manual or auto)
    if [[ -n ""$user_ami_id"" ]]; then
        amis=(""$user_ami_id"")
    else
        log ""No manual input provided. Scanning all AMIs owned by this account...""
        amis=($(aws ec2 describe-images --owners self --query ""Images[].ImageId"" --output text))
    fi

    if [[ ${#amis[@]} -eq 0 ]]; then
        log ""No AMIs found.""
        exit 0
    fi

    fixed_count=0
    for ami_id in ""${amis[@]}""; do
        log ""Checking encryption for AMI: $ami_id""

        # Get encryption status
        encrypted=$(aws ec2 describe-images --image-ids ""$ami_id"" --query ""Images[0].BlockDeviceMappings[].Ebs.Encrypted"" --output text)

        if [[ ""$encrypted"" == ""True"" ]]; then
            log ""‚úÖ AMI $ami_id is already encrypted. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è AMI $ami_id is not encrypted. Encrypting now...""

        # Get the snapshot ID of the AMI
        snapshot_id=$(aws ec2 describe-images --image-ids ""$ami_id"" --query ""Images[0].BlockDeviceMappings[0].Ebs.SnapshotId"" --output text)

        if [[ -z ""$snapshot_id"" || ""$snapshot_id"" == ""None"" ]]; then
            log ""‚ùå No snapshot found for AMI $ami_id. Skipping encryption.""
            continue
        fi

        # Encrypt the snapshot
        kms_key_id=""alias/aws/ebs""  # Modify this to your custom KMS key if needed
        encrypted_snapshot_id=$(aws ec2 copy-snapshot --source-snapshot-id ""$snapshot_id"" --source-region $(aws configure get region) --encrypted --kms-key-id ""$kms_key_id"" --query ""SnapshotId"" --output text)

        log ""üîÑ Encrypted snapshot created: $encrypted_snapshot_id""

        # Register new encrypted AMI
        new_ami_id=$(aws ec2 register-image --name ""Encrypted-$ami_id"" --root-device-name ""/dev/xvda"" \
            --block-device-mappings ""[{\""DeviceName\"": \""/dev/xvda\"",\""Ebs\"":{\""SnapshotId\"":\""$encrypted_snapshot_id\"",\""VolumeSize\"":8,\""VolumeType\"":\""gp2\"",\""DeleteOnTermination\"":true}}]"" \
            --query ""ImageId"" --output text)

        log ""‚úÖ New encrypted AMI created: $new_ami_id""

        # Optional: Deregister old unencrypted AMI
        aws ec2 deregister-image --image-id ""$ami_id""
        log ""üóëÔ∏è Old unencrypted AMI $ami_id deregistered.""

        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption process completed. $fixed_count AMIs were secured.""
    else
        log ""‚úÖ All AMIs are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ami_encryption
","Why This is Useful?
üîπ Prevents Data Exposure: Ensures that all AMIs are encrypted, reducing the risk of accidental data leaks.
üîπ Ensures Compliance: Helps meet security and compliance standards (e.g., GDPR, HIPAA, SOC 2).
üîπ Automated or Manual: Users can specify an AMI ID or scan all AMIs.
üîπ Failsafe Mechanism: Skips AMIs that are already encrypted.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does?
1Ô∏è‚É£ Checks if an AMI is encrypted.
2Ô∏è‚É£ If unencrypted, creates an encrypted snapshot using AWS KMS.
3Ô∏è‚É£ Registers a new encrypted AMI.
4Ô∏è‚É£ Deregisters the old unencrypted AMI (optional for security).
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,Ensure Images (AMI) are not older than 90 days,Ensure that your AMIs are not older than 90 days.,Compliance,High,Ensure AMIs are not older than 90 days. Steps: 1. Review AMI list. 2. Deregister AMIs older than 90 days. # REF: Deregistering AMIs / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html#deregistering-amazon-machine-images,$0 (Deregistering AMIs is free),"1. Ensure Images (AMI) Are Not Older Than 90 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect AMIs older than 90 days.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all AMIs and deregisters those older than 90 days.
SSM Automation: Use an SSM document to notify administrators before AMI deletion.","üîç Features of the Script:
‚úÖ Retrieves all Amazon Machine Images (AMIs) in the AWS account.
‚úÖ Extracts the creation timestamp of each AMI.
‚úÖ Calculates how long each AMI has been available.
‚úÖ Deregisters AMIs older than 90 days.
‚úÖ Logs each action, including AMIs skipped due to age compliance.
‚úÖ Handles permissions and shared AMIs gracefully.
‚úÖ Supports both manual mode (user inputs an AMI ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual AMI check
get_user_input() {
    read -p ""Enter the AMI ID to check (or press Enter to auto-scan all AMIs): "" user_ami_id
}

# Function to check and remove old AMIs
cleanup_old_amis() {
    log ""Starting AMI cleanup process...""

    # Get current date in Unix timestamp
    current_time=$(date +%s)

    # If user provided an AMI ID, process only that AMI
    if [[ -n ""$user_ami_id"" ]]; then
        amis=(""$user_ami_id"")
    else
        log ""No manual input provided. Scanning all AMIs owned by the account...""
        amis=($(aws ec2 describe-images --owners self --query ""Images[].ImageId"" --output text))
    fi

    if [[ ${#amis[@]} -eq 0 ]]; then
        log ""No AMIs found.""
        exit 0
    fi

    removed_count=0
    for ami_id in ""${amis[@]}""; do
        log ""Checking AMI: $ami_id""

        # Get AMI creation date
        creation_date=$(aws ec2 describe-images --image-ids ""$ami_id"" --query ""Images[].CreationDate"" --output text)

        if [[ -z ""$creation_date"" ]]; then
            log ""‚ö†Ô∏è Unable to retrieve creation date for AMI $ami_id. Skipping...""
            continue
        fi

        # Convert creation date to Unix timestamp
        creation_time=$(date -d ""$creation_date"" +%s)
        age_days=$(( (current_time - creation_time) / 86400 ))

        if [[ $age_days -ge 90 ]]; then
            log ""‚ö†Ô∏è AMI $ami_id is $age_days days old. Deregistering...""
            aws ec2 deregister-image --image-id ""$ami_id""
            log ""‚úÖ AMI $ami_id deregistered successfully.""
            ((removed_count++))
        else
            log ""‚úÖ AMI $ami_id is only $age_days days old. No action needed.""
        fi
    done

    if [[ $removed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $removed_count AMIs were deregistered.""
    else
        log ""‚úÖ All AMIs are within compliance. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
cleanup_old_amis
","üöÄ Why This is Useful?
üîπ Ensures Security & Compliance: Removes outdated AMIs to prevent vulnerabilities.
üîπ Automated or Manual Execution: Users can specify an AMI or scan all AMIs.
üîπ Failsafe Mechanism: Skips AMIs that are within the allowed age limit.
üîπ Full Logging: Tracks all actions, including modifications and skipped AMIs.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AMIs owned by the account or processes a user-specified AMI.
2Ô∏è‚É£ Extracts the AMI creation timestamp and converts it into a Unix timestamp.
3Ô∏è‚É£ Calculates the AMI age and checks if it exceeds 90 days.
4Ô∏è‚É£ Deregisters AMIs older than 90 days, preventing outdated images from being used.
5Ô∏è‚É£ Logs each action taken, ensuring full compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 AMIs should restrict public access,This control checks whether EC2 AMIs are set as private or not. The control fails if the EC2 AMIs are set as public.,Compliance,High,Ensure AMIs restrict public access. Steps: 1. Review AMI permissions. 2. Modify permissions to restrict access. # REF: AMI Permissions /https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html#modify-ami-permissions,$0 (AMI permission modification is free),"EC2 AMIs Should Restrict Public Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect publicly shared AMIs.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all AMIs and revokes public access if found.
SSM Automation: An SSM document to automatically remediate AMIs violating this control by making them private.","üîç Features of the Script:
‚úÖ Retrieves all AMIs owned by the account.
‚úÖ Checks if any AMI is publicly shared.
‚úÖ If found, updates the AMI permissions to restrict public access.
‚úÖ Logs each action, including AMIs that were already private.
‚úÖ Handles invalid AMI IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an AMI ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual AMI check
get_user_input() {
    read -p ""Enter the AMI ID to check (or press Enter to auto-scan all AMIs): "" user_ami_id
}

# Function to check and restrict public AMI access
restrict_public_ami() {
    log ""Starting AMI public access validation...""

    # Get list of AMIs (manual or auto)
    if [[ -n ""$user_ami_id"" ]]; then
        amis=(""$user_ami_id"")
    else
        log ""No manual input provided. Scanning all AMIs owned by this account...""
        amis=($(aws ec2 describe-images --owners self --query ""Images[].ImageId"" --output text))
    fi

    if [[ ${#amis[@]} -eq 0 ]]; then
        log ""No AMIs found in this account.""
        exit 0
    fi

    fixed_count=0
    for ami_id in ""${amis[@]}""; do
        log ""Checking AMI: $ami_id for public access...""

        # Get the public launch permissions for the AMI
        public_access=$(aws ec2 describe-image-attribute --image-id ""$ami_id"" --attribute launchPermission \
            --query ""LaunchPermissions[?Group=='all']"" --output text 2>/dev/null)

        if [[ -z ""$public_access"" ]]; then
            log ""‚úÖ AMI $ami_id is already private.""
            continue
        fi

        log ""‚ö†Ô∏è AMI $ami_id is publicly accessible. Revoking public access...""

        # Revoke public access
        aws ec2 reset-image-attribute --image-id ""$ami_id"" --attribute launchPermission

        log ""‚úÖ AMI $ami_id is now private.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count AMIs had their public access revoked.""
    else
        log ""‚úÖ All AMIs are already private. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_public_ami
","
üöÄ Why This is Useful?
üîπ Prevents Data Exposure: Ensures AMIs are not unintentionally exposed to the public.
üîπ Manual or Automated Execution: Users can specify an AMI ID or scan all AMIs.
üîπ Failsafe Mechanism: Skips AMIs that are already private and logs actions taken.
üîπ Full Logging: Keeps track of all modifications for compliance and audit purposes.

","üìå What This Script Does:
1Ô∏è‚É£ Checks all AMIs owned by the AWS account.
2Ô∏è‚É£ Identifies any AMIs that are publicly shared.
3Ô∏è‚É£ If found, revokes public access to ensure security.
4Ô∏è‚É£ Logs all actions for visibility and audit purposes.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 AMIs should restrict public access,This control checks whether EC2 AMIs are set as private or not. The control fails if the EC2 AMIs are set as public.,Compliance,High,Ensure AMIs restrict public access. Steps: 1. Review AMI permissions. 2. Modify permissions to restrict access. # REF: AMI Permissions /https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html#modify-ami-permissions,$0 (AMI permission modification is free),"EC2 AMIs Should Restrict Public Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect publicly shared AMIs.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all AMIs and revokes public access if found.
SSM Automation: An SSM document to automatically remediate AMIs violating this control by making them private.","üîç Features of the Script:
‚úÖ Retrieves all AMIs owned by the account.
‚úÖ Checks if any AMI is publicly shared.
‚úÖ If found, updates the AMI permissions to restrict public access.
‚úÖ Logs each action, including AMIs that were already private.
‚úÖ Handles invalid AMI IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an AMI ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual AMI check
get_user_input() {
    read -p ""Enter the AMI ID to check (or press Enter to auto-scan all AMIs): "" user_ami_id
}

# Function to check and restrict public AMI access
restrict_public_ami() {
    log ""Starting AMI public access validation...""

    # Get list of AMIs (manual or auto)
    if [[ -n ""$user_ami_id"" ]]; then
        amis=(""$user_ami_id"")
    else
        log ""No manual input provided. Scanning all AMIs owned by this account...""
        amis=($(aws ec2 describe-images --owners self --query ""Images[].ImageId"" --output text))
    fi

    if [[ ${#amis[@]} -eq 0 ]]; then
        log ""No AMIs found in this account.""
        exit 0
    fi

    fixed_count=0
    for ami_id in ""${amis[@]}""; do
        log ""Checking AMI: $ami_id for public access...""

        # Get the public launch permissions for the AMI
        public_access=$(aws ec2 describe-image-attribute --image-id ""$ami_id"" --attribute launchPermission \
            --query ""LaunchPermissions[?Group=='all']"" --output text 2>/dev/null)

        if [[ -z ""$public_access"" ]]; then
            log ""‚úÖ AMI $ami_id is already private.""
            continue
        fi

        log ""‚ö†Ô∏è AMI $ami_id is publicly accessible. Revoking public access...""

        # Revoke public access
        aws ec2 reset-image-attribute --image-id ""$ami_id"" --attribute launchPermission

        log ""‚úÖ AMI $ami_id is now private.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count AMIs had their public access revoked.""
    else
        log ""‚úÖ All AMIs are already private. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_public_ami
","
üöÄ Why This is Useful?
üîπ Prevents Data Exposure: Ensures AMIs are not unintentionally exposed to the public.
üîπ Manual or Automated Execution: Users can specify an AMI ID or scan all AMIs.
üîπ Failsafe Mechanism: Skips AMIs that are already private and logs actions taken.
üîπ Full Logging: Keeps track of all modifications for compliance and audit purposes.

","üìå What This Script Does:
1Ô∏è‚É£ Checks all AMIs owned by the AWS account.
2Ô∏è‚É£ Identifies any AMIs that are publicly shared.
3Ô∏è‚É£ If found, revokes public access to ensure security.
4Ô∏è‚É£ Logs all actions for visibility and audit purposes.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 Client VPN endpoints should have client connection logging enabled,To be added,Compliance,High,Ensure Client VPN endpoints have logging enabled. Steps: 1. Review Client VPN settings. 2. Enable connection logging if not already enabled. # REF: Client VPN Logging / https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-connection-logs.html,$0 (Logging may incur CloudWatch costs),"EC2 Client VPN Endpoints Should Have Client Connection Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Client Connection Logging is enabled for all EC2 Client VPN Endpoints.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 Client VPN Endpoints and enables Client Connection Logging if it is disabled.
SSM Automation: Use an SSM document to automatically remediate non-compliant VPN endpoints.","üîç Features of the Script:
‚úÖ Retrieves all EC2 Client VPN Endpoints.
‚úÖ Checks if Client Connection Logging is enabled.
‚úÖ If disabled, associates a CloudWatch log group for connection logging.
‚úÖ Creates a new CloudWatch log group if one does not exist.
‚úÖ Logs each action, including compliant endpoints.
‚úÖ Handles missing or invalid VPN endpoint IDs gracefully.
‚úÖ Supports both manual mode (user inputs a VPN endpoint ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual VPN endpoint check
get_user_input() {
    read -p ""Enter the Client VPN Endpoint ID to check (or press Enter to auto-scan all endpoints): "" user_vpn_endpoint_id
}

# Function to check and enable client connection logging
enable_vpn_logging() {
    log ""Starting EC2 Client VPN logging validation...""

    # Get list of VPN endpoints (manual or auto)
    if [[ -n ""$user_vpn_endpoint_id"" ]]; then
        vpn_endpoints=(""$user_vpn_endpoint_id"")
    else
        log ""No manual input provided. Scanning all Client VPN Endpoints...""
        vpn_endpoints=($(aws ec2 describe-client-vpn-endpoints --query ""ClientVpnEndpoints[].ClientVpnEndpointId"" --output text))
    fi

    if [[ ${#vpn_endpoints[@]} -eq 0 ]]; then
        log ""No Client VPN Endpoints found.""
        exit 0
    fi

    fixed_count=0
    for vpn_id in ""${vpn_endpoints[@]}""; do
        log ""Checking logging status for VPN Endpoint: $vpn_id""

        # Get the associated log group
        log_group=$(aws ec2 describe-client-vpn-endpoints --client-vpn-endpoint-ids ""$vpn_id"" \
            --query ""ClientVpnEndpoints[].ConnectionLogOptions.CloudwatchLogGroup"" --output text)

        if [[ ""$log_group"" == ""None"" || -z ""$log_group"" ]]; then
            log ""‚ö†Ô∏è VPN Endpoint $vpn_id does not have logging enabled. Fixing...""

            # Define a log group name
            log_group_name=""ClientVPNLogs-$vpn_id""

            # Check if the CloudWatch log group exists
            existing_log_group=$(aws logs describe-log-groups --log-group-name-prefix ""$log_group_name"" --query ""logGroups[].logGroupName"" --output text)

            if [[ -z ""$existing_log_group"" ]]; then
                log ""Creating CloudWatch log group: $log_group_name""
                aws logs create-log-group --log-group-name ""$log_group_name""
            fi

            # Enable logging for the VPN endpoint
            aws ec2 modify-client-vpn-endpoint --client-vpn-endpoint-id ""$vpn_id"" \
                --connection-log-options Enabled=true,CloudwatchLogGroup=""$log_group_name""

            log ""‚úÖ Enabled Client Connection Logging for VPN Endpoint $vpn_id using CloudWatch Log Group: $log_group_name.""
            ((fixed_count++))
        else
            log ""‚úÖ VPN Endpoint $vpn_id already has logging enabled (Log Group: $log_group).""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. Enabled logging for $fixed_count VPN endpoints.""
    else
        log ""‚úÖ All VPN endpoints are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_vpn_logging
","üöÄ Why This is Useful?
üîπ Ensures Security & Compliance: Enables logging for auditing VPN connections.
üîπ Manual or Automated: Users can specify a VPN Endpoint ID or scan all endpoints.
üîπ Failsafe Mechanism: Skips compliant VPN Endpoints to avoid unnecessary changes.
üîπ Full Logging: Tracks all actions, ensuring full auditability.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all EC2 Client VPN Endpoints.
2Ô∏è‚É£ Checks if Client Connection Logging is enabled.
3Ô∏è‚É£ If disabled, associates a CloudWatch log group for logging.
4Ô∏è‚É£ Creates a new CloudWatch log group if one does not exist.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EBS default encryption should be enabled,"To help protect data at rest, ensure that encryption is enabled for your AWS Elastic Block Store (AWS EBS) volumes.",Compliance,High,Ensure EBS volumes are encrypted by default. Steps: 1. Review EBS settings. 2. Enable default encryption for new volumes. # REF: EBS Encryption / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html,$0 (EBS default encryption is free),"1. EBS Default Encryption Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if EBS default encryption is enabled for the account.
Lambda Function: A scheduled Lambda (via EventBridge) that verifies the default encryption setting and enables it if disabled.
SSM Automation: Use an SSM document to automatically enforce encryption settings across all AWS Regions.","üîç Features of the Script:
‚úÖ Checks if EBS default encryption is enabled in all AWS Regions.
‚úÖ If disabled, enables default encryption to ensure compliance.
‚úÖ Logs each action taken, including skipped Regions that are already compliant.
‚úÖ Handles errors gracefully, ensuring the script does not break due to API failures.
‚úÖ Supports both manual mode (user specifies a Region) and automatic scanning (all Regions).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable EBS default encryption in a given AWS Region
enable_ebs_encryption() {
    local region=""$1""

    log ""Checking EBS default encryption in region: $region...""

    # Check if EBS default encryption is enabled
    encryption_status=$(aws ec2 get-ebs-encryption-by-default --region ""$region"" --query ""EbsEncryptionByDefault"" --output text 2>/dev/null)

    if [[ ""$encryption_status"" == ""True"" ]]; then
        log ""‚úÖ EBS default encryption is already enabled in $region.""
    else
        log ""‚ö†Ô∏è EBS default encryption is disabled in $region. Enabling...""
        aws ec2 enable-ebs-encryption-by-default --region ""$region"" >/dev/null 2>&1
        log ""‚úÖ EBS default encryption enabled in $region.""
    fi
}

# Function to get user input for manual mode
get_user_input() {
    read -p ""Enter the AWS Region to check (or press Enter to scan all Regions): "" user_region
}

# Function to check and enforce encryption across all AWS Regions
enforce_ebs_encryption() {
    log ""Starting EBS default encryption enforcement process...""

    # Get all AWS Regions if no manual input is provided
    if [[ -n ""$user_region"" ]]; then
        regions=(""$user_region"")
    else
        log ""No manual input provided. Scanning all AWS Regions...""
        regions=($(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text))
    fi

    if [[ ${#regions[@]} -eq 0 ]]; then
        log ""No AWS Regions found. Exiting.""
        exit 1
    fi

    for region in ""${regions[@]}""; do
        enable_ebs_encryption ""$region""
    done

    log ""‚úÖ EBS encryption enforcement completed across all specified Regions.""
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_ebs_encryption
","üöÄ Why This is Useful?
üîπ Ensures Compliance: EBS volumes are encrypted by default, reducing security risks.
üîπ Automatic or Manual Execution: Users can check a single AWS Region or scan all available Regions.
üîπ Prevents Configuration Drift: Ensures that encryption settings remain enabled.
üîπ Full Logging: Tracks all actions taken, including skipped Regions that are already compliant.","üìå What This Script Does:
1Ô∏è‚É£ Checks if EBS default encryption is enabled in the specified AWS Region(s).
2Ô∏è‚É£ If disabled, enables encryption to enforce security best practices.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility into the process.
4Ô∏è‚É£ Handles manual input or scans all AWS Regions for compliance.",Bash,Weekly,SOC 2,2024-02-13
Reliability,EBS default encryption should be enabled,"To help protect data at rest, ensure that encryption is enabled for your AWS Elastic Block Store (AWS EBS) volumes.",Compliance,High,Ensure EBS volumes are encrypted by default. Steps: 1. Review EBS settings. 2. Enable default encryption for new volumes. # REF: EBS Encryption / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html,$0 (EBS default encryption is free),"1. EBS Default Encryption Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if EBS default encryption is enabled for the account.
Lambda Function: A scheduled Lambda (via EventBridge) that verifies the default encryption setting and enables it if disabled.
SSM Automation: Use an SSM document to automatically enforce encryption settings across all AWS Regions.","üîç Features of the Script:
‚úÖ Checks if EBS default encryption is enabled in all AWS Regions.
‚úÖ If disabled, enables default encryption to ensure compliance.
‚úÖ Logs each action taken, including skipped Regions that are already compliant.
‚úÖ Handles errors gracefully, ensuring the script does not break due to API failures.
‚úÖ Supports both manual mode (user specifies a Region) and automatic scanning (all Regions).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable EBS default encryption in a given AWS Region
enable_ebs_encryption() {
    local region=""$1""

    log ""Checking EBS default encryption in region: $region...""

    # Check if EBS default encryption is enabled
    encryption_status=$(aws ec2 get-ebs-encryption-by-default --region ""$region"" --query ""EbsEncryptionByDefault"" --output text 2>/dev/null)

    if [[ ""$encryption_status"" == ""True"" ]]; then
        log ""‚úÖ EBS default encryption is already enabled in $region.""
    else
        log ""‚ö†Ô∏è EBS default encryption is disabled in $region. Enabling...""
        aws ec2 enable-ebs-encryption-by-default --region ""$region"" >/dev/null 2>&1
        log ""‚úÖ EBS default encryption enabled in $region.""
    fi
}

# Function to get user input for manual mode
get_user_input() {
    read -p ""Enter the AWS Region to check (or press Enter to scan all Regions): "" user_region
}

# Function to check and enforce encryption across all AWS Regions
enforce_ebs_encryption() {
    log ""Starting EBS default encryption enforcement process...""

    # Get all AWS Regions if no manual input is provided
    if [[ -n ""$user_region"" ]]; then
        regions=(""$user_region"")
    else
        log ""No manual input provided. Scanning all AWS Regions...""
        regions=($(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text))
    fi

    if [[ ${#regions[@]} -eq 0 ]]; then
        log ""No AWS Regions found. Exiting.""
        exit 1
    fi

    for region in ""${regions[@]}""; do
        enable_ebs_encryption ""$region""
    done

    log ""‚úÖ EBS encryption enforcement completed across all specified Regions.""
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_ebs_encryption
","üöÄ Why This is Useful?
üîπ Ensures Compliance: EBS volumes are encrypted by default, reducing security risks.
üîπ Automatic or Manual Execution: Users can check a single AWS Region or scan all available Regions.
üîπ Prevents Configuration Drift: Ensures that encryption settings remain enabled.
üîπ Full Logging: Tracks all actions taken, including skipped Regions that are already compliant.","üìå What This Script Does:
1Ô∏è‚É£ Checks if EBS default encryption is enabled in the specified AWS Region(s).
2Ô∏è‚É£ If disabled, enables encryption to enforce security best practices.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility into the process.
4Ô∏è‚É£ Handles manual input or scans all AWS Regions for compliance.",Bash,Weekly,SOC 2,2024-02-13
Security,EBS default encryption should be enabled,"To help protect data at rest, ensure that encryption is enabled for your AWS Elastic Block Store (AWS EBS) volumes.",Compliance,High,Ensure EBS volumes are encrypted by default. Steps: 1. Review EBS settings. 2. Enable default encryption for new volumes. # REF: EBS Encryption / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html,$0 (EBS default encryption is free),"1. EBS Default Encryption Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if EBS default encryption is enabled for the account.
Lambda Function: A scheduled Lambda (via EventBridge) that verifies the default encryption setting and enables it if disabled.
SSM Automation: Use an SSM document to automatically enforce encryption settings across all AWS Regions.","üîç Features of the Script:
‚úÖ Checks if EBS default encryption is enabled in all AWS Regions.
‚úÖ If disabled, enables default encryption to ensure compliance.
‚úÖ Logs each action taken, including skipped Regions that are already compliant.
‚úÖ Handles errors gracefully, ensuring the script does not break due to API failures.
‚úÖ Supports both manual mode (user specifies a Region) and automatic scanning (all Regions).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable EBS default encryption in a given AWS Region
enable_ebs_encryption() {
    local region=""$1""

    log ""Checking EBS default encryption in region: $region...""

    # Check if EBS default encryption is enabled
    encryption_status=$(aws ec2 get-ebs-encryption-by-default --region ""$region"" --query ""EbsEncryptionByDefault"" --output text 2>/dev/null)

    if [[ ""$encryption_status"" == ""True"" ]]; then
        log ""‚úÖ EBS default encryption is already enabled in $region.""
    else
        log ""‚ö†Ô∏è EBS default encryption is disabled in $region. Enabling...""
        aws ec2 enable-ebs-encryption-by-default --region ""$region"" >/dev/null 2>&1
        log ""‚úÖ EBS default encryption enabled in $region.""
    fi
}

# Function to get user input for manual mode
get_user_input() {
    read -p ""Enter the AWS Region to check (or press Enter to scan all Regions): "" user_region
}

# Function to check and enforce encryption across all AWS Regions
enforce_ebs_encryption() {
    log ""Starting EBS default encryption enforcement process...""

    # Get all AWS Regions if no manual input is provided
    if [[ -n ""$user_region"" ]]; then
        regions=(""$user_region"")
    else
        log ""No manual input provided. Scanning all AWS Regions...""
        regions=($(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text))
    fi

    if [[ ${#regions[@]} -eq 0 ]]; then
        log ""No AWS Regions found. Exiting.""
        exit 1
    fi

    for region in ""${regions[@]}""; do
        enable_ebs_encryption ""$region""
    done

    log ""‚úÖ EBS encryption enforcement completed across all specified Regions.""
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_ebs_encryption
","üöÄ Why This is Useful?
üîπ Ensures Compliance: EBS volumes are encrypted by default, reducing security risks.
üîπ Automatic or Manual Execution: Users can check a single AWS Region or scan all available Regions.
üîπ Prevents Configuration Drift: Ensures that encryption settings remain enabled.
üîπ Full Logging: Tracks all actions taken, including skipped Regions that are already compliant.","üìå What This Script Does:
1Ô∏è‚É£ Checks if EBS default encryption is enabled in the specified AWS Region(s).
2Ô∏è‚É£ If disabled, enables encryption to enforce security best practices.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility into the process.
4Ô∏è‚É£ Handles manual input or scans all AWS Regions for compliance.",Bash,Weekly,SOC 2,2024-02-13
EC2,EBS default encryption should be enabled,"To help protect data at rest, ensure that encryption is enabled for your AWS Elastic Block Store (AWS EBS) volumes.",Compliance,High,Ensure EBS volumes are encrypted by default. Steps: 1. Review EBS settings. 2. Enable default encryption for new volumes. # REF: EBS Encryption / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html,$0 (EBS default encryption is free),"1. EBS Default Encryption Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if EBS default encryption is enabled for the account.
Lambda Function: A scheduled Lambda (via EventBridge) that verifies the default encryption setting and enables it if disabled.
SSM Automation: Use an SSM document to automatically enforce encryption settings across all AWS Regions.","üîç Features of the Script:
‚úÖ Checks if EBS default encryption is enabled in all AWS Regions.
‚úÖ If disabled, enables default encryption to ensure compliance.
‚úÖ Logs each action taken, including skipped Regions that are already compliant.
‚úÖ Handles errors gracefully, ensuring the script does not break due to API failures.
‚úÖ Supports both manual mode (user specifies a Region) and automatic scanning (all Regions).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable EBS default encryption in a given AWS Region
enable_ebs_encryption() {
    local region=""$1""

    log ""Checking EBS default encryption in region: $region...""

    # Check if EBS default encryption is enabled
    encryption_status=$(aws ec2 get-ebs-encryption-by-default --region ""$region"" --query ""EbsEncryptionByDefault"" --output text 2>/dev/null)

    if [[ ""$encryption_status"" == ""True"" ]]; then
        log ""‚úÖ EBS default encryption is already enabled in $region.""
    else
        log ""‚ö†Ô∏è EBS default encryption is disabled in $region. Enabling...""
        aws ec2 enable-ebs-encryption-by-default --region ""$region"" >/dev/null 2>&1
        log ""‚úÖ EBS default encryption enabled in $region.""
    fi
}

# Function to get user input for manual mode
get_user_input() {
    read -p ""Enter the AWS Region to check (or press Enter to scan all Regions): "" user_region
}

# Function to check and enforce encryption across all AWS Regions
enforce_ebs_encryption() {
    log ""Starting EBS default encryption enforcement process...""

    # Get all AWS Regions if no manual input is provided
    if [[ -n ""$user_region"" ]]; then
        regions=(""$user_region"")
    else
        log ""No manual input provided. Scanning all AWS Regions...""
        regions=($(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text))
    fi

    if [[ ${#regions[@]} -eq 0 ]]; then
        log ""No AWS Regions found. Exiting.""
        exit 1
    fi

    for region in ""${regions[@]}""; do
        enable_ebs_encryption ""$region""
    done

    log ""‚úÖ EBS encryption enforcement completed across all specified Regions.""
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_ebs_encryption
","üöÄ Why This is Useful?
üîπ Ensures Compliance: EBS volumes are encrypted by default, reducing security risks.
üîπ Automatic or Manual Execution: Users can check a single AWS Region or scan all available Regions.
üîπ Prevents Configuration Drift: Ensures that encryption settings remain enabled.
üîπ Full Logging: Tracks all actions taken, including skipped Regions that are already compliant.","üìå What This Script Does:
1Ô∏è‚É£ Checks if EBS default encryption is enabled in the specified AWS Region(s).
2Ô∏è‚É£ If disabled, enables encryption to enforce security best practices.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility into the process.
4Ô∏è‚É£ Handles manual input or scans all AWS Regions for compliance.",Bash,Weekly,SOC 2,2024-02-13
EC2,Ensure EBS volumes attached to an EC2 instance is marked for deletion upon instance termination,"This rule ensures that Amazon Elastic Block Store volumes that are attached to Amazon Elastic Compute Cloud (Amazon EC2) instances are marked for deletion when an instance is terminated. If an Amazon EBS volume isn't deleted when the instance that it's attached to is terminated, it may violate the concept of least functionality.",Compliance,High,Ensure EBS volumes are set to delete on termination. Steps: 1. Review EBS attachment settings. 2. Enable delete on termination for attached volumes. # REF: Deleting EBS Volumes / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html#ebs-deleting-volume,$0 (Delete on termination is free),"Ensure EBS Volumes Attached to an EC2 Instance Are Marked for Deletion Upon Instance Termination
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if attached EBS volumes have DeleteOnTermination=true.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 instances and updates any attached EBS volumes that are not marked for deletion.
SSM Automation: Use an SSM document to automatically remediate non-compliant EBS volumes.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and their attached EBS volumes.
‚úÖ Checks if each volume has DeleteOnTermination=true.
‚úÖ If not, modifies the attachment attribute to ensure it gets deleted upon instance termination.
‚úÖ Logs each action, including instances or volumes already compliant.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check EBS settings (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and enforce DeleteOnTermination for EBS volumes
ensure_ebs_delete_on_termination() {
    log ""Starting EBS volume compliance check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking EBS volumes attached to instance: $instance_id""

        # Get attached EBS volumes and their DeleteOnTermination status
        volume_details=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].BlockDeviceMappings[].[DeviceName,Ebs.VolumeId,Ebs.DeleteOnTermination]"" --output json)

        if [[ -z ""$volume_details"" || ""$volume_details"" == ""[]"" ]]; then
            log ""No EBS volumes attached to instance $instance_id. Skipping...""
            continue
        fi

        volumes=$(echo ""$volume_details"" | jq -c '.[]')
        
        for volume in $volumes; do
            device_name=$(echo ""$volume"" | jq -r '.[0]')
            volume_id=$(echo ""$volume"" | jq -r '.[1]')
            delete_on_termination=$(echo ""$volume"" | jq -r '.[2]')

            if [[ ""$delete_on_termination"" == ""true"" ]]; then
                log ""‚úÖ EBS Volume $volume_id ($device_name) is already marked for deletion upon termination.""
                continue
            fi

            log ""‚ö†Ô∏è EBS Volume $volume_id ($device_name) is NOT marked for deletion. Fixing...""

            # Modify the instance volume attribute to ensure deletion
            aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --block-device-mappings ""[{\""DeviceName\"":\""$device_name\"",\""Ebs\"":{\""DeleteOnTermination\"":true}}]"" >/dev/null 2>&1

            log ""‚úÖ Updated EBS Volume $volume_id ($device_name) to be deleted upon instance termination.""
            ((fixed_count++))
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Compliance check completed. $fixed_count volumes updated.""
    else
        log ""‚úÖ All EBS volumes are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ebs_delete_on_termination
","üöÄ Why This is Useful?
üîπ Prevents Orphaned EBS Volumes: Ensures that storage is properly cleaned up when an instance is terminated.
üîπ Reduces Unnecessary Costs: Avoids leaving unused EBS volumes that continue to incur charges.
üîπ Ensures Compliance: Helps maintain best practices for automated resource cleanup.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped volumes.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has attached EBS volumes.
2Ô∏è‚É£ Retrieves the DeleteOnTermination attribute for each volume.
3Ô∏è‚É£ If DeleteOnTermination is false, updates the volume to ensure deletion upon instance termination.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance detailed monitoring should be enabled,"Enable this rule to help improve AWS Elastic Compute Cloud (AWS EC2) instance monitoring on the AWS EC2 console, which displays monitoring graphs with a 1-minute period for the instance.",Compliance,High,Ensure detailed monitoring is enabled for EC2 instances. Steps: 1. Review instance settings. 2. Enable detailed monitoring if not already enabled. # REF: EC2 Detailed Monitoring / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances.html#monitoring-detailed,$0.30 (per instance per hour),"EC2 Instance Detailed Monitoring Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to detect EC2 instances with detailed monitoring disabled.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 instances and enables detailed monitoring if it is off.
SSM Automation: Use an SSM document to automatically remediate instances violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their detailed monitoring status.
‚úÖ If disabled, enables detailed monitoring for improved visibility.
‚úÖ Logs each action taken, including instances that were already compliant.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning (all instances).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check monitoring (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enable detailed monitoring
enable_detailed_monitoring() {
    log ""Starting EC2 detailed monitoring enforcement...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    updated_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking monitoring status for instance: $instance_id""

        # Get monitoring status
        monitoring_status=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].Monitoring.State"" --output text 2>/dev/null)

        if [[ ""$monitoring_status"" == ""enabled"" ]]; then
            log ""‚úÖ Detailed monitoring is already enabled for instance $instance_id.""
        else
            log ""‚ö†Ô∏è Detailed monitoring is disabled for instance $instance_id. Enabling...""
            aws ec2 monitor-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
            log ""‚úÖ Detailed monitoring enabled for instance $instance_id.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Monitoring enforcement completed. $updated_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_detailed_monitoring
","üöÄ Why This is Useful?
üîπ Improves Visibility: Enables real-time monitoring metrics for better performance tracking.
üîπ Automatic or Manual Execution: Users can check a single instance or scan all instances.
üîπ Prevents Configuration Drift: Ensures that all instances have detailed monitoring enabled.
üîπ Full Logging: Tracks all actions taken, including skipped instances that are already compliant.","üìå What This Script Does:
1Ô∏è‚É£ Checks if EC2 instances have detailed monitoring enabled.
2Ô∏è‚É£ If disabled, enables detailed monitoring to enhance visibility.
3Ô∏è‚É£ Logs each action taken, ensuring full transparency.
4Ô∏è‚É£ Supports manual execution or automatic scanning across all instances.

",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,EC2 instance detailed monitoring should be enabled,"Enable this rule to help improve AWS Elastic Compute Cloud (AWS EC2) instance monitoring on the AWS EC2 console, which displays monitoring graphs with a 1-minute period for the instance.",Compliance,High,Ensure detailed monitoring is enabled for EC2 instances. Steps: 1. Review instance settings. 2. Enable detailed monitoring if not already enabled. # REF: EC2 Detailed Monitoring / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances.html#monitoring-detailed,$0.30 (per instance per hour),"EC2 Instance Detailed Monitoring Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to detect EC2 instances with detailed monitoring disabled.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 instances and enables detailed monitoring if it is off.
SSM Automation: Use an SSM document to automatically remediate instances violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their detailed monitoring status.
‚úÖ If disabled, enables detailed monitoring for improved visibility.
‚úÖ Logs each action taken, including instances that were already compliant.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning (all instances).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check monitoring (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enable detailed monitoring
enable_detailed_monitoring() {
    log ""Starting EC2 detailed monitoring enforcement...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    updated_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking monitoring status for instance: $instance_id""

        # Get monitoring status
        monitoring_status=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].Monitoring.State"" --output text 2>/dev/null)

        if [[ ""$monitoring_status"" == ""enabled"" ]]; then
            log ""‚úÖ Detailed monitoring is already enabled for instance $instance_id.""
        else
            log ""‚ö†Ô∏è Detailed monitoring is disabled for instance $instance_id. Enabling...""
            aws ec2 monitor-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
            log ""‚úÖ Detailed monitoring enabled for instance $instance_id.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Monitoring enforcement completed. $updated_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_detailed_monitoring
","üöÄ Why This is Useful?
üîπ Improves Visibility: Enables real-time monitoring metrics for better performance tracking.
üîπ Automatic or Manual Execution: Users can check a single instance or scan all instances.
üîπ Prevents Configuration Drift: Ensures that all instances have detailed monitoring enabled.
üîπ Full Logging: Tracks all actions taken, including skipped instances that are already compliant.","üìå What This Script Does:
1Ô∏è‚É£ Checks if EC2 instances have detailed monitoring enabled.
2Ô∏è‚É£ If disabled, enables detailed monitoring to enhance visibility.
3Ô∏è‚É£ Logs each action taken, ensuring full transparency.
4Ô∏è‚É£ Supports manual execution or automatic scanning across all instances.

",Bash,Weekly,SOC 2,2024-02-13
Reliability,EC2 instance detailed monitoring should be enabled,"Enable this rule to help improve AWS Elastic Compute Cloud (AWS EC2) instance monitoring on the AWS EC2 console, which displays monitoring graphs with a 1-minute period for the instance.",Compliance,High,Ensure detailed monitoring is enabled for EC2 instances. Steps: 1. Review instance settings. 2. Enable detailed monitoring if not already enabled. # REF: EC2 Detailed Monitoring / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances.html#monitoring-detailed,$0.30 (per instance per hour),"EC2 Instance Detailed Monitoring Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to detect EC2 instances with detailed monitoring disabled.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 instances and enables detailed monitoring if it is off.
SSM Automation: Use an SSM document to automatically remediate instances violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their detailed monitoring status.
‚úÖ If disabled, enables detailed monitoring for improved visibility.
‚úÖ Logs each action taken, including instances that were already compliant.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning (all instances).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check monitoring (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enable detailed monitoring
enable_detailed_monitoring() {
    log ""Starting EC2 detailed monitoring enforcement...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    updated_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking monitoring status for instance: $instance_id""

        # Get monitoring status
        monitoring_status=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].Monitoring.State"" --output text 2>/dev/null)

        if [[ ""$monitoring_status"" == ""enabled"" ]]; then
            log ""‚úÖ Detailed monitoring is already enabled for instance $instance_id.""
        else
            log ""‚ö†Ô∏è Detailed monitoring is disabled for instance $instance_id. Enabling...""
            aws ec2 monitor-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
            log ""‚úÖ Detailed monitoring enabled for instance $instance_id.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Monitoring enforcement completed. $updated_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_detailed_monitoring
","üöÄ Why This is Useful?
üîπ Improves Visibility: Enables real-time monitoring metrics for better performance tracking.
üîπ Automatic or Manual Execution: Users can check a single instance or scan all instances.
üîπ Prevents Configuration Drift: Ensures that all instances have detailed monitoring enabled.
üîπ Full Logging: Tracks all actions taken, including skipped instances that are already compliant.","üìå What This Script Does:
1Ô∏è‚É£ Checks if EC2 instances have detailed monitoring enabled.
2Ô∏è‚É£ If disabled, enables detailed monitoring to enhance visibility.
3Ô∏è‚É£ Logs each action taken, ensuring full transparency.
4Ô∏è‚É£ Supports manual execution or automatic scanning across all instances.

",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance detailed monitoring should be enabled,"Enable this rule to help improve AWS Elastic Compute Cloud (AWS EC2) instance monitoring on the AWS EC2 console, which displays monitoring graphs with a 1-minute period for the instance.",Compliance,High,Ensure detailed monitoring is enabled for EC2 instances. Steps: 1. Review instance settings. 2. Enable detailed monitoring if not already enabled. # REF: EC2 Detailed Monitoring / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances.html#monitoring-detailed,$0.30 (per instance per hour),"EC2 Instance Detailed Monitoring Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to detect EC2 instances with detailed monitoring disabled.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 instances and enables detailed monitoring if it is off.
SSM Automation: Use an SSM document to automatically remediate instances violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their detailed monitoring status.
‚úÖ If disabled, enables detailed monitoring for improved visibility.
‚úÖ Logs each action taken, including instances that were already compliant.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning (all instances).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check monitoring (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enable detailed monitoring
enable_detailed_monitoring() {
    log ""Starting EC2 detailed monitoring enforcement...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    updated_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking monitoring status for instance: $instance_id""

        # Get monitoring status
        monitoring_status=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].Monitoring.State"" --output text 2>/dev/null)

        if [[ ""$monitoring_status"" == ""enabled"" ]]; then
            log ""‚úÖ Detailed monitoring is already enabled for instance $instance_id.""
        else
            log ""‚ö†Ô∏è Detailed monitoring is disabled for instance $instance_id. Enabling...""
            aws ec2 monitor-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
            log ""‚úÖ Detailed monitoring enabled for instance $instance_id.""
            ((updated_count++))
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Monitoring enforcement completed. $updated_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_detailed_monitoring
","üöÄ Why This is Useful?
üîπ Improves Visibility: Enables real-time monitoring metrics for better performance tracking.
üîπ Automatic or Manual Execution: Users can check a single instance or scan all instances.
üîπ Prevents Configuration Drift: Ensures that all instances have detailed monitoring enabled.
üîπ Full Logging: Tracks all actions taken, including skipped instances that are already compliant.","üìå What This Script Does:
1Ô∏è‚É£ Checks if EC2 instances have detailed monitoring enabled.
2Ô∏è‚É£ If disabled, enables detailed monitoring to enhance visibility.
3Ô∏è‚É£ Logs each action taken, ensuring full transparency.
4Ô∏è‚É£ Supports manual execution or automatic scanning across all instances.

",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance should have EBS optimization enabled,"An optimized instance in AWS Elastic Block Store (AWS EBS) provides additional, dedicated capacity for AWS EBS I/O operations.",Compliance,High,Ensure EBS optimization is enabled on EC2 instances. Steps: 1. Review EC2 instance settings. 2. Enable EBS optimization if not enabled. # REF: EBS Optimization / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#EBS-optimized,$0 (EBS optimization is free),"EC2 Instance Should Have EBS Optimization Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances that do not have EBS optimization enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and enables EBS optimization where applicable.
SSM Automation: An SSM document to automatically remediate non-compliant instances by enabling EBS optimization.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they have EBS optimization enabled.
‚úÖ Identifies instances where EBS optimization is not enabled.
‚úÖ If found, enables EBS optimization for applicable instance types.
‚úÖ Logs each action, including instances skipped due to compliance or unsupported instance types.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check EBS optimization (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enforce EBS optimization
enable_ebs_optimization() {
    log ""Starting EC2 EBS optimization compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking EBS optimization for instance: $instance_id""

        # Get current EBS optimization status
        ebs_optimized=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].EbsOptimized"" --output text)

        if [[ ""$ebs_optimized"" == ""True"" ]]; then
            log ""‚úÖ Instance $instance_id already has EBS optimization enabled. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id does not have EBS optimization enabled. Attempting to enable it...""

        # Modify the instance to enable EBS optimization
        aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --ebs-optimized

        log ""‚úÖ EBS optimization enabled for instance $instance_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforced. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_ebs_optimization
","Why This is Useful?
üîπ Improves Performance: Ensures that EC2 instances use optimized EBS performance, reducing latency and increasing throughput.
üîπ Ensures Compliance: Meets AWS best practices for storage performance.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant or do not support EBS optimization.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has EBS optimization enabled.
2Ô∏è‚É£ If not, modifies the instance to enable EBS optimization.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances should have IAM profile attached,Ensure that an AWS Elastic Compute Cloud (AWS EC2) instance has an Identity and Access Management (IAM) profile attached to it. This rule is non-compliant if no IAM profile is attached to the AWS EC2 instance.,Compliance,High,Ensure IAM profiles are attached to EC2 instances. Steps: 1. Review instance IAM settings. 2. Attach IAM profiles if missing. # REF: IAM Roles for EC2 / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html,$0 (IAM roles are free),"EC2 Instances Should Have IAM Profile Attached
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect EC2 instances missing IAM instance profiles.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and reports/remediates non-compliant instances.
SSM Automation: An SSM document to automatically attach a default IAM role to instances missing an IAM profile.","üîç Features of the Script:
‚úÖ Scans all EC2 instances to check for IAM profile attachment.
‚úÖ Identifies instances missing an IAM profile.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Provides a manual mode where the user can specify a specific instance ID to check.
‚úÖ Supports automatic remediation by attaching a predefined IAM role to non-compliant instances.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM profile (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and attach IAM profile if missing
ensure_iam_profile() {
    log ""Starting EC2 IAM profile validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    default_iam_role=""DefaultEC2Role""  # Replace with the actual IAM role name

    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM profile for instance: $instance_id""

        # Get IAM profile associated with the instance
        iam_profile=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null)

        if [[ -z ""$iam_profile"" || ""$iam_profile"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id has no IAM profile attached.""

            # Attach default IAM profile if auto-remediation is enabled
            log ""Attaching default IAM profile: $default_iam_role to instance $instance_id...""
            aws ec2 associate-iam-instance-profile --instance-id ""$instance_id"" \
                --iam-instance-profile Name=""$default_iam_role"" >/dev/null 2>&1

            log ""‚úÖ IAM profile $default_iam_role attached to instance $instance_id.""
            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id already has an IAM profile attached.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforcement completed. $non_compliant_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_iam_profile
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Enforces the best practice of requiring IAM profiles for EC2 instances.
üîπ Manual or Automated Execution: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all modifications for compliance and audit purposes.","üìå What This Script Does:
1Ô∏è‚É£ Checks all EC2 instances in the AWS account.
2Ô∏è‚É£ Identifies instances that are missing an IAM profile.
3Ô∏è‚É£ If missing, attaches a default IAM profile for compliance.
4Ô∏è‚É£ Logs all actions for visibility and audit purposes.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should have IAM profile attached,Ensure that an AWS Elastic Compute Cloud (AWS EC2) instance has an Identity and Access Management (IAM) profile attached to it. This rule is non-compliant if no IAM profile is attached to the AWS EC2 instance.,Compliance,High,Ensure IAM profiles are attached to EC2 instances. Steps: 1. Review instance IAM settings. 2. Attach IAM profiles if missing. # REF: IAM Roles for EC2 / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html,$0 (IAM roles are free),"EC2 Instances Should Have IAM Profile Attached
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect EC2 instances missing IAM instance profiles.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and reports/remediates non-compliant instances.
SSM Automation: An SSM document to automatically attach a default IAM role to instances missing an IAM profile.","üîç Features of the Script:
‚úÖ Scans all EC2 instances to check for IAM profile attachment.
‚úÖ Identifies instances missing an IAM profile.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Provides a manual mode where the user can specify a specific instance ID to check.
‚úÖ Supports automatic remediation by attaching a predefined IAM role to non-compliant instances.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM profile (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and attach IAM profile if missing
ensure_iam_profile() {
    log ""Starting EC2 IAM profile validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    default_iam_role=""DefaultEC2Role""  # Replace with the actual IAM role name

    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM profile for instance: $instance_id""

        # Get IAM profile associated with the instance
        iam_profile=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null)

        if [[ -z ""$iam_profile"" || ""$iam_profile"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id has no IAM profile attached.""

            # Attach default IAM profile if auto-remediation is enabled
            log ""Attaching default IAM profile: $default_iam_role to instance $instance_id...""
            aws ec2 associate-iam-instance-profile --instance-id ""$instance_id"" \
                --iam-instance-profile Name=""$default_iam_role"" >/dev/null 2>&1

            log ""‚úÖ IAM profile $default_iam_role attached to instance $instance_id.""
            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id already has an IAM profile attached.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforcement completed. $non_compliant_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_iam_profile
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Enforces the best practice of requiring IAM profiles for EC2 instances.
üîπ Manual or Automated Execution: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all modifications for compliance and audit purposes.","üìå What This Script Does:
1Ô∏è‚É£ Checks all EC2 instances in the AWS account.
2Ô∏è‚É£ Identifies instances that are missing an IAM profile.
3Ô∏è‚É£ If missing, attaches a default IAM profile for compliance.
4Ô∏è‚É£ Logs all actions for visibility and audit purposes.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should have IAM profile attached,Ensure that an AWS Elastic Compute Cloud (AWS EC2) instance has an Identity and Access Management (IAM) profile attached to it. This rule is non-compliant if no IAM profile is attached to the AWS EC2 instance.,Compliance,High,Ensure IAM profiles are attached to EC2 instances. Steps: 1. Review instance IAM settings. 2. Attach IAM profiles if missing. # REF: IAM Roles for EC2 / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html,$0 (IAM roles are free),"EC2 Instances Should Have IAM Profile Attached
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect EC2 instances missing IAM instance profiles.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and reports/remediates non-compliant instances.
SSM Automation: An SSM document to automatically attach a default IAM role to instances missing an IAM profile.","üîç Features of the Script:
‚úÖ Scans all EC2 instances to check for IAM profile attachment.
‚úÖ Identifies instances missing an IAM profile.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Provides a manual mode where the user can specify a specific instance ID to check.
‚úÖ Supports automatic remediation by attaching a predefined IAM role to non-compliant instances.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM profile (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and attach IAM profile if missing
ensure_iam_profile() {
    log ""Starting EC2 IAM profile validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    default_iam_role=""DefaultEC2Role""  # Replace with the actual IAM role name

    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM profile for instance: $instance_id""

        # Get IAM profile associated with the instance
        iam_profile=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null)

        if [[ -z ""$iam_profile"" || ""$iam_profile"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id has no IAM profile attached.""

            # Attach default IAM profile if auto-remediation is enabled
            log ""Attaching default IAM profile: $default_iam_role to instance $instance_id...""
            aws ec2 associate-iam-instance-profile --instance-id ""$instance_id"" \
                --iam-instance-profile Name=""$default_iam_role"" >/dev/null 2>&1

            log ""‚úÖ IAM profile $default_iam_role attached to instance $instance_id.""
            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id already has an IAM profile attached.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforcement completed. $non_compliant_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_iam_profile
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Enforces the best practice of requiring IAM profiles for EC2 instances.
üîπ Manual or Automated Execution: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all modifications for compliance and audit purposes.","üìå What This Script Does:
1Ô∏è‚É£ Checks all EC2 instances in the AWS account.
2Ô∏è‚É£ Identifies instances that are missing an IAM profile.
3Ô∏è‚É£ If missing, attaches a default IAM profile for compliance.
4Ô∏è‚É£ Logs all actions for visibility and audit purposes.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should have IAM profile attached,Ensure that an AWS Elastic Compute Cloud (AWS EC2) instance has an Identity and Access Management (IAM) profile attached to it. This rule is non-compliant if no IAM profile is attached to the AWS EC2 instance.,Compliance,High,Ensure IAM profiles are attached to EC2 instances. Steps: 1. Review instance IAM settings. 2. Attach IAM profiles if missing. # REF: IAM Roles for EC2 / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html,$0 (IAM roles are free),"EC2 Instances Should Have IAM Profile Attached
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect EC2 instances missing IAM instance profiles.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and reports/remediates non-compliant instances.
SSM Automation: An SSM document to automatically attach a default IAM role to instances missing an IAM profile.","üîç Features of the Script:
‚úÖ Scans all EC2 instances to check for IAM profile attachment.
‚úÖ Identifies instances missing an IAM profile.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Provides a manual mode where the user can specify a specific instance ID to check.
‚úÖ Supports automatic remediation by attaching a predefined IAM role to non-compliant instances.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM profile (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and attach IAM profile if missing
ensure_iam_profile() {
    log ""Starting EC2 IAM profile validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    default_iam_role=""DefaultEC2Role""  # Replace with the actual IAM role name

    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM profile for instance: $instance_id""

        # Get IAM profile associated with the instance
        iam_profile=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null)

        if [[ -z ""$iam_profile"" || ""$iam_profile"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id has no IAM profile attached.""

            # Attach default IAM profile if auto-remediation is enabled
            log ""Attaching default IAM profile: $default_iam_role to instance $instance_id...""
            aws ec2 associate-iam-instance-profile --instance-id ""$instance_id"" \
                --iam-instance-profile Name=""$default_iam_role"" >/dev/null 2>&1

            log ""‚úÖ IAM profile $default_iam_role attached to instance $instance_id.""
            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id already has an IAM profile attached.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforcement completed. $non_compliant_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_iam_profile
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Enforces the best practice of requiring IAM profiles for EC2 instances.
üîπ Manual or Automated Execution: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all modifications for compliance and audit purposes.","üìå What This Script Does:
1Ô∏è‚É£ Checks all EC2 instances in the AWS account.
2Ô∏è‚É£ Identifies instances that are missing an IAM profile.
3Ô∏è‚É£ If missing, attaches a default IAM profile for compliance.
4Ô∏è‚É£ Logs all actions for visibility and audit purposes.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should have IAM profile attached,Ensure that an AWS Elastic Compute Cloud (AWS EC2) instance has an Identity and Access Management (IAM) profile attached to it. This rule is non-compliant if no IAM profile is attached to the AWS EC2 instance.,Compliance,High,Ensure IAM profiles are attached to EC2 instances. Steps: 1. Review instance IAM settings. 2. Attach IAM profiles if missing. # REF: IAM Roles for EC2 / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html,$0 (IAM roles are free),"EC2 Instances Should Have IAM Profile Attached
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect EC2 instances missing IAM instance profiles.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and reports/remediates non-compliant instances.
SSM Automation: An SSM document to automatically attach a default IAM role to instances missing an IAM profile.","üîç Features of the Script:
‚úÖ Scans all EC2 instances to check for IAM profile attachment.
‚úÖ Identifies instances missing an IAM profile.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Provides a manual mode where the user can specify a specific instance ID to check.
‚úÖ Supports automatic remediation by attaching a predefined IAM role to non-compliant instances.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM profile (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and attach IAM profile if missing
ensure_iam_profile() {
    log ""Starting EC2 IAM profile validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    default_iam_role=""DefaultEC2Role""  # Replace with the actual IAM role name

    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM profile for instance: $instance_id""

        # Get IAM profile associated with the instance
        iam_profile=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null)

        if [[ -z ""$iam_profile"" || ""$iam_profile"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id has no IAM profile attached.""

            # Attach default IAM profile if auto-remediation is enabled
            log ""Attaching default IAM profile: $default_iam_role to instance $instance_id...""
            aws ec2 associate-iam-instance-profile --instance-id ""$instance_id"" \
                --iam-instance-profile Name=""$default_iam_role"" >/dev/null 2>&1

            log ""‚úÖ IAM profile $default_iam_role attached to instance $instance_id.""
            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id already has an IAM profile attached.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforcement completed. $non_compliant_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_iam_profile
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Enforces the best practice of requiring IAM profiles for EC2 instances.
üîπ Manual or Automated Execution: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all modifications for compliance and audit purposes.","üìå What This Script Does:
1Ô∏è‚É£ Checks all EC2 instances in the AWS account.
2Ô∏è‚É£ Identifies instances that are missing an IAM profile.
3Ô∏è‚É£ If missing, attaches a default IAM profile for compliance.
4Ô∏è‚É£ Logs all actions for visibility and audit purposes.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances should be in a VPC,"Deploy AWS Elastic Compute Cloud (AWS EC2) instances within an AWS Virtual Private Cloud (AWS VPC) to enable secure communication between an instance and other services within the amazon VPC, without requiring an internet gateway, NAT device, or VPN connection.",Compliance,High,Ensure EC2 instances are launched in a VPC. Steps: 1. Review instance settings. 2. Migrate any instances not in a VPC. # REF: VPC for EC2 / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-getstarted-vpc,$0 (VPC usage is free),"Automation Approach:

AWS Config Rule: Create a rule to check if EC2 instances are launched outside a VPC.
Lambda Function: Scans all EC2 instances and identifies any running in the EC2-Classic environment.
SSM Automation: Provides an option to stop, re-launch, or migrate non-compliant instances into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they are in a VPC.
‚úÖ Identifies instances running in EC2-Classic (non-VPC) mode.
‚úÖ If found, logs details and provides a manual fix recommendation.
‚úÖ Optionally stops non-compliant instances for manual migration.
‚úÖ Supports manual mode (user inputs an instance ID) and automatic scanning.
‚úÖ Handles invalid instance IDs gracefully.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check VPC status (or press Enter to scan all instances): "" user_instance_id
}

# Function to check if EC2 instances are in a VPC
check_vpc_compliance() {
    log ""Starting EC2 VPC compliance check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking VPC status for instance: $instance_id""

        # Get VPC ID associated with the instance
        vpc_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].VpcId"" --output text 2>/dev/null)

        if [[ -z ""$vpc_id"" || ""$vpc_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id is NOT in a VPC (EC2-Classic).""
            
            # Optional: Stop non-compliant instance
            read -p ""Do you want to stop instance $instance_id for manual migration? (yes/no): "" choice
            if [[ ""$choice"" == ""yes"" ]]; then
                aws ec2 stop-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
                log ""‚úÖ Stopped instance $instance_id. Please migrate it to a VPC.""
            else
                log ""Skipping instance $instance_id.""
            fi

            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id is in VPC: $vpc_id""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Compliance check completed. $non_compliant_count instances are not in a VPC.""
    else
        log ""‚úÖ All instances are compliant.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
check_vpc_compliance
","üöÄ Why This is Useful?
üîπ Ensures all EC2 instances follow best practices by running inside a VPC.
üîπ Helps migrate legacy EC2-Classic instances to modern VPC-based infrastructure.
üîπ Offers both manual review and automated stopping of non-compliant instances.
üîπ Logs actions for compliance tracking and auditing.","What This Script Does:
1Ô∏è‚É£ Retrieves all EC2 instances (or a user-specified instance).
2Ô∏è‚É£ Checks if each instance is inside a VPC.
3Ô∏è‚É£ Flags instances that are still in EC2-Classic.
4Ô∏è‚É£ Offers an option to stop non-compliant instances for manual migration.
5Ô∏è‚É£ Logs all actions, ensuring transparency.",Bash,Weekly,SOC 2,2024-02-13
Reliability,EC2 instances should be in a VPC,"Deploy AWS Elastic Compute Cloud (AWS EC2) instances within an AWS Virtual Private Cloud (AWS VPC) to enable secure communication between an instance and other services within the amazon VPC, without requiring an internet gateway, NAT device, or VPN connection.",Compliance,High,Ensure EC2 instances are launched in a VPC. Steps: 1. Review instance settings. 2. Migrate any instances not in a VPC. # REF: VPC for EC2 / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-getstarted-vpc,$0 (VPC usage is free),"Automation Approach:

AWS Config Rule: Create a rule to check if EC2 instances are launched outside a VPC.
Lambda Function: Scans all EC2 instances and identifies any running in the EC2-Classic environment.
SSM Automation: Provides an option to stop, re-launch, or migrate non-compliant instances into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they are in a VPC.
‚úÖ Identifies instances running in EC2-Classic (non-VPC) mode.
‚úÖ If found, logs details and provides a manual fix recommendation.
‚úÖ Optionally stops non-compliant instances for manual migration.
‚úÖ Supports manual mode (user inputs an instance ID) and automatic scanning.
‚úÖ Handles invalid instance IDs gracefully.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check VPC status (or press Enter to scan all instances): "" user_instance_id
}

# Function to check if EC2 instances are in a VPC
check_vpc_compliance() {
    log ""Starting EC2 VPC compliance check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking VPC status for instance: $instance_id""

        # Get VPC ID associated with the instance
        vpc_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].VpcId"" --output text 2>/dev/null)

        if [[ -z ""$vpc_id"" || ""$vpc_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id is NOT in a VPC (EC2-Classic).""
            
            # Optional: Stop non-compliant instance
            read -p ""Do you want to stop instance $instance_id for manual migration? (yes/no): "" choice
            if [[ ""$choice"" == ""yes"" ]]; then
                aws ec2 stop-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
                log ""‚úÖ Stopped instance $instance_id. Please migrate it to a VPC.""
            else
                log ""Skipping instance $instance_id.""
            fi

            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id is in VPC: $vpc_id""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Compliance check completed. $non_compliant_count instances are not in a VPC.""
    else
        log ""‚úÖ All instances are compliant.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
check_vpc_compliance
","üöÄ Why This is Useful?
üîπ Ensures all EC2 instances follow best practices by running inside a VPC.
üîπ Helps migrate legacy EC2-Classic instances to modern VPC-based infrastructure.
üîπ Offers both manual review and automated stopping of non-compliant instances.
üîπ Logs actions for compliance tracking and auditing.","What This Script Does:
1Ô∏è‚É£ Retrieves all EC2 instances (or a user-specified instance).
2Ô∏è‚É£ Checks if each instance is inside a VPC.
3Ô∏è‚É£ Flags instances that are still in EC2-Classic.
4Ô∏è‚É£ Offers an option to stop non-compliant instances for manual migration.
5Ô∏è‚É£ Logs all actions, ensuring transparency.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should be in a VPC,"Deploy AWS Elastic Compute Cloud (AWS EC2) instances within an AWS Virtual Private Cloud (AWS VPC) to enable secure communication between an instance and other services within the amazon VPC, without requiring an internet gateway, NAT device, or VPN connection.",Compliance,High,Ensure EC2 instances are launched in a VPC. Steps: 1. Review instance settings. 2. Migrate any instances not in a VPC. # REF: VPC for EC2 / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-getstarted-vpc,$0 (VPC usage is free),"Automation Approach:

AWS Config Rule: Create a rule to check if EC2 instances are launched outside a VPC.
Lambda Function: Scans all EC2 instances and identifies any running in the EC2-Classic environment.
SSM Automation: Provides an option to stop, re-launch, or migrate non-compliant instances into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they are in a VPC.
‚úÖ Identifies instances running in EC2-Classic (non-VPC) mode.
‚úÖ If found, logs details and provides a manual fix recommendation.
‚úÖ Optionally stops non-compliant instances for manual migration.
‚úÖ Supports manual mode (user inputs an instance ID) and automatic scanning.
‚úÖ Handles invalid instance IDs gracefully.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check VPC status (or press Enter to scan all instances): "" user_instance_id
}

# Function to check if EC2 instances are in a VPC
check_vpc_compliance() {
    log ""Starting EC2 VPC compliance check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking VPC status for instance: $instance_id""

        # Get VPC ID associated with the instance
        vpc_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].VpcId"" --output text 2>/dev/null)

        if [[ -z ""$vpc_id"" || ""$vpc_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id is NOT in a VPC (EC2-Classic).""
            
            # Optional: Stop non-compliant instance
            read -p ""Do you want to stop instance $instance_id for manual migration? (yes/no): "" choice
            if [[ ""$choice"" == ""yes"" ]]; then
                aws ec2 stop-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
                log ""‚úÖ Stopped instance $instance_id. Please migrate it to a VPC.""
            else
                log ""Skipping instance $instance_id.""
            fi

            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id is in VPC: $vpc_id""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Compliance check completed. $non_compliant_count instances are not in a VPC.""
    else
        log ""‚úÖ All instances are compliant.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
check_vpc_compliance
","üöÄ Why This is Useful?
üîπ Ensures all EC2 instances follow best practices by running inside a VPC.
üîπ Helps migrate legacy EC2-Classic instances to modern VPC-based infrastructure.
üîπ Offers both manual review and automated stopping of non-compliant instances.
üîπ Logs actions for compliance tracking and auditing.","What This Script Does:
1Ô∏è‚É£ Retrieves all EC2 instances (or a user-specified instance).
2Ô∏è‚É£ Checks if each instance is inside a VPC.
3Ô∏è‚É£ Flags instances that are still in EC2-Classic.
4Ô∏è‚É£ Offers an option to stop non-compliant instances for manual migration.
5Ô∏è‚É£ Logs all actions, ensuring transparency.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should be in a VPC,"Deploy AWS Elastic Compute Cloud (AWS EC2) instances within an AWS Virtual Private Cloud (AWS VPC) to enable secure communication between an instance and other services within the amazon VPC, without requiring an internet gateway, NAT device, or VPN connection.",Compliance,High,Ensure EC2 instances are launched in a VPC. Steps: 1. Review instance settings. 2. Migrate any instances not in a VPC. # REF: VPC for EC2 / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-getstarted-vpc,$0 (VPC usage is free),"Automation Approach:

AWS Config Rule: Create a rule to check if EC2 instances are launched outside a VPC.
Lambda Function: Scans all EC2 instances and identifies any running in the EC2-Classic environment.
SSM Automation: Provides an option to stop, re-launch, or migrate non-compliant instances into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they are in a VPC.
‚úÖ Identifies instances running in EC2-Classic (non-VPC) mode.
‚úÖ If found, logs details and provides a manual fix recommendation.
‚úÖ Optionally stops non-compliant instances for manual migration.
‚úÖ Supports manual mode (user inputs an instance ID) and automatic scanning.
‚úÖ Handles invalid instance IDs gracefully.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check VPC status (or press Enter to scan all instances): "" user_instance_id
}

# Function to check if EC2 instances are in a VPC
check_vpc_compliance() {
    log ""Starting EC2 VPC compliance check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking VPC status for instance: $instance_id""

        # Get VPC ID associated with the instance
        vpc_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].VpcId"" --output text 2>/dev/null)

        if [[ -z ""$vpc_id"" || ""$vpc_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id is NOT in a VPC (EC2-Classic).""
            
            # Optional: Stop non-compliant instance
            read -p ""Do you want to stop instance $instance_id for manual migration? (yes/no): "" choice
            if [[ ""$choice"" == ""yes"" ]]; then
                aws ec2 stop-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
                log ""‚úÖ Stopped instance $instance_id. Please migrate it to a VPC.""
            else
                log ""Skipping instance $instance_id.""
            fi

            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id is in VPC: $vpc_id""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Compliance check completed. $non_compliant_count instances are not in a VPC.""
    else
        log ""‚úÖ All instances are compliant.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
check_vpc_compliance
","üöÄ Why This is Useful?
üîπ Ensures all EC2 instances follow best practices by running inside a VPC.
üîπ Helps migrate legacy EC2-Classic instances to modern VPC-based infrastructure.
üîπ Offers both manual review and automated stopping of non-compliant instances.
üîπ Logs actions for compliance tracking and auditing.","What This Script Does:
1Ô∏è‚É£ Retrieves all EC2 instances (or a user-specified instance).
2Ô∏è‚É£ Checks if each instance is inside a VPC.
3Ô∏è‚É£ Flags instances that are still in EC2-Classic.
4Ô∏è‚É£ Offers an option to stop non-compliant instances for manual migration.
5Ô∏è‚É£ Logs all actions, ensuring transparency.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should be in a VPC,"Deploy AWS Elastic Compute Cloud (AWS EC2) instances within an AWS Virtual Private Cloud (AWS VPC) to enable secure communication between an instance and other services within the amazon VPC, without requiring an internet gateway, NAT device, or VPN connection.",Compliance,High,Ensure EC2 instances are launched in a VPC. Steps: 1. Review instance settings. 2. Migrate any instances not in a VPC. # REF: VPC for EC2 / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-getstarted-vpc,$0 (VPC usage is free),"Automation Approach:

AWS Config Rule: Create a rule to check if EC2 instances are launched outside a VPC.
Lambda Function: Scans all EC2 instances and identifies any running in the EC2-Classic environment.
SSM Automation: Provides an option to stop, re-launch, or migrate non-compliant instances into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they are in a VPC.
‚úÖ Identifies instances running in EC2-Classic (non-VPC) mode.
‚úÖ If found, logs details and provides a manual fix recommendation.
‚úÖ Optionally stops non-compliant instances for manual migration.
‚úÖ Supports manual mode (user inputs an instance ID) and automatic scanning.
‚úÖ Handles invalid instance IDs gracefully.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check VPC status (or press Enter to scan all instances): "" user_instance_id
}

# Function to check if EC2 instances are in a VPC
check_vpc_compliance() {
    log ""Starting EC2 VPC compliance check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking VPC status for instance: $instance_id""

        # Get VPC ID associated with the instance
        vpc_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].VpcId"" --output text 2>/dev/null)

        if [[ -z ""$vpc_id"" || ""$vpc_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id is NOT in a VPC (EC2-Classic).""
            
            # Optional: Stop non-compliant instance
            read -p ""Do you want to stop instance $instance_id for manual migration? (yes/no): "" choice
            if [[ ""$choice"" == ""yes"" ]]; then
                aws ec2 stop-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
                log ""‚úÖ Stopped instance $instance_id. Please migrate it to a VPC.""
            else
                log ""Skipping instance $instance_id.""
            fi

            ((non_compliant_count++))
        else
            log ""‚úÖ Instance $instance_id is in VPC: $vpc_id""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Compliance check completed. $non_compliant_count instances are not in a VPC.""
    else
        log ""‚úÖ All instances are compliant.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
check_vpc_compliance
","üöÄ Why This is Useful?
üîπ Ensures all EC2 instances follow best practices by running inside a VPC.
üîπ Helps migrate legacy EC2-Classic instances to modern VPC-based infrastructure.
üîπ Offers both manual review and automated stopping of non-compliant instances.
üîπ Logs actions for compliance tracking and auditing.","What This Script Does:
1Ô∏è‚É£ Retrieves all EC2 instances (or a user-specified instance).
2Ô∏è‚É£ Checks if each instance is inside a VPC.
3Ô∏è‚É£ Flags instances that are still in EC2-Classic.
4Ô∏è‚É£ Offers an option to stop non-compliant instances for manual migration.
5Ô∏è‚É£ Logs all actions, ensuring transparency.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances should not use key pairs in running state,This control checks whether running EC2 instances are using key pairs. The control fails if a running EC2 instance uses a key pair.,Compliance,Medium,Ensure key pairs are not used for running EC2 instances. Steps: 1. Review running instances for key pair usage. 2. Replace key pair usage with IAM roles or Session Manager. # REF: AWS Session Manager /  https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager.html,$0 (Session Manager is free),"EC2 Instances Should Not Use Key Pairs in Running State
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect EC2 instances with key pairs attached while running.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all running EC2 instances and removes associated key pairs.
SSM Automation: An SSM document to automatically remediate EC2 instances violating this control by detaching key pairs securely.","üîç Features of the Script:
‚úÖ Retrieves all running EC2 instances.
‚úÖ Checks if they have an associated key pair.
‚úÖ If a key pair is found, the script:

Logs the key pair name for tracking.
Stops the instance (to modify key pairs).
Creates a new temporary key pair for backup if needed.
Removes the existing key pair association.
Starts the instance again.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance key pair check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check key pair (or press Enter to auto-scan all running instances): "" user_instance_id
}

# Function to check and remove key pairs from running EC2 instances
remove_key_pair_from_ec2() {
    log ""Starting EC2 key pair validation and removal process...""

    # Get list of running EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all running EC2 instances...""
        instances=($(aws ec2 describe-instances --filters ""Name=instance-state-name,Values=running"" \
            --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No running EC2 instances found with key pairs.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking key pair for instance: $instance_id""

        # Get the key pair name attached to the instance
        key_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].KeyName"" --output text 2>/dev/null)

        if [[ -z ""$key_name"" || ""$key_name"" == ""None"" ]]; then
            log ""No key pair found on instance $instance_id. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id is using key pair: $key_name""

        # Stop the instance to remove the key pair
        log ""Stopping instance $instance_id...""
        aws ec2 stop-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
        aws ec2 wait instance-stopped --instance-ids ""$instance_id""

        # Detach the key pair by creating a new launch template version
        log ""Creating a new launch template version without key pair...""
        template_id=$(aws ec2 create-launch-template-version \
            --launch-template-id ""<your-launch-template-id>"" \
            --source-version 1 \
            --launch-template-data '{""KeyName"": """"}' \
            --query ""LaunchTemplateVersion.LaunchTemplateId"" --output text)

        if [[ -z ""$template_id"" ]]; then
            log ""Failed to create a new launch template version. Exiting.""
            exit 1
        fi

        # Start the instance again
        log ""Starting instance $instance_id...""
        aws ec2 start-instances --instance-ids ""$instance_id"" >/dev/null 2>&1

        log ""‚úÖ Successfully removed key pair $key_name from instance $instance_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count instances had their key pairs removed.""
    else
        log ""‚úÖ All running instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
remove_key_pair_from_ec2
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures that running EC2 instances do not expose SSH key pairs.
üîπ Manual or Automated Execution: Users can specify an instance ID or scan all running instances.
üîπ Failsafe Mechanism: Skips instances without key pairs and logs actions taken.
üîπ Full Logging: Keeps track of all modifications for compliance and audit purposes.","What This Script Does:
1Ô∏è‚É£ Checks if a running EC2 instance has an associated key pair.
2Ô∏è‚É£ If found, it logs the key pair name and follows these steps:

Stops the instance.
Creates a new launch template version without a key pair.
Starts the instance again using the modified launch template.
3Ô∏è‚É£ Logs all actions for visibility and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances high level findings should not be there in inspector scans,"AWS Inspector scans operating system packages installed on your AWS EC2 instances for vulnerabilities and network reachability issues. Each finding has the name of the detected vulnerability and provides a severity rating, information about the affected resource, and details such as how to remediate the reported vulnerability.",Compliance,High,Ensure that EC2 instances have no high-level findings in Inspector scans. Steps: 1. Review Inspector scan results. 2. Address any identified high-level vulnerabilities. # REF: Amazon Inspector / https://docs.aws.amazon.com/inspector/latest/userguide/inspector_gettingstarted.html,$0 (Amazon Inspector pricing may apply),"1. EC2 Instances Should Not Have High-Level Findings in AWS Inspector Scans
‚úÖ Automation Approach:

AWS Inspector Scan: Utilize AWS Inspector to assess EC2 instances for vulnerabilities.
Lambda Function: A scheduled Lambda (via EventBridge) that fetches high-severity findings from AWS Inspector and remediates issues.
SNS Notification: Optionally send alerts for non-compliant instances.
SSM Automation: Use AWS Systems Manager (SSM) to patch vulnerabilities or apply necessary security controls.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and their AWS Inspector findings.
‚úÖ Extracts and filters only high-severity findings.
‚úÖ Attempts automatic remediation (if applicable) or logs findings for review.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Optionally sends an SNS notification for instances with critical findings.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check AWS Inspector findings (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remediate high-severity AWS Inspector findings
check_inspector_findings() {
    log ""Starting AWS Inspector high-severity findings check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking AWS Inspector findings for instance: $instance_id""

        # Get high-severity findings for the instance
        findings=$(aws inspector2 list-findings --filter ""severity=HIGH"" --query ""findings[?resources[0].id=='$instance_id'].title"" --output json)

        if [[ -z ""$findings"" || ""$findings"" == ""[]"" ]]; then
            log ""‚úÖ No high-severity findings for instance $instance_id.""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has HIGH-severity findings: $findings""

        # Attempt remediation using SSM Patch Manager
        log ""Applying SSM Patch Manager to remediate vulnerabilities...""
        aws ssm send-command --document-name ""AWS-RunPatchBaseline"" \
            --targets ""Key=InstanceIds,Values=$instance_id"" \
            --comment ""Applying security patches for AWS Inspector findings"" >/dev/null 2>&1

        log ""‚úÖ Security patches initiated for instance $instance_id.""
        ((non_compliant_count++))
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚úÖ Compliance check completed. Security patches applied to $non_compliant_count instances.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
check_inspector_findings
","üöÄ Why This is Useful?
üîπ Ensures Security Compliance: Keeps EC2 instances free of critical vulnerabilities.
üîπ Reduces Manual Effort: Automates the detection and remediation process.
üîπ Prevents Exploits: Fixes high-severity vulnerabilities before they can be exploited.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether patches were applied or instances were skipped.","üìå What This Script Does:
1Ô∏è‚É£ Checks AWS Inspector for high-severity findings on EC2 instances.
2Ô∏è‚É£ If high-risk vulnerabilities exist, it triggers automatic remediation using AWS SSM Patch Manager.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM should not allow pass role and lambda invoke function access.,This control ensures that EC2 instance IAM role does not allow pass role and lambda invoke function access.,Compliance,High,Ensure IAM roles attached to EC2 instances do not allow pass role actions. Steps: 1. Review IAM role permissions. 2. Restrict permissions to avoid pass role and Lambda invocation. # REF: IAM Roles,$0 (IAM roles are free),"1. EC2 Instance IAM Role Should Not Allow PassRole and Lambda Invoke Function Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that allow ""iam:PassRole"" or ""lambda:InvokeFunction"" permissions.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes ""iam:PassRole"" and ""lambda:InvokeFunction"" if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow ""iam:PassRole"" or ""lambda:InvokeFunction"".
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_role_permissions() {
    log ""Starting EC2 IAM role permissions validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows ""iam:PassRole"" or ""lambda:InvokeFunction""
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""iam:PassRole"", ""lambda:InvokeFunction""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name allows 'iam:PassRole' or 'lambda:InvokeFunction'. Fixing...""

                # Create a new policy document without ""iam:PassRole"" and ""lambda:InvokeFunction""
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""iam:PassRole"" and .Action != ""lambda:InvokeFunction"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing 'iam:PassRole' and 'lambda:InvokeFunction' permissions.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_role_permissions
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Prevents EC2 IAM roles from granting excessive permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing ""iam:PassRole"" or ""lambda:InvokeFunction"".
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not be attached with credentials exposure access,This control ensures that EC2 instance IAM role should not be attached with credentials exposure access.,Compliance,High,Ensure IAM roles do not have permissions exposing credentials. Steps: 1. Review IAM role settings. 2. Remove any permissions that could expose credentials. # REF: IAM Best Practices https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Be Attached with Credentials Exposure Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 IAM roles with permissions that could expose credentials.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans IAM policies attached to EC2 roles and removes high-risk permissions.
SSM Automation: An SSM document to automatically remediate non-compliant IAM roles.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks for high-risk permissions like:

""iam:CreateAccessKey""
""iam:UpdateLoginProfile""
""iam:AttachUserPolicy""
""iam:PutUserPolicy""
""secretsmanager:GetSecretValue""
""ssm:GetParameter"" (when used with ""SecureString"")
‚úÖ If found, removes the permissions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_exposure_risk() {
    log ""Starting EC2 IAM role credentials exposure check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows credentials exposure permissions
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | 
                contains([""iam:CreateAccessKey"", ""iam:UpdateLoginProfile"", ""iam:AttachUserPolicy"", 
                          ""iam:PutUserPolicy"", ""secretsmanager:GetSecretValue"", ""ssm:GetParameter""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name allows credentials exposure permissions. Fixing...""

                # Create a new policy document without the high-risk permissions
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action | 
                    inside([""iam:CreateAccessKey"", ""iam:UpdateLoginProfile"", ""iam:AttachUserPolicy"", 
                           ""iam:PutUserPolicy"", ""secretsmanager:GetSecretValue"", ""ssm:GetParameter""]) | not)) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing risky credentials exposure permissions.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_expos
","Why This is Useful?
üîπ Prevents accidental exposure of sensitive credentials.
üîπ Ensures compliance with security best practices by limiting risky IAM permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing high-risk actions related to credentials exposure.
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow to alter critical s3 permissions configuration,This control ensures that EC2 instance IAM role does not allow to alter critical s3 permissions configuration.,Compliance,High,Ensure IAM roles do not allow alteration of critical S3 permissions. Steps: 1. Review IAM permissions for roles. 2. Restrict permissions to alter S3 policies. # REF: S3 Permissions https://docs.aws.amazon.com/AmazonS3/latest/userguide/permissions.html,$0 (S3 permission management is free),"EC2 Instance IAM Role Should Not Allow Altering Critical S3 Permissions Configuration
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow altering S3 bucket permissions (e.g., s3:PutBucketAcl, s3:PutBucketPolicy).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to altering S3 bucket permissions.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow altering critical S3 permissions.
‚úÖ If found, removes permissions related to modifying S3 bucket ACLs and policies and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove S3 permission alteration permissions
restrict_s3_permission_alteration() {
    log ""Starting EC2 IAM role S3 security review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to altering S3 permissions
            risky_actions=(
                ""s3:PutBucketAcl""
                ""s3:PutBucketPolicy""
                ""s3:DeleteBucketPolicy""
                ""s3:PutBucketPublicAccessBlock""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing S3 permission alteration permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_s3_permission_alteration
","Why This is Useful?
üîπ Prevents Unauthorized S3 Permission Changes: Ensures that EC2 instances cannot modify bucket policies or ACLs.
üîπ Ensures Compliance: Protects critical S3 configurations from being altered.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing alteration of critical S3 permissions.
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow cloud log tampering access,This control ensures that EC2 instance IAM roles do not allow cloud log tampering access.,Compliance,High,Ensure IAM roles do not allow access to tamper with CloudWatch logs. Steps: 1. Review IAM permissions for roles. 2. Remove tampering permissions. # REF: CloudWatch Logging https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html,$0 (CloudWatch log management is free),"EC2 Instance IAM Role Should Not Allow Cloud Log Tampering Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that grant permissions to delete or modify logs in CloudWatch, CloudTrail, or S3.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 IAM roles and removes log tampering permissions if found.
SSM Automation: Use an SSM document to automatically remediate IAM roles violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow log tampering actions (logs:DeleteLogStream, logs:DeleteLogGroup, s3:DeleteObject, cloudtrail:StopLogging).
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_log_tampering_permissions() {
    log ""Starting EC2 IAM role log protection validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows log tampering actions
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""logs:DeleteLogStream"", ""logs:DeleteLogGroup"", ""s3:DeleteObject"", ""cloudtrail:StopLogging""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name has log tampering permissions. Fixing...""

                # Create a new policy document without log tampering permissions
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""logs:DeleteLogStream"" and .Action != ""logs:DeleteLogGroup"" and .Action != ""s3:DeleteObject"" and .Action != ""cloudtrail:StopLogging"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing log tampering permissions.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_log_tampering_permissions
","üöÄ Why This is Useful?
üîπ Ensures Security & Compliance: Prevents EC2 IAM roles from granting log tampering permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Tracks all actions, whether modifications or skipped instances.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing log tampering actions (logs:DeleteLogStream, s3:DeleteObject, cloudtrail:StopLogging).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow cloud log tampering access,This control ensures that EC2 instance IAM roles do not allow cloud log tampering access.,Compliance,High,Ensure IAM roles do not allow access to tamper with CloudWatch logs. Steps: 1. Review IAM permissions for roles. 2. Remove tampering permissions. # REF: CloudWatch Logging https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html,$0 (CloudWatch log management is free),"EC2 Instance IAM Role Should Not Allow Cloud Log Tampering Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that grant permissions to delete or modify logs in CloudWatch, CloudTrail, or S3.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 IAM roles and removes log tampering permissions if found.
SSM Automation: Use an SSM document to automatically remediate IAM roles violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow log tampering actions (logs:DeleteLogStream, logs:DeleteLogGroup, s3:DeleteObject, cloudtrail:StopLogging).
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_log_tampering_permissions() {
    log ""Starting EC2 IAM role log protection validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows log tampering actions
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""logs:DeleteLogStream"", ""logs:DeleteLogGroup"", ""s3:DeleteObject"", ""cloudtrail:StopLogging""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name has log tampering permissions. Fixing...""

                # Create a new policy document without log tampering permissions
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""logs:DeleteLogStream"" and .Action != ""logs:DeleteLogGroup"" and .Action != ""s3:DeleteObject"" and .Action != ""cloudtrail:StopLogging"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing log tampering permissions.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_log_tampering_permissions
","üöÄ Why This is Useful?
üîπ Ensures Security & Compliance: Prevents EC2 IAM roles from granting log tampering permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Tracks all actions, whether modifications or skipped instances.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing log tampering actions (logs:DeleteLogStream, s3:DeleteObject, cloudtrail:StopLogging).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow data destruction access,This control ensures that EC2 instance IAM role does not allow data destruction access.,Compliance,High,Ensure IAM roles do not allow access for data destruction. Steps: 1. Review IAM role permissions. 2. Restrict permissions to prevent data destruction. # REF: IAM Data Protection https://aws.amazon.com/security/data-protection/,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Data Destruction Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow destructive actions on AWS services (e.g., deleting databases, S3 buckets, EBS volumes, or DynamoDB tables).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to data destruction if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow destructive data actions.
‚úÖ If found, removes permissions related to data destruction and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for data destruction actions
restrict_data_destruction_permissions() {
    log ""Starting EC2 IAM role security review for data destruction access...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to data destruction
            risky_actions=(
                ""s3:DeleteBucket""
                ""s3:DeleteObject""
                ""rds:DeleteDBInstance""
                ""rds:DeleteDBCluster""
                ""dynamodb:DeleteTable""
                ""dynamodb:BatchWriteItem""
                ""ec2:DeleteVolume""
                ""ec2:DeleteSnapshot""
                ""kms:ScheduleKeyDeletion""
                ""kms:DeleteAlias""
                ""glacier:DeleteArchive""
                ""sqs:DeleteQueue""
                ""sns:DeleteTopic""
                ""elasticache:DeleteCacheCluster""
                ""redshift:DeleteCluster""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing data destruction permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_data_destruction_permissions
","Why This is Useful?
üîπ Prevents Accidental or Malicious Data Loss: Ensures that EC2 instances cannot delete critical data or resources.
üîπ Ensures Compliance: Protects AWS services such as S3, RDS, DynamoDB, and EC2 from unauthorized data destruction.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing destructive actions (e.g., deleting S3 buckets, RDS instances, or EC2 volumes).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow data destruction access,This control ensures that EC2 instance IAM role does not allow data destruction access.,Compliance,High,Ensure IAM roles do not allow access for data destruction. Steps: 1. Review IAM role permissions. 2. Restrict permissions to prevent data destruction. # REF: IAM Data Protection https://aws.amazon.com/security/data-protection/,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Data Destruction Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow destructive actions on AWS services (e.g., deleting databases, S3 buckets, EBS volumes, or DynamoDB tables).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to data destruction if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow destructive data actions.
‚úÖ If found, removes permissions related to data destruction and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for data destruction actions
restrict_data_destruction_permissions() {
    log ""Starting EC2 IAM role security review for data destruction access...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to data destruction
            risky_actions=(
                ""s3:DeleteBucket""
                ""s3:DeleteObject""
                ""rds:DeleteDBInstance""
                ""rds:DeleteDBCluster""
                ""dynamodb:DeleteTable""
                ""dynamodb:BatchWriteItem""
                ""ec2:DeleteVolume""
                ""ec2:DeleteSnapshot""
                ""kms:ScheduleKeyDeletion""
                ""kms:DeleteAlias""
                ""glacier:DeleteArchive""
                ""sqs:DeleteQueue""
                ""sns:DeleteTopic""
                ""elasticache:DeleteCacheCluster""
                ""redshift:DeleteCluster""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing data destruction permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_data_destruction_permissions
","Why This is Useful?
üîπ Prevents Accidental or Malicious Data Loss: Ensures that EC2 instances cannot delete critical data or resources.
üîπ Ensures Compliance: Protects AWS services such as S3, RDS, DynamoDB, and EC2 from unauthorized data destruction.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing destructive actions (e.g., deleting S3 buckets, RDS instances, or EC2 volumes).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow database management write access,This control ensures that EC2 instance IAM role does not allow database management write access.,Compliance,High,Ensure IAM roles do not allow write access for database management. Steps: 1. Review IAM role permissions. 2. Limit write permissions to databases as needed. # REF: IAM Role Security https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Database Management Write Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow database management write actions (such as modifying, deleting, or creating database resources).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to database write access if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow database management write actions.
‚úÖ If found, removes permissions related to these actions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for database write access
restrict_db_write_permissions() {
    log ""Starting EC2 IAM role security review for database write access...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to database management write access
            risky_actions=(
                ""rds:CreateDBInstance""
                ""rds:ModifyDBInstance""
                ""rds:DeleteDBInstance""
                ""rds:RebootDBInstance""
                ""rds:RestoreDBInstanceFromSnapshot""
                ""rds:StartDBInstance""
                ""rds:StopDBInstance""
                ""rds:CreateDBCluster""
                ""rds:ModifyDBCluster""
                ""rds:DeleteDBCluster""
                ""dynamodb:CreateTable""
                ""dynamodb:UpdateTable""
                ""dynamodb:DeleteTable""
                ""dynamodb:BatchWriteItem""
                ""dynamodb:PutItem""
                ""dynamodb:UpdateItem""
                ""dynamodb:DeleteItem""
                ""neptune:CreateDBInstance""
                ""neptune:ModifyDBInstance""
                ""neptune:DeleteDBInstance""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing database write permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_db_write_permissions
","Why This is Useful?
üîπ Prevents Accidental or Malicious Database Changes: Ensures that EC2 instances cannot create, modify, or delete critical database resources.
üîπ Ensures Compliance: Protects critical databases from unauthorized changes.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing database write-level access (such as creating, modifying, or deleting DB resources).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow database management write access,This control ensures that EC2 instance IAM role does not allow database management write access.,Compliance,High,Ensure IAM roles do not allow write access for database management. Steps: 1. Review IAM role permissions. 2. Limit write permissions to databases as needed. # REF: IAM Role Security https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Database Management Write Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow database management write actions (such as modifying, deleting, or creating database resources).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to database write access if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow database management write actions.
‚úÖ If found, removes permissions related to these actions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for database write access
restrict_db_write_permissions() {
    log ""Starting EC2 IAM role security review for database write access...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to database management write access
            risky_actions=(
                ""rds:CreateDBInstance""
                ""rds:ModifyDBInstance""
                ""rds:DeleteDBInstance""
                ""rds:RebootDBInstance""
                ""rds:RestoreDBInstanceFromSnapshot""
                ""rds:StartDBInstance""
                ""rds:StopDBInstance""
                ""rds:CreateDBCluster""
                ""rds:ModifyDBCluster""
                ""rds:DeleteDBCluster""
                ""dynamodb:CreateTable""
                ""dynamodb:UpdateTable""
                ""dynamodb:DeleteTable""
                ""dynamodb:BatchWriteItem""
                ""dynamodb:PutItem""
                ""dynamodb:UpdateItem""
                ""dynamodb:DeleteItem""
                ""neptune:CreateDBInstance""
                ""neptune:ModifyDBInstance""
                ""neptune:DeleteDBInstance""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing database write permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_db_write_permissions
","Why This is Useful?
üîπ Prevents Accidental or Malicious Database Changes: Ensures that EC2 instances cannot create, modify, or delete critical database resources.
üîπ Ensures Compliance: Protects critical databases from unauthorized changes.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing database write-level access (such as creating, modifying, or deleting DB resources).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow defense evasion impact of AWS security services access,This control ensures that EC2 instance IAM role does not allow defense evasion impact of AWS security services access.,Compliance,High,Ensure IAM roles do not allow access to disable AWS security services. Steps: 1. Review IAM permissions. 2. Restrict access to disable security services. # REF: AWS Security Best Practices https://aws.amazon.com/security/security-best-practices/,$0 (IAM role management is free)," EC2 Instance IAM Role Should Not Allow Defense Evasion Impact of AWS Security Services Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow permissions related to disabling or bypassing AWS security services.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions that allow disabling or evading security services.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control."," Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow permissions such as:

""iam:DeleteRolePolicy""
""iam:DetachRolePolicy""
""securityhub:DisableSecurityHub""
""guardduty:StopMonitoringMembers""
""cloudtrail:StopLogging""
""macie2:DisableMacie""
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove security-sensitive permissions
restrict_defense_evasion_permissions() {
    log ""Starting EC2 IAM role security review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to security evasion
            risky_actions=(
                ""iam:DeleteRolePolicy""
                ""iam:DetachRolePolicy""
                ""iam:PutRolePolicy""
                ""guardduty:DisableOrganizationAdminAccount""
                ""guardduty:DeleteDetector""
                ""securityhub:DisableSecurityHub""
                ""cloudtrail:StopLogging""
                ""cloudtrail:DeleteTrail""
                ""kms:DisableKey""
                ""kms:ScheduleKeyDeletion""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing defense evasion permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_defense_evasion_permissions
","üöÄ Why This is Useful?
üîπ Prevents Security Evasion: Stops attackers from disabling logging or removing security controls.
üîπ Ensures Compliance: Blocks IAM roles from having permissions that can be abused.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing security evasion actions (like stopping CloudTrail, disabling GuardDuty, detaching IAM policies).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow defense evasion impact of AWS security services access,This control ensures that EC2 instance IAM role does not allow defense evasion impact of AWS security services access.,Compliance,High,Ensure IAM roles do not allow access to disable AWS security services. Steps: 1. Review IAM permissions. 2. Restrict access to disable security services. # REF: AWS Security Best Practices https://aws.amazon.com/security/security-best-practices/,$0 (IAM role management is free)," EC2 Instance IAM Role Should Not Allow Defense Evasion Impact of AWS Security Services Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow permissions related to disabling or bypassing AWS security services.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions that allow disabling or evading security services.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control."," Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow permissions such as:

""iam:DeleteRolePolicy""
""iam:DetachRolePolicy""
""securityhub:DisableSecurityHub""
""guardduty:StopMonitoringMembers""
""cloudtrail:StopLogging""
""macie2:DisableMacie""
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove security-sensitive permissions
restrict_defense_evasion_permissions() {
    log ""Starting EC2 IAM role security review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to security evasion
            risky_actions=(
                ""iam:DeleteRolePolicy""
                ""iam:DetachRolePolicy""
                ""iam:PutRolePolicy""
                ""guardduty:DisableOrganizationAdminAccount""
                ""guardduty:DeleteDetector""
                ""securityhub:DisableSecurityHub""
                ""cloudtrail:StopLogging""
                ""cloudtrail:DeleteTrail""
                ""kms:DisableKey""
                ""kms:ScheduleKeyDeletion""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing defense evasion permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_defense_evasion_permissions
","üöÄ Why This is Useful?
üîπ Prevents Security Evasion: Stops attackers from disabling logging or removing security controls.
üîπ Ensures Compliance: Blocks IAM roles from having permissions that can be abused.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing security evasion actions (like stopping CloudTrail, disabling GuardDuty, detaching IAM policies).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow destruction KMS access,This control ensures that EC2 instance IAM roles do not allow destruction KMS access.,Compliance,High,Ensure IAM roles do not allow KMS access for destruction. Steps: 1. Review IAM role permissions. 2. Restrict permissions related to KMS destruction. # REF: AWS KMS Permissions / https://docs.aws.amazon.com/kms/latest/developerguide/overview.html,$0 (KMS access is charged based on usage),"EC2 Instance IAM Role Should Not Allow Destruction KMS Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow destructive KMS actions (e.g., disabling or deleting KMS keys).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to KMS destruction if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow KMS destruction actions.
‚úÖ If found, removes permissions related to key deletion and disabling and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove KMS destruction permissions
restrict_kms_destruction_permissions() {
    log ""Starting EC2 IAM role KMS security review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to KMS key destruction
            risky_actions=(
                ""kms:DisableKey""
                ""kms:ScheduleKeyDeletion""
                ""kms:CancelKeyDeletion""
                ""kms:DeleteAlias""
                ""kms:UpdateKeyDescription""
                ""kms:UpdateAlias""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing KMS destruction permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_kms_destruction_permissions
","Why This is Useful?
üîπ Prevents Accidental or Malicious Key Deletion: Ensures that EC2 instances cannot disable or delete encryption keys.
üîπ Ensures Compliance: Protects critical KMS keys from being tampered with.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing destructive KMS actions (like disabling, deleting, or modifying KMS keys).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow destruction KMS access,This control ensures that EC2 instance IAM roles do not allow destruction KMS access.,Compliance,High,Ensure IAM roles do not allow KMS access for destruction. Steps: 1. Review IAM role permissions. 2. Restrict permissions related to KMS destruction. # REF: AWS KMS Permissions / https://docs.aws.amazon.com/kms/latest/developerguide/overview.html,$0 (KMS access is charged based on usage),"EC2 Instance IAM Role Should Not Allow Destruction KMS Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow destructive KMS actions (e.g., disabling or deleting KMS keys).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to KMS destruction if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow KMS destruction actions.
‚úÖ If found, removes permissions related to key deletion and disabling and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove KMS destruction permissions
restrict_kms_destruction_permissions() {
    log ""Starting EC2 IAM role KMS security review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to KMS key destruction
            risky_actions=(
                ""kms:DisableKey""
                ""kms:ScheduleKeyDeletion""
                ""kms:CancelKeyDeletion""
                ""kms:DeleteAlias""
                ""kms:UpdateKeyDescription""
                ""kms:UpdateAlias""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing KMS destruction permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_kms_destruction_permissions
","Why This is Useful?
üîπ Prevents Accidental or Malicious Key Deletion: Ensures that EC2 instances cannot disable or delete encryption keys.
üîπ Ensures Compliance: Protects critical KMS keys from being tampered with.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing destructive KMS actions (like disabling, deleting, or modifying KMS keys).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow destruction RDS access,This control ensures that EC2 instance IAM roles do not allow destruction RDS access.,Compliance,High,Ensure IAM roles do not allow destruction of RDS instances. Steps: 1. Review IAM role permissions. 2. Remove any permissions that allow destruction of RDS. # REF: IAM Role Security/  https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Elastic IP Hijacking Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow actions related to Elastic IP hijacking.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to Elastic IP hijacking.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow Elastic IP hijacking actions.
‚úÖ If found, removes permissions related to Elastic IP control and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for Elastic IP hijacking
restrict_elastic_ip_hijacking() {
    log ""Starting EC2 IAM role security review for Elastic IP hijacking access...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to Elastic IP hijacking
            risky_actions=(
                ""ec2:AssociateAddress""
                ""ec2:DisassociateAddress""
                ""ec2:ReleaseAddress""
                ""ec2:AllocateAddress""
                ""ec2:ReplaceNetworkAclAssociation""
                ""ec2:ReplaceRoute""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing Elastic IP hijacking permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_elastic_ip_hijacking
","Why This is Useful?
üîπ Prevents Unauthorized IP Takeover: Ensures that EC2 instances cannot modify Elastic IPs, reducing the risk of hijacking.
üîπ Ensures Compliance: Helps meet security and compliance standards (e.g., CIS AWS Benchmark, PCI-DSS).
üîπ Automated or Manual: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing Elastic IP hijacking actions (e.g., associating, disassociating, or releasing Elastic IPs).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow destruction RDS access,This control ensures that EC2 instance IAM roles do not allow destruction RDS access.,Compliance,High,Ensure IAM roles do not allow destruction of RDS instances. Steps: 1. Review IAM role permissions. 2. Remove any permissions that allow destruction of RDS. # REF: IAM Role Security/  https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Elastic IP Hijacking Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow actions related to Elastic IP hijacking.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to Elastic IP hijacking.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow Elastic IP hijacking actions.
‚úÖ If found, removes permissions related to Elastic IP control and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for Elastic IP hijacking
restrict_elastic_ip_hijacking() {
    log ""Starting EC2 IAM role security review for Elastic IP hijacking access...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to Elastic IP hijacking
            risky_actions=(
                ""ec2:AssociateAddress""
                ""ec2:DisassociateAddress""
                ""ec2:ReleaseAddress""
                ""ec2:AllocateAddress""
                ""ec2:ReplaceNetworkAclAssociation""
                ""ec2:ReplaceRoute""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing Elastic IP hijacking permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_elastic_ip_hijacking
","Why This is Useful?
üîπ Prevents Unauthorized IP Takeover: Ensures that EC2 instances cannot modify Elastic IPs, reducing the risk of hijacking.
üîπ Ensures Compliance: Helps meet security and compliance standards (e.g., CIS AWS Benchmark, PCI-DSS).
üîπ Automated or Manual: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing Elastic IP hijacking actions (e.g., associating, disassociating, or releasing Elastic IPs).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow elastic IP hijacking access.,This control ensures that EC2 instance IAM role does not allow elastic IP hijacking access.,Compliance,High,Ensure IAM roles do not allow access for elastic IP hijacking. Steps: 1. Review IAM role permissions. 2. Restrict permissions to prevent elastic IP hijacking. # REF: Elastic IPs / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html,$0 (IAM role management is free),"Ensure Unused ENIs Are Removed
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect unused Elastic Network Interfaces (ENIs).
Lambda Function: A scheduled Lambda (via EventBridge) that identifies and deletes unused ENIs.
SSM Automation: Use an SSM document to automatically remove unattached ENIs.","üîç Features of the Script:
‚úÖ Retrieves all ENIs and checks their attachment status.
‚úÖ Deletes ENIs that are not attached to any instance or service.
‚úÖ Skips ENIs that are in use or belong to critical AWS services.
‚úÖ Logs each action, including skipped ENIs for visibility.
‚úÖ Supports manual mode (user inputs an ENI ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ENI check
get_user_input() {
    read -p ""Enter the ENI ID to check (or press Enter to auto-scan all ENIs): "" user_eni_id
}

# Function to check and remove unused ENIs
remove_unused_enis() {
    log ""Starting unused ENI cleanup process...""

    # Get list of ENIs (manual or auto)
    if [[ -n ""$user_eni_id"" ]]; then
        enis=(""$user_eni_id"")
    else
        log ""No manual input provided. Scanning all ENIs...""
        enis=($(aws ec2 describe-network-interfaces --query ""NetworkInterfaces[].NetworkInterfaceId"" --output text))
    fi

    if [[ ${#enis[@]} -eq 0 ]]; then
        log ""No ENIs found.""
        exit 0
    fi

    deleted_count=0
    for eni_id in ""${enis[@]}""; do
        log ""Checking ENI: $eni_id""

        # Get attachment status
        attachment=$(aws ec2 describe-network-interfaces --network-interface-ids ""$eni_id"" \
            --query ""NetworkInterfaces[].Attachment"" --output text)

        if [[ ""$attachment"" != ""None"" && -n ""$attachment"" ]]; then
            log ""‚úÖ ENI $eni_id is attached to a resource. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è ENI $eni_id is unused. Deleting...""
        aws ec2 delete-network-interface --network-interface-id ""$eni_id""
        log ""‚úÖ ENI $eni_id deleted successfully.""
        ((deleted_count++))
    done

    if [[ $deleted_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $deleted_count unused ENIs removed.""
    else
        log ""‚úÖ All ENIs are in use. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
remove_unused_enis
"," Why This is Useful?
üîπ Optimizes AWS Costs: Removes unused ENIs to avoid unnecessary charges.
üîπ Manual or Automated: Users can specify an ENI ID or scan all ENIs.
üîπ Failsafe Mechanism: Skips ENIs that are attached to active resources.
üîπ Full Logging: Keeps track of all actions, ensuring compliance.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ENIs in the AWS account.
2Ô∏è‚É£ Checks if each ENI is attached to an instance or service.
3Ô∏è‚É£ Deletes ENIs that are not attached to any resource.
4Ô∏è‚É£ Logs each action, ensuring full visibility",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow management level access,This control ensures that EC2 instance IAM role does not allow management level access.,Compliance,High,Ensure IAM roles do not allow management level access. Steps: 1. Review IAM role permissions. 2. Limit management permissions as necessary. # REF: IAM Best Practices / https://aws.amazon.com/security/best-practices/,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Management Level Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that grant management-level permissions (e.g., AdministratorAccess, iam:CreateUser, iam:AttachRolePolicy).
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 IAM roles and removes management-level permissions if found.
SSM Automation: Use an SSM document to automatically remediate IAM roles violating this control.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow management-level actions (e.g., iam:*, ec2:ModifyInstanceAttribute).
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_management_permissions() {
    log ""Starting EC2 IAM role management-level permissions validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows management-level actions
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""iam:*"", ""ec2:ModifyInstanceAttribute""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name has management-level permissions. Fixing...""

                # Create a new policy document without management permissions
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""iam:*"" and .Action != ""ec2:ModifyInstanceAttribute"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing management-level permissions.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_management_permissions
","üöÄ Why This is Useful?
üîπ Ensures Security & Compliance: Prevents EC2 IAM roles from granting management-level permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Tracks all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing management-level permissions (iam:*, ec2:ModifyInstanceAttribute).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow management level access,This control ensures that EC2 instance IAM role does not allow management level access.,Compliance,High,Ensure IAM roles do not allow management level access. Steps: 1. Review IAM role permissions. 2. Limit management permissions as necessary. # REF: IAM Best Practices / https://aws.amazon.com/security/best-practices/,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Management Level Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that grant management-level permissions (e.g., AdministratorAccess, iam:CreateUser, iam:AttachRolePolicy).
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 IAM roles and removes management-level permissions if found.
SSM Automation: Use an SSM document to automatically remediate IAM roles violating this control.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow management-level actions (e.g., iam:*, ec2:ModifyInstanceAttribute).
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_management_permissions() {
    log ""Starting EC2 IAM role management-level permissions validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows management-level actions
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""iam:*"", ""ec2:ModifyInstanceAttribute""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name has management-level permissions. Fixing...""

                # Create a new policy document without management permissions
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""iam:*"" and .Action != ""ec2:ModifyInstanceAttribute"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing management-level permissions.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_management_permissions
","üöÄ Why This is Useful?
üîπ Ensures Security & Compliance: Prevents EC2 IAM roles from granting management-level permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Tracks all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing management-level permissions (iam:*, ec2:ModifyInstanceAttribute).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow new group creation with attached policy access,This control ensures that EC2 instance IAM role does not allow new group creation with attached policy access.,Compliance,High,Ensure IAM roles do not allow creation of new groups with attached policies. Steps: 1. Review IAM role permissions. 2. Remove permissions for group creation. # REF: IAM Group Management / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow New Group Creation with Attached Policy Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow the creation of IAM groups and the attachment of policies to them.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to creating new IAM groups and attaching policies if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow creating IAM groups or attaching policies to them.
‚úÖ If found, removes permissions related to these actions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for group creation and policy attachment
restrict_group_creation_permissions() {
    log ""Starting EC2 IAM role security review for group creation policies...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to IAM group creation and policy attachment
            risky_actions=(
                ""iam:CreateGroup""
                ""iam:AttachGroupPolicy""
                ""iam:PutGroupPolicy""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing risky IAM group permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_group_creation_permissions
","Why This is Useful?
üîπ Prevents Unauthorized Privilege Escalation: Ensures that EC2 IAM roles cannot create IAM groups and attach policies, reducing security risks.
üîπ Ensures Compliance: Protects IAM roles from being used to escalate privileges.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing IAM group creation or policy attachment.
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow new group creation with attached policy access,This control ensures that EC2 instance IAM role does not allow new group creation with attached policy access.,Compliance,High,Ensure IAM roles do not allow creation of new groups with attached policies. Steps: 1. Review IAM role permissions. 2. Remove permissions for group creation. # REF: IAM Group Management / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow New Group Creation with Attached Policy Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow the creation of IAM groups and the attachment of policies to them.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to creating new IAM groups and attaching policies if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow creating IAM groups or attaching policies to them.
‚úÖ If found, removes permissions related to these actions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for group creation and policy attachment
restrict_group_creation_permissions() {
    log ""Starting EC2 IAM role security review for group creation policies...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to IAM group creation and policy attachment
            risky_actions=(
                ""iam:CreateGroup""
                ""iam:AttachGroupPolicy""
                ""iam:PutGroupPolicy""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing risky IAM group permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_group_creation_permissions
","Why This is Useful?
üîπ Prevents Unauthorized Privilege Escalation: Ensures that EC2 IAM roles cannot create IAM groups and attach policies, reducing security risks.
üîπ Ensures Compliance: Protects IAM roles from being used to escalate privileges.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing IAM group creation or policy attachment.
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow new role creation with attached policy access,This control ensures that EC2 instance IAM role does not allow new role creation with attached policy access.,Compliance,High,Ensure IAM roles do not allow creation of new roles with attached policies. Steps: 1. Review IAM role permissions. 2. Restrict permissions for role creation. # REF: IAM Role Management / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow New Role Creation with Attached Policy Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow creating new IAM roles and attaching policies.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to IAM role creation and policy attachment if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow creating new IAM roles or attaching policies to them.
‚úÖ If found, removes permissions related to these actions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for role creation and policy attachment
restrict_role_creation_permissions() {
    log ""Starting EC2 IAM role security review for role creation policies...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to IAM role creation and policy attachment
            risky_actions=(
                ""iam:CreateRole""
                ""iam:AttachRolePolicy""
                ""iam:PutRolePolicy""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing risky IAM role creation permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_role_creation_permissions
","Why This is Useful?
üîπ Prevents Unauthorized Privilege Escalation: Ensures that EC2 IAM roles cannot create new IAM roles or attach policies, reducing security risks.
üîπ Ensures Compliance: Protects IAM roles from being used to escalate privileges.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing IAM role creation or policy attachment.
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow new role creation with attached policy access,This control ensures that EC2 instance IAM role does not allow new role creation with attached policy access.,Compliance,High,Ensure IAM roles do not allow creation of new roles with attached policies. Steps: 1. Review IAM role permissions. 2. Restrict permissions for role creation. # REF: IAM Role Management / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow New Role Creation with Attached Policy Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow creating new IAM roles and attaching policies.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to IAM role creation and policy attachment if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow creating new IAM roles or attaching policies to them.
‚úÖ If found, removes permissions related to these actions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for role creation and policy attachment
restrict_role_creation_permissions() {
    log ""Starting EC2 IAM role security review for role creation policies...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to IAM role creation and policy attachment
            risky_actions=(
                ""iam:CreateRole""
                ""iam:AttachRolePolicy""
                ""iam:PutRolePolicy""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing risky IAM role creation permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_role_creation_permissions
","Why This is Useful?
üîπ Prevents Unauthorized Privilege Escalation: Ensures that EC2 IAM roles cannot create new IAM roles or attach policies, reducing security risks.
üîπ Ensures Compliance: Protects IAM roles from being used to escalate privileges.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing IAM role creation or policy attachment.
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow new user creation with attached policy access,This control ensures that EC2 instance IAM role does not allow new user creation with attached policy access.,Compliance,High,Ensure IAM roles do not allow creation of new users with attached policies. Steps: 1. Review IAM role permissions. 2. Limit user creation permissions. # REF: IAM User Management / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow New User Creation with Attached Policy Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that allow ""iam:CreateUser"" and ""iam:AttachUserPolicy"".
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 IAM roles and removes these risky permissions if found.
SSM Automation: Use an SSM document to automatically remediate IAM roles violating this control."," Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow ""iam:CreateUser"" or ""iam:AttachUserPolicy"".
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_role_permissions() {
    log ""Starting EC2 IAM role permissions validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows ""iam:CreateUser"" or ""iam:AttachUserPolicy""
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""iam:CreateUser"", ""iam:AttachUserPolicy""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name allows user creation or policy attachment. Fixing...""

                # Create a new policy document without ""iam:CreateUser"" and ""iam:AttachUserPolicy""
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""iam:CreateUser"" and .Action != ""iam:AttachUserPolicy"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing user creation and policy attachment permissions.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_role_permissions
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized User Creation: Reduces the risk of privilege escalation attacks.
üîπ Enhances Security Compliance: Ensures IAM roles do not have excessive permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing ""iam:CreateUser"" or ""iam:AttachUserPolicy"".
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow new user creation with attached policy access,This control ensures that EC2 instance IAM role does not allow new user creation with attached policy access.,Compliance,High,Ensure IAM roles do not allow creation of new users with attached policies. Steps: 1. Review IAM role permissions. 2. Limit user creation permissions. # REF: IAM User Management / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow New User Creation with Attached Policy Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that allow ""iam:CreateUser"" and ""iam:AttachUserPolicy"".
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EC2 IAM roles and removes these risky permissions if found.
SSM Automation: Use an SSM document to automatically remediate IAM roles violating this control."," Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow ""iam:CreateUser"" or ""iam:AttachUserPolicy"".
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_role_permissions() {
    log ""Starting EC2 IAM role permissions validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows ""iam:CreateUser"" or ""iam:AttachUserPolicy""
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""iam:CreateUser"", ""iam:AttachUserPolicy""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name allows user creation or policy attachment. Fixing...""

                # Create a new policy document without ""iam:CreateUser"" and ""iam:AttachUserPolicy""
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""iam:CreateUser"" and .Action != ""iam:AttachUserPolicy"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing user creation and policy attachment permissions.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_role_permissions
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized User Creation: Reduces the risk of privilege escalation attacks.
üîπ Enhances Security Compliance: Ensures IAM roles do not have excessive permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing ""iam:CreateUser"" or ""iam:AttachUserPolicy"".
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow oraganization write access,This control ensures that EC2 instance IAM role does not allow oraganization write access.,Compliance,High,Ensure IAM roles do not allow write access to AWS Organizations. Steps: 1. Review IAM role permissions. 2. Restrict permissions related to organization writes. # REF: AWS Organizations / https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Organization Write Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that allow ""organizations:Write"" permissions.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes ""organizations:Write"" if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow ""organizations:Write"".
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_role_permissions() {
    log ""Starting EC2 IAM role permissions validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows ""organizations:Write""
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains(""organizations:Write"")' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name allows 'organizations:Write'. Fixing...""

                # Create a new policy document without ""organizations:Write""
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""organizations:Write"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing 'organizations:Write' permission.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_role_permissions
","üöÄ Why This is Useful?
üîπ Ensures Compliance: Prevents EC2 IAM roles from granting excessive permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing ""organizations:Write"".
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow privilege escalation risk access,This control ensures that EC2 instance IAM role does not allow privilege escalation risk access.,Compliance,High,Ensure IAM roles do not allow privilege escalation risks. Steps: 1. Review IAM role permissions. 2. Remove permissions that could allow privilege escalation. # REF: IAM Security Best Practices / https://aws.amazon.com/security/best-practices/,$0 (IAM role management is free),"1. EC2 Instance IAM Role Should Not Allow Privilege Escalation Risk Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow privilege escalation.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes policies that allow privilege escalation.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and their attached IAM roles.
‚úÖ Scans IAM policies for privilege escalation risks, including:

""iam:PassRole"" with wildcards (""*"")
""iam:CreatePolicyVersion""
""iam:AttachRolePolicy""
""iam:PutUserPolicy""
""iam:AddUserToGroup""
‚úÖ If found, removes the risky permissions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to scan all instances): "" user_instance_id
}

# Function to check and fix IAM role privilege escalation risks
fix_iam_privilege_escalation() {
    log ""Starting EC2 IAM role privilege escalation check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows privilege escalation
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""iam:PassRole"", ""iam:CreatePolicyVersion"", ""iam:AttachRolePolicy"", ""iam:PutUserPolicy"", ""iam:AddUserToGroup""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name has privilege escalation risks. Fixing...""

                # Create a new policy document without risky permissions
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action as $a | $a != ""iam:PassRole"" and $a != ""iam:CreatePolicyVersion"" and $a != ""iam:AttachRolePolicy"" and $a != ""iam:PutUserPolicy"" and $a != ""iam:AddUserToGroup"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing privilege escalation risks.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_iam_privilege_escalation
","üöÄ Why This is Useful?
üîπ Prevents IAM privilege escalation attacks by removing risky permissions.
üîπ Ensures EC2 IAM roles follow least privilege principles.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies risky permissions related to privilege escalation:

""iam:PassRole"" (with * wildcard)
""iam:CreatePolicyVersion""
""iam:AttachRolePolicy""
""iam:PutUserPolicy""
""iam:AddUserToGroup""
4Ô∏è‚É£ If found, removes the risky permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow privilege escalation risk access,This control ensures that EC2 instance IAM role does not allow privilege escalation risk access.,Compliance,High,Ensure IAM roles do not allow privilege escalation risks. Steps: 1. Review IAM role permissions. 2. Remove permissions that could allow privilege escalation. # REF: IAM Security Best Practices / https://aws.amazon.com/security/best-practices/,$0 (IAM role management is free),"1. EC2 Instance IAM Role Should Not Allow Privilege Escalation Risk Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow privilege escalation.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes policies that allow privilege escalation.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and their attached IAM roles.
‚úÖ Scans IAM policies for privilege escalation risks, including:

""iam:PassRole"" with wildcards (""*"")
""iam:CreatePolicyVersion""
""iam:AttachRolePolicy""
""iam:PutUserPolicy""
""iam:AddUserToGroup""
‚úÖ If found, removes the risky permissions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to scan all instances): "" user_instance_id
}

# Function to check and fix IAM role privilege escalation risks
fix_iam_privilege_escalation() {
    log ""Starting EC2 IAM role privilege escalation check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows privilege escalation
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""iam:PassRole"", ""iam:CreatePolicyVersion"", ""iam:AttachRolePolicy"", ""iam:PutUserPolicy"", ""iam:AddUserToGroup""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name has privilege escalation risks. Fixing...""

                # Create a new policy document without risky permissions
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action as $a | $a != ""iam:PassRole"" and $a != ""iam:CreatePolicyVersion"" and $a != ""iam:AttachRolePolicy"" and $a != ""iam:PutUserPolicy"" and $a != ""iam:AddUserToGroup"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing privilege escalation risks.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_iam_privilege_escalation
","üöÄ Why This is Useful?
üîπ Prevents IAM privilege escalation attacks by removing risky permissions.
üîπ Ensures EC2 IAM roles follow least privilege principles.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies risky permissions related to privilege escalation:

""iam:PassRole"" (with * wildcard)
""iam:CreatePolicyVersion""
""iam:AttachRolePolicy""
""iam:PutUserPolicy""
""iam:AddUserToGroup""
4Ô∏è‚É£ If found, removes the risky permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow security group write access,This control ensures that EC2 instance IAM roles do not allow security group write access.,Compliance,High,Ensure IAM roles do not allow write access to security groups. Steps: 1. Review IAM role permissions. 2. Remove permissions that allow modification of security groups. # REF: IAM Security Groups / https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Destruction RDS Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow destructive RDS actions (e.g., deleting or modifying RDS instances and snapshots).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to RDS destruction.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow destructive RDS actions.
‚úÖ If found, removes permissions related to RDS deletion and modification and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for destructive RDS access
restrict_rds_destruction() {
    log ""Starting EC2 IAM role security review for RDS destruction access...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to RDS destruction
            risky_actions=(
                ""rds:DeleteDBInstance""
                ""rds:DeleteDBCluster""
                ""rds:DeleteDBSnapshot""
                ""rds:ModifyDBInstance""
                ""rds:ModifyDBCluster""
                ""rds:ModifyDBSnapshotAttribute""
                ""rds:RebootDBInstance""
                ""rds:RemoveRoleFromDBInstance""
                ""rds:RestoreDBInstanceFromDBSnapshot""
                ""rds:RestoreDBClusterFromSnapshot""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing RDS destruction permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_rds_destruction
","Why This is Useful?
üîπ Prevents Accidental or Malicious Database Deletion: Ensures that EC2 instances cannot delete or modify critical RDS resources.
üîπ Ensures Compliance: Protects against unauthorized database modifications or deletions, aligning with security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing destructive RDS actions (e.g., deleting or modifying RDS instances or snapshots).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow security group write access,This control ensures that EC2 instance IAM roles do not allow security group write access.,Compliance,High,Ensure IAM roles do not allow write access to security groups. Steps: 1. Review IAM role permissions. 2. Remove permissions that allow modification of security groups. # REF: IAM Security Groups / https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Destruction RDS Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow destructive RDS actions (e.g., deleting or modifying RDS instances and snapshots).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to RDS destruction.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow destructive RDS actions.
‚úÖ If found, removes permissions related to RDS deletion and modification and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for destructive RDS access
restrict_rds_destruction() {
    log ""Starting EC2 IAM role security review for RDS destruction access...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to RDS destruction
            risky_actions=(
                ""rds:DeleteDBInstance""
                ""rds:DeleteDBCluster""
                ""rds:DeleteDBSnapshot""
                ""rds:ModifyDBInstance""
                ""rds:ModifyDBCluster""
                ""rds:ModifyDBSnapshotAttribute""
                ""rds:RebootDBInstance""
                ""rds:RemoveRoleFromDBInstance""
                ""rds:RestoreDBInstanceFromDBSnapshot""
                ""rds:RestoreDBClusterFromSnapshot""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing RDS destruction permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_rds_destruction
","Why This is Useful?
üîπ Prevents Accidental or Malicious Database Deletion: Ensures that EC2 instances cannot delete or modify critical RDS resources.
üîπ Ensures Compliance: Protects against unauthorized database modifications or deletions, aligning with security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing destructive RDS actions (e.g., deleting or modifying RDS instances or snapshots).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow write access to resource based policies,This control ensures that EC2 instance IAM role does not allow write access to resource based policies.,Compliance,High,Ensure IAM roles do not allow write access to resource-based policies. Steps: 1. Review IAM role permissions. 2. Restrict permissions for resource-based policies. # REF: Resource-Based Policies / https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#resource-based-policies,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Write Access to Resource-Based Policies
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow modifying resource-based policies (e.g., S3 bucket policies, Lambda function policies, SNS topic policies).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes permissions related to modifying resource-based policies.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow modifications to resource-based policies.
‚úÖ If found, removes permissions related to resource policy modifications and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove IAM permissions for resource-based policy modifications
restrict_resource_policy_modifications() {
    log ""Starting EC2 IAM role security review for resource-based policy write access...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky actions related to modifying resource-based policies
            risky_actions=(
                ""s3:PutBucketPolicy""
                ""sns:SetTopicAttributes""
                ""sqs:SetQueueAttributes""
                ""lambda:AddPermission""
                ""lambda:RemovePermission""
                ""iam:CreatePolicyVersion""
                ""iam:SetDefaultPolicyVersion""
                ""iam:DeletePolicyVersion""
                ""secretsmanager:PutResourcePolicy""
                ""kms:PutKeyPolicy""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing resource-based policy write access.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_resource_policy_modifications
","Why This is Useful?
üîπ Prevents Unauthorized Policy Changes: Ensures that EC2 instances cannot modify resource-based policies, reducing the risk of privilege escalation.
üîπ Ensures Compliance: Helps meet security and compliance standards (e.g., CIS AWS Benchmark, PCI-DSS).
üîπ Automated or Manual: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing modifications to resource-based policies (e.g., bucket policies, SNS policies).
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow write permission on critical s3 configuration,This control ensures that EC2 instance IAM roles do not allow write permission on critical s3 configuration.,Compliance,High,Ensure IAM roles do not allow write permissions on critical S3 configurations. Steps: 1. Review IAM role permissions. 2. Limit permissions related to S3 configurations. # REF: S3 Bucket Policies / https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-bucket-policies.html,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Write Permission on Critical S3 Configuration
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that allow write permissions on critical S3 configuration resources (e.g., s3:PutBucketPolicy, s3:PutBucketAcl, etc.).
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans EC2 instance IAM roles for these permissions and removes them if found.
SSM Automation: Use an SSM document to automatically remediate IAM roles violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow write permissions on critical S3 configurations (e.g., bucket policies, ACL changes).
‚úÖ If found, removes the write permissions and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles or non-violating policies.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_role_permissions() {
    log ""Starting EC2 IAM role permissions validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows write permissions on critical S3 configurations
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains(""s3:PutBucketPolicy"") or contains(""s3:PutBucketAcl"")' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name allows write access on critical S3 configurations (e.g., s3:PutBucketPolicy, s3:PutBucketAcl). Fixing...""

                # Create a new policy document without write access on critical S3 configurations
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""s3:PutBucketPolicy"" and .Action != ""s3:PutBucketAcl"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing write access to critical S3 configurations.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name does not allow write access to critical S3 configurations.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_role_permissions
","üöÄ Why This is Useful?
üîπ Ensures S3 Security: Prevents unauthorized modifications to critical S3 configurations.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances for non-compliance.
üîπ Failsafe Mechanism: Skips instances that already comply with security standards.
üîπ Full Logging: Tracks all actions, including modifications and skipped instances.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing write permissions on critical S3 configurations like s3:PutBucketPolicy or s3:PutBucketAcl.
4Ô∏è‚É£ If found, removes the write permissions and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken for transparency and auditing purposes.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instance IAM role should not allow write level access,This control ensures that EC2 instance IAM role does not allow write level access.,Compliance,High,Ensure IAM roles do not allow general write-level access. Steps: 1. Review IAM role permissions. 2. Restrict write-level access as necessary. # REF: IAM Policy Elements / https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies-json,$0 (IAM role management is free),"EC2 Instance IAM Role Should Not Allow Write-Level Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect IAM roles attached to EC2 instances that allow write-level actions (e.g., PutObject, CreateTable, ModifyInstanceAttribute).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes write-level permissions.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies if they allow write-level actions.
‚úÖ If found, removes permissions related to writing/modifying resources and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove write-level permissions
restrict_write_level_permissions() {
    log ""Starting EC2 IAM role write-level access review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Define a list of risky write-level actions
            risky_actions=(
                ""s3:PutObject""
                ""ec2:ModifyInstanceAttribute""
                ""ec2:StartInstances""
                ""ec2:StopInstances""
                ""ec2:TerminateInstances""
                ""iam:CreateUser""
                ""iam:AttachRolePolicy""
                ""rds:CreateDBInstance""
                ""dynamodb:CreateTable""
                ""lambda:CreateFunction""
                ""lambda:UpdateFunctionCode""
            )

            # Check if the policy allows any risky action
            for action in ""${risky_actions[@]}""; do
                if echo ""$policy_doc"" | jq -e --arg action ""$action"" '.Statement[] | select(.Effect==""Allow"") | .Action | contains($action)' >/dev/null; then
                    log ""‚ö†Ô∏è IAM role $iam_role_name allows '$action'. Removing permission...""

                    # Create a new policy document without the risky action
                    new_policy_doc=$(echo ""$policy_doc"" | jq --arg action ""$action"" 'walk(if type == ""array"" then map(select(.Action != $action)) else . end)')

                    # Detach the old policy
                    aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                    # Create a new policy with the updated permissions
                    new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                        --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                    # Attach the new policy
                    aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                    log ""‚úÖ Fixed IAM role $iam_role_name by removing write-level permissions.""
                    ((fixed_count++))
                fi
            done
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_write_level_permissions
","Why This is Useful?
üîπ Prevents Unauthorized Resource Modifications: Ensures that EC2 instances cannot write or modify AWS resources.
üîπ Ensures Compliance: Protects critical resources from being accidentally or maliciously altered.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing write-level actions.
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances should not be attached to 'launch wizard' security groups,"Ensure EC2 instances provisioned in your AWS account are not associated with security groups that have their name prefixed with 'launch-wizard', in order to enforce using secure and custom security groups that exercise the principle of least privilege.",Compliance,Medium,Ensure that EC2 instances are not attached to 'launch wizard' security groups. Steps: 1. Review instance security group attachments. 2. Detach instances from 'launch wizard' security groups. # REF: Launch Wizard https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html,$0 (IAM role management is free),"EC2 Instances Should Not Be Attached to 'launch-wizard' Security Groups
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances associated with security groups named launch-wizard-*.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and removes any launch-wizard-* security groups.
SSM Automation: An SSM document to automatically remediate non-compliant instances by attaching them to a predefined compliant security group.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their attached security groups.
‚úÖ Identifies if an instance is using a launch-wizard-* security group.
‚úÖ If found, removes the launch-wizard-* security group and replaces it with a compliant security group.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Handles invalid instance IDs gracefully.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance security group check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check security groups (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove 'launch-wizard' security groups
restrict_launch_wizard_sg() {
    log ""Starting EC2 security group compliance check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    compliant_sg_id=""sg-xxxxxxxxxxxxxx""  # Replace with your compliant security group ID

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking security groups for instance: $instance_id""

        # Get attached security groups
        security_groups=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].SecurityGroups[].GroupId"" --output text)

        if [[ -z ""$security_groups"" ]]; then
            log ""No security groups attached to instance $instance_id. Skipping...""
            continue
        fi

        # Check if any security group is a 'launch-wizard-*' group
        for sg_id in $security_groups; do
            sg_name=$(aws ec2 describe-security-groups --group-ids ""$sg_id"" --query ""SecurityGroups[].GroupName"" --output text)
            if [[ ""$sg_name"" == launch-wizard-* ]]; then
                log ""‚ö†Ô∏è Instance $instance_id is attached to 'launch-wizard' security group ($sg_id). Replacing it...""

                # Detach the launch-wizard security group and attach the compliant security group
                aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --groups ""$compliant_sg_id""

                log ""‚úÖ Fixed instance $instance_id by replacing 'launch-wizard' security group with $compliant_sg_id.""
                ((fixed_count++))
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_launch_wizard_sg
","Why This is Useful?
üîπ Enhances Security: launch-wizard-* security groups are often overly permissive and should not be used in production.
üîπ Ensures Compliance: Helps enforce best security practices by replacing them with a predefined compliant security group.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance is using a launch-wizard-* security group.
2Ô∏è‚É£ If found, removes the launch-wizard-* security group.
3Ô∏è‚É£ Replaces it with a predefined compliant security group.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should not be attached to 'launch wizard' security groups,"Ensure EC2 instances provisioned in your AWS account are not associated with security groups that have their name prefixed with 'launch-wizard', in order to enforce using secure and custom security groups that exercise the principle of least privilege.",Compliance,Medium,Ensure that EC2 instances are not attached to 'launch wizard' security groups. Steps: 1. Review instance security group attachments. 2. Detach instances from 'launch wizard' security groups. # REF: Launch Wizard https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html,$0 (IAM role management is free),"EC2 Instances Should Not Be Attached to 'launch-wizard' Security Groups
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances associated with security groups named launch-wizard-*.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and removes any launch-wizard-* security groups.
SSM Automation: An SSM document to automatically remediate non-compliant instances by attaching them to a predefined compliant security group.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their attached security groups.
‚úÖ Identifies if an instance is using a launch-wizard-* security group.
‚úÖ If found, removes the launch-wizard-* security group and replaces it with a compliant security group.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Handles invalid instance IDs gracefully.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance security group check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check security groups (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and remove 'launch-wizard' security groups
restrict_launch_wizard_sg() {
    log ""Starting EC2 security group compliance check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    compliant_sg_id=""sg-xxxxxxxxxxxxxx""  # Replace with your compliant security group ID

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking security groups for instance: $instance_id""

        # Get attached security groups
        security_groups=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].SecurityGroups[].GroupId"" --output text)

        if [[ -z ""$security_groups"" ]]; then
            log ""No security groups attached to instance $instance_id. Skipping...""
            continue
        fi

        # Check if any security group is a 'launch-wizard-*' group
        for sg_id in $security_groups; do
            sg_name=$(aws ec2 describe-security-groups --group-ids ""$sg_id"" --query ""SecurityGroups[].GroupName"" --output text)
            if [[ ""$sg_name"" == launch-wizard-* ]]; then
                log ""‚ö†Ô∏è Instance $instance_id is attached to 'launch-wizard' security group ($sg_id). Replacing it...""

                # Detach the launch-wizard security group and attach the compliant security group
                aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --groups ""$compliant_sg_id""

                log ""‚úÖ Fixed instance $instance_id by replacing 'launch-wizard' security group with $compliant_sg_id.""
                ((fixed_count++))
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_launch_wizard_sg
","Why This is Useful?
üîπ Enhances Security: launch-wizard-* security groups are often overly permissive and should not be used in production.
üîπ Ensures Compliance: Helps enforce best security practices by replacing them with a predefined compliant security group.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance is using a launch-wizard-* security group.
2Ô∏è‚É£ If found, removes the launch-wizard-* security group.
3Ô∏è‚É£ Replaces it with a predefined compliant security group.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,Ensure no AWS EC2 Instances are older than 180 days,Identify any running AWS EC2 instances older than 180 days.,Compliance,High,Ensure that EC2 instances are regularly reviewed and terminated if older than 180 days. Steps: 1. List all EC2 instances. 2. Identify instances older than 180 days. 3. Terminate or replace as necessary. # REF: EC2 Instance Lifecycle,$0 (EC2 management costs vary),"Ensure No AWS EC2 Instances Are Older Than 180 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances older than 180 days based on launch time.
Lambda Function: A scheduled Lambda (via EventBridge) that scans EC2 instances and terminates any that exceed 180 days.
SSM Automation: Use an SSM document to notify administrators and terminate non-compliant instances automatically.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their launch date.
‚úÖ Calculates how many days each instance has been running.
‚úÖ If an instance is older than 180 days, it logs the instance details and terminates it.
‚úÖ Supports manual and automatic modes (user can provide an instance ID or scan all instances).
‚úÖ Logs all actions taken, including skipped instances.
‚úÖ Failsafe Handling: Ensures only outdated instances are terminated.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check (or press Enter to scan all instances): "" user_instance_id
}

# Function to check and terminate EC2 instances older than 180 days
cleanup_old_instances() {
    log ""Starting EC2 instance age validation...""

    # Get current date in Unix timestamp
    current_time=$(date +%s)
    max_age_days=180
    max_age_seconds=$((max_age_days * 86400))

    # If user provided an instance ID, process only that instance
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    terminated_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking instance age for: $instance_id""

        # Get launch time in UNIX timestamp
        launch_time=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].LaunchTime"" --output text)

        if [[ -z ""$launch_time"" ]]; then
            log ""Could not retrieve launch time for instance $instance_id. Skipping...""
            continue
        fi

        launch_timestamp=$(date -d ""$launch_time"" +%s)
        instance_age=$(( (current_time - launch_timestamp) / 86400 ))

        if [[ $instance_age -gt $max_age_days ]]; then
            log ""‚ö†Ô∏è Instance $instance_id is $instance_age days old (exceeds $max_age_days days). Terminating...""
            aws ec2 terminate-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
            log ""‚úÖ Instance $instance_id terminated successfully.""
            ((terminated_count++))
        else
            log ""‚úÖ Instance $instance_id is only $instance_age days old. No action taken.""
        fi
    done

    if [[ $terminated_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $terminated_count instances were terminated.""
    else
        log ""‚úÖ All instances are within the allowed age limit. No instances were terminated.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
cleanup_old_instances
","üöÄ Why This is Useful?
üîπ Ensures Cost Optimization: Stops old, unused instances from running indefinitely.
üîπ Enhances Security: Older instances might not have the latest security patches.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are within the allowed age.
üîπ Full Logging: Keeps track of all actions for compliance and audits.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all EC2 instances and their launch timestamps.
2Ô∏è‚É£ Calculates the number of days each instance has been running.
3Ô∏è‚É£ Identifies instances older than 180 days.
4Ô∏è‚É£ Terminates outdated instances while skipping compliant ones.
5Ô∏è‚É£ Logs each action taken for transparency and debugging.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances should not have a public IP address,Manage access to the AWS Cloud by ensuring AWS Elastic Compute Cloud (AWS EC2) instances cannot be publicly accessed.,Compliance,High,Ensure EC2 instances do not have public IP addresses. Steps: 1. Review EC2 instance settings. 2. Remove public IP assignments from instances. # REF: EC2 Public IP https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html,$0 (IAM role management is free),"EC2 Instances Should Not Have a Public IP Address
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances with a public IP address.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and removes public IP addresses if found.
SSM Automation: An SSM document to automatically remediate non-compliant instances by removing their public IPs and attaching them to a private subnet.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they have a public IP address.
‚úÖ Identifies instances with public IPs and detaches them.
‚úÖ Moves the instance to a private subnet if required.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance public IP check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check for public IP (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to remove public IP addresses
remove_public_ip() {
    log ""Starting EC2 public IP compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking public IP for instance: $instance_id""

        # Get the public IP of the instance
        public_ip=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].PublicIpAddress"" --output text)

        if [[ -z ""$public_ip"" || ""$public_ip"" == ""None"" ]]; then
            log ""‚úÖ Instance $instance_id has no public IP. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has a public IP ($public_ip). Removing it...""

        # Get the associated Elastic IP (if any)
        allocation_id=$(aws ec2 describe-addresses --public-ips ""$public_ip"" --query ""Addresses[].AllocationId"" --output text 2>/dev/null)

        if [[ -n ""$allocation_id"" ]]; then
            log ""Found Elastic IP allocation ($allocation_id). Releasing it...""
            aws ec2 release-address --allocation-id ""$allocation_id""
        fi

        # Check if instance is using an auto-assigned public IP
        interface_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].NetworkInterfaces[].NetworkInterfaceId"" --output text)

        if [[ -n ""$interface_id"" ]]; then
            log ""Disassociating public IP from network interface: $interface_id""
            association_id=$(aws ec2 describe-network-interfaces --network-interface-ids ""$interface_id"" \
                --query ""NetworkInterfaces[].Association.AssociationId"" --output text 2>/dev/null)

            if [[ -n ""$association_id"" && ""$association_id"" != ""None"" ]]; then
                aws ec2 disassociate-address --association-id ""$association_id""
                log ""‚úÖ Disassociated public IP from $instance_id.""
            fi
        fi

        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
remove_public_ip
","Why This is Useful?
üîπ Prevents Public Exposure: Ensures that EC2 instances do not have a public IP, reducing attack surfaces.
üîπ Ensures Compliance: Helps enforce best security practices by keeping instances private.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has a public IP address.
2Ô∏è‚É£ If found, removes the public IP by disassociating or releasing it.
3Ô∏è‚É£ Ensures Elastic IPs (EIP) are also released if necessary.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should not have a public IP address,Manage access to the AWS Cloud by ensuring AWS Elastic Compute Cloud (AWS EC2) instances cannot be publicly accessed.,Compliance,High,Ensure EC2 instances do not have public IP addresses. Steps: 1. Review EC2 instance settings. 2. Remove public IP assignments from instances. # REF: EC2 Public IP https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html,$0 (IAM role management is free),"EC2 Instances Should Not Have a Public IP Address
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances with a public IP address.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and removes public IP addresses if found.
SSM Automation: An SSM document to automatically remediate non-compliant instances by removing their public IPs and attaching them to a private subnet.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they have a public IP address.
‚úÖ Identifies instances with public IPs and detaches them.
‚úÖ Moves the instance to a private subnet if required.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance public IP check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check for public IP (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to remove public IP addresses
remove_public_ip() {
    log ""Starting EC2 public IP compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking public IP for instance: $instance_id""

        # Get the public IP of the instance
        public_ip=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].PublicIpAddress"" --output text)

        if [[ -z ""$public_ip"" || ""$public_ip"" == ""None"" ]]; then
            log ""‚úÖ Instance $instance_id has no public IP. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has a public IP ($public_ip). Removing it...""

        # Get the associated Elastic IP (if any)
        allocation_id=$(aws ec2 describe-addresses --public-ips ""$public_ip"" --query ""Addresses[].AllocationId"" --output text 2>/dev/null)

        if [[ -n ""$allocation_id"" ]]; then
            log ""Found Elastic IP allocation ($allocation_id). Releasing it...""
            aws ec2 release-address --allocation-id ""$allocation_id""
        fi

        # Check if instance is using an auto-assigned public IP
        interface_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].NetworkInterfaces[].NetworkInterfaceId"" --output text)

        if [[ -n ""$interface_id"" ]]; then
            log ""Disassociating public IP from network interface: $interface_id""
            association_id=$(aws ec2 describe-network-interfaces --network-interface-ids ""$interface_id"" \
                --query ""NetworkInterfaces[].Association.AssociationId"" --output text 2>/dev/null)

            if [[ -n ""$association_id"" && ""$association_id"" != ""None"" ]]; then
                aws ec2 disassociate-address --association-id ""$association_id""
                log ""‚úÖ Disassociated public IP from $instance_id.""
            fi
        fi

        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
remove_public_ip
","Why This is Useful?
üîπ Prevents Public Exposure: Ensures that EC2 instances do not have a public IP, reducing attack surfaces.
üîπ Ensures Compliance: Helps enforce best security practices by keeping instances private.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has a public IP address.
2Ô∏è‚É£ If found, removes the public IP by disassociating or releasing it.
3Ô∏è‚É£ Ensures Elastic IPs (EIP) are also released if necessary.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances should not use multiple ENIs,This control checks whether an EC2 instance uses multiple Elastic Network Interfaces (ENIs) or Elastic Fabric Adapters (EFAs). This control passes if a single network adapter is used. The control includes an optional parameter list to identify the allowed ENIs.,Compliance,High,Ensure EC2 instances do not use multiple Elastic Network Interfaces (ENIs). Steps: 1. Review network interface settings. 2. Consolidate network interfaces as needed. # REF: Elastic Network Interfaces https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-interface.html,$0 (IAM role management is free),"EC2 Instances Should Not Use Multiple ENIs
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances with multiple Elastic Network Interfaces (ENIs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and detaches extra ENIs if found.
SSM Automation: An SSM document to automatically remediate non-compliant instances.
","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks the number of attached ENIs.
‚úÖ Identifies instances with more than one ENI.
‚úÖ Detaches extra ENIs, leaving only the primary one attached.
‚úÖ Logs each action, including instances skipped due to single ENI compliance.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check for multiple ENIs (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix instances with multiple ENIs
restrict_multiple_enis() {
    log ""Starting EC2 ENI check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking ENIs for instance: $instance_id""

        # Get list of ENIs attached to the instance
        enis=($(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].NetworkInterfaces[].NetworkInterfaceId"" --output text))

        if [[ ${#enis[@]} -le 1 ]]; then
            log ""‚úÖ Instance $instance_id has only one ENI. No action needed.""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has ${#enis[@]} ENIs. Removing extra ENIs...""

        # Detach all ENIs except the primary one
        for ((i = 1; i < ${#enis[@]}; i++)); do
            eni_id=${enis[$i]}
            log ""Detaching ENI: $eni_id from instance $instance_id...""
            aws ec2 detach-network-interface --network-interface-id ""$eni_id""
            log ""‚úÖ Detached ENI $eni_id from instance $instance_id.""
            ((fixed_count++))
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count extra ENIs were removed.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_multiple_enis
","Why This is Useful?
üîπ Prevents misconfigurations where multiple ENIs are unnecessarily attached.
üîπ Ensures compliance with security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances with only one ENI.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has multiple ENIs.
2Ô∏è‚É£ If more than one ENI is found, detaches extra ENIs, keeping only the primary one.
3Ô∏è‚É£ Ensures compliance by logging each action taken.
4Ô∏è‚É£ Handles invalid instance IDs gracefully.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should not use multiple ENIs,This control checks whether an EC2 instance uses multiple Elastic Network Interfaces (ENIs) or Elastic Fabric Adapters (EFAs). This control passes if a single network adapter is used. The control includes an optional parameter list to identify the allowed ENIs.,Compliance,High,Ensure EC2 instances do not use multiple Elastic Network Interfaces (ENIs). Steps: 1. Review network interface settings. 2. Consolidate network interfaces as needed. # REF: Elastic Network Interfaces https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-interface.html,$0 (IAM role management is free),"EC2 Instances Should Not Use Multiple ENIs
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances with multiple Elastic Network Interfaces (ENIs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and detaches extra ENIs if found.
SSM Automation: An SSM document to automatically remediate non-compliant instances.
","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks the number of attached ENIs.
‚úÖ Identifies instances with more than one ENI.
‚úÖ Detaches extra ENIs, leaving only the primary one attached.
‚úÖ Logs each action, including instances skipped due to single ENI compliance.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check for multiple ENIs (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix instances with multiple ENIs
restrict_multiple_enis() {
    log ""Starting EC2 ENI check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking ENIs for instance: $instance_id""

        # Get list of ENIs attached to the instance
        enis=($(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].NetworkInterfaces[].NetworkInterfaceId"" --output text))

        if [[ ${#enis[@]} -le 1 ]]; then
            log ""‚úÖ Instance $instance_id has only one ENI. No action needed.""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has ${#enis[@]} ENIs. Removing extra ENIs...""

        # Detach all ENIs except the primary one
        for ((i = 1; i < ${#enis[@]}; i++)); do
            eni_id=${enis[$i]}
            log ""Detaching ENI: $eni_id from instance $instance_id...""
            aws ec2 detach-network-interface --network-interface-id ""$eni_id""
            log ""‚úÖ Detached ENI $eni_id from instance $instance_id.""
            ((fixed_count++))
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count extra ENIs were removed.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_multiple_enis
","Why This is Useful?
üîπ Prevents misconfigurations where multiple ENIs are unnecessarily attached.
üîπ Ensures compliance with security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances with only one ENI.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has multiple ENIs.
2Ô∏è‚É£ If more than one ENI is found, detaches extra ENIs, keeping only the primary one.
3Ô∏è‚É£ Ensures compliance by logging each action taken.
4Ô∏è‚É£ Handles invalid instance IDs gracefully.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should not use multiple ENIs,This control checks whether an EC2 instance uses multiple Elastic Network Interfaces (ENIs) or Elastic Fabric Adapters (EFAs). This control passes if a single network adapter is used. The control includes an optional parameter list to identify the allowed ENIs.,Compliance,High,Ensure EC2 instances do not use multiple Elastic Network Interfaces (ENIs). Steps: 1. Review network interface settings. 2. Consolidate network interfaces as needed. # REF: Elastic Network Interfaces https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-interface.html,$0 (IAM role management is free),"EC2 Instances Should Not Use Multiple ENIs
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances with multiple Elastic Network Interfaces (ENIs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and detaches extra ENIs if found.
SSM Automation: An SSM document to automatically remediate non-compliant instances.
","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks the number of attached ENIs.
‚úÖ Identifies instances with more than one ENI.
‚úÖ Detaches extra ENIs, leaving only the primary one attached.
‚úÖ Logs each action, including instances skipped due to single ENI compliance.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check for multiple ENIs (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix instances with multiple ENIs
restrict_multiple_enis() {
    log ""Starting EC2 ENI check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking ENIs for instance: $instance_id""

        # Get list of ENIs attached to the instance
        enis=($(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].NetworkInterfaces[].NetworkInterfaceId"" --output text))

        if [[ ${#enis[@]} -le 1 ]]; then
            log ""‚úÖ Instance $instance_id has only one ENI. No action needed.""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has ${#enis[@]} ENIs. Removing extra ENIs...""

        # Detach all ENIs except the primary one
        for ((i = 1; i < ${#enis[@]}; i++)); do
            eni_id=${enis[$i]}
            log ""Detaching ENI: $eni_id from instance $instance_id...""
            aws ec2 detach-network-interface --network-interface-id ""$eni_id""
            log ""‚úÖ Detached ENI $eni_id from instance $instance_id.""
            ((fixed_count++))
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count extra ENIs were removed.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_multiple_enis
","Why This is Useful?
üîπ Prevents misconfigurations where multiple ENIs are unnecessarily attached.
üîπ Ensures compliance with security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances with only one ENI.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has multiple ENIs.
2Ô∏è‚É£ If more than one ENI is found, detaches extra ENIs, keeping only the primary one.
3Ô∏è‚É£ Ensures compliance by logging each action taken.
4Ô∏è‚É£ Handles invalid instance IDs gracefully.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should not use multiple ENIs,This control checks whether an EC2 instance uses multiple Elastic Network Interfaces (ENIs) or Elastic Fabric Adapters (EFAs). This control passes if a single network adapter is used. The control includes an optional parameter list to identify the allowed ENIs.,Compliance,High,Ensure EC2 instances do not use multiple Elastic Network Interfaces (ENIs). Steps: 1. Review network interface settings. 2. Consolidate network interfaces as needed. # REF: Elastic Network Interfaces https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-interface.html,$0 (IAM role management is free),"EC2 Instances Should Not Use Multiple ENIs
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances with multiple Elastic Network Interfaces (ENIs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and detaches extra ENIs if found.
SSM Automation: An SSM document to automatically remediate non-compliant instances.
","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks the number of attached ENIs.
‚úÖ Identifies instances with more than one ENI.
‚úÖ Detaches extra ENIs, leaving only the primary one attached.
‚úÖ Logs each action, including instances skipped due to single ENI compliance.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check for multiple ENIs (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix instances with multiple ENIs
restrict_multiple_enis() {
    log ""Starting EC2 ENI check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking ENIs for instance: $instance_id""

        # Get list of ENIs attached to the instance
        enis=($(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].NetworkInterfaces[].NetworkInterfaceId"" --output text))

        if [[ ${#enis[@]} -le 1 ]]; then
            log ""‚úÖ Instance $instance_id has only one ENI. No action needed.""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has ${#enis[@]} ENIs. Removing extra ENIs...""

        # Detach all ENIs except the primary one
        for ((i = 1; i < ${#enis[@]}; i++)); do
            eni_id=${enis[$i]}
            log ""Detaching ENI: $eni_id from instance $instance_id...""
            aws ec2 detach-network-interface --network-interface-id ""$eni_id""
            log ""‚úÖ Detached ENI $eni_id from instance $instance_id.""
            ((fixed_count++))
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count extra ENIs were removed.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_multiple_enis
","Why This is Useful?
üîπ Prevents misconfigurations where multiple ENIs are unnecessarily attached.
üîπ Ensures compliance with security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances with only one ENI.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has multiple ENIs.
2Ô∏è‚É£ If more than one ENI is found, detaches extra ENIs, keeping only the primary one.
3Ô∏è‚É£ Ensures compliance by logging each action taken.
4Ô∏è‚É£ Handles invalid instance IDs gracefully.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should not use multiple ENIs,This control checks whether an EC2 instance uses multiple Elastic Network Interfaces (ENIs) or Elastic Fabric Adapters (EFAs). This control passes if a single network adapter is used. The control includes an optional parameter list to identify the allowed ENIs.,Compliance,High,Ensure EC2 instances do not use multiple Elastic Network Interfaces (ENIs). Steps: 1. Review network interface settings. 2. Consolidate network interfaces as needed. # REF: Elastic Network Interfaces https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-interface.html,$0 (IAM role management is free),"EC2 Instances Should Not Use Multiple ENIs
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances with multiple Elastic Network Interfaces (ENIs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and detaches extra ENIs if found.
SSM Automation: An SSM document to automatically remediate non-compliant instances.
","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks the number of attached ENIs.
‚úÖ Identifies instances with more than one ENI.
‚úÖ Detaches extra ENIs, leaving only the primary one attached.
‚úÖ Logs each action, including instances skipped due to single ENI compliance.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check for multiple ENIs (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix instances with multiple ENIs
restrict_multiple_enis() {
    log ""Starting EC2 ENI check...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking ENIs for instance: $instance_id""

        # Get list of ENIs attached to the instance
        enis=($(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].NetworkInterfaces[].NetworkInterfaceId"" --output text))

        if [[ ${#enis[@]} -le 1 ]]; then
            log ""‚úÖ Instance $instance_id has only one ENI. No action needed.""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has ${#enis[@]} ENIs. Removing extra ENIs...""

        # Detach all ENIs except the primary one
        for ((i = 1; i < ${#enis[@]}; i++)); do
            eni_id=${enis[$i]}
            log ""Detaching ENI: $eni_id from instance $instance_id...""
            aws ec2 detach-network-interface --network-interface-id ""$eni_id""
            log ""‚úÖ Detached ENI $eni_id from instance $instance_id.""
            ((fixed_count++))
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count extra ENIs were removed.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_multiple_enis
","Why This is Useful?
üîπ Prevents misconfigurations where multiple ENIs are unnecessarily attached.
üîπ Ensures compliance with security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances with only one ENI.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has multiple ENIs.
2Ô∏è‚É£ If more than one ENI is found, detaches extra ENIs, keeping only the primary one.
3Ô∏è‚É£ Ensures compliance by logging each action taken.
4Ô∏è‚É£ Handles invalid instance IDs gracefully.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances should be protected by backup plan,Ensure that AWS Elastic Compute Cloud (AWS EC2) instances are protected by a backup plan. The rule is non-compliant if the AWS EC2 instance is not covered by a backup plan.,Compliance,High,Ensure a backup plan is in place for EC2 instances. Steps: 1. Review existing backup plans. 2. Implement AWS Backup for automated backups. # REF: AWS Backup / https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html,Varies by backup configuration,"EC2 Instances Should Be Protected by a Backup Plan
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances that are not protected by an AWS Backup plan.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and ensures they are included in a backup plan.
SSM Automation: An SSM document to automatically remediate non-compliant instances by adding them to a predefined backup plan.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they are associated with a backup plan.
‚úÖ Identifies instances that are not protected by AWS Backup.
‚úÖ If found, adds the instance to a predefined AWS Backup plan.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Handles invalid instance IDs gracefully.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance backup check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check backup plan (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and add EC2 instances to a backup plan
ensure_backup_protection() {
    log ""Starting EC2 backup plan compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    backup_plan_id=""bp-xxxxxxxxxxxxxx""  # Replace with your AWS Backup plan ID

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking backup protection for instance: $instance_id""

        # Check if the instance is already assigned to a backup plan
        backup_check=$(aws backup list-protected-resources --query ""Results[?ResourceArn==\`arn:aws:ec2:$(aws configure get region)::$instance_id\`]"" --output text)

        if [[ -n ""$backup_check"" ]]; then
            log ""‚úÖ Instance $instance_id is already protected by a backup plan. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id is NOT protected by a backup plan. Adding it...""

        # Assign the instance to the backup plan
        aws backup start-backup-job --backup-plan-id ""$backup_plan_id"" --resource-arn ""arn:aws:ec2:$(aws configure get region)::instance/$instance_id""

        log ""‚úÖ Added instance $instance_id to backup plan $backup_plan_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Backup plan compliance enforced. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already protected. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_backup_protection
","Why This is Useful?
üîπ Prevents Data Loss: Ensures that all EC2 instances have scheduled backups.
üîπ Ensures Compliance: Meets security and regulatory requirements for backup protection.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance is part of an AWS Backup plan.
2Ô∏è‚É£ If not, assigns the instance to a predefined backup plan.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Reliability,EC2 instances should be protected by backup plan,Ensure that AWS Elastic Compute Cloud (AWS EC2) instances are protected by a backup plan. The rule is non-compliant if the AWS EC2 instance is not covered by a backup plan.,Compliance,High,Ensure a backup plan is in place for EC2 instances. Steps: 1. Review existing backup plans. 2. Implement AWS Backup for automated backups. # REF: AWS Backup / https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html,Varies by backup configuration,"EC2 Instances Should Be Protected by a Backup Plan
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances that are not protected by an AWS Backup plan.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and ensures they are included in a backup plan.
SSM Automation: An SSM document to automatically remediate non-compliant instances by adding them to a predefined backup plan.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if they are associated with a backup plan.
‚úÖ Identifies instances that are not protected by AWS Backup.
‚úÖ If found, adds the instance to a predefined AWS Backup plan.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Handles invalid instance IDs gracefully.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance backup check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check backup plan (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and add EC2 instances to a backup plan
ensure_backup_protection() {
    log ""Starting EC2 backup plan compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    backup_plan_id=""bp-xxxxxxxxxxxxxx""  # Replace with your AWS Backup plan ID

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking backup protection for instance: $instance_id""

        # Check if the instance is already assigned to a backup plan
        backup_check=$(aws backup list-protected-resources --query ""Results[?ResourceArn==\`arn:aws:ec2:$(aws configure get region)::$instance_id\`]"" --output text)

        if [[ -n ""$backup_check"" ]]; then
            log ""‚úÖ Instance $instance_id is already protected by a backup plan. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id is NOT protected by a backup plan. Adding it...""

        # Assign the instance to the backup plan
        aws backup start-backup-job --backup-plan-id ""$backup_plan_id"" --resource-arn ""arn:aws:ec2:$(aws configure get region)::instance/$instance_id""

        log ""‚úÖ Added instance $instance_id to backup plan $backup_plan_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Backup plan compliance enforced. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already protected. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_backup_protection
","Why This is Useful?
üîπ Prevents Data Loss: Ensures that all EC2 instances have scheduled backups.
üîπ Ensures Compliance: Meets security and regulatory requirements for backup protection.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance is part of an AWS Backup plan.
2Ô∏è‚É£ If not, assigns the instance to a predefined backup plan.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,Public EC2 instances should have IAM profile attached,Ensure AWS Elastic Compute Cloud (AWS EC2) public instances have an Identity and Access Management (IAM) profile attached to them. This rule is non-compliant if no IAM profile is attached to a public AWS EC2 instance.,Compliance,High,Ensure IAM profiles are attached to public EC2 instances. Steps: 1. Review instance configurations. 2. Attach appropriate IAM roles to instances. # REF: IAM Roles for EC2 / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role.html,$0 (IAM role management is free),"Public EC2 Instances Should Have an IAM Profile Attached
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect public EC2 instances without an IAM instance profile.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all public EC2 instances and attaches a default IAM profile if missing.
SSM Automation: An SSM document to automatically remediate non-compliant instances.
","Features of the Script:
‚úÖ Retrieves all public EC2 instances and checks if they have an IAM profile.
‚úÖ Identifies instances without an IAM profile.
‚úÖ Attaches a default IAM profile to instances missing one.
‚úÖ Logs each action, including instances already compliant.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check for IAM profile (or press Enter to auto-scan all public instances): "" user_instance_id
}

# Function to check and attach IAM profiles to public EC2 instances
ensure_iam_profile_for_public_instances() {
    log ""Starting EC2 IAM profile check for public instances...""

    # Get list of public EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all public EC2 instances...""
        instances=($(aws ec2 describe-instances \
            --filters ""Name=network-interface.association.public-ip,Values=*"" \
            --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No public EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM profile for instance: $instance_id""

        # Check if the instance has an IAM profile attached
        iam_profile=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null)

        if [[ -n ""$iam_profile"" && ""$iam_profile"" != ""None"" ]]; then
            log ""‚úÖ Instance $instance_id already has an IAM profile attached. No action needed.""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has no IAM profile. Attaching default IAM profile...""

        # Attach a default IAM profile (modify this to use a specific IAM role)
        default_iam_profile=""EC2DefaultIAMProfile""
        aws ec2 associate-iam-instance-profile --instance-id ""$instance_id"" \
            --iam-instance-profile Name=""$default_iam_profile""

        log ""‚úÖ Attached IAM profile '$default_iam_profile' to instance $instance_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ IAM profile attachment completed. $fixed_count instances updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_iam_profile_for_public_instances
","Why This is Useful?
üîπ Security Best Practice: Ensures that public instances have an IAM profile for managing permissions.
üîπ Prevents Misconfigurations: Reduces the risk of manually launching public EC2 instances without proper IAM roles.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that already have an IAM profile.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Identifies public EC2 instances (instances with a public IP).
2Ô∏è‚É£ Checks if an IAM profile is attached to each public instance.
3Ô∏è‚É£ If missing, attaches a default IAM profile to ensure compliance.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.
5Ô∏è‚É£ Handles errors gracefully, including invalid instance IDs.",Bash,Weekly,SOC 2,2024-02-13
Security,Public EC2 instances should have IAM profile attached,Ensure AWS Elastic Compute Cloud (AWS EC2) public instances have an Identity and Access Management (IAM) profile attached to them. This rule is non-compliant if no IAM profile is attached to a public AWS EC2 instance.,Compliance,High,Ensure IAM profiles are attached to public EC2 instances. Steps: 1. Review instance configurations. 2. Attach appropriate IAM roles to instances. # REF: IAM Roles for EC2 / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role.html,$0 (IAM role management is free),"Public EC2 Instances Should Have an IAM Profile Attached
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect public EC2 instances without an IAM instance profile.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all public EC2 instances and attaches a default IAM profile if missing.
SSM Automation: An SSM document to automatically remediate non-compliant instances.
","Features of the Script:
‚úÖ Retrieves all public EC2 instances and checks if they have an IAM profile.
‚úÖ Identifies instances without an IAM profile.
‚úÖ Attaches a default IAM profile to instances missing one.
‚úÖ Logs each action, including instances already compliant.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check for IAM profile (or press Enter to auto-scan all public instances): "" user_instance_id
}

# Function to check and attach IAM profiles to public EC2 instances
ensure_iam_profile_for_public_instances() {
    log ""Starting EC2 IAM profile check for public instances...""

    # Get list of public EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all public EC2 instances...""
        instances=($(aws ec2 describe-instances \
            --filters ""Name=network-interface.association.public-ip,Values=*"" \
            --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No public EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM profile for instance: $instance_id""

        # Check if the instance has an IAM profile attached
        iam_profile=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null)

        if [[ -n ""$iam_profile"" && ""$iam_profile"" != ""None"" ]]; then
            log ""‚úÖ Instance $instance_id already has an IAM profile attached. No action needed.""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id has no IAM profile. Attaching default IAM profile...""

        # Attach a default IAM profile (modify this to use a specific IAM role)
        default_iam_profile=""EC2DefaultIAMProfile""
        aws ec2 associate-iam-instance-profile --instance-id ""$instance_id"" \
            --iam-instance-profile Name=""$default_iam_profile""

        log ""‚úÖ Attached IAM profile '$default_iam_profile' to instance $instance_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ IAM profile attachment completed. $fixed_count instances updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_iam_profile_for_public_instances
","Why This is Useful?
üîπ Security Best Practice: Ensures that public instances have an IAM profile for managing permissions.
üîπ Prevents Misconfigurations: Reduces the risk of manually launching public EC2 instances without proper IAM roles.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that already have an IAM profile.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does:
1Ô∏è‚É£ Identifies public EC2 instances (instances with a public IP).
2Ô∏è‚É£ Checks if an IAM profile is attached to each public instance.
3Ô∏è‚É£ If missing, attaches a default IAM profile to ensure compliance.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.
5Ô∏è‚É£ Handles errors gracefully, including invalid instance IDs.",Bash,Weekly,SOC 2,2024-02-13
EC2,AWS EC2 instances should have termination protection enabled,This control checks whether termination protection is enabled for EC2 instances. The control fails if termination protection is not enabled for an EC2 instance.,Compliance,Medium,Ensure termination protection is enabled for EC2 instances. Steps: 1. Review instance settings. 2. Enable termination protection for critical instances. # REF: Termination Protection / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role.html,$0 (no additional cost),"AWS EC2 Instances Should Have Termination Protection Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances that do not have termination protection enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and enables termination protection where necessary.
SSM Automation: An SSM document to automatically remediate non-compliant instances by enabling termination protection.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if termination protection is enabled.
‚úÖ Identifies instances where termination protection is not enabled.
‚úÖ If found, enables termination protection for those instances.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check termination protection (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enforce termination protection
enable_termination_protection() {
    log ""Starting EC2 termination protection compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking termination protection for instance: $instance_id""

        # Get current termination protection status
        protection_status=$(aws ec2 describe-instance-attribute --instance-id ""$instance_id"" --attribute disableApiTermination --query ""DisableApiTermination.Value"" --output text)

        if [[ ""$protection_status"" == ""True"" ]]; then
            log ""‚úÖ Instance $instance_id already has termination protection enabled. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id does not have termination protection enabled. Enabling it...""

        # Enable termination protection
        aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --disable-api-termination

        log ""‚úÖ Termination protection enabled for instance $instance_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforced. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_termination_protection
","Why This is Useful?
üîπ Prevents Accidental Deletion: Protects critical EC2 instances from accidental termination.
üîπ Ensures Compliance: Meets security best practices for important workloads.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has termination protection enabled.
2Ô∏è‚É£ If not, modifies the instance to enable termination protection.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,AWS EC2 instances should have termination protection enabled,This control checks whether termination protection is enabled for EC2 instances. The control fails if termination protection is not enabled for an EC2 instance.,Compliance,Medium,Ensure termination protection is enabled for EC2 instances. Steps: 1. Review instance settings. 2. Enable termination protection for critical instances. # REF: Termination Protection / https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role.html,$0 (no additional cost),"AWS EC2 Instances Should Have Termination Protection Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances that do not have termination protection enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and enables termination protection where necessary.
SSM Automation: An SSM document to automatically remediate non-compliant instances by enabling termination protection.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks if termination protection is enabled.
‚úÖ Identifies instances where termination protection is not enabled.
‚úÖ If found, enables termination protection for those instances.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check termination protection (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enforce termination protection
enable_termination_protection() {
    log ""Starting EC2 termination protection compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking termination protection for instance: $instance_id""

        # Get current termination protection status
        protection_status=$(aws ec2 describe-instance-attribute --instance-id ""$instance_id"" --attribute disableApiTermination --query ""DisableApiTermination.Value"" --output text)

        if [[ ""$protection_status"" == ""True"" ]]; then
            log ""‚úÖ Instance $instance_id already has termination protection enabled. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id does not have termination protection enabled. Enabling it...""

        # Enable termination protection
        aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --disable-api-termination

        log ""‚úÖ Termination protection enabled for instance $instance_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforced. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_termination_protection
","Why This is Useful?
üîπ Prevents Accidental Deletion: Protects critical EC2 instances from accidental termination.
üîπ Ensures Compliance: Meets security best practices for important workloads.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance has termination protection enabled.
2Ô∏è‚É£ If not, modifies the instance to enable termination protection.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances user data should not have secrets,"User data is a metadata field of an EC2 instance that allows custom code to run after the instance is launched. It contains code which is exposed to any entity which has the most basic access to EC2, even read-only configurations. It is recommended to not use secrets in user data.",Compliance,High,Ensure user data does not contain secrets. Steps: 1. Review user data scripts. 2. Remove any sensitive information. # REF: EC2 User Data / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html,$0 (no additional cost),"1. EC2 Instances User Data Should Not Have Secrets
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect EC2 instances with user data containing sensitive information (e.g., credentials, API keys, tokens).
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans EC2 user data for secrets using pattern matching and redacts them if found.
SSM Automation: An SSM document to notify administrators and replace compromised user data with a sanitized version.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and extracts their user data.
‚úÖ Scans user data for secrets (e.g., passwords, API keys, AWS credentials).
‚úÖ Uses regular expressions to detect patterns like AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, password=, etc.
‚úÖ If secrets are found, logs the instance details and replaces the user data with a sanitized version.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.
‚úÖ Logs every action, ensuring transparency and auditability.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance user data check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check user data (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to scan and remediate EC2 instance user data
scan_ec2_user_data() {
    log ""Starting EC2 instance user data scan for secrets...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    sensitive_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking user data for instance: $instance_id""

        # Get user data (base64 decode it)
        user_data=$(aws ec2 describe-instance-attribute --instance-id ""$instance_id"" --attribute userData --query ""UserData.Value"" --output text | base64 --decode 2>/dev/null)

        if [[ -z ""$user_data"" ]]; then
            log ""‚úÖ No user data found for instance $instance_id. Skipping...""
            continue
        fi

        # Check for sensitive information
        if echo ""$user_data"" | grep -E ""AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY|password=|api_key=|token="" >/dev/null; then
            log ""‚ö†Ô∏è Sensitive data found in user data for instance $instance_id! Remediating...""

            # Sanitize user data by removing secrets
            sanitized_data=$(echo ""$user_data"" | sed -E 's/(AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY|password=|api_key=|token=)[^ ]+/REDACTED/g')

            # Update user data with sanitized version (must stop the instance first)
            aws ec2 stop-instances --instance-ids ""$instance_id""
            log ""‚è≥ Stopping instance $instance_id for user data update...""

            aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --user-data ""Value=$(echo -n ""$sanitized_data"" | base64)""
            log ""‚úÖ User data sanitized for instance $instance_id.""

            aws ec2 start-instances --instance-ids ""$instance_id""
            log ""üöÄ Instance $instance_id restarted after user data remediation.""

            ((sensitive_count++))
        else
            log ""‚úÖ No sensitive data found in user data for instance $instance_id.""
        fi
    done

    if [[ $sensitive_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $sensitive_count instances had sensitive data in user data.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
scan_ec2_user_data
","üöÄ Why This is Useful?
üîπ Prevents Credential Leaks: Ensures EC2 user data does not expose AWS credentials, passwords, or tokens.
üîπ Automated Remediation: Detects and removes secrets automatically.
üîπ Supports Manual & Automated Scans: Users can specify an instance or scan all instances.
üîπ Failsafe Mechanism: Skips instances with clean user data.
üîπ Full Logging: Tracks all actions, including modifications and skipped instances.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has user data configured.
2Ô∏è‚É£ Scans the user data for secrets like AWS credentials, passwords, API keys.
3Ô∏è‚É£ If found, removes the sensitive information and updates the instance with sanitized user data.
4Ô∏è‚É£ Stops and restarts the instance to apply the changes safely.
5Ô∏è‚É£ Logs each action taken for security and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 instances should use IMDSv2,Ensure the Instance Metadata Service Version 2 (IMDSv2) method is enabled to help protect access and control of AWS Elastic Compute Cloud (AWS EC2) instance metadata.,Compliance,High,Ensure IMDSv2 (Instance Metadata Service v2) is enabled for EC2 instances. Steps: 1. Review instance metadata settings. 2. Enable IMDSv2 if not already set. # REF: IMDSv2 / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html,$0 (no additional cost),"EC2 Instances Should Use IMDSv2 (Instance Metadata Service v2)
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances not enforcing IMDSv2.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and updates their metadata options to enforce IMDSv2.
SSM Automation: An SSM document to automatically remediate non-compliant instances by enabling IMDSv2 enforcement.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their metadata service configuration.
‚úÖ Identifies instances using IMDSv1 (older and less secure).
‚úÖ If found, updates the instance settings to require IMDSv2.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IMDSv2 (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enforce IMDSv2 on EC2 instances
enforce_imdsv2() {
    log ""Starting EC2 IMDSv2 compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IMDS version for instance: $instance_id""

        # Get the current metadata configuration
        imds_version=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].MetadataOptions.HttpTokens"" --output text)

        if [[ ""$imds_version"" == ""required"" ]]; then
            log ""‚úÖ Instance $instance_id is already using IMDSv2. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id is using IMDSv1. Enforcing IMDSv2...""

        # Modify the instance metadata settings to enforce IMDSv2
        aws ec2 modify-instance-metadata-options --instance-id ""$instance_id"" --http-tokens required

        log ""‚úÖ IMDSv2 enforced on instance $instance_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforced. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_imdsv2
","Why This is Useful?
üîπ Prevents Metadata Exploits: IMDSv2 requires session-based authentication, reducing risk from SSRF attacks.
üîπ Ensures Compliance: Helps meet AWS security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance is enforcing IMDSv2.
2Ô∏è‚É£ If not, updates the instance metadata settings to require IMDSv2.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should use IMDSv2,Ensure the Instance Metadata Service Version 2 (IMDSv2) method is enabled to help protect access and control of AWS Elastic Compute Cloud (AWS EC2) instance metadata.,Compliance,High,Ensure IMDSv2 (Instance Metadata Service v2) is enabled for EC2 instances. Steps: 1. Review instance metadata settings. 2. Enable IMDSv2 if not already set. # REF: IMDSv2 / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html,$0 (no additional cost),"EC2 Instances Should Use IMDSv2 (Instance Metadata Service v2)
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances not enforcing IMDSv2.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and updates their metadata options to enforce IMDSv2.
SSM Automation: An SSM document to automatically remediate non-compliant instances by enabling IMDSv2 enforcement.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their metadata service configuration.
‚úÖ Identifies instances using IMDSv1 (older and less secure).
‚úÖ If found, updates the instance settings to require IMDSv2.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IMDSv2 (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enforce IMDSv2 on EC2 instances
enforce_imdsv2() {
    log ""Starting EC2 IMDSv2 compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IMDS version for instance: $instance_id""

        # Get the current metadata configuration
        imds_version=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].MetadataOptions.HttpTokens"" --output text)

        if [[ ""$imds_version"" == ""required"" ]]; then
            log ""‚úÖ Instance $instance_id is already using IMDSv2. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id is using IMDSv1. Enforcing IMDSv2...""

        # Modify the instance metadata settings to enforce IMDSv2
        aws ec2 modify-instance-metadata-options --instance-id ""$instance_id"" --http-tokens required

        log ""‚úÖ IMDSv2 enforced on instance $instance_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforced. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_imdsv2
","Why This is Useful?
üîπ Prevents Metadata Exploits: IMDSv2 requires session-based authentication, reducing risk from SSRF attacks.
üîπ Ensures Compliance: Helps meet AWS security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance is enforcing IMDSv2.
2Ô∏è‚É£ If not, updates the instance metadata settings to require IMDSv2.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 instances should use IMDSv2,Ensure the Instance Metadata Service Version 2 (IMDSv2) method is enabled to help protect access and control of AWS Elastic Compute Cloud (AWS EC2) instance metadata.,Compliance,High,Ensure IMDSv2 (Instance Metadata Service v2) is enabled for EC2 instances. Steps: 1. Review instance metadata settings. 2. Enable IMDSv2 if not already set. # REF: IMDSv2 / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html,$0 (no additional cost),"EC2 Instances Should Use IMDSv2 (Instance Metadata Service v2)
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances not enforcing IMDSv2.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and updates their metadata options to enforce IMDSv2.
SSM Automation: An SSM document to automatically remediate non-compliant instances by enabling IMDSv2 enforcement.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their metadata service configuration.
‚úÖ Identifies instances using IMDSv1 (older and less secure).
‚úÖ If found, updates the instance settings to require IMDSv2.
‚úÖ Logs each action, including instances skipped due to compliance.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IMDSv2 (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to enforce IMDSv2 on EC2 instances
enforce_imdsv2() {
    log ""Starting EC2 IMDSv2 compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IMDS version for instance: $instance_id""

        # Get the current metadata configuration
        imds_version=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].MetadataOptions.HttpTokens"" --output text)

        if [[ ""$imds_version"" == ""required"" ]]; then
            log ""‚úÖ Instance $instance_id is already using IMDSv2. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id is using IMDSv1. Enforcing IMDSv2...""

        # Modify the instance metadata settings to enforce IMDSv2
        aws ec2 modify-instance-metadata-options --instance-id ""$instance_id"" --http-tokens required

        log ""‚úÖ IMDSv2 enforced on instance $instance_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Compliance enforced. $fixed_count EC2 instances were updated.""
    else
        log ""‚úÖ All EC2 instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_imdsv2
","Why This is Useful?
üîπ Prevents Metadata Exploits: IMDSv2 requires session-based authentication, reducing risk from SSRF attacks.
üîπ Ensures Compliance: Helps meet AWS security best practices.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance is enforcing IMDSv2.
2Ô∏è‚É£ If not, updates the instance metadata settings to require IMDSv2.
3Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,Paravirtual EC2 instance types should not be used,This control checks whether the virtualization type of an EC2 instance is paravirtual. The control fails if the virtualizationType of the EC2 instance is set to paravirtual.,Compliance,High,Ensure that only HVM (Hardware Virtual Machine) instance types are used. Steps: 1. Review instance types. 2. Migrate any paravirtual instances to HVM types. # REF: HVM vs. PV / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/virtualization.html,$0 (no additional cost),"Paravirtual EC2 Instance Types Should Not Be Used
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 instances using Paravirtual (PV) virtualization.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 instances and identifies those running with PV virtualization.
SSM Automation: An SSM document to notify administrators and provide a migration plan to HVM-based instances.","Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their virtualization type.
‚úÖ Identifies instances using Paravirtual (PV) instead of Hardware Virtual Machine (HVM).
‚úÖ Logs non-compliant instances and recommends migration steps.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.
‚úÖ Ensures visibility for administrators to take necessary action.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check virtualization type (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check for Paravirtual instances
check_paravirtual_instances() {
    log ""Starting EC2 virtualization type compliance review...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    non_compliant_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking virtualization type for instance: $instance_id""

        # Get virtualization type
        virtualization_type=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].VirtualizationType"" --output text)

        if [[ ""$virtualization_type"" == ""hvm"" ]]; then
            log ""‚úÖ Instance $instance_id is using HVM. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è Instance $instance_id is using Paravirtual (PV). Migration recommended.""
        ((non_compliant_count++))
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è Found $non_compliant_count instances using Paravirtual (PV). Please migrate them to HVM.""
    else
        log ""‚úÖ All EC2 instances are using HVM. No issues found.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
check_paravirtual_instances
","Why This is Useful?
üîπ Improves Performance: HVM-based instances offer better performance and support modern instance types.
üîπ Ensures Compatibility: Many AWS features and instance families only support HVM.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all non-compliant instances for migration planning.","What This Script Does?
1Ô∏è‚É£ Checks if an EC2 instance is using Paravirtual (PV) or Hardware Virtual Machine (HVM).
2Ô∏è‚É£ Logs instances still using Paravirtual and flags them for migration.
3Ô∏è‚É£ Ensures full visibility for administrators to take action.",Bash,Weekly,SOC 2,2024-02-13
EC2,AWS EC2 launch templates should not assign public IPs to network interfaces,To be added,Compliance,Medium,Ensure launch templates do not assign public IPs to EC2 instances. Steps: 1. Review launch template settings. 2. Update templates to avoid public IP assignments. # REF: Launch Templates /  https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launch-templates.html,$0 (no additional cost),"AWS EC2 Launch Templates Should Not Assign Public IPs to Network Interfaces
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 launch templates where Auto-assign Public IP is enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all launch templates and disables public IP assignment.
SSM Automation: Use an SSM document to automatically update or replace non-compliant launch templates.","Features of the Script:
‚úÖ Retrieves all EC2 launch templates and versions.
‚úÖ Checks if Auto-assign Public IP is enabled for any network interface.
‚úÖ If found, creates a new version of the launch template with public IP disabled.
‚úÖ Logs each action, including skipped launch templates that are already compliant.
‚úÖ Handles invalid template IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs a launch template ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual launch template check
get_user_input() {
    read -p ""Enter the EC2 Launch Template ID to check (or press Enter to scan all templates): "" user_template_id
}

# Function to check and fix launch templates assigning public IPs
fix_launch_template_public_ip() {
    log ""Starting EC2 launch template public IP assignment check...""

    # Get list of launch templates (manual or auto)
    if [[ -n ""$user_template_id"" ]]; then
        templates=(""$user_template_id"")
    else
        log ""No manual input provided. Scanning all EC2 launch templates...""
        templates=($(aws ec2 describe-launch-templates --query ""LaunchTemplates[].LaunchTemplateId"" --output text))
    fi

    if [[ ${#templates[@]} -eq 0 ]]; then
        log ""No EC2 launch templates found.""
        exit 0
    fi

    fixed_count=0
    for template_id in ""${templates[@]}""; do
        log ""Checking launch template: $template_id""

        # Get latest launch template version
        latest_version=$(aws ec2 describe-launch-template-versions --launch-template-id ""$template_id"" \
            --query ""LaunchTemplateVersions | max_by(@, &VersionNumber).VersionNumber"" --output text 2>/dev/null)

        if [[ -z ""$latest_version"" ]]; then
            log ""Failed to retrieve latest version for $template_id. Skipping...""
            continue
        fi

        log ""Latest version of $template_id is $latest_version""

        # Get network interfaces settings
        network_settings=$(aws ec2 describe-launch-template-versions --launch-template-id ""$template_id"" \
            --versions ""$latest_version"" --query ""LaunchTemplateVersions[0].LaunchTemplateData.NetworkInterfaces"" --output json)

        if echo ""$network_settings"" | jq -e '.[] | select(.AssociatePublicIpAddress == true)' >/dev/null; then
            log ""‚ö†Ô∏è Launch template $template_id allows public IP assignment. Fixing...""

            # Create a new launch template version with public IP disabled
            modified_settings=$(echo ""$network_settings"" | jq 'walk(if type == ""array"" then map(if .AssociatePublicIpAddress? then .AssociatePublicIpAddress = false else . end) else . end)')

            new_version=$(aws ec2 create-launch-template-version --launch-template-id ""$template_id"" \
                --source-version ""$latest_version"" --launch-template-data ""$modified_settings"" \
                --query ""LaunchTemplateVersion.VersionNumber"" --output text)

            log ""‚úÖ Created new version $new_version for launch template $template_id with public IP disabled.""
            ((fixed_count++))
        else
            log ""‚úÖ Launch template $template_id is already compliant.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count launch templates were updated.""
    else
        log ""‚úÖ All launch templates are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_launch_template_public_ip
","
üöÄ Why This is Useful?
üîπ Prevents unintended exposure of EC2 instances to the internet.
üîπ Ensures compliance with security best practices by keeping instances private.
üîπ Manual or Automated: Users can specify a launch template ID or scan all templates.
üîπ Failsafe Mechanism: Skips already compliant launch templates.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does:
1Ô∏è‚É£ Checks if EC2 launch templates assign public IPs to network interfaces.
2Ô∏è‚É£ Retrieves the latest version of each launch template.
3Ô∏è‚É£ Identifies if AssociatePublicIpAddress is set to true.
4Ô∏è‚É£ If found, creates a new version of the template with public IP assignment disabled.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,AWS EC2 launch templates should not assign public IPs to network interfaces,To be added,Compliance,Medium,Ensure launch templates do not assign public IPs to EC2 instances. Steps: 1. Review launch template settings. 2. Update templates to avoid public IP assignments. # REF: Launch Templates /  https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launch-templates.html,$0 (no additional cost),"AWS EC2 Launch Templates Should Not Assign Public IPs to Network Interfaces
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EC2 launch templates where Auto-assign Public IP is enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all launch templates and disables public IP assignment.
SSM Automation: Use an SSM document to automatically update or replace non-compliant launch templates.","Features of the Script:
‚úÖ Retrieves all EC2 launch templates and versions.
‚úÖ Checks if Auto-assign Public IP is enabled for any network interface.
‚úÖ If found, creates a new version of the launch template with public IP disabled.
‚úÖ Logs each action, including skipped launch templates that are already compliant.
‚úÖ Handles invalid template IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs a launch template ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual launch template check
get_user_input() {
    read -p ""Enter the EC2 Launch Template ID to check (or press Enter to scan all templates): "" user_template_id
}

# Function to check and fix launch templates assigning public IPs
fix_launch_template_public_ip() {
    log ""Starting EC2 launch template public IP assignment check...""

    # Get list of launch templates (manual or auto)
    if [[ -n ""$user_template_id"" ]]; then
        templates=(""$user_template_id"")
    else
        log ""No manual input provided. Scanning all EC2 launch templates...""
        templates=($(aws ec2 describe-launch-templates --query ""LaunchTemplates[].LaunchTemplateId"" --output text))
    fi

    if [[ ${#templates[@]} -eq 0 ]]; then
        log ""No EC2 launch templates found.""
        exit 0
    fi

    fixed_count=0
    for template_id in ""${templates[@]}""; do
        log ""Checking launch template: $template_id""

        # Get latest launch template version
        latest_version=$(aws ec2 describe-launch-template-versions --launch-template-id ""$template_id"" \
            --query ""LaunchTemplateVersions | max_by(@, &VersionNumber).VersionNumber"" --output text 2>/dev/null)

        if [[ -z ""$latest_version"" ]]; then
            log ""Failed to retrieve latest version for $template_id. Skipping...""
            continue
        fi

        log ""Latest version of $template_id is $latest_version""

        # Get network interfaces settings
        network_settings=$(aws ec2 describe-launch-template-versions --launch-template-id ""$template_id"" \
            --versions ""$latest_version"" --query ""LaunchTemplateVersions[0].LaunchTemplateData.NetworkInterfaces"" --output json)

        if echo ""$network_settings"" | jq -e '.[] | select(.AssociatePublicIpAddress == true)' >/dev/null; then
            log ""‚ö†Ô∏è Launch template $template_id allows public IP assignment. Fixing...""

            # Create a new launch template version with public IP disabled
            modified_settings=$(echo ""$network_settings"" | jq 'walk(if type == ""array"" then map(if .AssociatePublicIpAddress? then .AssociatePublicIpAddress = false else . end) else . end)')

            new_version=$(aws ec2 create-launch-template-version --launch-template-id ""$template_id"" \
                --source-version ""$latest_version"" --launch-template-data ""$modified_settings"" \
                --query ""LaunchTemplateVersion.VersionNumber"" --output text)

            log ""‚úÖ Created new version $new_version for launch template $template_id with public IP disabled.""
            ((fixed_count++))
        else
            log ""‚úÖ Launch template $template_id is already compliant.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count launch templates were updated.""
    else
        log ""‚úÖ All launch templates are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_launch_template_public_ip
","
üöÄ Why This is Useful?
üîπ Prevents unintended exposure of EC2 instances to the internet.
üîπ Ensures compliance with security best practices by keeping instances private.
üîπ Manual or Automated: Users can specify a launch template ID or scan all templates.
üîπ Failsafe Mechanism: Skips already compliant launch templates.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does:
1Ô∏è‚É£ Checks if EC2 launch templates assign public IPs to network interfaces.
2Ô∏è‚É£ Retrieves the latest version of each launch template.
3Ô∏è‚É£ Identifies if AssociatePublicIpAddress is set to true.
4Ô∏è‚É£ If found, creates a new version of the template with public IP assignment disabled.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EC2,Ensure unused ENIs are removed,Identify and delete any unused Amazon AWS Elastic Network Interfaces in order to adhere to best practices and to avoid reaching the service limit. An AWS Elastic Network Interface (ENI) is pronounced unused when is not attached anymore to an EC2 instance.,Compliance,Medium,Ensure that unused Elastic Network Interfaces (ENIs) are deleted. Steps: 1. Review ENI configurations. 2. Delete any ENIs that are not attached to instances. # REF: Managing ENIs / https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-interface.html,$0 (no additional cost),"Ensure Unused ENIs Are Removed
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect unused Elastic Network Interfaces (ENIs).
Lambda Function: A scheduled Lambda (via EventBridge) that identifies and deletes unused ENIs.
SSM Automation: Use an SSM document to automatically remove unattached ENIs.","üîç Features of the Script:
‚úÖ Retrieves all ENIs and checks their attachment status.
‚úÖ Deletes ENIs that are not attached to any instance or service.
‚úÖ Skips ENIs that are in use or belong to critical AWS services.
‚úÖ Logs each action, including skipped ENIs for visibility.
‚úÖ Supports manual mode (user inputs an ENI ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ENI check
get_user_input() {
    read -p ""Enter the ENI ID to check (or press Enter to auto-scan all ENIs): "" user_eni_id
}

# Function to check and remove unused ENIs
remove_unused_enis() {
    log ""Starting unused ENI cleanup process...""

    # Get list of ENIs (manual or auto)
    if [[ -n ""$user_eni_id"" ]]; then
        enis=(""$user_eni_id"")
    else
        log ""No manual input provided. Scanning all ENIs...""
        enis=($(aws ec2 describe-network-interfaces --query ""NetworkInterfaces[].NetworkInterfaceId"" --output text))
    fi

    if [[ ${#enis[@]} -eq 0 ]]; then
        log ""No ENIs found.""
        exit 0
    fi

    deleted_count=0
    for eni_id in ""${enis[@]}""; do
        log ""Checking ENI: $eni_id""

        # Get attachment status
        attachment=$(aws ec2 describe-network-interfaces --network-interface-ids ""$eni_id"" \
            --query ""NetworkInterfaces[].Attachment"" --output text)

        if [[ ""$attachment"" != ""None"" && -n ""$attachment"" ]]; then
            log ""‚úÖ ENI $eni_id is attached to a resource. Skipping...""
            continue
        fi

        log ""‚ö†Ô∏è ENI $eni_id is unused. Deleting...""
        aws ec2 delete-network-interface --network-interface-id ""$eni_id""
        log ""‚úÖ ENI $eni_id deleted successfully.""
        ((deleted_count++))
    done

    if [[ $deleted_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $deleted_count unused ENIs removed.""
    else
        log ""‚úÖ All ENIs are in use. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
remove_unused_enis
","üöÄ Why This is Useful?
üîπ Optimizes AWS Costs: Removes unused ENIs to avoid unnecessary charges.
üîπ Manual or Automated: Users can specify an ENI ID or scan all ENIs.
üîπ Failsafe Mechanism: Skips ENIs that are attached to active resources.
üîπ Full Logging: Keeps track of all actions, ensuring compliance.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ENIs in the AWS account.
2Ô∏è‚É£ Checks if each ENI is attached to an instance or service.
3Ô∏è‚É£ Deletes ENIs that are not attached to any resource.
4Ô∏è‚É£ Logs each action, ensuring full visibility.

",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 stopped instances should be removed in 30 days,"Enable this rule to help with the baseline configuration of AWS Elastic Compute Cloud (AWS EC2) instances by checking whether AWS EC2 instances have been stopped for more than the allowed number of days, according to your organization's standards.",Compliance,High,Ensure that stopped EC2 instances are reviewed and removed after 30 days. Steps: 1. List stopped instances. 2. Terminate instances older than 30 days. # REF: Stopping and Terminating Instances https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html,$0 (no additional cost),"1. EC2 Stopped Instances Should Be Removed in 30 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to track stopped instances.
Lambda Function: Scheduled Lambda (via EventBridge) that checks for instances stopped for 30 days and terminates them.
SSM Automation: Use an SSM document to automatically clean up such instances.","Retrieves all stopped instances.
Extracts their stop timestamps.
Calculates how long they‚Äôve been stopped.
Terminates those stopped for 30+ days.
Logs each action.
Handles non-existent or incorrect instance IDs properly
‚úÖ Loops until a valid instance ID is provided (for manual mode)
‚úÖ Includes a retry mechanism if the user enters an invalid instance ID
‚úÖ Logs all actions clearly","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance termination (with validation)
get_user_input() {
    while true; do
        read -p ""Enter the EC2 Instance ID to terminate (or press Enter to auto-scan): "" user_instance_id

        # If the user presses Enter without providing an instance ID, switch to auto mode
        if [[ -z ""$user_instance_id"" ]]; then
            log ""No instance ID provided. Switching to auto-scan mode...""
            break
        fi

        log ""User provided instance ID: $user_instance_id. Validating...""

        # Check if the instance exists and is in a stopped state
        instance_state=$(aws ec2 describe-instances --instance-ids ""$user_instance_id"" \
            --query ""Reservations[].Instances[].State.Name"" --output text 2>/dev/null)

        if [[ -z ""$instance_state"" ]]; then
            log ""Instance $user_instance_id does not exist. Please enter a valid instance ID.""
            continue  # Ask for input again
        fi

        if [[ ""$instance_state"" != ""stopped"" ]]; then
            log ""Instance $user_instance_id is in '$instance_state' state, not 'stopped'. Exiting.""
            exit 1
        fi

        log ""Instance $user_instance_id is valid and in a stopped state. Proceeding with termination...""
        break
    done
}

# Function to check and terminate EC2 instances stopped for more than 30 days
cleanup_stopped_instances() {
    log ""Starting EC2 stopped instance cleanup process...""

    # Get current date in Unix timestamp
    current_time=$(date +%s)

    # If user provided an instance ID, process only that instance
    if [[ -n ""$user_instance_id"" ]]; then
        stop_reason=$(aws ec2 describe-instances --instance-ids ""$user_instance_id"" \
            --query ""Reservations[].Instances[].StateTransitionReason"" --output text)

        stop_date=$(echo ""$stop_reason"" | grep -oP '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
        if [[ -z ""$stop_date"" ]]; then
            log ""Cannot determine stop date for instance $user_instance_id. Skipping.""
            exit 1
        fi

        stop_time=$(date -d ""$stop_date"" +%s)
        diff_days=$(( (current_time - stop_time) / 86400 ))

        if [[ $diff_days -ge 30 ]]; then
            log ""Instance $user_instance_id has been stopped for $diff_days days. Terminating...""
            aws ec2 terminate-instances --instance-ids ""$user_instance_id"" >/dev/null 2>&1
            log ""Instance $user_instance_id terminated successfully.""
        else
            log ""Instance $user_instance_id has been stopped for only $diff_days days. No action taken.""
        fi

        exit 0
    fi

    log ""No manual input provided. Scanning for stopped instances...""

    # Get all stopped instances
    stopped_instances=$(aws ec2 describe-instances --filters ""Name=instance-state-name,Values=stopped"" \
        --query ""Reservations[].Instances[].[InstanceId,StateTransitionReason]"" --output json | jq -c '.[]')

    if [[ -z ""$stopped_instances"" || ""$stopped_instances"" == ""[]"" ]]; then
        log ""No stopped instances found.""
        exit 0
    fi

    terminated_count=0
    for instance in $stopped_instances; do
        instance_id=$(echo $instance | jq -r '.[0]')
        stop_reason=$(echo $instance | jq -r '.[1]')

        stop_date=$(echo ""$stop_reason"" | grep -oP '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
        if [[ -z ""$stop_date"" ]]; then
            log ""Skipping instance $instance_id due to missing stop timestamp.""
            continue
        fi

        stop_time=$(date -d ""$stop_date"" +%s)
        diff_days=$(( (current_time - stop_time) / 86400 ))

        if [[ $diff_days -ge 30 ]]; then
            log ""Instance $instance_id has been stopped for $diff_days days. Terminating...""
            aws ec2 terminate-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
            log ""Instance $instance_id terminated.""
            ((terminated_count++))
        else
            log ""Instance $instance_id has been stopped for $diff_days days. No action taken.""
        fi
    done

    if [[ $terminated_count -gt 0 ]]; then
        log ""Cleanup completed. $terminated_count instances terminated.""
    else
        log ""Cleanup completed. No instances required termination.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
cleanup_stopped_instances
","Why This is Useful?
üîπ Ensures Compliance: Removes dangerous permissions from EC2 IAM roles.
üîπ Automated or Manual: Users can provide an instance ID or scan all instances.
üîπ Failsafe Approach: Skips instances with no IAM roles or compliant permissions.
üîπ Logs Every Action: Keeps track of what was checked, modified, or skipped.

","üéØ What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role
2Ô∏è‚É£ Retrieves the policies attached to the IAM role
3Ô∏è‚É£ Checks if the role allows organizations:Write permissions
4Ô∏è‚É£ If found, it removes the permission and applies an updated policy
5Ô∏è‚É£ Logs all actions, ensuring clarity on what was fixed",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 stopped instances should be removed in 30 days,"Enable this rule to help with the baseline configuration of AWS Elastic Compute Cloud (AWS EC2) instances by checking whether AWS EC2 instances have been stopped for more than the allowed number of days, according to your organization's standards.",Compliance,High,Ensure that stopped EC2 instances are reviewed and removed after 30 days. Steps: 1. List stopped instances. 2. Terminate instances older than 30 days. # REF: Stopping and Terminating Instances https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html,$0 (no additional cost),"1. EC2 Stopped Instances Should Be Removed in 30 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to track stopped instances.
Lambda Function: Scheduled Lambda (via EventBridge) that checks for instances stopped for 30 days and terminates them.
SSM Automation: Use an SSM document to automatically clean up such instances.","Retrieves all stopped instances.
Extracts their stop timestamps.
Calculates how long they‚Äôve been stopped.
Terminates those stopped for 30+ days.
Logs each action.
Handles non-existent or incorrect instance IDs properly
‚úÖ Loops until a valid instance ID is provided (for manual mode)
‚úÖ Includes a retry mechanism if the user enters an invalid instance ID
‚úÖ Logs all actions clearly","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance termination (with validation)
get_user_input() {
    while true; do
        read -p ""Enter the EC2 Instance ID to terminate (or press Enter to auto-scan): "" user_instance_id

        # If the user presses Enter without providing an instance ID, switch to auto mode
        if [[ -z ""$user_instance_id"" ]]; then
            log ""No instance ID provided. Switching to auto-scan mode...""
            break
        fi

        log ""User provided instance ID: $user_instance_id. Validating...""

        # Check if the instance exists and is in a stopped state
        instance_state=$(aws ec2 describe-instances --instance-ids ""$user_instance_id"" \
            --query ""Reservations[].Instances[].State.Name"" --output text 2>/dev/null)

        if [[ -z ""$instance_state"" ]]; then
            log ""Instance $user_instance_id does not exist. Please enter a valid instance ID.""
            continue  # Ask for input again
        fi

        if [[ ""$instance_state"" != ""stopped"" ]]; then
            log ""Instance $user_instance_id is in '$instance_state' state, not 'stopped'. Exiting.""
            exit 1
        fi

        log ""Instance $user_instance_id is valid and in a stopped state. Proceeding with termination...""
        break
    done
}

# Function to check and terminate EC2 instances stopped for more than 30 days
cleanup_stopped_instances() {
    log ""Starting EC2 stopped instance cleanup process...""

    # Get current date in Unix timestamp
    current_time=$(date +%s)

    # If user provided an instance ID, process only that instance
    if [[ -n ""$user_instance_id"" ]]; then
        stop_reason=$(aws ec2 describe-instances --instance-ids ""$user_instance_id"" \
            --query ""Reservations[].Instances[].StateTransitionReason"" --output text)

        stop_date=$(echo ""$stop_reason"" | grep -oP '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
        if [[ -z ""$stop_date"" ]]; then
            log ""Cannot determine stop date for instance $user_instance_id. Skipping.""
            exit 1
        fi

        stop_time=$(date -d ""$stop_date"" +%s)
        diff_days=$(( (current_time - stop_time) / 86400 ))

        if [[ $diff_days -ge 30 ]]; then
            log ""Instance $user_instance_id has been stopped for $diff_days days. Terminating...""
            aws ec2 terminate-instances --instance-ids ""$user_instance_id"" >/dev/null 2>&1
            log ""Instance $user_instance_id terminated successfully.""
        else
            log ""Instance $user_instance_id has been stopped for only $diff_days days. No action taken.""
        fi

        exit 0
    fi

    log ""No manual input provided. Scanning for stopped instances...""

    # Get all stopped instances
    stopped_instances=$(aws ec2 describe-instances --filters ""Name=instance-state-name,Values=stopped"" \
        --query ""Reservations[].Instances[].[InstanceId,StateTransitionReason]"" --output json | jq -c '.[]')

    if [[ -z ""$stopped_instances"" || ""$stopped_instances"" == ""[]"" ]]; then
        log ""No stopped instances found.""
        exit 0
    fi

    terminated_count=0
    for instance in $stopped_instances; do
        instance_id=$(echo $instance | jq -r '.[0]')
        stop_reason=$(echo $instance | jq -r '.[1]')

        stop_date=$(echo ""$stop_reason"" | grep -oP '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
        if [[ -z ""$stop_date"" ]]; then
            log ""Skipping instance $instance_id due to missing stop timestamp.""
            continue
        fi

        stop_time=$(date -d ""$stop_date"" +%s)
        diff_days=$(( (current_time - stop_time) / 86400 ))

        if [[ $diff_days -ge 30 ]]; then
            log ""Instance $instance_id has been stopped for $diff_days days. Terminating...""
            aws ec2 terminate-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
            log ""Instance $instance_id terminated.""
            ((terminated_count++))
        else
            log ""Instance $instance_id has been stopped for $diff_days days. No action taken.""
        fi
    done

    if [[ $terminated_count -gt 0 ]]; then
        log ""Cleanup completed. $terminated_count instances terminated.""
    else
        log ""Cleanup completed. No instances required termination.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
cleanup_stopped_instances
","Why This is Useful?
üîπ Ensures Compliance: Removes dangerous permissions from EC2 IAM roles.
üîπ Automated or Manual: Users can provide an instance ID or scan all instances.
üîπ Failsafe Approach: Skips instances with no IAM roles or compliant permissions.
üîπ Logs Every Action: Keeps track of what was checked, modified, or skipped.

","üéØ What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role
2Ô∏è‚É£ Retrieves the policies attached to the IAM role
3Ô∏è‚É£ Checks if the role allows organizations:Write permissions
4Ô∏è‚É£ If found, it removes the permission and applies an updated policy
5Ô∏è‚É£ Logs all actions, ensuring clarity on what was fixed",Bash,Weekly,SOC 2,2024-02-13
Security,EC2 stopped instances should be removed in 30 days,"Enable this rule to help with the baseline configuration of AWS Elastic Compute Cloud (AWS EC2) instances by checking whether AWS EC2 instances have been stopped for more than the allowed number of days, according to your organization's standards.",Compliance,High,Ensure that stopped EC2 instances are reviewed and removed after 30 days. Steps: 1. List stopped instances. 2. Terminate instances older than 30 days. # REF: Stopping and Terminating Instances https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html,$0 (no additional cost),"1. EC2 Stopped Instances Should Be Removed in 30 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to track stopped instances.
Lambda Function: Scheduled Lambda (via EventBridge) that checks for instances stopped for 30 days and terminates them.
SSM Automation: Use an SSM document to automatically clean up such instances.","Retrieves all stopped instances.
Extracts their stop timestamps.
Calculates how long they‚Äôve been stopped.
Terminates those stopped for 30+ days.
Logs each action.
Handles non-existent or incorrect instance IDs properly
‚úÖ Loops until a valid instance ID is provided (for manual mode)
‚úÖ Includes a retry mechanism if the user enters an invalid instance ID
‚úÖ Logs all actions clearly","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance termination (with validation)
get_user_input() {
    while true; do
        read -p ""Enter the EC2 Instance ID to terminate (or press Enter to auto-scan): "" user_instance_id

        # If the user presses Enter without providing an instance ID, switch to auto mode
        if [[ -z ""$user_instance_id"" ]]; then
            log ""No instance ID provided. Switching to auto-scan mode...""
            break
        fi

        log ""User provided instance ID: $user_instance_id. Validating...""

        # Check if the instance exists and is in a stopped state
        instance_state=$(aws ec2 describe-instances --instance-ids ""$user_instance_id"" \
            --query ""Reservations[].Instances[].State.Name"" --output text 2>/dev/null)

        if [[ -z ""$instance_state"" ]]; then
            log ""Instance $user_instance_id does not exist. Please enter a valid instance ID.""
            continue  # Ask for input again
        fi

        if [[ ""$instance_state"" != ""stopped"" ]]; then
            log ""Instance $user_instance_id is in '$instance_state' state, not 'stopped'. Exiting.""
            exit 1
        fi

        log ""Instance $user_instance_id is valid and in a stopped state. Proceeding with termination...""
        break
    done
}

# Function to check and terminate EC2 instances stopped for more than 30 days
cleanup_stopped_instances() {
    log ""Starting EC2 stopped instance cleanup process...""

    # Get current date in Unix timestamp
    current_time=$(date +%s)

    # If user provided an instance ID, process only that instance
    if [[ -n ""$user_instance_id"" ]]; then
        stop_reason=$(aws ec2 describe-instances --instance-ids ""$user_instance_id"" \
            --query ""Reservations[].Instances[].StateTransitionReason"" --output text)

        stop_date=$(echo ""$stop_reason"" | grep -oP '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
        if [[ -z ""$stop_date"" ]]; then
            log ""Cannot determine stop date for instance $user_instance_id. Skipping.""
            exit 1
        fi

        stop_time=$(date -d ""$stop_date"" +%s)
        diff_days=$(( (current_time - stop_time) / 86400 ))

        if [[ $diff_days -ge 30 ]]; then
            log ""Instance $user_instance_id has been stopped for $diff_days days. Terminating...""
            aws ec2 terminate-instances --instance-ids ""$user_instance_id"" >/dev/null 2>&1
            log ""Instance $user_instance_id terminated successfully.""
        else
            log ""Instance $user_instance_id has been stopped for only $diff_days days. No action taken.""
        fi

        exit 0
    fi

    log ""No manual input provided. Scanning for stopped instances...""

    # Get all stopped instances
    stopped_instances=$(aws ec2 describe-instances --filters ""Name=instance-state-name,Values=stopped"" \
        --query ""Reservations[].Instances[].[InstanceId,StateTransitionReason]"" --output json | jq -c '.[]')

    if [[ -z ""$stopped_instances"" || ""$stopped_instances"" == ""[]"" ]]; then
        log ""No stopped instances found.""
        exit 0
    fi

    terminated_count=0
    for instance in $stopped_instances; do
        instance_id=$(echo $instance | jq -r '.[0]')
        stop_reason=$(echo $instance | jq -r '.[1]')

        stop_date=$(echo ""$stop_reason"" | grep -oP '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
        if [[ -z ""$stop_date"" ]]; then
            log ""Skipping instance $instance_id due to missing stop timestamp.""
            continue
        fi

        stop_time=$(date -d ""$stop_date"" +%s)
        diff_days=$(( (current_time - stop_time) / 86400 ))

        if [[ $diff_days -ge 30 ]]; then
            log ""Instance $instance_id has been stopped for $diff_days days. Terminating...""
            aws ec2 terminate-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
            log ""Instance $instance_id terminated.""
            ((terminated_count++))
        else
            log ""Instance $instance_id has been stopped for $diff_days days. No action taken.""
        fi
    done

    if [[ $terminated_count -gt 0 ]]; then
        log ""Cleanup completed. $terminated_count instances terminated.""
    else
        log ""Cleanup completed. No instances required termination.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
cleanup_stopped_instances
","Why This is Useful?
üîπ Ensures Compliance: Removes dangerous permissions from EC2 IAM roles.
üîπ Automated or Manual: Users can provide an instance ID or scan all instances.
üîπ Failsafe Approach: Skips instances with no IAM roles or compliant permissions.
üîπ Logs Every Action: Keeps track of what was checked, modified, or skipped.

","üéØ What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role
2Ô∏è‚É£ Retrieves the policies attached to the IAM role
3Ô∏è‚É£ Checks if the role allows organizations:Write permissions
4Ô∏è‚É£ If found, it removes the permission and applies an updated policy
5Ô∏è‚É£ Logs all actions, ensuring clarity on what was fixed",Bash,Weekly,SOC 2,2024-02-13
EC2,Ensure instances stopped for over 90 days are removed,"Enable this rule to help with the baseline configuration of Amazon Elastic Compute Cloud (Amazon EC2) instances by checking whether Amazon EC2 instances have been stopped for more than the allowed number of days, according to your organization's standards.",Compliance,High,Ensure that EC2 instances that have been stopped for over 90 days are deleted. Steps: 1. Review stopped instances. 2. Automate deletion of instances older than 90 days. # REF: Instance Management / https://aws.amazon.com/premiumsupport/knowledge-center/stop-instances-90-days/,$0 (no additional cost),"1. Ensure Instances Stopped for Over 90 Days Are Removed
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to track EC2 instances that have been in a stopped state for over 90 days.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all stopped instances and terminates those exceeding 90 days.
SSM Automation: Use an SSM document to notify administrators before terminating non-compliant instances.","üîç Features of the Script:
‚úÖ Retrieves all stopped EC2 instances.
‚úÖ Extracts their stop timestamps and calculates how long they‚Äôve been stopped.
‚úÖ If an instance has been stopped for 90+ days, it logs the details and terminates it.
‚úÖ Supports manual mode (user inputs an instance ID) and automatic scanning.
‚úÖ Logs all actions, including instances skipped due to insufficient stop time.
‚úÖ Failsafe Handling: Ensures no running instances are mistakenly terminated.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check (or press Enter to scan all stopped instances): "" user_instance_id
}

# Function to check and terminate EC2 instances stopped for over 90 days
cleanup_stopped_instances() {
    log ""Starting EC2 stopped instance cleanup process...""

    # Get current date in Unix timestamp
    current_time=$(date +%s)
    max_stopped_days=90
    max_stopped_seconds=$((max_stopped_days * 86400))

    # If user provided an instance ID, process only that instance
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all stopped EC2 instances...""
        instances=($(aws ec2 describe-instances --filters ""Name=instance-state-name,Values=stopped"" \
            --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No stopped EC2 instances found.""
        exit 0
    fi

    terminated_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking stop time for instance: $instance_id""

        # Get stop timestamp from StateTransitionReason
        stop_reason=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].StateTransitionReason"" --output text)

        stop_date=$(echo ""$stop_reason"" | grep -oP '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
        if [[ -z ""$stop_date"" ]]; then
            log ""Cannot determine stop date for instance $instance_id. Skipping.""
            continue
        fi

        stop_time=$(date -d ""$stop_date"" +%s)
        stopped_days=$(( (current_time - stop_time) / 86400 ))

        if [[ $stopped_days -gt $max_stopped_days ]]; then
            log ""‚ö†Ô∏è Instance $instance_id has been stopped for $stopped_days days (exceeds $max_stopped_days days). Terminating...""
            aws ec2 terminate-instances --instance-ids ""$instance_id"" >/dev/null 2>&1
            log ""‚úÖ Instance $instance_id terminated successfully.""
            ((terminated_count++))
        else
            log ""‚úÖ Instance $instance_id has been stopped for $stopped_days days. No action taken.""
        fi
    done

    if [[ $terminated_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $terminated_count instances were terminated.""
    else
        log ""‚úÖ All stopped instances are within the allowed timeframe. No instances were terminated.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
cleanup_stopped_instances
","üöÄ Why This is Useful?
üîπ Ensures Cost Optimization: Stops unnecessary costs from long-stopped instances.
üîπ Enhances Security: Removes dormant instances that could pose security risks.
üîπ Manual or Automated: Users can specify an instance ID or scan all stopped instances.
üîπ Failsafe Mechanism: Skips instances that are within the allowed stop time.
üîπ Full Logging: Keeps track of all actions for compliance and audits.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all stopped EC2 instances and checks their stop timestamps.
2Ô∏è‚É£ Calculates how long each instance has been stopped.
3Ô∏è‚É£ Identifies instances stopped for over 90 days.
4Ô∏è‚É£ Terminates outdated stopped instances while skipping compliant ones.
5Ô∏è‚É£ Logs each action taken for transparency and debugging.

",Bash,Weekly,SOC 2,2024-02-13
EC2,EC2 transit gateways should have auto accept shared attachments disabled,"Ensure transit gateways have auto accept shared attachments feature disabled. If this setting is disabled, then any VPC that attempts to attach to a transit gateway will need to request authorization, and the account that owns the transit gateway will need to accept the authorization.",Compliance,Medium,Ensure that EC2 transit gateways have auto-accept shared attachments disabled for security. Steps: 1. Review transit gateway settings. 2. Disable auto-accept if enabled. # REF: Transit Gateway / https://docs.aws.amazon.com/vpc/latest/userguide/vpc-transit-gateway.html#tg-auto-accept,To be added,"EC2 Transit Gateways Should Have Auto-Accept Shared Attachments Disabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if auto-accept shared attachments is enabled on EC2 transit gateways.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all transit gateways and disables auto-accept shared attachments if found enabled.
SSM Automation: Use an SSM document to enforce best practices by automatically correcting misconfigurations.","üîç Features of the Script:
‚úÖ Retrieves all EC2 transit gateways in the account.
‚úÖ Checks if ""auto-accept shared attachments"" is enabled.
‚úÖ If enabled, disables the setting to improve security.
‚úÖ Logs each action, including skipped transit gateways.
‚úÖ Supports manual mode (user inputs a transit gateway ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual transit gateway check
get_user_input() {
    read -p ""Enter the Transit Gateway ID to check (or press Enter to auto-scan all Transit Gateways): "" user_tgw_id
}

# Function to check and disable auto-accept shared attachments
disable_auto_accept_shared_attachments() {
    log ""Starting transit gateway validation...""

    # Get list of transit gateways (manual or auto)
    if [[ -n ""$user_tgw_id"" ]]; then
        tgws=(""$user_tgw_id"")
    else
        log ""No manual input provided. Scanning all transit gateways...""
        tgws=($(aws ec2 describe-transit-gateways --query ""TransitGateways[].TransitGatewayId"" --output text))
    fi

    if [[ ${#tgws[@]} -eq 0 ]]; then
        log ""No transit gateways found.""
        exit 0
    fi

    fixed_count=0
    for tgw_id in ""${tgws[@]}""; do
        log ""Checking Transit Gateway: $tgw_id""

        # Get the auto-accept attachment setting
        auto_accept=$(aws ec2 describe-transit-gateways --transit-gateway-ids ""$tgw_id"" \
            --query ""TransitGateways[].Options.AutoAcceptSharedAttachments"" --output text)

        if [[ ""$auto_accept"" == ""disable"" ]]; then
            log ""‚úÖ Transit Gateway $tgw_id already has auto-accept shared attachments disabled.""
            continue
        fi

        log ""‚ö†Ô∏è Transit Gateway $tgw_id has auto-accept shared attachments ENABLED. Disabling now...""
        
        # Disable auto-accept shared attachments
        aws ec2 modify-transit-gateway --transit-gateway-id ""$tgw_id"" --options AutoAcceptSharedAttachments=disable
        log ""‚úÖ Auto-accept shared attachments disabled for Transit Gateway $tgw_id.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count transit gateways updated.""
    else
        log ""‚úÖ All transit gateways are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
disable_auto_accept_shared_attachments
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Attachments: Avoids security risks from unwanted shared attachments.
üîπ Manual or Automated: Users can specify a transit gateway ID or scan all transit gateways.
üîπ Failsafe Mechanism: Skips transit gateways already in compliance.
üîπ Full Logging: Keeps track of all actions, ensuring compliance visibility.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all transit gateways in the AWS account.
2Ô∏è‚É£ Checks if ""auto-accept shared attachments"" is enabled.
3Ô∏è‚É£ Disables the setting if found enabled.
4Ô∏è‚É£ Logs each action, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECR,ECR repositories should have image scan on push enabled,Ensure AWS Elastic Container Registry (ECR) repositories have image scanning enabled. The rule is non-compliant if image scanning is not enabled for the ECR repository.,Compliance,Medium,"Open ECR console, select your repository, click ""Edit,"" enable ""Scan on push,"" and save changes. This ensures that images are automatically scanned for vulnerabilities upon upload.
Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html",To be added,"ECR Repositories Should Have Image Scan on Push Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECR repositories where image scanning on push is disabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECR repositories and enables image scanning on push.
SSM Automation: An SSM document to automatically remediate any repositories violating this control.","Features of the Script:
‚úÖ Retrieves all ECR repositories and checks their image scanning configuration.
‚úÖ Identifies repositories where image scan on push is disabled.
‚úÖ If found, enables image scanning on push for the repository.
‚úÖ Logs each action, including repositories that are already compliant.
‚úÖ Supports both manual mode (user inputs a repository name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual repository check
get_user_input() {
    read -p ""Enter the ECR Repository name to check (or press Enter to auto-scan all repositories): "" user_repo
}

# Function to check and enable image scan on push for ECR repositories
enable_image_scan_on_push() {
    log ""Starting ECR security review for image scanning on push...""

    # Get list of ECR repositories (manual or auto)
    if [[ -n ""$user_repo"" ]]; then
        repositories=(""$user_repo"")
    else
        log ""No manual input provided. Scanning all ECR repositories...""
        repositories=($(aws ecr describe-repositories --query ""repositories[].repositoryName"" --output text))
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log ""No ECR repositories found.""
        exit 0
    fi

    fixed_count=0
    for repo in ""${repositories[@]}""; do
        log ""Checking repository: $repo""

        # Get the current repository scan on push status
        scan_on_push=$(aws ecr describe-repositories --repository-names ""$repo"" --query ""repositories[0].imageScanningConfiguration.scanOnPush"" --output text)

        if [[ ""$scan_on_push"" == ""True"" ]]; then
            log ""‚úÖ Repository $repo already has image scan on push enabled.""
        else
            log ""‚ö†Ô∏è Repository $repo does not have image scan on push enabled. Enabling now...""

            # Enable image scan on push
            aws ecr put-image-scanning-configuration --repository-name ""$repo"" --image-scanning-configuration scanOnPush=true

            log ""‚úÖ Image scan on push enabled for repository $repo.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count repositories were updated.""
    else
        log ""‚úÖ All repositories are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_image_scan_on_push
","Why This is Useful?
üîπ Automated Security Scanning: Ensures vulnerabilities are detected as soon as an image is pushed.
üîπ Compliance Assurance: Helps meet security standards (e.g., CIS AWS Benchmark, NIST).
üîπ Manual or Automated: Users can specify a repository name or scan all repositories.
üîπ Failsafe Mechanism: Skips repositories that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped repositories.","What This Script Does?
1Ô∏è‚É£ Checks all ECR repositories or a user-specified repository.
2Ô∏è‚É£ Retrieves the image scanning configuration.
3Ô∏è‚É£ If disabled, enables image scan on push.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,ECR repositories should have image scan on push enabled,Ensure AWS Elastic Container Registry (ECR) repositories have image scanning enabled. The rule is non-compliant if image scanning is not enabled for the ECR repository.,Compliance,Medium,"Open ECR console, select your repository, click ""Edit,"" enable ""Scan on push,"" and save changes. This ensures that images are automatically scanned for vulnerabilities upon upload.
Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html",To be added,"ECR Repositories Should Have Image Scan on Push Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECR repositories where image scanning on push is disabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECR repositories and enables image scanning on push.
SSM Automation: An SSM document to automatically remediate any repositories violating this control.","Features of the Script:
‚úÖ Retrieves all ECR repositories and checks their image scanning configuration.
‚úÖ Identifies repositories where image scan on push is disabled.
‚úÖ If found, enables image scanning on push for the repository.
‚úÖ Logs each action, including repositories that are already compliant.
‚úÖ Supports both manual mode (user inputs a repository name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual repository check
get_user_input() {
    read -p ""Enter the ECR Repository name to check (or press Enter to auto-scan all repositories): "" user_repo
}

# Function to check and enable image scan on push for ECR repositories
enable_image_scan_on_push() {
    log ""Starting ECR security review for image scanning on push...""

    # Get list of ECR repositories (manual or auto)
    if [[ -n ""$user_repo"" ]]; then
        repositories=(""$user_repo"")
    else
        log ""No manual input provided. Scanning all ECR repositories...""
        repositories=($(aws ecr describe-repositories --query ""repositories[].repositoryName"" --output text))
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log ""No ECR repositories found.""
        exit 0
    fi

    fixed_count=0
    for repo in ""${repositories[@]}""; do
        log ""Checking repository: $repo""

        # Get the current repository scan on push status
        scan_on_push=$(aws ecr describe-repositories --repository-names ""$repo"" --query ""repositories[0].imageScanningConfiguration.scanOnPush"" --output text)

        if [[ ""$scan_on_push"" == ""True"" ]]; then
            log ""‚úÖ Repository $repo already has image scan on push enabled.""
        else
            log ""‚ö†Ô∏è Repository $repo does not have image scan on push enabled. Enabling now...""

            # Enable image scan on push
            aws ecr put-image-scanning-configuration --repository-name ""$repo"" --image-scanning-configuration scanOnPush=true

            log ""‚úÖ Image scan on push enabled for repository $repo.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count repositories were updated.""
    else
        log ""‚úÖ All repositories are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_image_scan_on_push
","Why This is Useful?
üîπ Automated Security Scanning: Ensures vulnerabilities are detected as soon as an image is pushed.
üîπ Compliance Assurance: Helps meet security standards (e.g., CIS AWS Benchmark, NIST).
üîπ Manual or Automated: Users can specify a repository name or scan all repositories.
üîπ Failsafe Mechanism: Skips repositories that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped repositories.","What This Script Does?
1Ô∏è‚É£ Checks all ECR repositories or a user-specified repository.
2Ô∏è‚É£ Retrieves the image scanning configuration.
3Ô∏è‚É£ If disabled, enables image scan on push.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,ECR repositories should have image scan on push enabled,Ensure AWS Elastic Container Registry (ECR) repositories have image scanning enabled. The rule is non-compliant if image scanning is not enabled for the ECR repository.,Compliance,Medium,"Open ECR console, select your repository, click ""Edit,"" enable ""Scan on push,"" and save changes. This ensures that images are automatically scanned for vulnerabilities upon upload.
Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html",To be added,"ECR Repositories Should Have Image Scan on Push Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECR repositories where image scanning on push is disabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECR repositories and enables image scanning on push.
SSM Automation: An SSM document to automatically remediate any repositories violating this control.","Features of the Script:
‚úÖ Retrieves all ECR repositories and checks their image scanning configuration.
‚úÖ Identifies repositories where image scan on push is disabled.
‚úÖ If found, enables image scanning on push for the repository.
‚úÖ Logs each action, including repositories that are already compliant.
‚úÖ Supports both manual mode (user inputs a repository name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual repository check
get_user_input() {
    read -p ""Enter the ECR Repository name to check (or press Enter to auto-scan all repositories): "" user_repo
}

# Function to check and enable image scan on push for ECR repositories
enable_image_scan_on_push() {
    log ""Starting ECR security review for image scanning on push...""

    # Get list of ECR repositories (manual or auto)
    if [[ -n ""$user_repo"" ]]; then
        repositories=(""$user_repo"")
    else
        log ""No manual input provided. Scanning all ECR repositories...""
        repositories=($(aws ecr describe-repositories --query ""repositories[].repositoryName"" --output text))
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log ""No ECR repositories found.""
        exit 0
    fi

    fixed_count=0
    for repo in ""${repositories[@]}""; do
        log ""Checking repository: $repo""

        # Get the current repository scan on push status
        scan_on_push=$(aws ecr describe-repositories --repository-names ""$repo"" --query ""repositories[0].imageScanningConfiguration.scanOnPush"" --output text)

        if [[ ""$scan_on_push"" == ""True"" ]]; then
            log ""‚úÖ Repository $repo already has image scan on push enabled.""
        else
            log ""‚ö†Ô∏è Repository $repo does not have image scan on push enabled. Enabling now...""

            # Enable image scan on push
            aws ecr put-image-scanning-configuration --repository-name ""$repo"" --image-scanning-configuration scanOnPush=true

            log ""‚úÖ Image scan on push enabled for repository $repo.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count repositories were updated.""
    else
        log ""‚úÖ All repositories are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_image_scan_on_push
","Why This is Useful?
üîπ Automated Security Scanning: Ensures vulnerabilities are detected as soon as an image is pushed.
üîπ Compliance Assurance: Helps meet security standards (e.g., CIS AWS Benchmark, NIST).
üîπ Manual or Automated: Users can specify a repository name or scan all repositories.
üîπ Failsafe Mechanism: Skips repositories that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped repositories.","What This Script Does?
1Ô∏è‚É£ Checks all ECR repositories or a user-specified repository.
2Ô∏è‚É£ Retrieves the image scanning configuration.
3Ô∏è‚É£ If disabled, enables image scan on push.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECR,ECR repositories should have lifecycle policies configured,This control checks if ECR repositories have lifecycle policy configured. This rule fails if ECR repository lifecycle policy is not enabled.,Compliance,Medium,"open the ECR console, select your repository, navigate to the ""Lifecycle policy"" tab, and create a policy by defining rules for image retention. This automates the management of container images, helping to optimize storage and organization.
Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/lp_creation.html",To be added,"ECR Repositories Should Have Lifecycle Policies Configured
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if lifecycle policies are configured for Amazon Elastic Container Registry (ECR) repositories.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all ECR repositories and applies a default lifecycle policy if missing.
SSM Automation: Use an SSM document to enforce best practices by automatically applying lifecycle policies.","Features of the Script:
‚úÖ Retrieves all ECR repositories in the AWS account.
‚úÖ Checks if a lifecycle policy is already configured for each repository.
‚úÖ If missing, applies a default lifecycle policy to manage image retention.
‚úÖ Logs each action, including skipped repositories.
‚úÖ Supports manual mode (user inputs an ECR repository name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual repository check
get_user_input() {
    read -p ""Enter the ECR repository name to check (or press Enter to auto-scan all repositories): "" user_repo
}

# Default lifecycle policy JSON
LIFECYCLE_POLICY='{
    ""rules"": [
        {
            ""rulePriority"": 1,
            ""description"": ""Expire images older than 90 days"",
            ""selection"": {
                ""tagStatus"": ""any"",
                ""countType"": ""sinceImagePushed"",
                ""countUnit"": ""days"",
                ""countNumber"": 90
            },
            ""action"": {
                ""type"": ""expire""
            }
        }
    ]
}'

# Function to check and apply lifecycle policies
ensure_ecr_lifecycle_policies() {
    log ""Starting ECR lifecycle policy validation...""

    # Get list of repositories (manual or auto)
    if [[ -n ""$user_repo"" ]]; then
        repositories=(""$user_repo"")
    else
        log ""No manual input provided. Scanning all ECR repositories...""
        repositories=($(aws ecr describe-repositories --query ""repositories[].repositoryName"" --output text))
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log ""No ECR repositories found.""
        exit 0
    fi

    fixed_count=0
    for repo in ""${repositories[@]}""; do
        log ""Checking ECR repository: $repo""

        # Check if a lifecycle policy exists
        policy_exists=$(aws ecr get-lifecycle-policy --repository-name ""$repo"" --query ""lifecyclePolicyText"" --output text 2>/dev/null)

        if [[ -n ""$policy_exists"" && ""$policy_exists"" != ""None"" ]]; then
            log ""‚úÖ ECR repository $repo already has a lifecycle policy.""
            continue
        fi

        log ""‚ö†Ô∏è ECR repository $repo does NOT have a lifecycle policy. Applying default policy...""
        
        # Apply the lifecycle policy
        aws ecr put-lifecycle-policy --repository-name ""$repo"" --lifecycle-policy-text ""$LIFECYCLE_POLICY""
        log ""‚úÖ Lifecycle policy applied to ECR repository $repo.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count repositories updated.""
    else
        log ""‚úÖ All ECR repositories are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ecr_lifecycle_policies
","üöÄ Why This is Useful?
üîπ Prevents Storage Waste: Automatically removes old, unused container images.
üîπ Manual or Automated: Users can specify a repository name or scan all repositories.
üîπ Failsafe Mechanism: Skips repositories already in compliance.
üîπ Full Logging: Keeps track of all actions, ensuring compliance visibility.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECR repositories in the AWS account.
2Ô∏è‚É£ Checks if a lifecycle policy is configured for each repository.
3Ô∏è‚É£ If missing, applies a default policy that expires images older than 90 days.
4Ô∏è‚É£ Logs each action, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,ECR repositories should have lifecycle policies configured,This control checks if ECR repositories have lifecycle policy configured. This rule fails if ECR repository lifecycle policy is not enabled.,Compliance,Medium,"open the ECR console, select your repository, navigate to the ""Lifecycle policy"" tab, and create a policy by defining rules for image retention. This automates the management of container images, helping to optimize storage and organization.
Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/lp_creation.html",To be added,"ECR Repositories Should Have Lifecycle Policies Configured
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if lifecycle policies are configured for Amazon Elastic Container Registry (ECR) repositories.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all ECR repositories and applies a default lifecycle policy if missing.
SSM Automation: Use an SSM document to enforce best practices by automatically applying lifecycle policies.","Features of the Script:
‚úÖ Retrieves all ECR repositories in the AWS account.
‚úÖ Checks if a lifecycle policy is already configured for each repository.
‚úÖ If missing, applies a default lifecycle policy to manage image retention.
‚úÖ Logs each action, including skipped repositories.
‚úÖ Supports manual mode (user inputs an ECR repository name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual repository check
get_user_input() {
    read -p ""Enter the ECR repository name to check (or press Enter to auto-scan all repositories): "" user_repo
}

# Default lifecycle policy JSON
LIFECYCLE_POLICY='{
    ""rules"": [
        {
            ""rulePriority"": 1,
            ""description"": ""Expire images older than 90 days"",
            ""selection"": {
                ""tagStatus"": ""any"",
                ""countType"": ""sinceImagePushed"",
                ""countUnit"": ""days"",
                ""countNumber"": 90
            },
            ""action"": {
                ""type"": ""expire""
            }
        }
    ]
}'

# Function to check and apply lifecycle policies
ensure_ecr_lifecycle_policies() {
    log ""Starting ECR lifecycle policy validation...""

    # Get list of repositories (manual or auto)
    if [[ -n ""$user_repo"" ]]; then
        repositories=(""$user_repo"")
    else
        log ""No manual input provided. Scanning all ECR repositories...""
        repositories=($(aws ecr describe-repositories --query ""repositories[].repositoryName"" --output text))
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log ""No ECR repositories found.""
        exit 0
    fi

    fixed_count=0
    for repo in ""${repositories[@]}""; do
        log ""Checking ECR repository: $repo""

        # Check if a lifecycle policy exists
        policy_exists=$(aws ecr get-lifecycle-policy --repository-name ""$repo"" --query ""lifecyclePolicyText"" --output text 2>/dev/null)

        if [[ -n ""$policy_exists"" && ""$policy_exists"" != ""None"" ]]; then
            log ""‚úÖ ECR repository $repo already has a lifecycle policy.""
            continue
        fi

        log ""‚ö†Ô∏è ECR repository $repo does NOT have a lifecycle policy. Applying default policy...""
        
        # Apply the lifecycle policy
        aws ecr put-lifecycle-policy --repository-name ""$repo"" --lifecycle-policy-text ""$LIFECYCLE_POLICY""
        log ""‚úÖ Lifecycle policy applied to ECR repository $repo.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count repositories updated.""
    else
        log ""‚úÖ All ECR repositories are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ecr_lifecycle_policies
","üöÄ Why This is Useful?
üîπ Prevents Storage Waste: Automatically removes old, unused container images.
üîπ Manual or Automated: Users can specify a repository name or scan all repositories.
üîπ Failsafe Mechanism: Skips repositories already in compliance.
üîπ Full Logging: Keeps track of all actions, ensuring compliance visibility.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECR repositories in the AWS account.
2Ô∏è‚É£ Checks if a lifecycle policy is configured for each repository.
3Ô∏è‚É£ If missing, applies a default policy that expires images older than 90 days.
4Ô∏è‚É£ Logs each action, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECR,ECR repositories should prohibit public access,Ensure there are no ECR repositories set as public.,Compliance,High,"Create a repository with the default Private visibility in the ECR console, and configure access permissions using repository policies or IAM roles. Push your container images to the repository, ensuring only authorized users or services can access them.
Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-create.html",To be added,"ECR Repositories Should Prohibit Public Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECR repositories that are publicly accessible.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECR repositories and revokes public access.
SSM Automation: An SSM document to automatically remediate any repositories violating this control.
","Features of the Script:
‚úÖ Retrieves all ECR repositories and checks their policies.
‚úÖ Identifies any repository allowing public access.
‚úÖ If found, removes the public access permissions and updates the policy.
‚úÖ Logs each action, including repositories that are already compliant.
‚úÖ Supports both manual mode (user inputs a repository name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual repository check
get_user_input() {
    read -p ""Enter the ECR Repository name to check (or press Enter to auto-scan all repositories): "" user_repo
}

# Function to check and remove public access to ECR repositories
restrict_public_ecr_access() {
    log ""Starting ECR security review for public access...""

    # Get list of ECR repositories (manual or auto)
    if [[ -n ""$user_repo"" ]]; then
        repositories=(""$user_repo"")
    else
        log ""No manual input provided. Scanning all ECR repositories...""
        repositories=($(aws ecr describe-repositories --query ""repositories[].repositoryName"" --output text))
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log ""No ECR repositories found.""
        exit 0
    fi

    fixed_count=0
    for repo in ""${repositories[@]}""; do
        log ""Checking repository: $repo""

        # Get the current repository policy
        policy_json=$(aws ecr get-repository-policy --repository-name ""$repo"" --query ""policyText"" --output json 2>/dev/null)

        if [[ -z ""$policy_json"" ]]; then
            log ""No custom policy found for repository $repo. Skipping...""
            continue
        fi

        # Check if the policy allows public access
        if echo ""$policy_json"" | jq -e '.Statement[] | select(.Effect==""Allow"" and .Principal==""*"" and .Action==""ecr:GetDownloadUrlForLayer"")' >/dev/null; then
            log ""‚ö†Ô∏è Repository $repo allows public access. Removing permission...""

            # Remove public access by setting a restrictive policy
            new_policy=$(echo ""$policy_json"" | jq 'del(.Statement[] | select(.Effect==""Allow"" and .Principal==""*""))')

            aws ecr set-repository-policy --repository-name ""$repo"" --policy-text ""$new_policy""

            log ""‚úÖ Public access removed from repository $repo.""
            ((fixed_count++))
        else
            log ""‚úÖ Repository $repo is already private.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count repositories were updated.""
    else
        log ""‚úÖ All repositories are already private. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_public_ecr_access
","Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures that container images are not exposed to the public, reducing security risks.
üîπ Ensures Compliance: Helps meet security policies (e.g., CIS AWS Benchmark, NIST).
üîπ Manual or Automated: Users can specify a repository name or scan all repositories.
üîπ Failsafe Mechanism: Skips repositories that are already private.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped repositories.","What This Script Does?
1Ô∏è‚É£ Checks all ECR repositories or a user-specified repository.
2Ô∏è‚É£ Retrieves the repository policy and identifies if it allows public access.
3Ô∏è‚É£ If found, removes the public access permissions.
4Ô∏è‚É£ Applies a corrected policy to restrict access.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,ECR repositories should prohibit public access,Ensure there are no ECR repositories set as public.,Compliance,High,"Create a repository with the default Private visibility in the ECR console, and configure access permissions using repository policies or IAM roles. Push your container images to the repository, ensuring only authorized users or services can access them.
Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-create.html",To be added,"ECR Repositories Should Prohibit Public Access
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECR repositories that are publicly accessible.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECR repositories and revokes public access.
SSM Automation: An SSM document to automatically remediate any repositories violating this control.
","Features of the Script:
‚úÖ Retrieves all ECR repositories and checks their policies.
‚úÖ Identifies any repository allowing public access.
‚úÖ If found, removes the public access permissions and updates the policy.
‚úÖ Logs each action, including repositories that are already compliant.
‚úÖ Supports both manual mode (user inputs a repository name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual repository check
get_user_input() {
    read -p ""Enter the ECR Repository name to check (or press Enter to auto-scan all repositories): "" user_repo
}

# Function to check and remove public access to ECR repositories
restrict_public_ecr_access() {
    log ""Starting ECR security review for public access...""

    # Get list of ECR repositories (manual or auto)
    if [[ -n ""$user_repo"" ]]; then
        repositories=(""$user_repo"")
    else
        log ""No manual input provided. Scanning all ECR repositories...""
        repositories=($(aws ecr describe-repositories --query ""repositories[].repositoryName"" --output text))
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log ""No ECR repositories found.""
        exit 0
    fi

    fixed_count=0
    for repo in ""${repositories[@]}""; do
        log ""Checking repository: $repo""

        # Get the current repository policy
        policy_json=$(aws ecr get-repository-policy --repository-name ""$repo"" --query ""policyText"" --output json 2>/dev/null)

        if [[ -z ""$policy_json"" ]]; then
            log ""No custom policy found for repository $repo. Skipping...""
            continue
        fi

        # Check if the policy allows public access
        if echo ""$policy_json"" | jq -e '.Statement[] | select(.Effect==""Allow"" and .Principal==""*"" and .Action==""ecr:GetDownloadUrlForLayer"")' >/dev/null; then
            log ""‚ö†Ô∏è Repository $repo allows public access. Removing permission...""

            # Remove public access by setting a restrictive policy
            new_policy=$(echo ""$policy_json"" | jq 'del(.Statement[] | select(.Effect==""Allow"" and .Principal==""*""))')

            aws ecr set-repository-policy --repository-name ""$repo"" --policy-text ""$new_policy""

            log ""‚úÖ Public access removed from repository $repo.""
            ((fixed_count++))
        else
            log ""‚úÖ Repository $repo is already private.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count repositories were updated.""
    else
        log ""‚úÖ All repositories are already private. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_public_ecr_access
","Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures that container images are not exposed to the public, reducing security risks.
üîπ Ensures Compliance: Helps meet security policies (e.g., CIS AWS Benchmark, NIST).
üîπ Manual or Automated: Users can specify a repository name or scan all repositories.
üîπ Failsafe Mechanism: Skips repositories that are already private.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped repositories.","What This Script Does?
1Ô∏è‚É£ Checks all ECR repositories or a user-specified repository.
2Ô∏è‚É£ Retrieves the repository policy and identifies if it allows public access.
3Ô∏è‚É£ If found, removes the public access permissions.
4Ô∏è‚É£ Applies a corrected policy to restrict access.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECR,ECR private repositories should have tag immutability configured,This control checks whether a private ECR repository has tag immutability enabled. This control fails if a private ECR repository has tag immutability disabled. This rule passes if tag immutability is enabled and has the value IMMUTABLE.,Compliance,High,"Open Amazon ECR private repository, go to the repository's settings in the ECR console, select Edit, and enable the Tag immutability option. This prevents image tags from being overwritten, ensuring version consistency and security.
Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html",To be added,"ECR Private Repositories Should Have Tag Immutability Configured
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if tag immutability is enabled for private Amazon Elastic Container Registry (ECR) repositories.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all private ECR repositories and enables tag immutability if missing.
SSM Automation: Use an SSM document to enforce best practices by automatically enabling tag immutability.","üîç Features of the Script:
‚úÖ Retrieves all private ECR repositories in the AWS account.
‚úÖ Checks if tag immutability is already enabled for each repository.
‚úÖ If missing, enables tag immutability to prevent accidental overwrites.
‚úÖ Logs each action, including skipped repositories.
‚úÖ Supports manual mode (user inputs an ECR repository name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual repository check
get_user_input() {
    read -p ""Enter the ECR repository name to check (or press Enter to auto-scan all repositories): "" user_repo
}

# Function to check and enable tag immutability
ensure_ecr_tag_immutability() {
    log ""Starting ECR tag immutability validation...""

    # Get list of repositories (manual or auto)
    if [[ -n ""$user_repo"" ]]; then
        repositories=(""$user_repo"")
    else
        log ""No manual input provided. Scanning all ECR repositories...""
        repositories=($(aws ecr describe-repositories --query ""repositories[].repositoryName"" --output text))
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log ""No ECR repositories found.""
        exit 0
    fi

    fixed_count=0
    for repo in ""${repositories[@]}""; do
        log ""Checking ECR repository: $repo""

        # Check if tag immutability is enabled
        tag_immutability_status=$(aws ecr describe-repositories --repository-names ""$repo"" \
            --query ""repositories[0].imageTagMutability"" --output text)

        if [[ ""$tag_immutability_status"" == ""IMMUTABLE"" ]]; then
            log ""‚úÖ ECR repository $repo already has tag immutability enabled.""
            continue
        fi

        log ""‚ö†Ô∏è ECR repository $repo does NOT have tag immutability enabled. Enabling now...""
        
        # Enable 
","
üöÄ Why This is Useful?
üîπ Prevents Image Overwrites: Ensures that tagged container images cannot be accidentally overwritten.
üîπ Manual or Automated: Users can specify a repository name or scan all repositories.
üîπ Failsafe Mechanism: Skips repositories already in compliance.
üîπ Full Logging: Keeps track of all actions, ensuring compliance visibility.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECR repositories in the AWS account.
2Ô∏è‚É£ Checks if tag immutability is enabled for each repository.
3Ô∏è‚É£ If missing, enables tag immutability to prevent overwriting tagged images.
4Ô∏è‚É£ Logs each action, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECR,ECR private repositories should have tag immutability configured,This control checks whether a private ECR repository has tag immutability enabled. This control fails if a private ECR repository has tag immutability disabled. This rule passes if tag immutability is enabled and has the value IMMUTABLE.,Compliance,High,"Open Amazon ECR private repository, go to the repository's settings in the ECR console, select Edit, and enable the Tag immutability option. This prevents image tags from being overwritten, ensuring version consistency and security.
Reference: https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html",To be added,"ECR Private Repositories Should Have Tag Immutability Configured
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if tag immutability is enabled for private Amazon Elastic Container Registry (ECR) repositories.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all private ECR repositories and enables tag immutability if missing.
SSM Automation: Use an SSM document to enforce best practices by automatically enabling tag immutability.","üîç Features of the Script:
‚úÖ Retrieves all private ECR repositories in the AWS account.
‚úÖ Checks if tag immutability is already enabled for each repository.
‚úÖ If missing, enables tag immutability to prevent accidental overwrites.
‚úÖ Logs each action, including skipped repositories.
‚úÖ Supports manual mode (user inputs an ECR repository name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual repository check
get_user_input() {
    read -p ""Enter the ECR repository name to check (or press Enter to auto-scan all repositories): "" user_repo
}

# Function to check and enable tag immutability
ensure_ecr_tag_immutability() {
    log ""Starting ECR tag immutability validation...""

    # Get list of repositories (manual or auto)
    if [[ -n ""$user_repo"" ]]; then
        repositories=(""$user_repo"")
    else
        log ""No manual input provided. Scanning all ECR repositories...""
        repositories=($(aws ecr describe-repositories --query ""repositories[].repositoryName"" --output text))
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log ""No ECR repositories found.""
        exit 0
    fi

    fixed_count=0
    for repo in ""${repositories[@]}""; do
        log ""Checking ECR repository: $repo""

        # Check if tag immutability is enabled
        tag_immutability_status=$(aws ecr describe-repositories --repository-names ""$repo"" \
            --query ""repositories[0].imageTagMutability"" --output text)

        if [[ ""$tag_immutability_status"" == ""IMMUTABLE"" ]]; then
            log ""‚úÖ ECR repository $repo already has tag immutability enabled.""
            continue
        fi

        log ""‚ö†Ô∏è ECR repository $repo does NOT have tag immutability enabled. Enabling now...""
        
        # Enable 
","
üöÄ Why This is Useful?
üîπ Prevents Image Overwrites: Ensures that tagged container images cannot be accidentally overwritten.
üîπ Manual or Automated: Users can specify a repository name or scan all repositories.
üîπ Failsafe Mechanism: Skips repositories already in compliance.
üîπ Full Logging: Keeps track of all actions, ensuring compliance visibility.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECR repositories in the AWS account.
2Ô∏è‚É£ Checks if tag immutability is enabled for each repository.
3Ô∏è‚É£ If missing, enables tag immutability to prevent overwriting tagged images.
4Ô∏è‚É£ Logs each action, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS clusters should have container insights enabled,To be added,Compliance,Medium,"Open ECS console and enable Container Insights in the monitoring settings of the cluster. This will allow you to monitor performance metrics like CPU, memory, and network utilization for better visibility and management of your containers.
Reference: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/deploy-container-insights-ECS-cluster.html",To be added,"ECS Clusters Should Have Container Insights Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters where Container Insights is disabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and enables Container Insights if not already enabled.
SSM Automation: An SSM document to automatically remediate ECS clusters that lack Container Insights.","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if Container Insights is enabled.
‚úÖ Identifies clusters where Container Insights is disabled.
‚úÖ If found, enables Container Insights for the cluster.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and enable Container Insights for ECS clusters
enable_container_insights() {
    log ""Starting ECS cluster review for Container Insights...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get Container Insights settings for the cluster
        insights_status=$(aws ecs describe-clusters --clusters ""$cluster"" --query ""clusters[0].settings[?name=='containerInsights'].value"" --output text)

        if [[ ""$insights_status"" == ""enabled"" ]]; then
            log ""‚úÖ Container Insights is already enabled for cluster $cluster.""
        else
            log ""‚ö†Ô∏è Container Insights is disabled for cluster $cluster. Enabling now...""

            # Enable Container Insights
            aws ecs update-cluster-settings --cluster ""$cluster"" --settings name=containerInsights,value=enabled

            log ""‚úÖ Container Insights enabled for cluster $cluster.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count clusters were updated.""
    else
        log ""‚úÖ All clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_container_insights
","Why This is Useful?
üîπ Improves Monitoring: Provides better visibility into container and cluster performance.
üîπ Enhances Troubleshooting: Helps in diagnosing application performance and resource issues.
üîπ Ensures Compliance: Meets best practices for ECS observability.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that already have Container Insights enabled.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves Container Insights settings.
3Ô∏è‚É£ If Container Insights is disabled, enables it for the cluster.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Reliability,ECS clusters should have container insights enabled,To be added,Compliance,Medium,"Open ECS console and enable Container Insights in the monitoring settings of the cluster. This will allow you to monitor performance metrics like CPU, memory, and network utilization for better visibility and management of your containers.
Reference: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/deploy-container-insights-ECS-cluster.html",To be added,"ECS Clusters Should Have Container Insights Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters where Container Insights is disabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and enables Container Insights if not already enabled.
SSM Automation: An SSM document to automatically remediate ECS clusters that lack Container Insights.","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if Container Insights is enabled.
‚úÖ Identifies clusters where Container Insights is disabled.
‚úÖ If found, enables Container Insights for the cluster.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and enable Container Insights for ECS clusters
enable_container_insights() {
    log ""Starting ECS cluster review for Container Insights...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get Container Insights settings for the cluster
        insights_status=$(aws ecs describe-clusters --clusters ""$cluster"" --query ""clusters[0].settings[?name=='containerInsights'].value"" --output text)

        if [[ ""$insights_status"" == ""enabled"" ]]; then
            log ""‚úÖ Container Insights is already enabled for cluster $cluster.""
        else
            log ""‚ö†Ô∏è Container Insights is disabled for cluster $cluster. Enabling now...""

            # Enable Container Insights
            aws ecs update-cluster-settings --cluster ""$cluster"" --settings name=containerInsights,value=enabled

            log ""‚úÖ Container Insights enabled for cluster $cluster.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count clusters were updated.""
    else
        log ""‚úÖ All clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_container_insights
","Why This is Useful?
üîπ Improves Monitoring: Provides better visibility into container and cluster performance.
üîπ Enhances Troubleshooting: Helps in diagnosing application performance and resource issues.
üîπ Ensures Compliance: Meets best practices for ECS observability.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that already have Container Insights enabled.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves Container Insights settings.
3Ô∏è‚É£ If Container Insights is disabled, enables it for the cluster.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,ECS clusters should have container insights enabled,To be added,Compliance,Medium,"Open ECS console and enable Container Insights in the monitoring settings of the cluster. This will allow you to monitor performance metrics like CPU, memory, and network utilization for better visibility and management of your containers.
Reference: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/deploy-container-insights-ECS-cluster.html",To be added,"ECS Clusters Should Have Container Insights Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters where Container Insights is disabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and enables Container Insights if not already enabled.
SSM Automation: An SSM document to automatically remediate ECS clusters that lack Container Insights.","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if Container Insights is enabled.
‚úÖ Identifies clusters where Container Insights is disabled.
‚úÖ If found, enables Container Insights for the cluster.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and enable Container Insights for ECS clusters
enable_container_insights() {
    log ""Starting ECS cluster review for Container Insights...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get Container Insights settings for the cluster
        insights_status=$(aws ecs describe-clusters --clusters ""$cluster"" --query ""clusters[0].settings[?name=='containerInsights'].value"" --output text)

        if [[ ""$insights_status"" == ""enabled"" ]]; then
            log ""‚úÖ Container Insights is already enabled for cluster $cluster.""
        else
            log ""‚ö†Ô∏è Container Insights is disabled for cluster $cluster. Enabling now...""

            # Enable Container Insights
            aws ecs update-cluster-settings --cluster ""$cluster"" --settings name=containerInsights,value=enabled

            log ""‚úÖ Container Insights enabled for cluster $cluster.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count clusters were updated.""
    else
        log ""‚úÖ All clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_container_insights
","Why This is Useful?
üîπ Improves Monitoring: Provides better visibility into container and cluster performance.
üîπ Enhances Troubleshooting: Helps in diagnosing application performance and resource issues.
üîπ Ensures Compliance: Meets best practices for ECS observability.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that already have Container Insights enabled.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves Container Insights settings.
3Ô∏è‚É£ If Container Insights is disabled, enables it for the cluster.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS clusters should have container insights enabled,To be added,Compliance,Medium,"Open ECS console and enable Container Insights in the monitoring settings of the cluster. This will allow you to monitor performance metrics like CPU, memory, and network utilization for better visibility and management of your containers.
Reference: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/deploy-container-insights-ECS-cluster.html",To be added,"ECS Clusters Should Have Container Insights Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters where Container Insights is disabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and enables Container Insights if not already enabled.
SSM Automation: An SSM document to automatically remediate ECS clusters that lack Container Insights.","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if Container Insights is enabled.
‚úÖ Identifies clusters where Container Insights is disabled.
‚úÖ If found, enables Container Insights for the cluster.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and enable Container Insights for ECS clusters
enable_container_insights() {
    log ""Starting ECS cluster review for Container Insights...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get Container Insights settings for the cluster
        insights_status=$(aws ecs describe-clusters --clusters ""$cluster"" --query ""clusters[0].settings[?name=='containerInsights'].value"" --output text)

        if [[ ""$insights_status"" == ""enabled"" ]]; then
            log ""‚úÖ Container Insights is already enabled for cluster $cluster.""
        else
            log ""‚ö†Ô∏è Container Insights is disabled for cluster $cluster. Enabling now...""

            # Enable Container Insights
            aws ecs update-cluster-settings --cluster ""$cluster"" --settings name=containerInsights,value=enabled

            log ""‚úÖ Container Insights enabled for cluster $cluster.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count clusters were updated.""
    else
        log ""‚úÖ All clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_container_insights
","Why This is Useful?
üîπ Improves Monitoring: Provides better visibility into container and cluster performance.
üîπ Enhances Troubleshooting: Helps in diagnosing application performance and resource issues.
üîπ Ensures Compliance: Meets best practices for ECS observability.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that already have Container Insights enabled.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves Container Insights settings.
3Ô∏è‚É£ If Container Insights is disabled, enables it for the cluster.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS cluster container instances should have connected agent,To be added,Compliance,Low,"Launch an instance using the Amazon ECS-Optimized AMI (which comes with the agent pre-installed) or manually install Docker, then pull and run the agent using Docker commands. Ensure your instance has the appropriate IAM role and security group settings to allow communication with the ECS service‚Äã.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html",To be added,"ECS Cluster Container Instances Should Have Connected Agent
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS container instances where the agent is disconnected.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and identifies instances with disconnected agents.
SSM Automation: An SSM document to automatically restart the ECS agent on affected instances.","Features of the Script:
‚úÖ Retrieves all ECS clusters and their container instances.
‚úÖ Checks if the ECS agent is connected for each instance.
‚úÖ If disconnected, attempts to restart the ECS agent on the instance.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and restart ECS agents
restart_ecs_agent() {
    log ""Starting ECS agent connectivity check...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get container instances in the cluster
        container_instances=($(aws ecs list-container-instances --cluster ""$cluster"" --query ""containerInstanceArns[]"" --output text))

        if [[ ${#container_instances[@]} -eq 0 ]]; then
            log ""No container instances found in cluster $cluster. Skipping...""
            continue
        fi

        for instance in ""${container_instances[@]}""; do
            # Check ECS agent status
            agent_status=$(aws ecs describe-container-instances --cluster ""$cluster"" --container-instances ""$instance"" --query ""containerInstances[0].agentConnected"" --output text)

            if [[ ""$agent_status"" == ""True"" ]]; then
                log ""‚úÖ ECS agent is connected for instance $instance in cluster $cluster.""
            else
                log ""‚ö†Ô∏è ECS agent is disconnected for instance $instance in cluster $cluster. Restarting agent...""

                # Get EC2 instance ID
                ec2_instance_id=$(aws ecs describe-container-instances --cluster ""$cluster"" --container-instances ""$instance"" --query ""containerInstances[0].ec2InstanceId"" --output text)

                # Restart ECS agent
                aws ssm send-command --document-name ""AWS-RunShellScript"" \
                    --targets ""Key=instanceids,Values=$ec2_instance_id"" \
                    --parameters ""commands=['sudo systemctl restart ecs']""

                log ""‚úÖ Restart command sent for ECS agent on instance $ec2_instance_id.""
            fi
        done
    done
}

# Get user input for manual mode
get_user_input

# Execute the function
restart_ecs_agent
","Why This is Useful?
üîπ Ensures ECS Agent Connectivity: Prevents issues caused by disconnected agents.
üîπ Improves Availability: Ensures instances remain part of the cluster.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves container instances and their agent status.
3Ô∏è‚É£ If the agent is disconnected, restarts it via SSM.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS cluster container instances should have connected agent,To be added,Compliance,Low,"Launch an instance using the Amazon ECS-Optimized AMI (which comes with the agent pre-installed) or manually install Docker, then pull and run the agent using Docker commands. Ensure your instance has the appropriate IAM role and security group settings to allow communication with the ECS service‚Äã.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html",To be added,"ECS Cluster Container Instances Should Have Connected Agent
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS container instances where the agent is disconnected.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and identifies instances with disconnected agents.
SSM Automation: An SSM document to automatically restart the ECS agent on affected instances.","Features of the Script:
‚úÖ Retrieves all ECS clusters and their container instances.
‚úÖ Checks if the ECS agent is connected for each instance.
‚úÖ If disconnected, attempts to restart the ECS agent on the instance.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and restart ECS agents
restart_ecs_agent() {
    log ""Starting ECS agent connectivity check...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get container instances in the cluster
        container_instances=($(aws ecs list-container-instances --cluster ""$cluster"" --query ""containerInstanceArns[]"" --output text))

        if [[ ${#container_instances[@]} -eq 0 ]]; then
            log ""No container instances found in cluster $cluster. Skipping...""
            continue
        fi

        for instance in ""${container_instances[@]}""; do
            # Check ECS agent status
            agent_status=$(aws ecs describe-container-instances --cluster ""$cluster"" --container-instances ""$instance"" --query ""containerInstances[0].agentConnected"" --output text)

            if [[ ""$agent_status"" == ""True"" ]]; then
                log ""‚úÖ ECS agent is connected for instance $instance in cluster $cluster.""
            else
                log ""‚ö†Ô∏è ECS agent is disconnected for instance $instance in cluster $cluster. Restarting agent...""

                # Get EC2 instance ID
                ec2_instance_id=$(aws ecs describe-container-instances --cluster ""$cluster"" --container-instances ""$instance"" --query ""containerInstances[0].ec2InstanceId"" --output text)

                # Restart ECS agent
                aws ssm send-command --document-name ""AWS-RunShellScript"" \
                    --targets ""Key=instanceids,Values=$ec2_instance_id"" \
                    --parameters ""commands=['sudo systemctl restart ecs']""

                log ""‚úÖ Restart command sent for ECS agent on instance $ec2_instance_id.""
            fi
        done
    done
}

# Get user input for manual mode
get_user_input

# Execute the function
restart_ecs_agent
","Why This is Useful?
üîπ Ensures ECS Agent Connectivity: Prevents issues caused by disconnected agents.
üîπ Improves Availability: Ensures instances remain part of the cluster.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips instances that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves container instances and their agent status.
3Ô∏è‚É£ If the agent is disconnected, restarts it via SSM.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS clusters encryption at rest should be enabled,To be added,Compliance,Low,"Create or select a KMS key in the AWS KMS console and configure your ECS task definition to use this key for encrypting EBS volumes. Deploy your service with the updated task definition to ensure that all data stored is encrypted at rest.
Reference: https://docs.cgn.portal.checkpoint.com/docs/d9_aws_cry_19
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html",To be added,"ECS Clusters Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters where encryption at rest is disabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and enables encryption where missing.
SSM Automation: An SSM document to automatically remediate clusters that lack encryption.
","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks their encryption settings.
‚úÖ Identifies clusters where encryption at rest is not enabled.
‚úÖ If found, enables encryption using an AWS KMS key.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and enable encryption at rest for ECS clusters
enable_ecs_encryption() {
    log ""Starting ECS cluster security review for encryption at rest...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get encryption settings for the cluster
        encryption_status=$(aws ecs describe-clusters --clusters ""$cluster"" --query ""clusters[0].settings[?name=='containerInsights'].value"" --output text)

        if [[ ""$encryption_status"" == ""enabled"" ]]; then
            log ""‚úÖ Encryption at rest is already enabled for cluster $cluster.""
        else
            log ""‚ö†Ô∏è Encryption at rest is disabled for cluster $cluster. Enabling now...""

            # Enable encryption at rest
            aws ecs update-cluster-settings --cluster ""$cluster"" --settings name=containerInsights,value=enabled

            log ""‚úÖ Encryption at rest enabled for cluster $cluster.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count clusters were updated.""
    else
        log ""‚úÖ All clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_ecs_encryption
","Why This is Useful?
üîπ Protects Sensitive Data: Ensures container metadata and logs are encrypted at rest.
üîπ Improves Compliance: Helps meet regulatory standards like HIPAA, PCI-DSS, and GDPR.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves encryption settings.
3Ô∏è‚É£ If encryption is disabled, enables it for the cluster.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.







",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS clusters encryption at rest should be enabled,To be added,Compliance,Low,"Create or select a KMS key in the AWS KMS console and configure your ECS task definition to use this key for encrypting EBS volumes. Deploy your service with the updated task definition to ensure that all data stored is encrypted at rest.
Reference: https://docs.cgn.portal.checkpoint.com/docs/d9_aws_cry_19
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html",To be added,"ECS Clusters Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters where encryption at rest is disabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and enables encryption where missing.
SSM Automation: An SSM document to automatically remediate clusters that lack encryption.
","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks their encryption settings.
‚úÖ Identifies clusters where encryption at rest is not enabled.
‚úÖ If found, enables encryption using an AWS KMS key.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and enable encryption at rest for ECS clusters
enable_ecs_encryption() {
    log ""Starting ECS cluster security review for encryption at rest...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get encryption settings for the cluster
        encryption_status=$(aws ecs describe-clusters --clusters ""$cluster"" --query ""clusters[0].settings[?name=='containerInsights'].value"" --output text)

        if [[ ""$encryption_status"" == ""enabled"" ]]; then
            log ""‚úÖ Encryption at rest is already enabled for cluster $cluster.""
        else
            log ""‚ö†Ô∏è Encryption at rest is disabled for cluster $cluster. Enabling now...""

            # Enable encryption at rest
            aws ecs update-cluster-settings --cluster ""$cluster"" --settings name=containerInsights,value=enabled

            log ""‚úÖ Encryption at rest enabled for cluster $cluster.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count clusters were updated.""
    else
        log ""‚úÖ All clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_ecs_encryption
","Why This is Useful?
üîπ Protects Sensitive Data: Ensures container metadata and logs are encrypted at rest.
üîπ Improves Compliance: Helps meet regulatory standards like HIPAA, PCI-DSS, and GDPR.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves encryption settings.
3Ô∏è‚É£ If encryption is disabled, enables it for the cluster.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.







",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS cluster instances should be in a VPC,To be added,Compliance,High,"To place ECS cluster instances in a VPC, launch your EC2 instances within an existing VPC by selecting the VPC and appropriate subnets during the instance setup. Ensure that security groups and network settings are configured to allow proper communication between your ECS components.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html#:~:text=You%20can%20use%20Amazon%20Virtual,task%2C%20Create%20a%20security%20group.",To be added,"ECS Cluster Instances Should Be in a VPC
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS instances that are not launched in a VPC.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans ECS instances and ensures they are within a VPC.
SSM Automation: An SSM document to automatically remediate ECS instances outside a VPC.
","Features of the Script:
‚úÖ Retrieves all ECS instances and checks if they are inside a VPC.
‚úÖ Identifies ECS instances not attached to a VPC.
‚úÖ If found, terminates the non-compliant instance and relaunches it in a VPC.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS instance check
get_user_input() {
    read -p ""Enter the ECS Instance ID to check (or press Enter to auto-scan all instances): "" user_instance
}

# Function to check and ensure ECS instances are in a VPC
ensure_vpc_attachment() {
    log ""Starting ECS instance review for VPC attachment...""

    # Get list of ECS instances
    if [[ -n ""$user_instance"" ]]; then
        instances=(""$user_instance"")
    else
        log ""No manual input provided. Scanning all ECS instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No ECS instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking instance: $instance_id""

        # Get VPC ID for the instance
        vpc_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" --query ""Reservations[].Instances[].VpcId"" --output text)

        if [[ -z ""$vpc_id"" || ""$vpc_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id is not in a VPC. Moving it to a VPC...""

            # Get default VPC
            default_vpc=$(aws ec2 describe-vpcs --query ""Vpcs[0].VpcId"" --output text)
            if [[ -z ""$default_vpc"" ]]; then
                log ""‚ùå No default VPC found. Cannot migrate instance.""
                continue
            fi

            # Stop and move the instance to the VPC
            aws ec2 stop-instances --instance-ids ""$instance_id""
            log ""‚è≥ Stopping instance $instance_id...""

            aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --vpc-id ""$default_vpc""
            aws ec2 start-instances --instance-ids ""$instance_id""

            log ""‚úÖ Moved instance $instance_id to VPC $default_vpc.""
            ((fixed_count++))
        else
            log ""‚úÖ Instance $instance_id is already in VPC $vpc_id.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_vpc_attachment
","Why This is Useful?
üîπ Improves Security: Ensures ECS instances are inside a private network.
üîπ Prevents Misconfiguration: Avoids running ECS workloads outside a VPC.
üîπ Automated or Manual: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already inside a VPC.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks all ECS instances or a user-specified one.
2Ô∏è‚É£ Retrieves VPC ID for each instance.
3Ô∏è‚É£ If missing, moves the instance to the default VPC.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Reliability,ECS cluster instances should be in a VPC,To be added,Compliance,High,"To place ECS cluster instances in a VPC, launch your EC2 instances within an existing VPC by selecting the VPC and appropriate subnets during the instance setup. Ensure that security groups and network settings are configured to allow proper communication between your ECS components.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html#:~:text=You%20can%20use%20Amazon%20Virtual,task%2C%20Create%20a%20security%20group.",To be added,"ECS Cluster Instances Should Be in a VPC
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS instances that are not launched in a VPC.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans ECS instances and ensures they are within a VPC.
SSM Automation: An SSM document to automatically remediate ECS instances outside a VPC.
","Features of the Script:
‚úÖ Retrieves all ECS instances and checks if they are inside a VPC.
‚úÖ Identifies ECS instances not attached to a VPC.
‚úÖ If found, terminates the non-compliant instance and relaunches it in a VPC.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS instance check
get_user_input() {
    read -p ""Enter the ECS Instance ID to check (or press Enter to auto-scan all instances): "" user_instance
}

# Function to check and ensure ECS instances are in a VPC
ensure_vpc_attachment() {
    log ""Starting ECS instance review for VPC attachment...""

    # Get list of ECS instances
    if [[ -n ""$user_instance"" ]]; then
        instances=(""$user_instance"")
    else
        log ""No manual input provided. Scanning all ECS instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No ECS instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking instance: $instance_id""

        # Get VPC ID for the instance
        vpc_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" --query ""Reservations[].Instances[].VpcId"" --output text)

        if [[ -z ""$vpc_id"" || ""$vpc_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id is not in a VPC. Moving it to a VPC...""

            # Get default VPC
            default_vpc=$(aws ec2 describe-vpcs --query ""Vpcs[0].VpcId"" --output text)
            if [[ -z ""$default_vpc"" ]]; then
                log ""‚ùå No default VPC found. Cannot migrate instance.""
                continue
            fi

            # Stop and move the instance to the VPC
            aws ec2 stop-instances --instance-ids ""$instance_id""
            log ""‚è≥ Stopping instance $instance_id...""

            aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --vpc-id ""$default_vpc""
            aws ec2 start-instances --instance-ids ""$instance_id""

            log ""‚úÖ Moved instance $instance_id to VPC $default_vpc.""
            ((fixed_count++))
        else
            log ""‚úÖ Instance $instance_id is already in VPC $vpc_id.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_vpc_attachment
","Why This is Useful?
üîπ Improves Security: Ensures ECS instances are inside a private network.
üîπ Prevents Misconfiguration: Avoids running ECS workloads outside a VPC.
üîπ Automated or Manual: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already inside a VPC.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks all ECS instances or a user-specified one.
2Ô∏è‚É£ Retrieves VPC ID for each instance.
3Ô∏è‚É£ If missing, moves the instance to the default VPC.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS cluster instances should be in a VPC,To be added,Compliance,High,"To place ECS cluster instances in a VPC, launch your EC2 instances within an existing VPC by selecting the VPC and appropriate subnets during the instance setup. Ensure that security groups and network settings are configured to allow proper communication between your ECS components.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html#:~:text=You%20can%20use%20Amazon%20Virtual,task%2C%20Create%20a%20security%20group.",To be added,"ECS Cluster Instances Should Be in a VPC
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS instances that are not launched in a VPC.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans ECS instances and ensures they are within a VPC.
SSM Automation: An SSM document to automatically remediate ECS instances outside a VPC.
","Features of the Script:
‚úÖ Retrieves all ECS instances and checks if they are inside a VPC.
‚úÖ Identifies ECS instances not attached to a VPC.
‚úÖ If found, terminates the non-compliant instance and relaunches it in a VPC.
‚úÖ Logs each action, including instances that are already compliant.
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS instance check
get_user_input() {
    read -p ""Enter the ECS Instance ID to check (or press Enter to auto-scan all instances): "" user_instance
}

# Function to check and ensure ECS instances are in a VPC
ensure_vpc_attachment() {
    log ""Starting ECS instance review for VPC attachment...""

    # Get list of ECS instances
    if [[ -n ""$user_instance"" ]]; then
        instances=(""$user_instance"")
    else
        log ""No manual input provided. Scanning all ECS instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No ECS instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking instance: $instance_id""

        # Get VPC ID for the instance
        vpc_id=$(aws ec2 describe-instances --instance-ids ""$instance_id"" --query ""Reservations[].Instances[].VpcId"" --output text)

        if [[ -z ""$vpc_id"" || ""$vpc_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Instance $instance_id is not in a VPC. Moving it to a VPC...""

            # Get default VPC
            default_vpc=$(aws ec2 describe-vpcs --query ""Vpcs[0].VpcId"" --output text)
            if [[ -z ""$default_vpc"" ]]; then
                log ""‚ùå No default VPC found. Cannot migrate instance.""
                continue
            fi

            # Stop and move the instance to the VPC
            aws ec2 stop-instances --instance-ids ""$instance_id""
            log ""‚è≥ Stopping instance $instance_id...""

            aws ec2 modify-instance-attribute --instance-id ""$instance_id"" --vpc-id ""$default_vpc""
            aws ec2 start-instances --instance-ids ""$instance_id""

            log ""‚úÖ Moved instance $instance_id to VPC $default_vpc.""
            ((fixed_count++))
        else
            log ""‚úÖ Instance $instance_id is already in VPC $vpc_id.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count instances were updated.""
    else
        log ""‚úÖ All instances are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_vpc_attachment
","Why This is Useful?
üîπ Improves Security: Ensures ECS instances are inside a private network.
üîπ Prevents Misconfiguration: Avoids running ECS workloads outside a VPC.
üîπ Automated or Manual: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances that are already inside a VPC.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","What This Script Does?
1Ô∏è‚É£ Checks all ECS instances or a user-specified one.
2Ô∏è‚É£ Retrieves VPC ID for each instance.
3Ô∏è‚É£ If missing, moves the instance to the default VPC.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS cluster should be configured with active services,To be added,Compliance,Low,"Navigate to the ECS console, select your cluster, and create a new service by specifying the launch type, task definition, and desired number of tasks. This allows you to manage and deploy your containerized applications effectively within the cluster.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html",To be added," ECS Cluster Should Be Configured with Active Services
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters that have zero active services.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and ensures they have at least one active service.
SSM Automation: An SSM document to automatically start a service if none are running.","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if they have active services.
‚úÖ Identifies clusters with zero running services.
‚úÖ If found, starts a default service using an existing task definition.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and ensure ECS clusters have active services
ensure_active_services() {
    log ""Starting ECS cluster review for active services...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get the number of active services in the cluster
        active_services=$(aws ecs list-services --cluster ""$cluster"" --query ""serviceArns[]"" --output text)

        if [[ -n ""$active_services"" ]]; then
            log ""‚úÖ ECS cluster $cluster has active services.""
        else
            log ""‚ö†Ô∏è No active services in ECS cluster $cluster. Creating a new service...""

            # Create a new ECS service using an existing task definition
            task_def=$(aws ecs list-task-definitions --query ""taskDefinitionArns[-1]"" --output text)
            if [[ -z ""$task_def"" ]]; then
                log ""‚ùå No task definitions found. Cannot create service.""
                continue
            fi

            aws ecs create-service --cluster ""$cluster"" --service-name ""default-service"" \
                --task-definition ""$task_def"" --desired-count 1 --launch-type ""FARGATE""

            log ""‚úÖ Created a new active service 'default-service' in cluster $cluster.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count clusters were updated.""
    else
        log ""‚úÖ All clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_active_services
","Why This is Useful?
üîπ Ensures Cluster Functionality: Keeps ECS clusters actively running workloads.
üîπ Prevents Service Disruptions: Avoids downtime due to missing active services.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that already have active services.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves the number of active services in each cluster.
3Ô∏è‚É£ If no services are active, creates a new service using an existing task definition.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.







",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS cluster should be configured with active services,To be added,Compliance,Low,"Navigate to the ECS console, select your cluster, and create a new service by specifying the launch type, task definition, and desired number of tasks. This allows you to manage and deploy your containerized applications effectively within the cluster.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html",To be added," ECS Cluster Should Be Configured with Active Services
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters that have zero active services.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and ensures they have at least one active service.
SSM Automation: An SSM document to automatically start a service if none are running.","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if they have active services.
‚úÖ Identifies clusters with zero running services.
‚úÖ If found, starts a default service using an existing task definition.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and ensure ECS clusters have active services
ensure_active_services() {
    log ""Starting ECS cluster review for active services...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get the number of active services in the cluster
        active_services=$(aws ecs list-services --cluster ""$cluster"" --query ""serviceArns[]"" --output text)

        if [[ -n ""$active_services"" ]]; then
            log ""‚úÖ ECS cluster $cluster has active services.""
        else
            log ""‚ö†Ô∏è No active services in ECS cluster $cluster. Creating a new service...""

            # Create a new ECS service using an existing task definition
            task_def=$(aws ecs list-task-definitions --query ""taskDefinitionArns[-1]"" --output text)
            if [[ -z ""$task_def"" ]]; then
                log ""‚ùå No task definitions found. Cannot create service.""
                continue
            fi

            aws ecs create-service --cluster ""$cluster"" --service-name ""default-service"" \
                --task-definition ""$task_def"" --desired-count 1 --launch-type ""FARGATE""

            log ""‚úÖ Created a new active service 'default-service' in cluster $cluster.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count clusters were updated.""
    else
        log ""‚úÖ All clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_active_services
","Why This is Useful?
üîπ Ensures Cluster Functionality: Keeps ECS clusters actively running workloads.
üîπ Prevents Service Disruptions: Avoids downtime due to missing active services.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that already have active services.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves the number of active services in each cluster.
3Ô∏è‚É£ If no services are active, creates a new service using an existing task definition.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.







",Bash,Weekly,SOC 2,2024-02-13
ECS,At least one instance should be registered with ECS cluster,To be added,Compliance,Low,"Launch an EC2 instance using an ECS-optimized AMI and specify the ECS cluster name in the user data under Advanced Details. Once launched, the instance will automatically register itself with the ECS service, enabling it to run tasks.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-anywhere-registration.html",To be added,"At Least One Instance Should Be Registered with ECS Cluster
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters with no registered container instances.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and ensures at least one instance is registered.
SSM Automation: An SSM document to automatically start new instances if needed.
","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if they have registered instances.
‚úÖ Identifies clusters with zero registered instances.
‚úÖ If found, starts a new EC2 instance and registers it with the cluster.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and ensure at least one instance is registered with ECS clusters
ensure_ecs_instance_registered() {
    log ""Starting ECS cluster instance check...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get number of registered container instances
        registered_instances=$(aws ecs list-container-instances --cluster ""$cluster"" --query ""containerInstanceArns"" --output text)

        if [[ -n ""$registered_instances"" ]]; then
            log ""‚úÖ At least one instance is registered with cluster $cluster.""
        else
            log ""‚ö†Ô∏è No instances are registered with cluster $cluster. Launching a new instance...""

            # Launch a new EC2 instance and register it with the cluster
            instance_id=$(aws ec2 run-instances --image-id ami-12345678 --count 1 --instance-type t2.micro --iam-instance-profile Name=ecsInstanceRole --query ""Instances[0].InstanceId"" --output text)

            log ""‚úÖ New EC2 instance $instance_id launched for cluster $cluster. Waiting for registration...""

            # Wait and check registration status
            sleep 30  # Wait for instance to initialize
            aws ecs update-container-instances-state --cluster ""$cluster"" --container-instances ""$instance_id"" --status ACTIVE

            log ""‚úÖ Instance $instance_id successfully registered with cluster $cluster.""
        fi
    done
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ecs_instance_registered
","Why This is Useful?
üîπ Prevents Service Outages: Ensures ECS clusters always have active instances.
üîπ Improves Availability: Ensures workloads can be scheduled properly.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that already have registered instances.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves the number of registered instances.
3Ô∏è‚É£ If no instances are registered, launches a new EC2 instance and registers it.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,At least one instance should be registered with ECS cluster,To be added,Compliance,Low,"Launch an EC2 instance using an ECS-optimized AMI and specify the ECS cluster name in the user data under Advanced Details. Once launched, the instance will automatically register itself with the ECS service, enabling it to run tasks.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-anywhere-registration.html",To be added,"At Least One Instance Should Be Registered with ECS Cluster
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS clusters with no registered container instances.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS clusters and ensures at least one instance is registered.
SSM Automation: An SSM document to automatically start new instances if needed.
","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if they have registered instances.
‚úÖ Identifies clusters with zero registered instances.
‚úÖ If found, starts a new EC2 instance and registers it with the cluster.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS cluster check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and ensure at least one instance is registered with ECS clusters
ensure_ecs_instance_registered() {
    log ""Starting ECS cluster instance check...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get number of registered container instances
        registered_instances=$(aws ecs list-container-instances --cluster ""$cluster"" --query ""containerInstanceArns"" --output text)

        if [[ -n ""$registered_instances"" ]]; then
            log ""‚úÖ At least one instance is registered with cluster $cluster.""
        else
            log ""‚ö†Ô∏è No instances are registered with cluster $cluster. Launching a new instance...""

            # Launch a new EC2 instance and register it with the cluster
            instance_id=$(aws ec2 run-instances --image-id ami-12345678 --count 1 --instance-type t2.micro --iam-instance-profile Name=ecsInstanceRole --query ""Instances[0].InstanceId"" --output text)

            log ""‚úÖ New EC2 instance $instance_id launched for cluster $cluster. Waiting for registration...""

            # Wait and check registration status
            sleep 30  # Wait for instance to initialize
            aws ecs update-container-instances-state --cluster ""$cluster"" --container-instances ""$instance_id"" --status ACTIVE

            log ""‚úÖ Instance $instance_id successfully registered with cluster $cluster.""
        fi
    done
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ecs_instance_registered
","Why This is Useful?
üîπ Prevents Service Outages: Ensures ECS clusters always have active instances.
üîπ Improves Availability: Ensures workloads can be scheduled properly.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips clusters that already have registered instances.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped clusters.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified one.
2Ô∏è‚É£ Retrieves the number of registered instances.
3Ô∏è‚É£ If no instances are registered, launches a new EC2 instance and registers it.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS fargate services should run on the latest fargate platform version,To be added,Compliance,Medium,"Navigate to the ECS console, select your cluster and service, and update the service to specify the latest platform version in the configuration. This enables your tasks to utilize the newest features and security improvements provided by AWS.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform-fargate.html",To be added,"ECS Fargate Services Should Run on the Latest Fargate Platform Version
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if ECS Fargate services are running the latest platform version.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS Fargate services and updates them if an older platform version is detected.
SSM Automation: Automate updates to Fargate services with outdated platform versions.","üîç Features of the Script:
‚úÖ Retrieves all ECS Fargate services in the AWS account.
‚úÖ Checks the platform version of each running service.
‚úÖ If outdated, updates the service to the latest available version.
‚úÖ Logs all actions taken, including skipped services that are already compliant.
‚úÖ Supports both manual mode (user inputs a service name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Fargate Service name to check (or press Enter to auto-scan all): "" user_service
}

# Function to check and update Fargate services
update_fargate_platform_version() {
    log ""Starting Fargate platform version validation...""

    # Get list of Fargate services (manual or auto)
    if [[ -n ""$user_service"" ]]; then
        services=(""$user_service"")
    else
        log ""No manual input provided. Scanning all ECS Fargate services...""
        services=($(aws ecs list-services --cluster default --query ""serviceArns[]"" --output text))
    fi

    if [[ ${#services[@]} -eq 0 ]]; then
        log ""No ECS Fargate services found.""
        exit 0
    fi

    updated_count=0
    latest_version=""LATEST""

    for service_arn in ""${services[@]}""; do
        log ""Checking Fargate service: $service_arn""

        # Get the current platform version
        current_version=$(aws ecs describe-services --cluster default --services ""$service_arn"" \
            --query ""services[0].platformVersion"" --output text)

        if [[ ""$current_version"" == ""$latest_version"" ]]; then
            log ""‚úÖ Service $service_arn is already on the latest platform version.""
            continue
        fi

        log ""‚ö†Ô∏è Service $service_arn is running an older platform version ($current_version). Updating to $latest_version...""

        # Update the service to use the latest platform version
        aws ecs update-service --cluster default --service ""$service_arn"" --platform-version ""$latest_version""

        log ""‚úÖ Service $service_arn updated to the latest Fargate platform version.""
        ((updated_count++))
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Update completed. $updated_count services updated.""
    else
        log ""‚úÖ All services are already on the latest platform version. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
update_fargate_platform_version
","üöÄ Why This is Useful?
üîπ Ensures Performance & Security: Running the latest platform version ensures compatibility and security patches.
üîπ Manual or Automated: Users can specify a service or scan all services.
üîπ Failsafe Mechanism: Skips services that are already compliant.
üîπ Full Logging: Keeps track of all actions taken.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS Fargate services in the AWS account.
2Ô∏è‚É£ Checks their current platform version and compares it with the latest version.
3Ô∏è‚É£ If outdated, updates the service to use the latest Fargate platform version.
4Ô∏è‚É£ Logs all actions, ensuring compliance visibility.

",Bash,Weekly,SOC 2,2024-02-13
Security,ECS fargate services should run on the latest fargate platform version,To be added,Compliance,Medium,"Navigate to the ECS console, select your cluster and service, and update the service to specify the latest platform version in the configuration. This enables your tasks to utilize the newest features and security improvements provided by AWS.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform-fargate.html",To be added,"ECS Fargate Services Should Run on the Latest Fargate Platform Version
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if ECS Fargate services are running the latest platform version.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS Fargate services and updates them if an older platform version is detected.
SSM Automation: Automate updates to Fargate services with outdated platform versions.","üîç Features of the Script:
‚úÖ Retrieves all ECS Fargate services in the AWS account.
‚úÖ Checks the platform version of each running service.
‚úÖ If outdated, updates the service to the latest available version.
‚úÖ Logs all actions taken, including skipped services that are already compliant.
‚úÖ Supports both manual mode (user inputs a service name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Fargate Service name to check (or press Enter to auto-scan all): "" user_service
}

# Function to check and update Fargate services
update_fargate_platform_version() {
    log ""Starting Fargate platform version validation...""

    # Get list of Fargate services (manual or auto)
    if [[ -n ""$user_service"" ]]; then
        services=(""$user_service"")
    else
        log ""No manual input provided. Scanning all ECS Fargate services...""
        services=($(aws ecs list-services --cluster default --query ""serviceArns[]"" --output text))
    fi

    if [[ ${#services[@]} -eq 0 ]]; then
        log ""No ECS Fargate services found.""
        exit 0
    fi

    updated_count=0
    latest_version=""LATEST""

    for service_arn in ""${services[@]}""; do
        log ""Checking Fargate service: $service_arn""

        # Get the current platform version
        current_version=$(aws ecs describe-services --cluster default --services ""$service_arn"" \
            --query ""services[0].platformVersion"" --output text)

        if [[ ""$current_version"" == ""$latest_version"" ]]; then
            log ""‚úÖ Service $service_arn is already on the latest platform version.""
            continue
        fi

        log ""‚ö†Ô∏è Service $service_arn is running an older platform version ($current_version). Updating to $latest_version...""

        # Update the service to use the latest platform version
        aws ecs update-service --cluster default --service ""$service_arn"" --platform-version ""$latest_version""

        log ""‚úÖ Service $service_arn updated to the latest Fargate platform version.""
        ((updated_count++))
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Update completed. $updated_count services updated.""
    else
        log ""‚úÖ All services are already on the latest platform version. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
update_fargate_platform_version
","üöÄ Why This is Useful?
üîπ Ensures Performance & Security: Running the latest platform version ensures compatibility and security patches.
üîπ Manual or Automated: Users can specify a service or scan all services.
üîπ Failsafe Mechanism: Skips services that are already compliant.
üîπ Full Logging: Keeps track of all actions taken.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS Fargate services in the AWS account.
2Ô∏è‚É£ Checks their current platform version and compares it with the latest version.
3Ô∏è‚É£ If outdated, updates the service to use the latest Fargate platform version.
4Ô∏è‚É£ Logs all actions, ensuring compliance visibility.

",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS fargate services should run on the latest fargate platform version,To be added,Compliance,Medium,"Navigate to the ECS console, select your cluster and service, and update the service to specify the latest platform version in the configuration. This enables your tasks to utilize the newest features and security improvements provided by AWS.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform-fargate.html",To be added,"ECS Fargate Services Should Run on the Latest Fargate Platform Version
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if ECS Fargate services are running the latest platform version.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS Fargate services and updates them if an older platform version is detected.
SSM Automation: Automate updates to Fargate services with outdated platform versions.","üîç Features of the Script:
‚úÖ Retrieves all ECS Fargate services in the AWS account.
‚úÖ Checks the platform version of each running service.
‚úÖ If outdated, updates the service to the latest available version.
‚úÖ Logs all actions taken, including skipped services that are already compliant.
‚úÖ Supports both manual mode (user inputs a service name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Fargate Service name to check (or press Enter to auto-scan all): "" user_service
}

# Function to check and update Fargate services
update_fargate_platform_version() {
    log ""Starting Fargate platform version validation...""

    # Get list of Fargate services (manual or auto)
    if [[ -n ""$user_service"" ]]; then
        services=(""$user_service"")
    else
        log ""No manual input provided. Scanning all ECS Fargate services...""
        services=($(aws ecs list-services --cluster default --query ""serviceArns[]"" --output text))
    fi

    if [[ ${#services[@]} -eq 0 ]]; then
        log ""No ECS Fargate services found.""
        exit 0
    fi

    updated_count=0
    latest_version=""LATEST""

    for service_arn in ""${services[@]}""; do
        log ""Checking Fargate service: $service_arn""

        # Get the current platform version
        current_version=$(aws ecs describe-services --cluster default --services ""$service_arn"" \
            --query ""services[0].platformVersion"" --output text)

        if [[ ""$current_version"" == ""$latest_version"" ]]; then
            log ""‚úÖ Service $service_arn is already on the latest platform version.""
            continue
        fi

        log ""‚ö†Ô∏è Service $service_arn is running an older platform version ($current_version). Updating to $latest_version...""

        # Update the service to use the latest platform version
        aws ecs update-service --cluster default --service ""$service_arn"" --platform-version ""$latest_version""

        log ""‚úÖ Service $service_arn updated to the latest Fargate platform version.""
        ((updated_count++))
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ Update completed. $updated_count services updated.""
    else
        log ""‚úÖ All services are already on the latest platform version. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
update_fargate_platform_version
","üöÄ Why This is Useful?
üîπ Ensures Performance & Security: Running the latest platform version ensures compatibility and security patches.
üîπ Manual or Automated: Users can specify a service or scan all services.
üîπ Failsafe Mechanism: Skips services that are already compliant.
üîπ Full Logging: Keeps track of all actions taken.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS Fargate services in the AWS account.
2Ô∏è‚É£ Checks their current platform version and compares it with the latest version.
3Ô∏è‚É£ If outdated, updates the service to use the latest Fargate platform version.
4Ô∏è‚É£ Logs all actions, ensuring compliance visibility.

",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS services should be attached to a load balancer,To be added,Compliance,Medium,"Navigate to the ECS console, select your cluster, and either create or update your service by enabling the Load balancer option and choosing an existing Application Load Balancer (ALB) or Network Load Balancer (NLB). Specify the target group during the configuration process and complete the creation or update to ensure traffic is distributed across your task instances.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/alb.html",To be added,"ECS Services Should Be Attached to a Load Balancer
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS services that are not attached to a load balancer.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS services and attaches them to a load balancer if missing.
SSM Automation: An SSM document to automatically remediate ECS services without a load balancer","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if their services are attached to a load balancer.
‚úÖ Identifies services without a load balancer and attaches them to an existing ALB/NLB.
‚úÖ Uses the latest registered target group for the service.
‚úÖ Logs each action, including services that are already compliant.
‚úÖ Supports both manual mode (user inputs a service name) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS service check
get_user_input() {
    read -p ""Enter the ECS Service name to check (or press Enter to auto-scan all services): "" user_service
}

# Function to check and attach ECS services to a load balancer
attach_load_balancer() {
    log ""Starting ECS service review for load balancer attachment...""

    # Get list of ECS clusters
    clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get list of ECS services
        if [[ -n ""$user_service"" ]]; then
            services=(""$user_service"")
        else
            services=($(aws ecs list-services --cluster ""$cluster"" --query ""serviceArns[]"" --output text))
        fi

        if [[ ${#services[@]} -eq 0 ]]; then
            log ""No ECS services found in cluster $cluster.""
            continue
        fi

        for service in ""${services[@]}""; do
            log ""Checking service: $service""

            # Get service details
            load_balancer=$(aws ecs describe-services --cluster ""$cluster"" --services ""$service"" \
                --query ""services[].loadBalancers[]"" --output text)

            if [[ -z ""$load_balancer"" ]]; then
                log ""‚ö†Ô∏è Service $service has no load balancer. Attaching now...""

                # Get latest target group
                target_group=$(aws elbv2 describe-target-groups --query ""TargetGroups[-1].TargetGroupArn"" --output text)
                if [[ -z ""$target_group"" ]]; then
                    log ""‚ùå No target groups found. Cannot attach load balancer.""
                    continue
                fi

                # Update service with load balancer
                aws ecs update-service --cluster ""$cluster"" --service ""$service"" \
                    --load-balancers ""targetGroupArn=$target_group,containerName=web,containerPort=80""

                log ""‚úÖ Attached load balancer to service $service.""
                ((fixed_count++))
            else
                log ""‚úÖ Service $service already has a load balancer attached.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count services were updated.""
    else
        log ""‚úÖ All services are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
attach_load_balancer
","Why This is Useful?
üîπ Ensures High Availability: Routes traffic to healthy ECS tasks.
üîπ Enhances Security: Uses ALB/NLB to manage access securely.
üîπ Automated or Manual: Users can specify a service name or scan all services.
üîπ Failsafe Mechanism: Skips services that already have a load balancer.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped services.

","What This Script Does?
1Ô∏è‚É£ Checks all ECS services or a user-specified one.
2Ô∏è‚É£ Retrieves load balancer configuration.
3Ô∏è‚É£ If missing, attaches the service to the latest target group.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS services should be attached to a load balancer,To be added,Compliance,Medium,"Navigate to the ECS console, select your cluster, and either create or update your service by enabling the Load balancer option and choosing an existing Application Load Balancer (ALB) or Network Load Balancer (NLB). Specify the target group during the configuration process and complete the creation or update to ensure traffic is distributed across your task instances.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/alb.html",To be added,"ECS Services Should Be Attached to a Load Balancer
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS services that are not attached to a load balancer.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS services and attaches them to a load balancer if missing.
SSM Automation: An SSM document to automatically remediate ECS services without a load balancer","Features of the Script:
‚úÖ Retrieves all ECS clusters and checks if their services are attached to a load balancer.
‚úÖ Identifies services without a load balancer and attaches them to an existing ALB/NLB.
‚úÖ Uses the latest registered target group for the service.
‚úÖ Logs each action, including services that are already compliant.
‚úÖ Supports both manual mode (user inputs a service name) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS service check
get_user_input() {
    read -p ""Enter the ECS Service name to check (or press Enter to auto-scan all services): "" user_service
}

# Function to check and attach ECS services to a load balancer
attach_load_balancer() {
    log ""Starting ECS service review for load balancer attachment...""

    # Get list of ECS clusters
    clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking cluster: $cluster""

        # Get list of ECS services
        if [[ -n ""$user_service"" ]]; then
            services=(""$user_service"")
        else
            services=($(aws ecs list-services --cluster ""$cluster"" --query ""serviceArns[]"" --output text))
        fi

        if [[ ${#services[@]} -eq 0 ]]; then
            log ""No ECS services found in cluster $cluster.""
            continue
        fi

        for service in ""${services[@]}""; do
            log ""Checking service: $service""

            # Get service details
            load_balancer=$(aws ecs describe-services --cluster ""$cluster"" --services ""$service"" \
                --query ""services[].loadBalancers[]"" --output text)

            if [[ -z ""$load_balancer"" ]]; then
                log ""‚ö†Ô∏è Service $service has no load balancer. Attaching now...""

                # Get latest target group
                target_group=$(aws elbv2 describe-target-groups --query ""TargetGroups[-1].TargetGroupArn"" --output text)
                if [[ -z ""$target_group"" ]]; then
                    log ""‚ùå No target groups found. Cannot attach load balancer.""
                    continue
                fi

                # Update service with load balancer
                aws ecs update-service --cluster ""$cluster"" --service ""$service"" \
                    --load-balancers ""targetGroupArn=$target_group,containerName=web,containerPort=80""

                log ""‚úÖ Attached load balancer to service $service.""
                ((fixed_count++))
            else
                log ""‚úÖ Service $service already has a load balancer attached.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count services were updated.""
    else
        log ""‚úÖ All services are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
attach_load_balancer
","Why This is Useful?
üîπ Ensures High Availability: Routes traffic to healthy ECS tasks.
üîπ Enhances Security: Uses ALB/NLB to manage access securely.
üîπ Automated or Manual: Users can specify a service name or scan all services.
üîπ Failsafe Mechanism: Skips services that already have a load balancer.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped services.

","What This Script Does?
1Ô∏è‚É£ Checks all ECS services or a user-specified one.
2Ô∏è‚É£ Retrieves load balancer configuration.
3Ô∏è‚É£ If missing, attaches the service to the latest target group.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,AWS ECS services should not have public IP addresses assigned to them automatically,To be added,Compliance,High,"Navigate to the ECS console, select your cluster, and either create or update your service. In the Network Configuration section, set the service to run in a private subnet and disable the Assign Public IP option.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html#:~:text=If%20you%20launch%20your%20Amazon,to%20your%20container%20application%20servers.",To be added,"AWS ECS Services Should Not Have Public IP Addresses Assigned Automatically
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS services that have assignPublicIp set to ENABLED.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS services and ensures they are not assigned public IPs.
SSM Automation: An SSM document to automatically update task definitions to use private IPs instead.","Features of the Script:
‚úÖ Retrieves all ECS services and checks if they have assignPublicIp enabled.
‚úÖ Identifies services where public IP assignment is enabled.
‚úÖ If found, updates the service configuration to remove public IP assignment.
‚úÖ Logs each action, including services that are already compliant.
‚úÖ Supports both manual mode (user inputs a service name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS service check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check services (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and disable public IP assignment for ECS services
disable_public_ip() {
    log ""Starting ECS service review for public IP assignment...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking services in cluster: $cluster""

        # Get ECS services in the cluster
        services=($(aws ecs list-services --cluster ""$cluster"" --query ""serviceArns[]"" --output text))

        if [[ ${#services[@]} -eq 0 ]]; then
            log ""No ECS services found in cluster $cluster. Skipping...""
            continue
        fi

        for service in ""${services[@]}""; do
            log ""Checking service: $service""

            # Get public IP assignment status
            public_ip=$(aws ecs describe-services --cluster ""$cluster"" --services ""$service"" --query ""services[0].networkConfiguration.awsvpcConfiguration.assignPublicIp"" --output text)

            if [[ ""$public_ip"" == ""DISABLED"" || -z ""$public_ip"" ]]; then
                log ""‚úÖ Service $service in cluster $cluster does not have a public IP assigned.""
            else
                log ""‚ö†Ô∏è Service $service in cluster $cluster has public IP enabled. Updating now...""

                # Update service to disable public IP assignment
                aws ecs update-service --cluster ""$cluster"" --service ""$service"" --network-configuration ""awsvpcConfiguration={assignPublicIp=DISABLED}""

                log ""‚úÖ Public IP assignment disabled for service $service in cluster $cluster.""
                ((fixed_count++))
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count services were updated.""
    else
        log ""‚úÖ All services are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
disable_public_ip
","Why This is Useful?
üîπ Enhances Security: Prevents ECS services from being exposed to the public internet.
üîπ Ensures Compliance: Helps meet security best practices and regulatory standards.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips services that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped services.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified cluster.
2Ô∏è‚É£ Retrieves all ECS services.
3Ô∏è‚É£ Identifies services with assignPublicIp=ENABLED.
4Ô∏è‚É£ Updates the service configuration to disable public IP assignment.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,AWS ECS services should not have public IP addresses assigned to them automatically,To be added,Compliance,High,"Navigate to the ECS console, select your cluster, and either create or update your service. In the Network Configuration section, set the service to run in a private subnet and disable the Assign Public IP option.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html#:~:text=If%20you%20launch%20your%20Amazon,to%20your%20container%20application%20servers.",To be added,"AWS ECS Services Should Not Have Public IP Addresses Assigned Automatically
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS services that have assignPublicIp set to ENABLED.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS services and ensures they are not assigned public IPs.
SSM Automation: An SSM document to automatically update task definitions to use private IPs instead.","Features of the Script:
‚úÖ Retrieves all ECS services and checks if they have assignPublicIp enabled.
‚úÖ Identifies services where public IP assignment is enabled.
‚úÖ If found, updates the service configuration to remove public IP assignment.
‚úÖ Logs each action, including services that are already compliant.
‚úÖ Supports both manual mode (user inputs a service name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS service check
get_user_input() {
    read -p ""Enter the ECS Cluster name to check services (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to check and disable public IP assignment for ECS services
disable_public_ip() {
    log ""Starting ECS service review for public IP assignment...""

    # Get list of ECS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all ECS clusters...""
        clusters=($(aws ecs list-clusters --query ""clusterArns[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No ECS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${clusters[@]}""; do
        log ""Checking services in cluster: $cluster""

        # Get ECS services in the cluster
        services=($(aws ecs list-services --cluster ""$cluster"" --query ""serviceArns[]"" --output text))

        if [[ ${#services[@]} -eq 0 ]]; then
            log ""No ECS services found in cluster $cluster. Skipping...""
            continue
        fi

        for service in ""${services[@]}""; do
            log ""Checking service: $service""

            # Get public IP assignment status
            public_ip=$(aws ecs describe-services --cluster ""$cluster"" --services ""$service"" --query ""services[0].networkConfiguration.awsvpcConfiguration.assignPublicIp"" --output text)

            if [[ ""$public_ip"" == ""DISABLED"" || -z ""$public_ip"" ]]; then
                log ""‚úÖ Service $service in cluster $cluster does not have a public IP assigned.""
            else
                log ""‚ö†Ô∏è Service $service in cluster $cluster has public IP enabled. Updating now...""

                # Update service to disable public IP assignment
                aws ecs update-service --cluster ""$cluster"" --service ""$service"" --network-configuration ""awsvpcConfiguration={assignPublicIp=DISABLED}""

                log ""‚úÖ Public IP assignment disabled for service $service in cluster $cluster.""
                ((fixed_count++))
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count services were updated.""
    else
        log ""‚úÖ All services are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
disable_public_ip
","Why This is Useful?
üîπ Enhances Security: Prevents ECS services from being exposed to the public internet.
üîπ Ensures Compliance: Helps meet security best practices and regulatory standards.
üîπ Automated or Manual: Users can specify a cluster name or scan all clusters.
üîπ Failsafe Mechanism: Skips services that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped services.","What This Script Does?
1Ô∏è‚É£ Checks all ECS clusters or a user-specified cluster.
2Ô∏è‚É£ Retrieves all ECS services.
3Ô∏è‚É£ Identifies services with assignPublicIp=ENABLED.
4Ô∏è‚É£ Updates the service configuration to disable public IP assignment.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS task definition containers should not have secrets passed as environment variables,To be added,Compliance,High,"Store your sensitive data in AWS Secrets Manager by creating a new secret and noting its name or ARN. Then, update your task definition in the ECS console to reference the secret in the Secrets section instead of using environment variables.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html",To be added,"ECS Task Definition Containers Should Not Have Secrets Passed as Environment Variables
‚úÖ Automation Approach:

AWS Config Rule: Detect ECS task definitions where sensitive environment variables contain secrets.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans ECS task definitions and flags any that use hardcoded secrets.
SSM Automation: Automatically modifies non-compliant task definitions to use AWS Secrets Manager instead.","üîç Features of the Script:
‚úÖ Retrieves all ECS task definitions in the AWS account.
‚úÖ Checks if container definitions include sensitive environment variables (e.g., AWS_SECRET_ACCESS_KEY, DB_PASSWORD).
‚úÖ If found, creates a new task revision where secrets are referenced from AWS Secrets Manager.
‚úÖ Logs all actions, including skipped task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Task Definition family to check (or press Enter to auto-scan all): "" user_task
}

# Function to check and fix ECS task definitions with hardcoded secrets
fix_env_secrets() {
    log ""Starting ECS task definition validation...""

    # Get list of task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_families=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_families=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_families[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_arn in ""${task_families[@]}""; do
        log ""Checking ECS task definition: $task_arn""

        # Get the latest task definition details
        task_json=$(aws ecs describe-task-definition --task-definition ""$task_arn"" --query ""taskDefinition"" --output json)

        # Extract environment variables
        env_vars=$(echo ""$task_json"" | jq '.containerDefinitions[].environment[]? // empty')

        if [[ -z ""$env_vars"" ]]; then
            log ""‚úÖ Task definition $task_arn does not contain environment variables.""
            continue
        fi

        # Check if any environment variables contain sensitive values
        contains_secret=false
        for key in $(echo ""$env_vars"" | jq -r '.name'); do
            if [[ ""$key"" =~ (SECRET|PASSWORD|TOKEN|KEY|CREDENTIAL) ]]; then
                contains_secret=true
                break
            fi
        done

        if [[ ""$contains_secret"" == false ]]; then
            log ""‚úÖ Task definition $task_arn does not use hardcoded secrets.""
            continue
        fi

        log ""‚ö†Ô∏è Task definition $task_arn contains secrets in environment variables. Fixing...""

        # Modify JSON to use AWS Secrets Manager instead
        updated_task_json=$(echo ""$task_json"" | jq '
            .containerDefinitions[].secrets = [{""name"": ""REPLACE_WITH_SECRET_NAME"", ""valueFrom"": ""arn:aws:secretsmanager:REGION:ACCOUNT_ID:secret:SECRET_NAME""}] | del(.containerDefinitions[].environment)
        ')

        # Register the updated task definition
        new_task_arn=$(aws ecs register-task-definition --cli-input-json ""$updated_task_json"" --query ""taskDefinition.taskDefinitionArn"" --output text)

        log ""‚úÖ Updated task definition created: $new_task_arn (hardcoded secrets removed).""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count task definitions updated.""
    else
        log ""‚úÖ All ECS task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_env_secrets
","üöÄ Why This is Useful?   ‚úÖ Prevents Credential Exposure: Hardcoded secrets in environment variables can be accessed by unauthorized users, logs, or debugging tools.
‚úÖ Enforces AWS Secrets Manager Best Practices: Ensures secrets are stored securely and accessed dynamically, reducing risks of leaks and unauthorized access.
‚úÖ Enhances Security Posture: Helps meet security and compliance frameworks like SOC 2, ISO 27001, and CIS AWS Benchmarks.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS task definitions in the AWS account.
2Ô∏è‚É£ Checks if container environment variables contain secrets (e.g., AWS_SECRET_ACCESS_KEY).
3Ô∏è‚É£ If found, creates a new task revision that moves secrets to AWS Secrets Manager.
4Ô∏è‚É£ Logs all actions, ensuring compliance.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS task definition containers should not have secrets passed as environment variables,To be added,Compliance,High,"Store your sensitive data in AWS Secrets Manager by creating a new secret and noting its name or ARN. Then, update your task definition in the ECS console to reference the secret in the Secrets section instead of using environment variables.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html",To be added,"ECS Task Definition Containers Should Not Have Secrets Passed as Environment Variables
‚úÖ Automation Approach:

AWS Config Rule: Detect ECS task definitions where sensitive environment variables contain secrets.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans ECS task definitions and flags any that use hardcoded secrets.
SSM Automation: Automatically modifies non-compliant task definitions to use AWS Secrets Manager instead.","üîç Features of the Script:
‚úÖ Retrieves all ECS task definitions in the AWS account.
‚úÖ Checks if container definitions include sensitive environment variables (e.g., AWS_SECRET_ACCESS_KEY, DB_PASSWORD).
‚úÖ If found, creates a new task revision where secrets are referenced from AWS Secrets Manager.
‚úÖ Logs all actions, including skipped task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Task Definition family to check (or press Enter to auto-scan all): "" user_task
}

# Function to check and fix ECS task definitions with hardcoded secrets
fix_env_secrets() {
    log ""Starting ECS task definition validation...""

    # Get list of task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_families=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_families=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_families[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_arn in ""${task_families[@]}""; do
        log ""Checking ECS task definition: $task_arn""

        # Get the latest task definition details
        task_json=$(aws ecs describe-task-definition --task-definition ""$task_arn"" --query ""taskDefinition"" --output json)

        # Extract environment variables
        env_vars=$(echo ""$task_json"" | jq '.containerDefinitions[].environment[]? // empty')

        if [[ -z ""$env_vars"" ]]; then
            log ""‚úÖ Task definition $task_arn does not contain environment variables.""
            continue
        fi

        # Check if any environment variables contain sensitive values
        contains_secret=false
        for key in $(echo ""$env_vars"" | jq -r '.name'); do
            if [[ ""$key"" =~ (SECRET|PASSWORD|TOKEN|KEY|CREDENTIAL) ]]; then
                contains_secret=true
                break
            fi
        done

        if [[ ""$contains_secret"" == false ]]; then
            log ""‚úÖ Task definition $task_arn does not use hardcoded secrets.""
            continue
        fi

        log ""‚ö†Ô∏è Task definition $task_arn contains secrets in environment variables. Fixing...""

        # Modify JSON to use AWS Secrets Manager instead
        updated_task_json=$(echo ""$task_json"" | jq '
            .containerDefinitions[].secrets = [{""name"": ""REPLACE_WITH_SECRET_NAME"", ""valueFrom"": ""arn:aws:secretsmanager:REGION:ACCOUNT_ID:secret:SECRET_NAME""}] | del(.containerDefinitions[].environment)
        ')

        # Register the updated task definition
        new_task_arn=$(aws ecs register-task-definition --cli-input-json ""$updated_task_json"" --query ""taskDefinition.taskDefinitionArn"" --output text)

        log ""‚úÖ Updated task definition created: $new_task_arn (hardcoded secrets removed).""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count task definitions updated.""
    else
        log ""‚úÖ All ECS task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_env_secrets
","üöÄ Why This is Useful?   ‚úÖ Prevents Credential Exposure: Hardcoded secrets in environment variables can be accessed by unauthorized users, logs, or debugging tools.
‚úÖ Enforces AWS Secrets Manager Best Practices: Ensures secrets are stored securely and accessed dynamically, reducing risks of leaks and unauthorized access.
‚úÖ Enhances Security Posture: Helps meet security and compliance frameworks like SOC 2, ISO 27001, and CIS AWS Benchmarks.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS task definitions in the AWS account.
2Ô∏è‚É£ Checks if container environment variables contain secrets (e.g., AWS_SECRET_ACCESS_KEY).
3Ô∏è‚É£ If found, creates a new task revision that moves secrets to AWS Secrets Manager.
4Ô∏è‚É£ Logs all actions, ensuring compliance.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS containers should run as non-privileged,To be added,Compliance,High,"Update your task definition in the ECS console and specify a non-root user ID or username in the User field of the container definition. This configuration minimizes security risks by limiting permissions within the container.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/ecs-containers-nonprivileged.html",To be added,"ECS Containers Should Run as Non-Privileged
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where containers are running in privileged mode.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS task definitions and updates them to remove privileged mode if enabled.
SSM Automation: An SSM document to automatically remediate non-compliant task definitions.","Features of the Script:
‚úÖ Retrieves all ECS task definitions and checks if privileged mode is enabled.
‚úÖ Identifies task definitions where containers are running with privileged: true.
‚úÖ If found, creates a new revision of the task definition with privileged: false.
‚úÖ Logs each action, including task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS task definition check
get_user_input() {
    read -p ""Enter the ECS Task Definition family name to check (or press Enter to auto-scan all task definitions): "" user_task
}

# Function to check and disable privileged mode in ECS task definitions
disable_privileged_mode() {
    log ""Starting ECS task definition review for privileged mode...""

    # Get list of ECS task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        tasks=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        tasks=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#tasks[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task in ""${tasks[@]}""; do
        log ""Checking task definition: $task""

        # Get task definition details
        task_json=$(aws ecs describe-task-definition --task-definition ""$task"" --query ""taskDefinition"" --output json)

        # Check if any container is running in privileged mode
        if echo ""$task_json"" | jq -e '.containerDefinitions[] | select(.privileged == true)' >/dev/null; then
            log ""‚ö†Ô∏è Task definition $task has containers running in privileged mode. Updating now...""

            # Create a new revision with privileged mode disabled
            updated_json=$(echo ""$task_json"" | jq 'walk(if type == ""object"" and has(""privileged"") then .privileged = false else . end)')
            new_task_def=$(aws ecs register-task-definition --cli-input-json ""$updated_json"" --query ""taskDefinition.taskDefinitionArn"" --output text)

            log ""‚úÖ Created new task definition revision with privileged mode disabled: $new_task_def""
            ((fixed_count++))
        else
            log ""‚úÖ Task definition $task is already compliant.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count task definitions were updated.""
    else
        log ""‚úÖ All task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
disable_privileged_mode
","Why This is Useful?
üîπ Enhances Security: Prevents containers from gaining root-level access on the host.
üîπ Ensures Compliance: Meets security best practices and regulatory standards.
üîπ Automated or Manual: Users can specify a task definition or scan all tasks.
üîπ Failsafe Mechanism: Skips task definitions that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped tasks.","What This Script Does?
1Ô∏è‚É£ Checks all ECS task definitions or a user-specified one.
2Ô∏è‚É£ Identifies if privileged mode is enabled.
3Ô∏è‚É£ If found, creates a new revision with privileged mode disabled.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS containers should run as non-privileged,To be added,Compliance,High,"Update your task definition in the ECS console and specify a non-root user ID or username in the User field of the container definition. This configuration minimizes security risks by limiting permissions within the container.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/ecs-containers-nonprivileged.html",To be added,"ECS Containers Should Run as Non-Privileged
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where containers are running in privileged mode.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS task definitions and updates them to remove privileged mode if enabled.
SSM Automation: An SSM document to automatically remediate non-compliant task definitions.","Features of the Script:
‚úÖ Retrieves all ECS task definitions and checks if privileged mode is enabled.
‚úÖ Identifies task definitions where containers are running with privileged: true.
‚úÖ If found, creates a new revision of the task definition with privileged: false.
‚úÖ Logs each action, including task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual ECS task definition check
get_user_input() {
    read -p ""Enter the ECS Task Definition family name to check (or press Enter to auto-scan all task definitions): "" user_task
}

# Function to check and disable privileged mode in ECS task definitions
disable_privileged_mode() {
    log ""Starting ECS task definition review for privileged mode...""

    # Get list of ECS task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        tasks=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        tasks=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#tasks[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task in ""${tasks[@]}""; do
        log ""Checking task definition: $task""

        # Get task definition details
        task_json=$(aws ecs describe-task-definition --task-definition ""$task"" --query ""taskDefinition"" --output json)

        # Check if any container is running in privileged mode
        if echo ""$task_json"" | jq -e '.containerDefinitions[] | select(.privileged == true)' >/dev/null; then
            log ""‚ö†Ô∏è Task definition $task has containers running in privileged mode. Updating now...""

            # Create a new revision with privileged mode disabled
            updated_json=$(echo ""$task_json"" | jq 'walk(if type == ""object"" and has(""privileged"") then .privileged = false else . end)')
            new_task_def=$(aws ecs register-task-definition --cli-input-json ""$updated_json"" --query ""taskDefinition.taskDefinitionArn"" --output text)

            log ""‚úÖ Created new task definition revision with privileged mode disabled: $new_task_def""
            ((fixed_count++))
        else
            log ""‚úÖ Task definition $task is already compliant.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count task definitions were updated.""
    else
        log ""‚úÖ All task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
disable_privileged_mode
","Why This is Useful?
üîπ Enhances Security: Prevents containers from gaining root-level access on the host.
üîπ Ensures Compliance: Meets security best practices and regulatory standards.
üîπ Automated or Manual: Users can specify a task definition or scan all tasks.
üîπ Failsafe Mechanism: Skips task definitions that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped tasks.","What This Script Does?
1Ô∏è‚É£ Checks all ECS task definitions or a user-specified one.
2Ô∏è‚É£ Identifies if privileged mode is enabled.
3Ô∏è‚É£ If found, creates a new revision with privileged mode disabled.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS containers should be limited to read-only access to root filesystems,To be added,Compliance,High,"Update your task definition in the ECS console and enable the readonlyRootfs option by setting it to true. This configuration prevents any modifications to the filesystem, enhancing the security of the container environment.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/ecs-containers-readonly-access.html",To be added,"ECS Containers Should Be Limited to Read-Only Access to Root Filesystems
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where containers have read-write access to the root filesystem.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS task definitions and updates them to enforce read-only root filesystem access.
SSM Automation: An SSM document to automatically remediate non-compliant task definitions.
","Features of the Script:
‚úÖ Scans all ECS task definitions for readonlyRootFilesystem: false.
‚úÖ Identifies task definitions that allow write access to the root filesystem.
‚úÖ If found, updates the container definition to enforce read-only mode.
‚úÖ Logs each action, including skipped task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual task definition check
get_user_input() {
    read -p ""Enter the ECS Task Definition Family to check (or press Enter to auto-scan all): "" user_task
}

# Function to enforce read-only root filesystem
enforce_readonly_root() {
    log ""Starting ECS task definition review for read-only root filesystem enforcement...""

    # Get list of ECS task definitions
    if [[ -n ""$user_task"" ]]; then
        tasks=(""$user_task"")
    else
        tasks=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#tasks[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task in ""${tasks[@]}""; do
        log ""Checking task definition: $task""

        # Get container definitions
        container_def=$(aws ecs describe-task-definition --task-definition ""$task"" --query ""taskDefinition.containerDefinitions"" --output json)

        # Check if root filesystem is read-only
        read_write=$(echo ""$container_def"" | jq '.[].readonlyRootFilesystem' | grep -v true)

        if [[ -n ""$read_write"" ]]; then
            log ""‚ö†Ô∏è Task definition $task allows write access to root filesystem. Updating...""

            # Modify container definition to set readonlyRootFilesystem: true
            updated_def=$(echo ""$container_def"" | jq 'map(.readonlyRootFilesystem = true)')

            # Register new task definition
            aws ecs register-task-definition --family ""$task"" --container-definitions ""$updated_def""

            log ""‚úÖ Updated task definition $task to enforce read-only root filesystem.""
            ((fixed_count++))
        else
            log ""‚úÖ Task definition $task already enforces read-only root filesystem.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count task definitions were updated.""
    else
        log ""‚úÖ All task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_readonly_root
","Why This is Useful?
üîπ Improves Security: Prevents containers from modifying sensitive files.
üîπ Reduces Attack Surface: Protects against malware or accidental modifications.
üîπ Automated or Manual: Users can specify a task definition or scan all.
üîπ Failsafe Mechanism: Skips task definitions that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped tasks.

","What This Script Does?
1Ô∏è‚É£ Retrieves all ECS task definitions or a user-specified one.
2Ô∏è‚É£ Checks if readonlyRootFilesystem is false.
3Ô∏è‚É£ If found, updates the container definition to enforce read-only mode.
4Ô∏è‚É£ Registers a new compliant task definition.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.

",Bash,Weekly,SOC 2,2024-02-13
Security,ECS containers should be limited to read-only access to root filesystems,To be added,Compliance,High,"Update your task definition in the ECS console and enable the readonlyRootfs option by setting it to true. This configuration prevents any modifications to the filesystem, enhancing the security of the container environment.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/ecs-containers-readonly-access.html",To be added,"ECS Containers Should Be Limited to Read-Only Access to Root Filesystems
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where containers have read-write access to the root filesystem.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS task definitions and updates them to enforce read-only root filesystem access.
SSM Automation: An SSM document to automatically remediate non-compliant task definitions.
","Features of the Script:
‚úÖ Scans all ECS task definitions for readonlyRootFilesystem: false.
‚úÖ Identifies task definitions that allow write access to the root filesystem.
‚úÖ If found, updates the container definition to enforce read-only mode.
‚úÖ Logs each action, including skipped task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual task definition check
get_user_input() {
    read -p ""Enter the ECS Task Definition Family to check (or press Enter to auto-scan all): "" user_task
}

# Function to enforce read-only root filesystem
enforce_readonly_root() {
    log ""Starting ECS task definition review for read-only root filesystem enforcement...""

    # Get list of ECS task definitions
    if [[ -n ""$user_task"" ]]; then
        tasks=(""$user_task"")
    else
        tasks=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#tasks[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task in ""${tasks[@]}""; do
        log ""Checking task definition: $task""

        # Get container definitions
        container_def=$(aws ecs describe-task-definition --task-definition ""$task"" --query ""taskDefinition.containerDefinitions"" --output json)

        # Check if root filesystem is read-only
        read_write=$(echo ""$container_def"" | jq '.[].readonlyRootFilesystem' | grep -v true)

        if [[ -n ""$read_write"" ]]; then
            log ""‚ö†Ô∏è Task definition $task allows write access to root filesystem. Updating...""

            # Modify container definition to set readonlyRootFilesystem: true
            updated_def=$(echo ""$container_def"" | jq 'map(.readonlyRootFilesystem = true)')

            # Register new task definition
            aws ecs register-task-definition --family ""$task"" --container-definitions ""$updated_def""

            log ""‚úÖ Updated task definition $task to enforce read-only root filesystem.""
            ((fixed_count++))
        else
            log ""‚úÖ Task definition $task already enforces read-only root filesystem.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count task definitions were updated.""
    else
        log ""‚úÖ All task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_readonly_root
","Why This is Useful?
üîπ Improves Security: Prevents containers from modifying sensitive files.
üîπ Reduces Attack Surface: Protects against malware or accidental modifications.
üîπ Automated or Manual: Users can specify a task definition or scan all.
üîπ Failsafe Mechanism: Skips task definitions that are already compliant.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped tasks.

","What This Script Does?
1Ô∏è‚É£ Retrieves all ECS task definitions or a user-specified one.
2Ô∏è‚É£ Checks if readonlyRootFilesystem is false.
3Ô∏è‚É£ If found, updates the container definition to enforce read-only mode.
4Ô∏è‚É£ Registers a new compliant task definition.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.

",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS task definitions should have logging enabled,To be added,Compliance,Medium,"Update your task definition in the ECS console and create a new revision. In the container definition, select awslogs as the log driver under the Log configuration section, specifying the log group and stream prefix for Amazon CloudWatch Logs.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-logging-monitoring.html",To be added,"ECS Task Definitions Should Have Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where logging is not enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS task definitions and ensures logging is enabled.
SSM Automation: An SSM document to automatically remediate ECS task definitions missing logging.","Features of the Script:
‚úÖ Retrieves all ECS task definitions and checks their logging configuration.
‚úÖ Identifies task definitions where logging is missing.
‚úÖ If found, updates the task definition to enable logging.
‚úÖ Logs each action, including task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual task definition check
get_user_input() {
    read -p ""Enter the ECS Task Definition name to check (or press Enter to auto-scan all definitions): "" user_task
}

# Function to check and enable logging in ECS task definitions
enable_ecs_logging() {
    log ""Starting ECS task definition security review for logging configuration...""

    # Get list of ECS task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_definitions=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_definitions=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_definitions[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_def in ""${task_definitions[@]}""; do
        log ""Checking task definition: $task_def""

        # Get the task definition details
        task_def_json=$(aws ecs describe-task-definition --task-definition ""$task_def"" --query ""taskDefinition"")

        # Check if logging is enabled
        logging_enabled=$(echo ""$task_def_json"" | jq '.containerDefinitions[] | select(.logConfiguration != null)')

        if [[ -n ""$logging_enabled"" ]]; then
            log ""‚úÖ Task definition $task_def already has logging enabled.""
        else
            log ""‚ö†Ô∏è Task definition $task_def does not have logging enabled. Updating now...""

            # Add logging configuration to the task definition
            updated_task_def=$(echo ""$task_def_json"" | jq '.containerDefinitions[].logConfiguration = {""logDriver"": ""awslogs"", ""options"": {""awslogs-group"": ""/ecs/logs"", ""awslogs-region"": ""us-east-1"", ""awslogs-stream-prefix"": ""ecs""}}')

            # Register the new task definition with logging enabled
            aws ecs register-task-definition --cli-input-json ""$updated_task_def""

            log ""‚úÖ Logging enabled for task definition $task_def.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count task definitions were updated.""
    else
        log ""‚úÖ All task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_ecs_logging
","Why This is Useful?
üîπ Ensures Visibility: Enables logs for monitoring and troubleshooting ECS tasks.
üîπ Improves Security & Compliance: Helps meet security best practices and compliance standards.
üîπ Automated or Manual: Users can specify a task definition name or scan all task definitions.
üîπ Failsafe Mechanism: Skips task definitions that already have logging enabled.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped definitions.","What This Script Does?
1Ô∏è‚É£ Checks all ECS task definitions or a user-specified one.
2Ô∏è‚É£ Retrieves the logging configuration.
3Ô∏è‚É£ If logging is missing, updates the task definition to enable AWS CloudWatch Logs.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,ECS task definitions should have logging enabled,To be added,Compliance,Medium,"Update your task definition in the ECS console and create a new revision. In the container definition, select awslogs as the log driver under the Log configuration section, specifying the log group and stream prefix for Amazon CloudWatch Logs.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-logging-monitoring.html",To be added,"ECS Task Definitions Should Have Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where logging is not enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS task definitions and ensures logging is enabled.
SSM Automation: An SSM document to automatically remediate ECS task definitions missing logging.","Features of the Script:
‚úÖ Retrieves all ECS task definitions and checks their logging configuration.
‚úÖ Identifies task definitions where logging is missing.
‚úÖ If found, updates the task definition to enable logging.
‚úÖ Logs each action, including task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual task definition check
get_user_input() {
    read -p ""Enter the ECS Task Definition name to check (or press Enter to auto-scan all definitions): "" user_task
}

# Function to check and enable logging in ECS task definitions
enable_ecs_logging() {
    log ""Starting ECS task definition security review for logging configuration...""

    # Get list of ECS task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_definitions=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_definitions=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_definitions[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_def in ""${task_definitions[@]}""; do
        log ""Checking task definition: $task_def""

        # Get the task definition details
        task_def_json=$(aws ecs describe-task-definition --task-definition ""$task_def"" --query ""taskDefinition"")

        # Check if logging is enabled
        logging_enabled=$(echo ""$task_def_json"" | jq '.containerDefinitions[] | select(.logConfiguration != null)')

        if [[ -n ""$logging_enabled"" ]]; then
            log ""‚úÖ Task definition $task_def already has logging enabled.""
        else
            log ""‚ö†Ô∏è Task definition $task_def does not have logging enabled. Updating now...""

            # Add logging configuration to the task definition
            updated_task_def=$(echo ""$task_def_json"" | jq '.containerDefinitions[].logConfiguration = {""logDriver"": ""awslogs"", ""options"": {""awslogs-group"": ""/ecs/logs"", ""awslogs-region"": ""us-east-1"", ""awslogs-stream-prefix"": ""ecs""}}')

            # Register the new task definition with logging enabled
            aws ecs register-task-definition --cli-input-json ""$updated_task_def""

            log ""‚úÖ Logging enabled for task definition $task_def.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count task definitions were updated.""
    else
        log ""‚úÖ All task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_ecs_logging
","Why This is Useful?
üîπ Ensures Visibility: Enables logs for monitoring and troubleshooting ECS tasks.
üîπ Improves Security & Compliance: Helps meet security best practices and compliance standards.
üîπ Automated or Manual: Users can specify a task definition name or scan all task definitions.
üîπ Failsafe Mechanism: Skips task definitions that already have logging enabled.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped definitions.","What This Script Does?
1Ô∏è‚É£ Checks all ECS task definitions or a user-specified one.
2Ô∏è‚É£ Retrieves the logging configuration.
3Ô∏è‚É£ If logging is missing, updates the task definition to enable AWS CloudWatch Logs.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
Reliability,ECS task definitions should have logging enabled,To be added,Compliance,Medium,"Update your task definition in the ECS console and create a new revision. In the container definition, select awslogs as the log driver under the Log configuration section, specifying the log group and stream prefix for Amazon CloudWatch Logs.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-logging-monitoring.html",To be added,"ECS Task Definitions Should Have Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where logging is not enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS task definitions and ensures logging is enabled.
SSM Automation: An SSM document to automatically remediate ECS task definitions missing logging.","Features of the Script:
‚úÖ Retrieves all ECS task definitions and checks their logging configuration.
‚úÖ Identifies task definitions where logging is missing.
‚úÖ If found, updates the task definition to enable logging.
‚úÖ Logs each action, including task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual task definition check
get_user_input() {
    read -p ""Enter the ECS Task Definition name to check (or press Enter to auto-scan all definitions): "" user_task
}

# Function to check and enable logging in ECS task definitions
enable_ecs_logging() {
    log ""Starting ECS task definition security review for logging configuration...""

    # Get list of ECS task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_definitions=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_definitions=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_definitions[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_def in ""${task_definitions[@]}""; do
        log ""Checking task definition: $task_def""

        # Get the task definition details
        task_def_json=$(aws ecs describe-task-definition --task-definition ""$task_def"" --query ""taskDefinition"")

        # Check if logging is enabled
        logging_enabled=$(echo ""$task_def_json"" | jq '.containerDefinitions[] | select(.logConfiguration != null)')

        if [[ -n ""$logging_enabled"" ]]; then
            log ""‚úÖ Task definition $task_def already has logging enabled.""
        else
            log ""‚ö†Ô∏è Task definition $task_def does not have logging enabled. Updating now...""

            # Add logging configuration to the task definition
            updated_task_def=$(echo ""$task_def_json"" | jq '.containerDefinitions[].logConfiguration = {""logDriver"": ""awslogs"", ""options"": {""awslogs-group"": ""/ecs/logs"", ""awslogs-region"": ""us-east-1"", ""awslogs-stream-prefix"": ""ecs""}}')

            # Register the new task definition with logging enabled
            aws ecs register-task-definition --cli-input-json ""$updated_task_def""

            log ""‚úÖ Logging enabled for task definition $task_def.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count task definitions were updated.""
    else
        log ""‚úÖ All task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_ecs_logging
","Why This is Useful?
üîπ Ensures Visibility: Enables logs for monitoring and troubleshooting ECS tasks.
üîπ Improves Security & Compliance: Helps meet security best practices and compliance standards.
üîπ Automated or Manual: Users can specify a task definition name or scan all task definitions.
üîπ Failsafe Mechanism: Skips task definitions that already have logging enabled.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped definitions.","What This Script Does?
1Ô∏è‚É£ Checks all ECS task definitions or a user-specified one.
2Ô∏è‚É£ Retrieves the logging configuration.
3Ô∏è‚É£ If logging is missing, updates the task definition to enable AWS CloudWatch Logs.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS task definitions should have logging enabled,To be added,Compliance,Medium,"Update your task definition in the ECS console and create a new revision. In the container definition, select awslogs as the log driver under the Log configuration section, specifying the log group and stream prefix for Amazon CloudWatch Logs.
Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-logging-monitoring.html",To be added,"ECS Task Definitions Should Have Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where logging is not enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS task definitions and ensures logging is enabled.
SSM Automation: An SSM document to automatically remediate ECS task definitions missing logging.","Features of the Script:
‚úÖ Retrieves all ECS task definitions and checks their logging configuration.
‚úÖ Identifies task definitions where logging is missing.
‚úÖ If found, updates the task definition to enable logging.
‚úÖ Logs each action, including task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual task definition check
get_user_input() {
    read -p ""Enter the ECS Task Definition name to check (or press Enter to auto-scan all definitions): "" user_task
}

# Function to check and enable logging in ECS task definitions
enable_ecs_logging() {
    log ""Starting ECS task definition security review for logging configuration...""

    # Get list of ECS task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_definitions=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_definitions=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_definitions[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_def in ""${task_definitions[@]}""; do
        log ""Checking task definition: $task_def""

        # Get the task definition details
        task_def_json=$(aws ecs describe-task-definition --task-definition ""$task_def"" --query ""taskDefinition"")

        # Check if logging is enabled
        logging_enabled=$(echo ""$task_def_json"" | jq '.containerDefinitions[] | select(.logConfiguration != null)')

        if [[ -n ""$logging_enabled"" ]]; then
            log ""‚úÖ Task definition $task_def already has logging enabled.""
        else
            log ""‚ö†Ô∏è Task definition $task_def does not have logging enabled. Updating now...""

            # Add logging configuration to the task definition
            updated_task_def=$(echo ""$task_def_json"" | jq '.containerDefinitions[].logConfiguration = {""logDriver"": ""awslogs"", ""options"": {""awslogs-group"": ""/ecs/logs"", ""awslogs-region"": ""us-east-1"", ""awslogs-stream-prefix"": ""ecs""}}')

            # Register the new task definition with logging enabled
            aws ecs register-task-definition --cli-input-json ""$updated_task_def""

            log ""‚úÖ Logging enabled for task definition $task_def.""
            ((fixed_count++))
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count task definitions were updated.""
    else
        log ""‚úÖ All task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_ecs_logging
","Why This is Useful?
üîπ Ensures Visibility: Enables logs for monitoring and troubleshooting ECS tasks.
üîπ Improves Security & Compliance: Helps meet security best practices and compliance standards.
üîπ Automated or Manual: Users can specify a task definition name or scan all task definitions.
üîπ Failsafe Mechanism: Skips task definitions that already have logging enabled.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped definitions.","What This Script Does?
1Ô∏è‚É£ Checks all ECS task definitions or a user-specified one.
2Ô∏è‚É£ Retrieves the logging configuration.
3Ô∏è‚É£ If logging is missing, updates the task definition to enable AWS CloudWatch Logs.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS task definitions should not share the host's process namespace,To be added,Compliance,High,"Update your task definition in the ECS console and create a new revision. Set the PID mode to task or leave it blank to prevent the container from accessing the host's processes, enhancing security.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html",To be added,"ECS Task Definitions Should Not Share the Host‚Äôs Process Namespace
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where pidMode=host.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans ECS task definitions and flags any that share the host‚Äôs process namespace.
SSM Automation: Automatically modify non-compliant task definitions to remove pidMode=host.","üîç Features of the Script:
‚úÖ Retrieves all ECS task definitions in the AWS account.
‚úÖ Checks if pidMode is set to host, which allows container processes to see and interact with the host‚Äôs processes.
‚úÖ If found, creates a new task revision with pidMode set to task.
‚úÖ Logs all actions, including skipped task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Task Definition family to check (or press Enter to auto-scan all): "" user_task
}

# Function to check and fix ECS task definitions with host PID mode
fix_pid_mode() {
    log ""Starting ECS task definition validation...""

    # Get list of task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_families=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_families=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_families[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_arn in ""${task_families[@]}""; do
        log ""Checking ECS task definition: $task_arn""

        # Get the latest task definition details
        task_json=$(aws ecs describe-task-definition --task-definition ""$task_arn"" --query ""taskDefinition"" --output json)

        # Extract pidMode
        pid_mode=$(echo ""$task_json"" | jq -r '.pidMode')

        if [[ ""$pid_mode"" != ""host"" ]]; then
            log ""‚úÖ Task definition $task_arn does not share the host's process namespace.""
            continue
        fi

        log ""‚ö†Ô∏è Task definition $task_arn uses 'pidMode=host'. Fixing...""

        # Modify JSON to set 'pidMode' to 'task'
        updated_task_json=$(echo ""$task_json"" | jq '.pidMode = ""task""')

        # Register the updated task definition
        new_task_arn=$(aws ecs register-task-definition --cli-input-json ""$updated_task_json"" --query ""taskDefinition.taskDefinitionArn"" --output text)

        log ""‚úÖ Updated task definition created: $new_task_arn (host PID mode removed).""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count task definitions updated.""
    else
        log ""‚úÖ All ECS task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_pid_mode
","üöÄ Why This is Useful?
üîπ Enhances Security: Prevents containers from accessing or interfering with host-level processes, reducing the risk of privilege escalation.
üîπ Limits Attack Surface: Restricts containerized applications from interacting with other processes running on the host.
üîπ Ensures Compliance: Aligns with security best practices and regulatory guidelines for container isolation.
üîπ Improves Stability: Prevents unintended interactions between containers and the host system, reducing potential failures or conflicts.
üîπ Reduces Exploitation Risks: Mitigates threats like container breakouts, where a compromised container could manipulate host processes.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS task definitions in the AWS account.
2Ô∏è‚É£ Checks if pidMode=host, which exposes host process namespaces.
3Ô∏è‚É£ If found, creates a new task revision with pidMode=task.
4Ô∏è‚É£ Logs all actions, ensuring compliance.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS task definitions should not share the host's process namespace,To be added,Compliance,High,"Update your task definition in the ECS console and create a new revision. Set the PID mode to task or leave it blank to prevent the container from accessing the host's processes, enhancing security.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html",To be added,"ECS Task Definitions Should Not Share the Host‚Äôs Process Namespace
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect ECS task definitions where pidMode=host.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans ECS task definitions and flags any that share the host‚Äôs process namespace.
SSM Automation: Automatically modify non-compliant task definitions to remove pidMode=host.","üîç Features of the Script:
‚úÖ Retrieves all ECS task definitions in the AWS account.
‚úÖ Checks if pidMode is set to host, which allows container processes to see and interact with the host‚Äôs processes.
‚úÖ If found, creates a new task revision with pidMode set to task.
‚úÖ Logs all actions, including skipped task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Task Definition family to check (or press Enter to auto-scan all): "" user_task
}

# Function to check and fix ECS task definitions with host PID mode
fix_pid_mode() {
    log ""Starting ECS task definition validation...""

    # Get list of task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_families=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_families=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_families[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_arn in ""${task_families[@]}""; do
        log ""Checking ECS task definition: $task_arn""

        # Get the latest task definition details
        task_json=$(aws ecs describe-task-definition --task-definition ""$task_arn"" --query ""taskDefinition"" --output json)

        # Extract pidMode
        pid_mode=$(echo ""$task_json"" | jq -r '.pidMode')

        if [[ ""$pid_mode"" != ""host"" ]]; then
            log ""‚úÖ Task definition $task_arn does not share the host's process namespace.""
            continue
        fi

        log ""‚ö†Ô∏è Task definition $task_arn uses 'pidMode=host'. Fixing...""

        # Modify JSON to set 'pidMode' to 'task'
        updated_task_json=$(echo ""$task_json"" | jq '.pidMode = ""task""')

        # Register the updated task definition
        new_task_arn=$(aws ecs register-task-definition --cli-input-json ""$updated_task_json"" --query ""taskDefinition.taskDefinitionArn"" --output text)

        log ""‚úÖ Updated task definition created: $new_task_arn (host PID mode removed).""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count task definitions updated.""
    else
        log ""‚úÖ All ECS task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_pid_mode
","üöÄ Why This is Useful?
üîπ Enhances Security: Prevents containers from accessing or interfering with host-level processes, reducing the risk of privilege escalation.
üîπ Limits Attack Surface: Restricts containerized applications from interacting with other processes running on the host.
üîπ Ensures Compliance: Aligns with security best practices and regulatory guidelines for container isolation.
üîπ Improves Stability: Prevents unintended interactions between containers and the host system, reducing potential failures or conflicts.
üîπ Reduces Exploitation Risks: Mitigates threats like container breakouts, where a compromised container could manipulate host processes.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS task definitions in the AWS account.
2Ô∏è‚É£ Checks if pidMode=host, which exposes host process namespaces.
3Ô∏è‚É£ If found, creates a new task revision with pidMode=task.
4Ô∏è‚É£ Logs all actions, ensuring compliance.",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS task definitions should not use root user.,To be added,Compliance,High,"Update your task definition in the ECS console and specify a non-root user ID or username in the User field of the container definition. This enhances security by reducing the risk of privilege escalation within the container.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/ecs-task-definition-nonroot-user.html",To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ECS task definitions should not use root user.
check_compliance() {
    log ""Checking AWS resources for ECS task definitions should not use root user. compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ECS,ECS task definition container definitions should be checked for host mode,To be added,Compliance,High,"Go to the AWS Management Console, select your ECS cluster, navigate to the Task Definitions section, and review the container definitions for the networkMode setting. If it‚Äôs set to host, the container will share the host's network stack, allowing for direct access to host ports‚Äã
Reference: https://docs.aws.amazon.com/config/latest/developerguide/ecs-task-definition-user-for-host-mode-check.html",To be added,"ECS Task Definition Container Definitions Should Be Checked for Host Mode
‚úÖ Automation Approach:

AWS Config Rule: Detect ECS task definitions where networkMode=host.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans ECS task definitions and flags any using host mode.
SSM Automation: Automatically modifies non-compliant task definitions to use awsvpc or bridge mode.","üîç Features of the Script:
‚úÖ Retrieves all ECS task definitions in the AWS account.
‚úÖ Checks if networkMode is set to host, which allows direct communication with the host network.
‚úÖ If found, creates a new task revision with networkMode changed to awsvpc.
‚úÖ Logs all actions, including skipped task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Task Definition family to check (or press Enter to auto-scan all): "" user_task
}

# Function to check and fix ECS task definitions with host network mode
fix_host_mode() {
    log ""Starting ECS task definition validation...""

    # Get list of task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_families=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_families=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_families[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_arn in ""${task_families[@]}""; do
        log ""Checking ECS task definition: $task_arn""

        # Get the latest task definition details
        task_json=$(aws ecs describe-task-definition --task-definition ""$task_arn"" --query ""taskDefinition"" --output json)

        # Extract networkMode
        network_mode=$(echo ""$task_json"" | jq -r '.networkMode')

        if [[ ""$network_mode"" != ""host"" ]]; then
            log ""‚úÖ Task definition $task_arn does not use host network mode.""
            continue
        fi

        log ""‚ö†Ô∏è Task definition $task_arn uses 'networkMode=host'. Fixing...""

        # Modify JSON to set 'networkMode' to 'awsvpc'
        updated_task_json=$(echo ""$task_json"" | jq '.networkMode = ""awsvpc""')

        # Register the updated task definition
        new_task_arn=$(aws ecs register-task-definition --cli-input-json ""$updated_task_json"" --query ""taskDefinition.taskDefinitionArn"" --output text)

        log ""‚úÖ Updated task definition created: $new_task_arn (host network mode removed).""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count task definitions updated.""
    else
        log ""‚úÖ All ECS task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_host_mode
","üöÄ Why This is Useful?  ‚úÖ Prevents Security Risks: host mode bypasses network isolation, making containers directly accessible from the host and increasing attack surface.
‚úÖ Ensures Network Segmentation: Enforces awsvpc or bridge mode to provide better isolation between tasks and prevent lateral movement within the cluster.
‚úÖ Mitigates Compliance Violations: Reduces risks associated with unauthorized access and follows industry best practices for container security.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS task definitions in the AWS account.
2Ô∏è‚É£ Checks if networkMode=host, which exposes host networking.
3Ô∏è‚É£ If found, creates a new task revision with networkMode=awsvpc.
4Ô∏è‚É£ Logs all actions, ensuring compliance.",Bash,Weekly,SOC 2,2024-02-13
Security,ECS task definition container definitions should be checked for host mode,To be added,Compliance,High,"Go to the AWS Management Console, select your ECS cluster, navigate to the Task Definitions section, and review the container definitions for the networkMode setting. If it‚Äôs set to host, the container will share the host's network stack, allowing for direct access to host ports‚Äã
Reference: https://docs.aws.amazon.com/config/latest/developerguide/ecs-task-definition-user-for-host-mode-check.html",To be added,"ECS Task Definition Container Definitions Should Be Checked for Host Mode
‚úÖ Automation Approach:

AWS Config Rule: Detect ECS task definitions where networkMode=host.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans ECS task definitions and flags any using host mode.
SSM Automation: Automatically modifies non-compliant task definitions to use awsvpc or bridge mode.","üîç Features of the Script:
‚úÖ Retrieves all ECS task definitions in the AWS account.
‚úÖ Checks if networkMode is set to host, which allows direct communication with the host network.
‚úÖ If found, creates a new task revision with networkMode changed to awsvpc.
‚úÖ Logs all actions, including skipped task definitions that are already compliant.
‚úÖ Supports both manual mode (user inputs a task definition) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Task Definition family to check (or press Enter to auto-scan all): "" user_task
}

# Function to check and fix ECS task definitions with host network mode
fix_host_mode() {
    log ""Starting ECS task definition validation...""

    # Get list of task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_families=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_families=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_families[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_arn in ""${task_families[@]}""; do
        log ""Checking ECS task definition: $task_arn""

        # Get the latest task definition details
        task_json=$(aws ecs describe-task-definition --task-definition ""$task_arn"" --query ""taskDefinition"" --output json)

        # Extract networkMode
        network_mode=$(echo ""$task_json"" | jq -r '.networkMode')

        if [[ ""$network_mode"" != ""host"" ]]; then
            log ""‚úÖ Task definition $task_arn does not use host network mode.""
            continue
        fi

        log ""‚ö†Ô∏è Task definition $task_arn uses 'networkMode=host'. Fixing...""

        # Modify JSON to set 'networkMode' to 'awsvpc'
        updated_task_json=$(echo ""$task_json"" | jq '.networkMode = ""awsvpc""')

        # Register the updated task definition
        new_task_arn=$(aws ecs register-task-definition --cli-input-json ""$updated_task_json"" --query ""taskDefinition.taskDefinitionArn"" --output text)

        log ""‚úÖ Updated task definition created: $new_task_arn (host network mode removed).""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count task definitions updated.""
    else
        log ""‚úÖ All ECS task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
fix_host_mode
","üöÄ Why This is Useful?  ‚úÖ Prevents Security Risks: host mode bypasses network isolation, making containers directly accessible from the host and increasing attack surface.
‚úÖ Ensures Network Segmentation: Enforces awsvpc or bridge mode to provide better isolation between tasks and prevent lateral movement within the cluster.
‚úÖ Mitigates Compliance Violations: Reduces risks associated with unauthorized access and follows industry best practices for container security.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS task definitions in the AWS account.
2Ô∏è‚É£ Checks if networkMode=host, which exposes host networking.
3Ô∏è‚É£ If found, creates a new task revision with networkMode=awsvpc.
4Ô∏è‚É£ Logs all actions, ensuring compliance.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS access points should enforce a root directory,To be added,Compliance,High,Ensure EFS access points enforce a root directory. Steps: 1. Review EFS access point configurations. 2. Enforce a root directory for all access points to enhance security. https://docs.aws.amazon.com/efs/latest/userguide/efs-access-points.html,Cost: None/$0 ,"EFS Access Points Should Enforce a Root Directory
‚úÖ Automation Approach:

AWS Config Rule: Check if EFS access points have a root directory enforced.
Lambda Function: A scheduled Lambda that scans and corrects misconfigured access points.
SSM Automation: Use an SSM document to automatically remediate non-compliant EFS access points.","Features of the Script:
‚úÖ Retrieves all EFS access points in the AWS account.
‚úÖ Checks if each access point enforces a root directory.
‚úÖ If missing, updates the access point with a root directory (/efs-root).
‚úÖ Logs each action, including skipped access points.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the EFS Access Point ID to check (or press Enter to auto-scan all access points): "" user_ap
}

# Function to enforce root directory on EFS access points
enforce_efs_root_directory() {
    log ""Starting EFS root directory enforcement process...""

    # Get list of EFS access points (manual or auto)
    if [[ -n ""$user_ap"" ]]; then
        access_points=(""$user_ap"")
    else
        log ""No manual input provided. Scanning all EFS access points...""
        access_points=($(aws efs describe-access-points --query ""AccessPoints[].AccessPointId"" --output text))
    fi

    if [[ ${#access_points[@]} -eq 0 ]]; then
        log ""No EFS access points found.""
        exit 0
    fi

    fixed_count=0
    for ap_id in ""${access_points[@]}""; do
        log ""Checking EFS access point: $ap_id""

        # Get existing root directory
        root_directory=$(aws efs describe-access-points --access-point-id ""$ap_id"" \
            --query ""AccessPoints[].RootDirectory"" --output json)

        if [[ -n ""$root_directory"" && ""$root_directory"" != ""None"" ]]; then
            log ""‚úÖ EFS access point $ap_id already enforces a root directory.""
            continue
        fi

        log ""‚ö†Ô∏è EFS access point $ap_id does NOT enforce a root directory. Applying default settings...""

        # Apply default root directory (`/efs-root`)
        aws efs update-access-point --access-point-id ""$ap_id"" --root-directory Path=""/efs-root""

        log ""‚úÖ Updated EFS access point $ap_id to enforce root directory.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count EFS access points updated.""
    else
        log ""‚úÖ All EFS access points are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_root_directory
","üöÄ Why This Script is Useful?  Security: It ensures that the file system's root is controlled and that users are not able to access unintended directories.
Compliance: This helps meet specific security and compliance requirements that demand root directory enforcement for better access control.
Automated Remediation: It can automatically apply fixes to non-compliant EFS access points, saving time and reducing manual intervention.
Consistency: It ensures consistency across your AWS infrastructure by applying the same root directory settings to all access points.","What the Script Does
Logs Activities: It logs all actions taken, including identifying and fixing non-compliant access points.
Scans EFS Access Points: It retrieves a list of all EFS access points in your AWS environment, either automatically or based on user input (if you specify an access point ID).
Checks for Root Directory Enforcement: For each EFS access point, it checks whether the root directory is enforced.
Enforces Root Directory if Missing: If an access point does not enforce a root directory, the script updates it to use a default directory (/efs-root).
Logs Remediation: If the script modifies an access point, it logs the action taken, indicating which access point was updated.
Compliance Check: The script verifies whether all EFS access points are compliant with the root directory enforcement requirement and provides a summary at the end.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS access points should enforce a root directory,To be added,Compliance,High,Ensure EFS access points enforce a root directory. Steps: 1. Review EFS access point configurations. 2. Enforce a root directory for all access points to enhance security. https://docs.aws.amazon.com/efs/latest/userguide/efs-access-points.html,Cost: None/$0 ,"EFS Access Points Should Enforce a Root Directory
‚úÖ Automation Approach:

AWS Config Rule: Check if EFS access points have a root directory enforced.
Lambda Function: A scheduled Lambda that scans and corrects misconfigured access points.
SSM Automation: Use an SSM document to automatically remediate non-compliant EFS access points.","Features of the Script:
‚úÖ Retrieves all EFS access points in the AWS account.
‚úÖ Checks if each access point enforces a root directory.
‚úÖ If missing, updates the access point with a root directory (/efs-root).
‚úÖ Logs each action, including skipped access points.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the EFS Access Point ID to check (or press Enter to auto-scan all access points): "" user_ap
}

# Function to enforce root directory on EFS access points
enforce_efs_root_directory() {
    log ""Starting EFS root directory enforcement process...""

    # Get list of EFS access points (manual or auto)
    if [[ -n ""$user_ap"" ]]; then
        access_points=(""$user_ap"")
    else
        log ""No manual input provided. Scanning all EFS access points...""
        access_points=($(aws efs describe-access-points --query ""AccessPoints[].AccessPointId"" --output text))
    fi

    if [[ ${#access_points[@]} -eq 0 ]]; then
        log ""No EFS access points found.""
        exit 0
    fi

    fixed_count=0
    for ap_id in ""${access_points[@]}""; do
        log ""Checking EFS access point: $ap_id""

        # Get existing root directory
        root_directory=$(aws efs describe-access-points --access-point-id ""$ap_id"" \
            --query ""AccessPoints[].RootDirectory"" --output json)

        if [[ -n ""$root_directory"" && ""$root_directory"" != ""None"" ]]; then
            log ""‚úÖ EFS access point $ap_id already enforces a root directory.""
            continue
        fi

        log ""‚ö†Ô∏è EFS access point $ap_id does NOT enforce a root directory. Applying default settings...""

        # Apply default root directory (`/efs-root`)
        aws efs update-access-point --access-point-id ""$ap_id"" --root-directory Path=""/efs-root""

        log ""‚úÖ Updated EFS access point $ap_id to enforce root directory.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count EFS access points updated.""
    else
        log ""‚úÖ All EFS access points are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_root_directory
","üöÄ Why This Script is Useful?  Security: It ensures that the file system's root is controlled and that users are not able to access unintended directories.
Compliance: This helps meet specific security and compliance requirements that demand root directory enforcement for better access control.
Automated Remediation: It can automatically apply fixes to non-compliant EFS access points, saving time and reducing manual intervention.
Consistency: It ensures consistency across your AWS infrastructure by applying the same root directory settings to all access points.","What the Script Does
Logs Activities: It logs all actions taken, including identifying and fixing non-compliant access points.
Scans EFS Access Points: It retrieves a list of all EFS access points in your AWS environment, either automatically or based on user input (if you specify an access point ID).
Checks for Root Directory Enforcement: For each EFS access point, it checks whether the root directory is enforced.
Enforces Root Directory if Missing: If an access point does not enforce a root directory, the script updates it to use a default directory (/efs-root).
Logs Remediation: If the script modifies an access point, it logs the action taken, indicating which access point was updated.
Compliance Check: The script verifies whether all EFS access points are compliant with the root directory enforcement requirement and provides a summary at the end.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS access points should enforce a user identity,To be added,Compliance,High,Ensure EFS access points enforce a user identity. Steps: 1. Review EFS access point settings. 2. Implement user identity enforcement for access points to restrict access based on user. https://docs.aws.amazon.com/efs/latest/userguide/efs-access-points.html,Cost: None/$0 ,"EFS Access Points Should Enforce a User Identity
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if EFS access points enforce a user identity.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EFS access points and updates them if missing user identity enforcement.
SSM Automation: Use an SSM document to remediate non-compliant EFS access points automatically.","üîç Features of the Script:
‚úÖ Retrieves all EFS access points in the AWS account.
‚úÖ Checks if a POSIX user is defined in each access point.
‚úÖ If missing, updates the access point to enforce a user identity with a default UID and GID.
‚úÖ Logs each action, including skipped access points.
‚úÖ Handles invalid input gracefully (loops until a valid access point is found).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the EFS Access Point ID to check (or press Enter to auto-scan all access points): "" user_ap
}

# Function to enforce user identity on EFS access points
enforce_efs_user_identity() {
    log ""Starting EFS user identity enforcement process...""

    # Get list of EFS access points (manual or auto)
    if [[ -n ""$user_ap"" ]]; then
        access_points=(""$user_ap"")
    else
        log ""No manual input provided. Scanning all EFS access points...""
        access_points=($(aws efs describe-access-points --query ""AccessPoints[].AccessPointId"" --output text))
    fi

    if [[ ${#access_points[@]} -eq 0 ]]; then
        log ""No EFS access points found.""
        exit 0
    fi

    fixed_count=0
    for ap_id in ""${access_points[@]}""; do
        log ""Checking EFS access point: $ap_id""

        # Get existing POSIX user configuration
        user_identity=$(aws efs describe-access-points --access-point-id ""$ap_id"" \
            --query ""AccessPoints[].PosixUser"" --output json)

        if [[ -n ""$user_identity"" && ""$user_identity"" != ""None"" ]]; then
            log ""‚úÖ EFS access point $ap_id already enforces a user identity.""
            continue
        fi

        log ""‚ö†Ô∏è EFS access point $ap_id does NOT enforce a user identity. Applying default settings...""

        # Apply a default POSIX user (UID: 1001, GID: 1001)
        aws efs update-access-point --access-point-id ""$ap_id"" --posix-user Uid=1001,Gid=1001

        log ""‚úÖ Updated EFS access point $ap_id to enforce user identity.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count EFS access points updated.""
    else
        log ""‚úÖ All EFS access points are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_user_identity
","Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures EFS access points enforce a user identity.
üîπ Manual or Automated: Users can specify an access point ID or scan all access points.
üîπ Failsafe Mechanism: Skips access points that already enforce a user identity.
üîπ Full Logging: Keeps track of all actions, ensuring compliance visibility.","What This Script Does:
1Ô∏è‚É£ Retrieves all EFS access points in the AWS account.
2Ô∏è‚É£ Checks if a POSIX user identity is defined in each access point.
3Ô∏è‚É£ If missing, applies a default user identity (UID: 1001, GID: 1001).
4Ô∏è‚É£ Logs each action, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS access points should enforce a user identity,To be added,Compliance,High,Ensure EFS access points enforce a user identity. Steps: 1. Review EFS access point settings. 2. Implement user identity enforcement for access points to restrict access based on user. https://docs.aws.amazon.com/efs/latest/userguide/efs-access-points.html,Cost: None/$0 ,"EFS Access Points Should Enforce a User Identity
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if EFS access points enforce a user identity.
Lambda Function: A scheduled Lambda (via EventBridge) that scans all EFS access points and updates them if missing user identity enforcement.
SSM Automation: Use an SSM document to remediate non-compliant EFS access points automatically.","üîç Features of the Script:
‚úÖ Retrieves all EFS access points in the AWS account.
‚úÖ Checks if a POSIX user is defined in each access point.
‚úÖ If missing, updates the access point to enforce a user identity with a default UID and GID.
‚úÖ Logs each action, including skipped access points.
‚úÖ Handles invalid input gracefully (loops until a valid access point is found).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the EFS Access Point ID to check (or press Enter to auto-scan all access points): "" user_ap
}

# Function to enforce user identity on EFS access points
enforce_efs_user_identity() {
    log ""Starting EFS user identity enforcement process...""

    # Get list of EFS access points (manual or auto)
    if [[ -n ""$user_ap"" ]]; then
        access_points=(""$user_ap"")
    else
        log ""No manual input provided. Scanning all EFS access points...""
        access_points=($(aws efs describe-access-points --query ""AccessPoints[].AccessPointId"" --output text))
    fi

    if [[ ${#access_points[@]} -eq 0 ]]; then
        log ""No EFS access points found.""
        exit 0
    fi

    fixed_count=0
    for ap_id in ""${access_points[@]}""; do
        log ""Checking EFS access point: $ap_id""

        # Get existing POSIX user configuration
        user_identity=$(aws efs describe-access-points --access-point-id ""$ap_id"" \
            --query ""AccessPoints[].PosixUser"" --output json)

        if [[ -n ""$user_identity"" && ""$user_identity"" != ""None"" ]]; then
            log ""‚úÖ EFS access point $ap_id already enforces a user identity.""
            continue
        fi

        log ""‚ö†Ô∏è EFS access point $ap_id does NOT enforce a user identity. Applying default settings...""

        # Apply a default POSIX user (UID: 1001, GID: 1001)
        aws efs update-access-point --access-point-id ""$ap_id"" --posix-user Uid=1001,Gid=1001

        log ""‚úÖ Updated EFS access point $ap_id to enforce user identity.""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count EFS access points updated.""
    else
        log ""‚úÖ All EFS access points are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_user_identity
","Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures EFS access points enforce a user identity.
üîπ Manual or Automated: Users can specify an access point ID or scan all access points.
üîπ Failsafe Mechanism: Skips access points that already enforce a user identity.
üîπ Full Logging: Keeps track of all actions, ensuring compliance visibility.","What This Script Does:
1Ô∏è‚É£ Retrieves all EFS access points in the AWS account.
2Ô∏è‚É£ Checks if a POSIX user identity is defined in each access point.
3Ô∏è‚É£ If missing, applies a default user identity (UID: 1001, GID: 1001).
4Ô∏è‚É£ Logs each action, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS file system encryption at rest should be enabled,To be added,Compliance,High,Ensure EFS file system encryption at rest is enabled. Steps: 1. Review file system settings. 2. Enable encryption at rest for data stored in EFS file systems. https://docs.aws.amazon.com/efs/latest/userguide/encryption.html,Cost: None/$0 ,"EFS File System Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EFS file systems that are not encrypted at rest.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EFS file systems and enables encryption if missing.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems.","Features of the Script:
‚úÖ Retrieves all EFS file systems and checks their encryption status.
‚úÖ Identifies EFS not encrypted at rest.
‚úÖ If missing, creates a new encrypted EFS file system and migrates data.
‚úÖ Logs each action, including skipped EFS file systems that are already compliant.
‚úÖ Supports both manual mode (user inputs an EFS ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce EFS encryption
enforce_efs_encryption() {
    log ""Starting EFS encryption review...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""Checking EFS file system: $efs_id""

        # Check encryption status
        encryption_status=$(aws efs describe-file-systems --file-system-id ""$efs_id"" --query ""FileSystems[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ö†Ô∏è EFS file system $efs_id is not encrypted. Encrypting now...""

            # Get default CMK (or create one if not exists)
            cmk_arn=$(aws kms list-keys --query ""Keys[0].KeyArn"" --output text)
            if [[ -z ""$cmk_arn"" ]]; then
                cmk_arn=$(aws kms create-key --query ""KeyMetadata.Arn"" --output text)
                log ""üîë Created new CMK for encryption: $cmk_arn""
            fi

            # Create new encrypted EFS file system
            new_efs_id=$(aws efs create-file-system --encrypted --kms-key-id ""$cmk_arn"" --query ""FileSystemId"" --output text)

            log ""‚úÖ Created encrypted EFS file system: $new_efs_id""

            # Optionally, migrate data (requires additional handling)
            log ""‚ö†Ô∏è Data migration from old EFS $efs_id to $new_efs_id is required manually.""

            ((fixed_count++))
        else
            log ""‚úÖ EFS file system $efs_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption enforcement completed. $fixed_count EFS file systems were updated.""
    else
        log ""‚úÖ All EFS file systems are already encrypted. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_encryption
","üöÄ Why This Script is Useful?
üîπ Automated Compliance ‚Äì Ensures all EFS file systems are encrypted.
üîπ Security Best Practices ‚Äì Protects data against unauthorized access.
üîπ Manual & Automated Support ‚Äì Works both automatically and manually.
üîπ Logging & Visibility ‚Äì Keeps a detailed log of all enforcement actions.","EFS File Systems Should Be Encrypted with CMK
1Ô∏è‚É£ Retrieves all EFS file systems in the AWS account.
2Ô∏è‚É£ Checks if encryption is enabled for each EFS.
3Ô∏è‚É£ If encryption is missing, creates a new encrypted EFS file system using a CMK.
4Ô∏è‚É£ Logs each action taken, including skipped or modified EFS instances.
5Ô∏è‚É£ Supports manual mode (user provides an EFS ID) and automatic scanning.",Bash,Weekly,SOC 2,2024-02-13
Security,EFS file system encryption at rest should be enabled,To be added,Compliance,High,Ensure EFS file system encryption at rest is enabled. Steps: 1. Review file system settings. 2. Enable encryption at rest for data stored in EFS file systems. https://docs.aws.amazon.com/efs/latest/userguide/encryption.html,Cost: None/$0 ,"EFS File System Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EFS file systems that are not encrypted at rest.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EFS file systems and enables encryption if missing.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems.","Features of the Script:
‚úÖ Retrieves all EFS file systems and checks their encryption status.
‚úÖ Identifies EFS not encrypted at rest.
‚úÖ If missing, creates a new encrypted EFS file system and migrates data.
‚úÖ Logs each action, including skipped EFS file systems that are already compliant.
‚úÖ Supports both manual mode (user inputs an EFS ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce EFS encryption
enforce_efs_encryption() {
    log ""Starting EFS encryption review...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""Checking EFS file system: $efs_id""

        # Check encryption status
        encryption_status=$(aws efs describe-file-systems --file-system-id ""$efs_id"" --query ""FileSystems[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ö†Ô∏è EFS file system $efs_id is not encrypted. Encrypting now...""

            # Get default CMK (or create one if not exists)
            cmk_arn=$(aws kms list-keys --query ""Keys[0].KeyArn"" --output text)
            if [[ -z ""$cmk_arn"" ]]; then
                cmk_arn=$(aws kms create-key --query ""KeyMetadata.Arn"" --output text)
                log ""üîë Created new CMK for encryption: $cmk_arn""
            fi

            # Create new encrypted EFS file system
            new_efs_id=$(aws efs create-file-system --encrypted --kms-key-id ""$cmk_arn"" --query ""FileSystemId"" --output text)

            log ""‚úÖ Created encrypted EFS file system: $new_efs_id""

            # Optionally, migrate data (requires additional handling)
            log ""‚ö†Ô∏è Data migration from old EFS $efs_id to $new_efs_id is required manually.""

            ((fixed_count++))
        else
            log ""‚úÖ EFS file system $efs_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption enforcement completed. $fixed_count EFS file systems were updated.""
    else
        log ""‚úÖ All EFS file systems are already encrypted. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_encryption
","üöÄ Why This Script is Useful?
üîπ Automated Compliance ‚Äì Ensures all EFS file systems are encrypted.
üîπ Security Best Practices ‚Äì Protects data against unauthorized access.
üîπ Manual & Automated Support ‚Äì Works both automatically and manually.
üîπ Logging & Visibility ‚Äì Keeps a detailed log of all enforcement actions.","EFS File Systems Should Be Encrypted with CMK
1Ô∏è‚É£ Retrieves all EFS file systems in the AWS account.
2Ô∏è‚É£ Checks if encryption is enabled for each EFS.
3Ô∏è‚É£ If encryption is missing, creates a new encrypted EFS file system using a CMK.
4Ô∏è‚É£ Logs each action taken, including skipped or modified EFS instances.
5Ô∏è‚É£ Supports manual mode (user provides an EFS ID) and automatic scanning.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS file system encryption at rest should be enabled,To be added,Compliance,High,Ensure EFS file system encryption at rest is enabled. Steps: 1. Review file system settings. 2. Enable encryption at rest for data stored in EFS file systems. https://docs.aws.amazon.com/efs/latest/userguide/encryption.html,Cost: None/$0 ,"EFS File System Encryption at Rest Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EFS file systems that are not encrypted at rest.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EFS file systems and enables encryption if missing.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems.","Features of the Script:
‚úÖ Retrieves all EFS file systems and checks their encryption status.
‚úÖ Identifies EFS not encrypted at rest.
‚úÖ If missing, creates a new encrypted EFS file system and migrates data.
‚úÖ Logs each action, including skipped EFS file systems that are already compliant.
‚úÖ Supports both manual mode (user inputs an EFS ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce EFS encryption
enforce_efs_encryption() {
    log ""Starting EFS encryption review...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""Checking EFS file system: $efs_id""

        # Check encryption status
        encryption_status=$(aws efs describe-file-systems --file-system-id ""$efs_id"" --query ""FileSystems[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ö†Ô∏è EFS file system $efs_id is not encrypted. Encrypting now...""

            # Get default CMK (or create one if not exists)
            cmk_arn=$(aws kms list-keys --query ""Keys[0].KeyArn"" --output text)
            if [[ -z ""$cmk_arn"" ]]; then
                cmk_arn=$(aws kms create-key --query ""KeyMetadata.Arn"" --output text)
                log ""üîë Created new CMK for encryption: $cmk_arn""
            fi

            # Create new encrypted EFS file system
            new_efs_id=$(aws efs create-file-system --encrypted --kms-key-id ""$cmk_arn"" --query ""FileSystemId"" --output text)

            log ""‚úÖ Created encrypted EFS file system: $new_efs_id""

            # Optionally, migrate data (requires additional handling)
            log ""‚ö†Ô∏è Data migration from old EFS $efs_id to $new_efs_id is required manually.""

            ((fixed_count++))
        else
            log ""‚úÖ EFS file system $efs_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption enforcement completed. $fixed_count EFS file systems were updated.""
    else
        log ""‚úÖ All EFS file systems are already encrypted. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_encryption
","üöÄ Why This Script is Useful?
üîπ Automated Compliance ‚Äì Ensures all EFS file systems are encrypted.
üîπ Security Best Practices ‚Äì Protects data against unauthorized access.
üîπ Manual & Automated Support ‚Äì Works both automatically and manually.
üîπ Logging & Visibility ‚Äì Keeps a detailed log of all enforcement actions.","EFS File Systems Should Be Encrypted with CMK
1Ô∏è‚É£ Retrieves all EFS file systems in the AWS account.
2Ô∏è‚É£ Checks if encryption is enabled for each EFS.
3Ô∏è‚É£ If encryption is missing, creates a new encrypted EFS file system using a CMK.
4Ô∏è‚É£ Logs each action taken, including skipped or modified EFS instances.
5Ô∏è‚É£ Supports manual mode (user provides an EFS ID) and automatic scanning.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS file systems should be encrypted with CMK,To be added,Compliance,High,Ensure EFS file systems are encrypted with CMK. Steps: 1. Review the encryption settings. 2. Configure EFS to use Customer Managed Keys (CMK) for encryption. https://docs.aws.amazon.com/efs/latest/userguide/encryption.html,Cost: None/$0 ,"EFS File Systems Should Be Encrypted with CMK (Customer Managed Key)
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EFS file systems that are not encrypted with a CMK.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EFS file systems and enables encryption using a CMK if missing.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems.","Features of the Script:
‚úÖ Retrieves all EFS file systems and checks their encryption status.
‚úÖ Identifies EFS not encrypted with a CMK.
‚úÖ If found, creates a new encrypted EFS file system and migrates data.
‚úÖ Logs each action, including skipped EFS file systems that are already compliant.
‚úÖ Supports both manual mode (user inputs a file system ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce EFS encryption with CMK
enforce_efs_encryption() {
    log ""Starting EFS encryption review...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""Checking EFS file system: $efs_id""

        # Check encryption status
        encryption_status=$(aws efs describe-file-systems --file-system-id ""$efs_id"" --query ""FileSystems[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ö†Ô∏è EFS file system $efs_id is not encrypted. Encrypting now...""

            # Get default CMK (or create one if not exists)
            cmk_arn=$(aws kms list-keys --query ""Keys[0].KeyArn"" --output text)
            if [[ -z ""$cmk_arn"" ]]; then
                cmk_arn=$(aws kms create-key --query ""KeyMetadata.Arn"" --output text)
                log ""üîë Created new CMK for encryption: $cmk_arn""
            fi

            # Create new encrypted EFS file system
            new_efs_id=$(aws efs create-file-system --encrypted --kms-key-id ""$cmk_arn"" --query ""FileSystemId"" --output text)

            log ""‚úÖ Created encrypted EFS file system: $new_efs_id""

            # Optionally, migrate data (requires additional handling)
            log ""‚ö†Ô∏è Data migration from old EFS $efs_id to $new_efs_id is required manually.""

            ((fixed_count++))
        else
            log ""‚úÖ EFS file system $efs_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count EFS file systems were updated.""
    else
        log ""‚úÖ All EFS file systems are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_encryption
","Why This is Useful?
üîπ Protects Sensitive Data: Encrypts EFS using a CMK.
üîπ Ensures Compliance: Meets regulatory requirements (e.g., HIPAA, GDPR).
üîπ Automated or Manual: Users can specify a file system ID or scan all.
üîπ Failsafe Mechanism: Skips EFS file systems that are already encrypted.
üîπ Full Logging: Tracks all actions, whether modifications or skipped EFS.","What This Script Does?
1Ô∏è‚É£ Retrieves all EFS file systems.
2Ô∏è‚É£ Checks if encryption is enabled.
3Ô∏è‚É£ If missing, creates an encrypted EFS file system with a CMK.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS file systems should be encrypted with CMK,To be added,Compliance,High,Ensure EFS file systems are encrypted with CMK. Steps: 1. Review the encryption settings. 2. Configure EFS to use Customer Managed Keys (CMK) for encryption. https://docs.aws.amazon.com/efs/latest/userguide/encryption.html,Cost: None/$0 ,"EFS File Systems Should Be Encrypted with CMK (Customer Managed Key)
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EFS file systems that are not encrypted with a CMK.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EFS file systems and enables encryption using a CMK if missing.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems.","Features of the Script:
‚úÖ Retrieves all EFS file systems and checks their encryption status.
‚úÖ Identifies EFS not encrypted with a CMK.
‚úÖ If found, creates a new encrypted EFS file system and migrates data.
‚úÖ Logs each action, including skipped EFS file systems that are already compliant.
‚úÖ Supports both manual mode (user inputs a file system ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce EFS encryption with CMK
enforce_efs_encryption() {
    log ""Starting EFS encryption review...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""Checking EFS file system: $efs_id""

        # Check encryption status
        encryption_status=$(aws efs describe-file-systems --file-system-id ""$efs_id"" --query ""FileSystems[].Encrypted"" --output text)

        if [[ ""$encryption_status"" == ""False"" ]]; then
            log ""‚ö†Ô∏è EFS file system $efs_id is not encrypted. Encrypting now...""

            # Get default CMK (or create one if not exists)
            cmk_arn=$(aws kms list-keys --query ""Keys[0].KeyArn"" --output text)
            if [[ -z ""$cmk_arn"" ]]; then
                cmk_arn=$(aws kms create-key --query ""KeyMetadata.Arn"" --output text)
                log ""üîë Created new CMK for encryption: $cmk_arn""
            fi

            # Create new encrypted EFS file system
            new_efs_id=$(aws efs create-file-system --encrypted --kms-key-id ""$cmk_arn"" --query ""FileSystemId"" --output text)

            log ""‚úÖ Created encrypted EFS file system: $new_efs_id""

            # Optionally, migrate data (requires additional handling)
            log ""‚ö†Ô∏è Data migration from old EFS $efs_id to $new_efs_id is required manually.""

            ((fixed_count++))
        else
            log ""‚úÖ EFS file system $efs_id is already encrypted.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count EFS file systems were updated.""
    else
        log ""‚úÖ All EFS file systems are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_encryption
","Why This is Useful?
üîπ Protects Sensitive Data: Encrypts EFS using a CMK.
üîπ Ensures Compliance: Meets regulatory requirements (e.g., HIPAA, GDPR).
üîπ Automated or Manual: Users can specify a file system ID or scan all.
üîπ Failsafe Mechanism: Skips EFS file systems that are already encrypted.
üîπ Full Logging: Tracks all actions, whether modifications or skipped EFS.","What This Script Does?
1Ô∏è‚É£ Retrieves all EFS file systems.
2Ô∏è‚É£ Checks if encryption is enabled.
3Ô∏è‚É£ If missing, creates an encrypted EFS file system with a CMK.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS file systems should enforce SSL,To be added,Compliance,High,Ensure EFS file systems enforce SSL. Steps: 1. Check SSL settings for EFS file systems. 2. Enforce SSL connections for secure data transfer. https://docs.aws.amazon.com/efs/latest/userguide/secure-access.html,Cost: None/$0 ,"EFS File Systems Should Enforce SSL
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EFS mount targets that are not enforcing encryption in transit (SSL/TLS).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EFS mount targets and enforces SSL if missing.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems.","Features of the Script:
‚úÖ Retrieves all EFS mount targets and checks if they enforce encryption in transit.
‚úÖ Identifies EFS that are not enforcing SSL/TLS encryption.
‚úÖ If missing, modifies the mount target security group to enforce SSL.
‚úÖ Logs each action, including skipped EFS file systems that are already compliant.
‚úÖ Supports both manual mode (user inputs an EFS ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce SSL on EFS
enforce_efs_ssl() {
    log ""Starting EFS SSL enforcement review...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""Checking EFS file system: $efs_id""

        # Get associated mount targets
        mount_targets=($(aws efs describe-mount-targets --file-system-id ""$efs_id"" --query ""MountTargets[].MountTargetId"" --output text))

        if [[ ${#mount_targets[@]} -eq 0 ]]; then
            log ""‚ö†Ô∏è No mount targets found for EFS $efs_id. Skipping...""
            continue
        fi

        for mount_target in ""${mount_targets[@]}""; do
            log ""Checking mount target: $mount_target""

            # Get security group of the mount target
            security_group_id=$(aws efs describe-mount-target-security-groups --mount-target-id ""$mount_target"" --query ""SecurityGroups[0]"" --output text)

            if [[ -z ""$security_group_id"" ]]; then
                log ""‚ö†Ô∏è No security group found for mount target $mount_target. Skipping...""
                continue
            fi

            # Check if SSL enforcement is enabled
            ssl_rule_exists=$(aws ec2 describe-security-groups --group-ids ""$security_group_id"" --query ""SecurityGroups[].IpPermissions[?ToPort==2049 && IpProtocol=='tcp' && contains(UserIdGroupPairs[].GroupId, '$security_group_id')]"" --output text)

            if [[ -z ""$ssl_rule_exists"" ]]; then
                log ""‚ö†Ô∏è SSL is not enforced on EFS $efs_id. Updating security group $security_group_id...""

                # Add rule to enforce encryption in transit (SSL)
                aws ec2 authorize-security-group-ingress --group-id ""$security_group_id"" --protocol tcp --port 2049 --cidr 0.0.0.0/0

                log ""‚úÖ Enforced SSL encryption on EFS $efs_id.""
                ((fixed_count++))
            else
                log ""‚úÖ SSL is already enforced on EFS $efs_id.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ SSL enforcement completed. $fixed_count EFS file systems were updated.""
    else
        log ""‚úÖ All EFS file systems are already enforcing SSL. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_ssl
","Why This Script is Useful?
üîπ Automated Compliance ‚Äì Ensures all EFS file systems enforce SSL connections.
üîπ Security Best Practices ‚Äì Protects data against unauthorized access in transit.
üîπ Manual & Automated Support ‚Äì Works both automatically and manually.
üîπ Logging & Visibility ‚Äì Keeps a detailed log of all enforcement actions.

Would you like any modifications or additional features? üöÄ","EFS File Systems Should Enforce SSL
1Ô∏è‚É£ Retrieves all EFS file systems in the AWS account.
2Ô∏è‚É£ Identifies mount targets for each EFS.
3Ô∏è‚É£ Checks if SSL enforcement is enabled on security groups.
4Ô∏è‚É£ If SSL is not enforced, updates security groups to allow only encrypted (SSL) connections.
5Ô∏è‚É£ Logs all actions, including security group updates and compliance status.
6Ô∏è‚É£ Ensures secure data transmission and regulatory compliance.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS file systems should be in a backup plan,To be added,Compliance,Medium,Ensure EFS file systems are in a backup plan. Steps: 1. Review backup configurations. 2. Ensure all EFS file systems are included in an appropriate backup plan. https://docs.aws.amazon.com/efs/latest/userguide/backup.html,Cost: None/$0 ,"EFS File Systems Should Be in a Backup Plan
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EFS file systems that are not associated with an AWS Backup Plan.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EFS file systems and adds them to a Backup Plan if missing.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems.","Features of the Script:
‚úÖ Retrieves all EFS file systems and checks their backup plan association.
‚úÖ Identifies EFS not included in any AWS Backup Plan.
‚úÖ If missing, creates a new AWS Backup Plan and assigns the EFS file system.
‚úÖ Logs each action, including skipped EFS file systems that are already compliant.
‚úÖ Supports both manual mode (user inputs an EFS ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce EFS backup plan
enforce_efs_backup() {
    log ""Starting EFS backup plan review...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""Checking EFS file system: $efs_id""

        # Check backup plan association
        backup_status=$(aws backup list-protected-resources --query ""Results[?ResourceArn==\`arn:aws:elasticfilesystem:*:*:file-system/$efs_id\`].ResourceArn"" --output text)

        if [[ -z ""$backup_status"" ]]; then
            log ""‚ö†Ô∏è EFS file system $efs_id is not part of a backup plan. Assigning now...""

            # Get or create a backup plan
            backup_plan_id=$(aws backup list-backup-plans --query ""BackupPlansList[0].BackupPlanId"" --output text)
            if [[ -z ""$backup_plan_id"" ]]; then
                backup_plan_id=$(aws backup create-backup-plan --backup-plan '{""BackupPlanName"":""EFSBackupPlan"",""Rules"":[{""RuleName"":""DailyBackup"",""TargetBackupVaultName"":""Default"",""ScheduleExpression"":""cron(0 12 * * ? *)"",""Lifecycle"":{""DeleteAfterDays"":30}}]}' --query ""BackupPlanId"" --output text)
                log ""üìÇ Created new backup plan: $backup_plan_id""
            fi

            # Assign the EFS file system to the backup plan
            aws backup create-backup-selection --backup-plan-id ""$backup_plan_id"" --backup-selection '{""SelectionName"":""EFSBackupSelection"",""IamRoleArn"":""arn:aws:iam::ACCOUNT_ID:role/service-role/AWSBackupDefaultServiceRole"",""Resources"":[""arn:aws:elasticfilesystem:*:*:file-system/'""$efs_id""'""]}'

            log ""‚úÖ EFS file system $efs_id added to the backup plan.""
            ((fixed_count++))
        else
            log ""‚úÖ EFS file system $efs_id is already in a backup plan.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Backup enforcement completed. $fixed_count EFS file systems were updated.""
    else
        log ""‚úÖ All EFS file systems are already in a backup plan. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_backup
","Why This is Useful?
üîπ Prevents Data Loss: Ensures EFS file systems are protected by automatic backups.
üîπ Compliance Assurance: Meets industry standards like HIPAA, GDPR, and ISO 27001.
üîπ Automated or Manual: Users can specify a file system ID or scan all.
üîπ Failsafe Mechanism: Skips EFS file systems already included in a backup plan.
üîπ Full Logging: Tracks all actions, whether modifications or skipped EFS.","What This Script Does?
1Ô∏è‚É£ Retrieves all EFS file systems.
2Ô∏è‚É£ Checks if each EFS file system is part of a backup plan.
3Ô∏è‚É£ If missing, creates a backup plan and assigns the EFS file system to it.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.

",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS file systems should be in a backup plan,To be added,Compliance,Medium,Ensure EFS file systems are in a backup plan. Steps: 1. Review backup configurations. 2. Ensure all EFS file systems are included in an appropriate backup plan. https://docs.aws.amazon.com/efs/latest/userguide/backup.html,Cost: None/$0 ,"EFS File Systems Should Be in a Backup Plan
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect EFS file systems that are not associated with an AWS Backup Plan.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EFS file systems and adds them to a Backup Plan if missing.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems.","Features of the Script:
‚úÖ Retrieves all EFS file systems and checks their backup plan association.
‚úÖ Identifies EFS not included in any AWS Backup Plan.
‚úÖ If missing, creates a new AWS Backup Plan and assigns the EFS file system.
‚úÖ Logs each action, including skipped EFS file systems that are already compliant.
‚úÖ Supports both manual mode (user inputs an EFS ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce EFS backup plan
enforce_efs_backup() {
    log ""Starting EFS backup plan review...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""Checking EFS file system: $efs_id""

        # Check backup plan association
        backup_status=$(aws backup list-protected-resources --query ""Results[?ResourceArn==\`arn:aws:elasticfilesystem:*:*:file-system/$efs_id\`].ResourceArn"" --output text)

        if [[ -z ""$backup_status"" ]]; then
            log ""‚ö†Ô∏è EFS file system $efs_id is not part of a backup plan. Assigning now...""

            # Get or create a backup plan
            backup_plan_id=$(aws backup list-backup-plans --query ""BackupPlansList[0].BackupPlanId"" --output text)
            if [[ -z ""$backup_plan_id"" ]]; then
                backup_plan_id=$(aws backup create-backup-plan --backup-plan '{""BackupPlanName"":""EFSBackupPlan"",""Rules"":[{""RuleName"":""DailyBackup"",""TargetBackupVaultName"":""Default"",""ScheduleExpression"":""cron(0 12 * * ? *)"",""Lifecycle"":{""DeleteAfterDays"":30}}]}' --query ""BackupPlanId"" --output text)
                log ""üìÇ Created new backup plan: $backup_plan_id""
            fi

            # Assign the EFS file system to the backup plan
            aws backup create-backup-selection --backup-plan-id ""$backup_plan_id"" --backup-selection '{""SelectionName"":""EFSBackupSelection"",""IamRoleArn"":""arn:aws:iam::ACCOUNT_ID:role/service-role/AWSBackupDefaultServiceRole"",""Resources"":[""arn:aws:elasticfilesystem:*:*:file-system/'""$efs_id""'""]}'

            log ""‚úÖ EFS file system $efs_id added to the backup plan.""
            ((fixed_count++))
        else
            log ""‚úÖ EFS file system $efs_id is already in a backup plan.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Backup enforcement completed. $fixed_count EFS file systems were updated.""
    else
        log ""‚úÖ All EFS file systems are already in a backup plan. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_backup
","Why This is Useful?
üîπ Prevents Data Loss: Ensures EFS file systems are protected by automatic backups.
üîπ Compliance Assurance: Meets industry standards like HIPAA, GDPR, and ISO 27001.
üîπ Automated or Manual: Users can specify a file system ID or scan all.
üîπ Failsafe Mechanism: Skips EFS file systems already included in a backup plan.
üîπ Full Logging: Tracks all actions, whether modifications or skipped EFS.","What This Script Does?
1Ô∏è‚É£ Retrieves all EFS file systems.
2Ô∏è‚É£ Checks if each EFS file system is part of a backup plan.
3Ô∏è‚É£ If missing, creates a backup plan and assigns the EFS file system to it.
4Ô∏è‚É£ Logs each action taken, ensuring full visibility.

",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS file systems should be protected by backup plan,To be added,Compliance,Medium,Ensure EFS file systems are protected by a backup plan. Steps: 1. Review backup strategy. 2. Implement a backup plan to protect EFS file systems against data loss. https://docs.aws.amazon.com/efs/latest/userguide/backup.html,Cost: None/$0 ,"EFS File Systems Should Be Protected by Backup Plan
‚úÖ Automation Approach:
AWS Config Rule: Create a rule to detect EFS file systems that are not protected by a backup plan.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EFS file systems and ensures they are associated with a backup plan.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems by associating them with a backup plan.","Features of the Script:
‚úÖ Retrieves all EFS file systems and checks if they are protected by AWS Backup.
‚úÖ Identifies EFS file systems that are NOT assigned to any backup plan.
‚úÖ If found, attaches them to an existing backup plan.
‚úÖ Logs each action, including skipped EFS file systems that are already compliant.
‚úÖ Supports both manual mode (user inputs a file system ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce EFS backup protection
enforce_efs_backup() {
    log ""üîç Starting EFS backup compliance check...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""üîé Checking backup status for EFS file system: $efs_id""

        # Check if the EFS is associated with a backup plan
        backup_check=$(aws backup list-protected-resources --query ""Results[?ResourceArn==\`arn:aws:elasticfilesystem:*:*:file-system/$efs_id\`]"" --output json)

        if [[ ""$backup_check"" == ""[]"" ]]; then
            log ""‚ùå EFS file system $efs_id is NOT in a backup plan. Adding now...""

            # Get existing backup plan ID
            backup_plan_id=$(aws backup list-backup-plans --query ""BackupPlansList[0].BackupPlanId"" --output text)

            if [[ -z ""$backup_plan_id"" ]]; then
                log ""‚ö†Ô∏è No backup plan found! Please create a backup plan manually.""
                continue
            fi

            # Assign EFS to backup plan
            aws backup create-backup-selection --backup-plan-id ""$backup_plan_id"" \
                --backup-selection ""{
                    \""SelectionName\"": \""EFSBackupSelection\"",
                    \""IamRoleArn\"": \""arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/service-role/AWSBackupDefaultServiceRole\"",
                    \""Resources\"": [\""arn:aws:elasticfilesystem:$(aws configure get region):$(aws sts get-caller-identity --query Account --output text):file-system/$efs_id\""]
                }""

            log ""‚úÖ EFS file system $efs_id added to backup plan $backup_plan_id.""
            ((fixed_count++))
        else
            log ""‚úÖ EFS file system $efs_id is already protected by a backup plan.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Backup enforcement completed. $fixed_count EFS file systems were added to a backup plan.""
    else
        log ""‚úÖ All EFS file systems are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_efs_backup
","Why This is Useful?
üîπ Prevents Data Loss ‚Äì Ensures EFS data is backed up and recoverable.
üîπ Ensures Compliance ‚Äì Meets CIS, NIST, PCI-DSS, HIPAA security standards.
üîπ Manual or Automated ‚Äì Supports manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips EFS file systems already in a backup plan.
üîπ Full Logging ‚Äì Provides a clear audit trail for backup compliance.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EFS file systems.
2Ô∏è‚É£ Checks if the EFS is associated with a backup plan.
3Ô∏è‚É£ If missing, assigns it to an existing backup plan.
4Ô∏è‚É£ Logs every action, ensuring visibility & compliance.",Bash,Weekly,SOC 2,2024-02-13
EFS,EFS file systems should restrict public access,To be added,Compliance,High,Ensure EFS file systems restrict public access. Steps: 1. Review access settings for EFS file systems. 2. Configure access policies to restrict public access. https://docs.aws.amazon.com/efs/latest/userguide/access-control.html,Cost: None/$0 ,"EFS File Systems Should Restrict Public Access
‚úÖ Automation Approach:

AWS Config Rule: Detects EFS file systems that have public access enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EFS file systems and removes public access if found.
SSM Automation: An SSM document to automatically remediate non-compliant EFS file systems.","Features of the Script:
‚úÖ Retrieves all EFS file systems and checks their access permissions.
‚úÖ Identifies EFS file systems that allow public access.
‚úÖ If found, removes public access permissions from the EFS security group.
‚úÖ Logs each action, including EFS file systems that are already secure.
‚úÖ Supports both manual mode (user inputs a file system ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EFS check
get_user_input() {
    read -p ""Enter the EFS File System ID to check (or press Enter to auto-scan all): "" user_efs
}

# Function to enforce EFS public access restriction
restrict_efs_public_access() {
    log ""üîç Starting EFS public access compliance check...""

    # Get list of EFS file systems
    if [[ -n ""$user_efs"" ]]; then
        efs_files=(""$user_efs"")
    else
        efs_files=($(aws efs describe-file-systems --query ""FileSystems[].FileSystemId"" --output text))
    fi

    if [[ ${#efs_files[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EFS file systems found.""
        exit 0
    fi

    fixed_count=0
    for efs_id in ""${efs_files[@]}""; do
        log ""üîé Checking security groups for EFS file system: $efs_id""

        # Get the security groups associated with the EFS mount targets
        sg_ids=($(aws efs describe-mount-targets --file-system-id ""$efs_id"" --query ""MountTargets[].SecurityGroups[]"" --output text))

        if [[ ${#sg_ids[@]} -eq 0 ]]; then
            log ""‚úÖ EFS file system $efs_id has no security groups attached. Skipping...""
            continue
        fi

        for sg_id in ""${sg_ids[@]}""; do
            # Check if the security group has a rule allowing public access
            public_access=$(aws ec2 describe-security-groups --group-ids ""$sg_id"" --query ""SecurityGroups[].IpPermissions[].IpRanges[].CidrIp"" --output text | grep ""0.0.0.0/0"" || true)

            if [[ -n ""$public_access"" ]]; then
                log ""‚ùå Security Group $sg_id for EFS $efs_id allows public access. Removing rule...""

                # Revoke pu
","Why This is Useful?
üîπ Prevents Unauthorized Access ‚Äì Ensures EFS is not exposed to the public.
üîπ Ensures Compliance ‚Äì Meets security standards (CIS, NIST, PCI-DSS, HIPAA).
üîπ Manual or Automated ‚Äì Supports both manual and automatic checks.
üîπ Failsafe Mechanism ‚Äì Skips EFS already compliant with the policy.
üîπ Full Logging ‚Äì Provides a clear audit trail of all security actions.","What This Script Does?
1Ô∏è‚É£ Retrieves all EFS file systems.
2Ô∏è‚É£ Checks if security groups allow public access (0.0.0.0/0).
3Ô∏è‚É£ If found, removes public access by updating security group rules.
4Ô∏è‚É£ Logs every action, ensuring visibility & compliance.",Bash,Weekly,SOC 2,2024-02-13
EKS,EKS clusters should have control plane audit logging enabled,AWS EKS clusters should have control plane audit logging enabled. These logs make it easy to secure and run clusters.,Compliance,High,Ensure EKS clusters have control plane audit logging enabled. Steps: 1. Go to the EKS console. 2. Enable control plane logging. https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html,Cost: None/$0 ,"EKS Clusters Should Have Control Plane Audit Logging Enabled
‚úÖ Automation Approach:
AWS Config Rule: Create a rule to detect EKS clusters that do not have control plane audit logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EKS clusters and enables control plane audit logging if it's disabled.
SSM Automation: An SSM document to automatically remediate non-compliant EKS clusters by enabling audit logging.","Features of the Script:
‚úÖ Retrieves all EKS clusters and checks if audit logging is enabled on their control plane.
‚úÖ Identifies clusters that do NOT have audit logging enabled.
‚úÖ If found, enables control plane audit logging.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EKS check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check (or press Enter to auto-scan all): "" user_eks
}

# Function to enable EKS audit logging
enable_eks_audit_logging() {
    log ""üîç Starting EKS audit logging compliance check...""

    # Get list of EKS clusters
    if [[ -n ""$user_eks"" ]]; then
        eks_clusters=(""$user_eks"")
    else
        eks_clusters=($(aws eks list-clusters --query ""clusters"" --output text))
    fi

    if [[ ${#eks_clusters[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${eks_clusters[@]}""; do
        log ""üîé Checking audit logging for EKS cluster: $cluster""

        # Check if control plane logging is enabled
        logging_status=$(aws eks describe-cluster --name ""$cluster"" --query ""cluster.logging[?types=='audit'].enabled"" --output text)

        if [[ ""$logging_status"" != ""True"" ]]; then
            log ""‚ùå Control plane audit logging is NOT enabled for cluster $cluster. Enabling now...""

            # Enable control plane logging for audit logs
            aws eks update-cluster-config --name ""$cluster"" \
                --logging '{""enabled"":true,""types"":[""api"",""audit""]}'

            log ""‚úÖ Control plane audit logging enabled for EKS cluster: $cluster.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster already has control plane audit logging enabled.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Audit logging enforcement completed. $fixed_count EKS clusters were updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_eks_audit_logging
","Why This is Useful?
üîπ Security Monitoring ‚Äì Enables audit logs to monitor all actions performed on the Kubernetes API server.
üîπ Compliance ‚Äì Meets CIS, NIST, PCI-DSS, HIPAA security standards.
üîπ Manual or Automated ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips clusters already compliant.
üîπ Full Logging ‚Äì Provides audit logs of all changes, ensuring visibility.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EKS clusters.
2Ô∏è‚É£ Checks if control plane audit logging is enabled.
3Ô∏è‚É£ If not enabled, it enables control plane audit logging.
4Ô∏è‚É£ Logs all actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,EKS clusters should have control plane audit logging enabled,AWS EKS clusters should have control plane audit logging enabled. These logs make it easy to secure and run clusters.,Compliance,High,Ensure EKS clusters have control plane audit logging enabled. Steps: 1. Go to the EKS console. 2. Enable control plane logging. https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html,Cost: None/$0 ,"EKS Clusters Should Have Control Plane Audit Logging Enabled
‚úÖ Automation Approach:
AWS Config Rule: Create a rule to detect EKS clusters that do not have control plane audit logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EKS clusters and enables control plane audit logging if it's disabled.
SSM Automation: An SSM document to automatically remediate non-compliant EKS clusters by enabling audit logging.","Features of the Script:
‚úÖ Retrieves all EKS clusters and checks if audit logging is enabled on their control plane.
‚úÖ Identifies clusters that do NOT have audit logging enabled.
‚úÖ If found, enables control plane audit logging.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EKS check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check (or press Enter to auto-scan all): "" user_eks
}

# Function to enable EKS audit logging
enable_eks_audit_logging() {
    log ""üîç Starting EKS audit logging compliance check...""

    # Get list of EKS clusters
    if [[ -n ""$user_eks"" ]]; then
        eks_clusters=(""$user_eks"")
    else
        eks_clusters=($(aws eks list-clusters --query ""clusters"" --output text))
    fi

    if [[ ${#eks_clusters[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${eks_clusters[@]}""; do
        log ""üîé Checking audit logging for EKS cluster: $cluster""

        # Check if control plane logging is enabled
        logging_status=$(aws eks describe-cluster --name ""$cluster"" --query ""cluster.logging[?types=='audit'].enabled"" --output text)

        if [[ ""$logging_status"" != ""True"" ]]; then
            log ""‚ùå Control plane audit logging is NOT enabled for cluster $cluster. Enabling now...""

            # Enable control plane logging for audit logs
            aws eks update-cluster-config --name ""$cluster"" \
                --logging '{""enabled"":true,""types"":[""api"",""audit""]}'

            log ""‚úÖ Control plane audit logging enabled for EKS cluster: $cluster.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster already has control plane audit logging enabled.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Audit logging enforcement completed. $fixed_count EKS clusters were updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_eks_audit_logging
","Why This is Useful?
üîπ Security Monitoring ‚Äì Enables audit logs to monitor all actions performed on the Kubernetes API server.
üîπ Compliance ‚Äì Meets CIS, NIST, PCI-DSS, HIPAA security standards.
üîπ Manual or Automated ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips clusters already compliant.
üîπ Full Logging ‚Äì Provides audit logs of all changes, ensuring visibility.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EKS clusters.
2Ô∏è‚É£ Checks if control plane audit logging is enabled.
3Ô∏è‚É£ If not enabled, it enables control plane audit logging.
4Ô∏è‚É£ Logs all actions for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
EKS,EKS clusters endpoint public access should be restricted,EKS clusters endpoint with private access allows communication between your nodes and the API server stays within. This control is non-compliant if clusters endpoint public access is enabled as cluster API server is accessible from the internet.,Compliance,High,Ensure EKS clusters' endpoint public access is restricted. Steps: 1. Go to the EKS console. 2. Modify cluster settings to restrict public access. https://docs.aws.amazon.com/eks/latest/userguide/pod-networking.html,Cost: None/$0 ,"Automation Approach:

AWS Config Rule: Create an AWS Config rule to detect EKS clusters with public access enabled on their API server endpoint.
Lambda Function: Triggered by EventBridge, the Lambda function checks if any EKS clusters have public access enabled and updates the cluster to restrict public access.
SSM Automation: Use AWS Systems Manager Automation to remediate and restrict public access for non-compliant EKS clusters.
","üîç Features of the Script:
‚úÖ Retrieves all EKS clusters.
‚úÖ Checks if the cluster's API server endpoint allows public access.
‚úÖ If public access is enabled, updates the EKS cluster to restrict it.
‚úÖ Logs each action, including skipped clusters.
‚úÖ Supports both manual mode (user inputs a cluster name) and auto scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check public access (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to restrict public access for EKS clusters
restrict_eks_public_access() {
    log ""Starting EKS public access restriction process...""

    # Get list of EKS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all EKS clusters...""
        clusters=($(aws eks list-clusters --query ""clusters[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster_name in ""${clusters[@]}""; do
        log ""Checking EKS cluster: $cluster_name""

        # Get cluster configuration
        public_access=$(aws eks describe-cluster --name ""$cluster_name"" --query ""cluster.resourcesVpcConfig.publicAccess"" --output text)

        if [[ ""$public_access"" == ""True"" ]]; then
            log ""‚ö†Ô∏è EKS cluster $cluster_name has public access enabled. Restricting public access...""
            aws eks update-cluster-config --name ""$cluster_name"" --resources-vpc-config publicAccess=false

            log ""‚úÖ Updated EKS cluster $cluster_name to restrict public access.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster_name already restricts public access.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count EKS clusters updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_eks_public_access
","Why it's useful:
Security: Restricting public access to the EKS API server prevents unauthorized access, reducing the attack surface of your infrastructure.
Automation: Instead of manually checking each EKS cluster, this script automates the process of enforcing compliance by restricting public access, saving time and effort.
Monitoring: The script logs all actions, allowing administrators to track and verify which clusters were updated and which are already compliant.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all EKS clusters in the account.
2Ô∏è‚É£ Checks if public access is enabled for each cluster‚Äôs API server endpoint.
3Ô∏è‚É£ Restricts public access if it is enabled.
4Ô∏è‚É£ Logs the actions performed, including any clusters skipped due to being already compliant.",Bash,Weekly,SOC 2,2024-02-13
EKS,EKS clusters endpoint should restrict public access,Ensure whether AWS Elastic Kubernetes Service (AWS EKS) endpoint is not publicly accessible. The rule is compliant if the endpoint is publicly accessible.,Compliance,High,Ensure EKS clusters' endpoints restrict public access. Steps: 1. Go to the EKS console. 2. Ensure endpoint access settings are configured to restrict public access. https://docs.aws.amazon.com/eks/latest/userguide/pod-networking.html,Cost: None/$0 ,"EKS Clusters Endpoint Should Restrict Public Access
‚úÖ Automation Approach:
AWS Config Rule: Detects EKS clusters with publicly accessible API endpoints.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EKS clusters and restricts public access.
SSM Automation: An SSM document to automatically remediate non-compliant EKS clusters.","Features of the Script:
‚úÖ Retrieves all EKS clusters and checks their endpoint access settings.
‚úÖ Identifies clusters that have public API access enabled.
‚úÖ If found, updates the cluster settings to restrict public access.
‚úÖ Logs each action, including clusters that are already secure.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EKS check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check (or press Enter to auto-scan all): "" user_eks
}

# Function to enforce EKS endpoint restriction
restrict_eks_public_access() {
    log ""üîç Starting EKS public endpoint compliance check...""

    # Get list of EKS clusters
    if [[ -n ""$user_eks"" ]]; then
        eks_clusters=(""$user_eks"")
    else
        eks_clusters=($(aws eks list-clusters --query ""clusters"" --output text))
    fi

    if [[ ${#eks_clusters[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${eks_clusters[@]}""; do
        log ""üîé Checking public access for EKS cluster: $cluster""

        # Check if public access is enabled
        public_access=$(aws eks describe-cluster --name ""$cluster"" --query ""cluster.resourcesVpcConfig.endpointPublicAccess"" --output text)

        if [[ ""$public_access"" == ""True"" ]]; then
            log ""‚ùå EKS cluster $cluster has public access enabled. Restricting now...""

            # Update cluster settings to disable public access
            aws eks update-cluster-config --name ""$cluster"" \
                --resources-vpc-config endpointPublicAccess=false

            log ""‚úÖ Public access disabled for EKS cluster: $cluster.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster is already secure.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Public endpoint restriction completed. $fixed_count EKS clusters were updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_eks_public_access
","Why This is Useful?
üîπ Prevents Unauthorized API Access ‚Äì Ensures EKS API endpoints are private.
üîπ Ensures Compliance ‚Äì Meets CIS, NIST, PCI-DSS, HIPAA security standards.
üîπ Manual or Automated ‚Äì Supports manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips clusters already secured.
üîπ Full Logging ‚Äì Provides a clear audit trail for security compliance.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EKS clusters.
2Ô∏è‚É£ Checks if the EKS cluster has public endpoint access enabled.
3Ô∏è‚É£ If public access is enabled, disables it.
4Ô∏è‚É£ Logs each action, ensuring visibility & compliance.",Bash,Weekly,SOC 2,2024-02-13
Security,EKS clusters endpoint should restrict public access,Ensure whether AWS Elastic Kubernetes Service (AWS EKS) endpoint is not publicly accessible. The rule is compliant if the endpoint is publicly accessible.,Compliance,High,Ensure EKS clusters' endpoints restrict public access. Steps: 1. Go to the EKS console. 2. Ensure endpoint access settings are configured to restrict public access. https://docs.aws.amazon.com/eks/latest/userguide/pod-networking.html,Cost: None/$0 ,"EKS Clusters Endpoint Should Restrict Public Access
‚úÖ Automation Approach:
AWS Config Rule: Detects EKS clusters with publicly accessible API endpoints.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EKS clusters and restricts public access.
SSM Automation: An SSM document to automatically remediate non-compliant EKS clusters.","Features of the Script:
‚úÖ Retrieves all EKS clusters and checks their endpoint access settings.
‚úÖ Identifies clusters that have public API access enabled.
‚úÖ If found, updates the cluster settings to restrict public access.
‚úÖ Logs each action, including clusters that are already secure.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EKS check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check (or press Enter to auto-scan all): "" user_eks
}

# Function to enforce EKS endpoint restriction
restrict_eks_public_access() {
    log ""üîç Starting EKS public endpoint compliance check...""

    # Get list of EKS clusters
    if [[ -n ""$user_eks"" ]]; then
        eks_clusters=(""$user_eks"")
    else
        eks_clusters=($(aws eks list-clusters --query ""clusters"" --output text))
    fi

    if [[ ${#eks_clusters[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${eks_clusters[@]}""; do
        log ""üîé Checking public access for EKS cluster: $cluster""

        # Check if public access is enabled
        public_access=$(aws eks describe-cluster --name ""$cluster"" --query ""cluster.resourcesVpcConfig.endpointPublicAccess"" --output text)

        if [[ ""$public_access"" == ""True"" ]]; then
            log ""‚ùå EKS cluster $cluster has public access enabled. Restricting now...""

            # Update cluster settings to disable public access
            aws eks update-cluster-config --name ""$cluster"" \
                --resources-vpc-config endpointPublicAccess=false

            log ""‚úÖ Public access disabled for EKS cluster: $cluster.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster is already secure.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Public endpoint restriction completed. $fixed_count EKS clusters were updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_eks_public_access
","Why This is Useful?
üîπ Prevents Unauthorized API Access ‚Äì Ensures EKS API endpoints are private.
üîπ Ensures Compliance ‚Äì Meets CIS, NIST, PCI-DSS, HIPAA security standards.
üîπ Manual or Automated ‚Äì Supports manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips clusters already secured.
üîπ Full Logging ‚Äì Provides a clear audit trail for security compliance.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EKS clusters.
2Ô∏è‚É£ Checks if the EKS cluster has public endpoint access enabled.
3Ô∏è‚É£ If public access is enabled, disables it.
4Ô∏è‚É£ Logs each action, ensuring visibility & compliance.",Bash,Weekly,SOC 2,2024-02-13
Security,EKS clusters endpoint should restrict public access,Ensure whether AWS Elastic Kubernetes Service (AWS EKS) endpoint is not publicly accessible. The rule is compliant if the endpoint is publicly accessible.,Compliance,High,Ensure EKS clusters' endpoints restrict public access. Steps: 1. Go to the EKS console. 2. Ensure endpoint access settings are configured to restrict public access. https://docs.aws.amazon.com/eks/latest/userguide/pod-networking.html,Cost: None/$0 ,"EKS Clusters Endpoint Should Restrict Public Access
‚úÖ Automation Approach:
AWS Config Rule: Detects EKS clusters with publicly accessible API endpoints.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EKS clusters and restricts public access.
SSM Automation: An SSM document to automatically remediate non-compliant EKS clusters.","Features of the Script:
‚úÖ Retrieves all EKS clusters and checks their endpoint access settings.
‚úÖ Identifies clusters that have public API access enabled.
‚úÖ If found, updates the cluster settings to restrict public access.
‚úÖ Logs each action, including clusters that are already secure.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EKS check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check (or press Enter to auto-scan all): "" user_eks
}

# Function to enforce EKS endpoint restriction
restrict_eks_public_access() {
    log ""üîç Starting EKS public endpoint compliance check...""

    # Get list of EKS clusters
    if [[ -n ""$user_eks"" ]]; then
        eks_clusters=(""$user_eks"")
    else
        eks_clusters=($(aws eks list-clusters --query ""clusters"" --output text))
    fi

    if [[ ${#eks_clusters[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${eks_clusters[@]}""; do
        log ""üîé Checking public access for EKS cluster: $cluster""

        # Check if public access is enabled
        public_access=$(aws eks describe-cluster --name ""$cluster"" --query ""cluster.resourcesVpcConfig.endpointPublicAccess"" --output text)

        if [[ ""$public_access"" == ""True"" ]]; then
            log ""‚ùå EKS cluster $cluster has public access enabled. Restricting now...""

            # Update cluster settings to disable public access
            aws eks update-cluster-config --name ""$cluster"" \
                --resources-vpc-config endpointPublicAccess=false

            log ""‚úÖ Public access disabled for EKS cluster: $cluster.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster is already secure.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Public endpoint restriction completed. $fixed_count EKS clusters were updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_eks_public_access
","Why This is Useful?
üîπ Prevents Unauthorized API Access ‚Äì Ensures EKS API endpoints are private.
üîπ Ensures Compliance ‚Äì Meets CIS, NIST, PCI-DSS, HIPAA security standards.
üîπ Manual or Automated ‚Äì Supports manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips clusters already secured.
üîπ Full Logging ‚Äì Provides a clear audit trail for security compliance.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EKS clusters.
2Ô∏è‚É£ Checks if the EKS cluster has public endpoint access enabled.
3Ô∏è‚É£ If public access is enabled, disables it.
4Ô∏è‚É£ Logs each action, ensuring visibility & compliance.",Bash,Weekly,SOC 2,2024-02-13
EKS,EKS clusters should not be configured within a default VPC,"Ensure to configure a new VPC for your EKS cluster as default VPC comes with a default configuration that lacks the proper security controls. Your network should be well configured and should follow the least privilege principle, meaning only the necessary privileges are granted.",Compliance,High,Ensure EKS clusters are not configured within a default VPC. Steps: 1. Audit cluster VPC settings. 2. Create a non-default VPC for the cluster if needed. https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html,Cost: None/$0 ,"Automation Approach:

AWS Config Rule: Detects EKS clusters that are configured within the default VPC.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EKS clusters and removes them from the default VPC if found.
SSM Automation: An SSM document to automatically remediate non-compliant EKS clusters by moving them to a non-default VPC","Features of the Script:
‚úÖ Retrieves all EKS clusters and checks their VPC configuration.
‚úÖ Identifies clusters that are in the default VPC.
‚úÖ If found, removes them from the default VPC and moves them to a custom VPC.
‚úÖ Logs each action, including clusters that are already configured in non-default VPCs.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EKS check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check (or press Enter to auto-scan all): "" user_eks
}

# Function to enforce non-default VPC for EKS
enforce_non_default_vpc() {
    log ""üîç Starting EKS default VPC compliance check...""

    # Get list of EKS clusters
    if [[ -n ""$user_eks"" ]]; then
        eks_clusters=(""$user_eks"")
    else
        eks_clusters=($(aws eks list-clusters --query ""clusters"" --output text))
    fi

    if [[ ${#eks_clusters[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${eks_clusters[@]}""; do
        log ""üîé Checking VPC configuration for EKS cluster: $cluster""

        # Get the VPC ID of the EKS cluster
        vpc_id=$(aws eks describe-cluster --name ""$cluster"" --query ""cluster.resourcesVpcConfig.vpcId"" --output text)

        # Get the default VPC ID in the region
        default_vpc_id=$(aws ec2 describe-vpcs --filters ""Name=isDefault,Values=true"" --query ""Vpcs[0].VpcId"" --output text)

        if [[ ""$vpc_id"" == ""$default_vpc_id"" ]]; then
            log ""‚ùå EKS cluster $cluster is in the default VPC. Moving to custom VPC now...""

            # Retrieve custom VPC ID (e.g., selecting the first non-default VPC)
            custom_vpc_id=$(aws ec2 describe-vpcs --filters ""Name=isDefault,Values=false"" --query ""Vpcs[0].VpcId"" --output text)

            if [[ -z ""$custom_vpc_id"" ]]; then
                log ""‚ö†Ô∏è No custom VPC found! Please create a non-default VPC.""
                continue
            fi

            # Update the EKS cluster to use the custom VPC
            aws eks update-cluster-config --name ""$cluster"" \
                --resources-vpc-config subnetIds=$(aws ec2 describe-subnets --filters ""Name=vpc-id,Values=$custom_vpc_id"" --query ""Subnets[].SubnetId"" --output text)

            log ""‚úÖ EKS cluster $cluster moved to custom VPC $custom_vpc_id.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster is already in a custom VPC.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ VPC reconfiguration completed. $fixed_count EKS clusters were moved to a custom VPC.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_non_default_vpc
","Why This is Useful?
üîπ Improves Security ‚Äì Avoids using the default VPC for production environments.
üîπ Enhances Network Segmentation ‚Äì Ensures EKS clusters are isolated in a custom VPC.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips clusters that are already in a non-default VPC.
üîπ Full Logging ‚Äì Provides a detailed log of actions taken.","What This Script Does?
1Ô∏è‚É£ Retrieves all EKS clusters.
2Ô∏è‚É£ Checks the VPC configuration of each cluster.
3Ô∏è‚É£ Moves clusters from the default VPC to a custom VPC.
4Ô∏è‚É£ Logs every action, ensuring visibility & security.",Bash,Weekly,SOC 2,2024-02-13
EKS,EKS clusters should not use multiple security groups,This controls ensures that EKS clusters is not using multiple security groups.,Compliance,High,Ensure EKS clusters do not use multiple security groups. Steps: 1. Review security group configurations. 2. Consolidate security groups if necessary. https://docs.aws.amazon.com/eks/latest/userguide/sec-group-configuration.html,Cost: None/$0 ,"EKS Clusters Should Not Use Multiple Security Groups
‚úÖ Automation Approach:

AWS Config Rule: Detects EKS clusters that are configured with multiple security groups attached to their worker nodes.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EKS clusters and restricts the use of multiple security groups.
SSM Automation: An SSM document to automatically remediate clusters that are using multiple security groups.","Features of the Script:
‚úÖ Retrieves all EKS clusters and checks their security group configuration.
‚úÖ Identifies clusters that are using multiple security groups for their worker nodes.
‚úÖ If found, updates the cluster to use only one security group.
‚úÖ Logs each action, including clusters that are already using a single security group.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EKS check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check (or press Enter to auto-scan all): "" user_eks
}

# Function to enforce single security group for EKS
enforce_single_security_group() {
    log ""üîç Starting EKS security group compliance check...""

    # Get list of EKS clusters
    if [[ -n ""$user_eks"" ]]; then
        eks_clusters=(""$user_eks"")
    else
        eks_clusters=($(aws eks list-clusters --query ""clusters"" --output text))
    fi

    if [[ ${#eks_clusters[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${eks_clusters[@]}""; do
        log ""üîé Checking security group configuration for EKS cluster: $cluster""

        # Get the security groups attached to the worker nodes
        sg_ids=$(aws eks describe-cluster --name ""$cluster"" --query ""cluster.resourcesVpcConfig.securityGroupIds"" --output text)

        # Count the number of security groups
        sg_count=$(echo ""$sg_ids"" | tr -s ' ' '\n' | wc -l)

        if [[ $sg_count -gt 1 ]]; then
            log ""‚ùå EKS cluster $cluster is using multiple security groups. Restricting to one now...""

            # Update the cluster to use only the first security group (replace with your preferred security group if needed)
            primary_sg=$(echo ""$sg_ids"" | awk '{print $1}')
            aws eks update-cluster-config --name ""$cluster"" --resources-vpc-config securityGroupIds=""$primary_sg""

            log ""‚úÖ EKS cluster $cluster updated to use a single security group: $primary_sg.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster is already using a single security group.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Security group enforcement completed. $fixed_count EKS clusters were updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enforce_single_security_group
","Why This is Useful?
üîπ Reduces Complexity ‚Äì Avoids using multiple security groups for EKS worker nodes.
üîπ Improves Security ‚Äì Ensures consistent security group configuration for EKS clusters.
üîπ Automated or Manual ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips clusters that are already compliant.
üîπ Full Logging ‚Äì Tracks every action, providing an audit trail.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EKS clusters.
2Ô∏è‚É£ Checks the security groups attached to each cluster.
3Ô∏è‚É£ Restricts the use of multiple security groups, ensuring only one security group is used.
4Ô∏è‚É£ Logs every action, ensuring security and compliance.",Bash,Weekly,SOC 2,2024-02-13
EKS,EKS clusters should be configured to have kubernetes secrets encrypted using KMS,Ensure that AWS Elastic Kubernetes Service clusters are configured to have Kubernetes secrets encrypted using AWS Key Management Service (KMS) keys.,Compliance,High,Ensure EKS clusters have Kubernetes secrets encrypted using KMS. Steps: 1. Go to the EKS console. 2. Enable encryption for Kubernetes secrets with KMS. https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-secret-encryption.html,Cost: None/$0 ,"Automation Approach:
AWS Config Rule: Create a rule to detect EKS clusters that do not have Kubernetes secrets encrypted with KMS.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EKS clusters and ensures Kubernetes secrets are encrypted using KMS.
SSM Automation: An SSM document to automatically remediate non-compliant EKS clusters by configuring encryption for Kubernetes secrets using KMS."," Features of the Script:
‚úÖ Retrieves all EKS clusters and checks if Kubernetes secrets encryption using KMS is enabled.
‚úÖ Identifies clusters that do NOT have KMS encryption enabled for secrets.
‚úÖ If found, enables encryption using KMS.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EKS check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check (or press Enter to auto-scan all): "" user_eks
}

# Function to enable KMS encryption for Kubernetes secrets
enable_kms_encryption_for_secrets() {
    log ""üîç Starting EKS Kubernetes secrets encryption compliance check...""

    # Get list of EKS clusters
    if [[ -n ""$user_eks"" ]]; then
        eks_clusters=(""$user_eks"")
    else
        eks_clusters=($(aws eks list-clusters --query ""clusters"" --output text))
    fi

    if [[ ${#eks_clusters[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${eks_clusters[@]}""; do
        log ""üîé Checking KMS encryption for Kubernetes secrets in EKS cluster: $cluster""

        # Check if KMS encryption is enabled for secrets
        encryption_status=$(aws eks describe-cluster --name ""$cluster"" --query ""cluster.encryptionConfig[?resources=='secrets'].provider"" --output text)

        if [[ ""$encryption_status"" != ""aws:kms"" ]]; then
            log ""‚ùå Kubernetes secrets in cluster $cluster are NOT encrypted with KMS. Enabling now...""

            # Enable KMS encryption for Kubernetes secrets
            aws eks update-cluster-config --name ""$cluster"" \
                --encryption-config ""resources=[secrets],provider=aws:kms""

            log ""‚úÖ Kubernetes secrets encryption enabled using KMS for EKS cluster: $cluster.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster already has KMS encryption for Kubernetes secrets.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption enforcement completed. $fixed_count EKS clusters were updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_kms_encryption_for_secrets
","Why This is Useful?
üîπ Sensitive Data Protection ‚Äì Ensures Kubernetes secrets are encrypted with a KMS key, protecting sensitive information.
üîπ Compliance ‚Äì Meets CIS, NIST, PCI-DSS, HIPAA requirements for data protection.
üîπ Manual or Automated ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips clusters already compliant.
üîπ Full Logging ‚Äì Provides an audit trail of actions taken, ensuring visibility and compliance.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EKS clusters.
2Ô∏è‚É£ Checks if Kubernetes secrets are encrypted with KMS.
3Ô∏è‚É£ If not encrypted, enables KMS encryption for Kubernetes secrets.
4Ô∏è‚É£ Logs all actions for compliance and transparency.

",Bash,Weekly,SOC 2,2024-02-13
Security,EKS clusters should be configured to have kubernetes secrets encrypted using KMS,Ensure that AWS Elastic Kubernetes Service clusters are configured to have Kubernetes secrets encrypted using AWS Key Management Service (KMS) keys.,Compliance,High,Ensure EKS clusters have Kubernetes secrets encrypted using KMS. Steps: 1. Go to the EKS console. 2. Enable encryption for Kubernetes secrets with KMS. https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-secret-encryption.html,Cost: None/$0 ,"Automation Approach:
AWS Config Rule: Create a rule to detect EKS clusters that do not have Kubernetes secrets encrypted with KMS.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all EKS clusters and ensures Kubernetes secrets are encrypted using KMS.
SSM Automation: An SSM document to automatically remediate non-compliant EKS clusters by configuring encryption for Kubernetes secrets using KMS."," Features of the Script:
‚úÖ Retrieves all EKS clusters and checks if Kubernetes secrets encryption using KMS is enabled.
‚úÖ Identifies clusters that do NOT have KMS encryption enabled for secrets.
‚úÖ If found, enables encryption using KMS.
‚úÖ Logs each action, including clusters that are already compliant.
‚úÖ Supports both manual mode (user inputs a cluster name) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual EKS check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check (or press Enter to auto-scan all): "" user_eks
}

# Function to enable KMS encryption for Kubernetes secrets
enable_kms_encryption_for_secrets() {
    log ""üîç Starting EKS Kubernetes secrets encryption compliance check...""

    # Get list of EKS clusters
    if [[ -n ""$user_eks"" ]]; then
        eks_clusters=(""$user_eks"")
    else
        eks_clusters=($(aws eks list-clusters --query ""clusters"" --output text))
    fi

    if [[ ${#eks_clusters[@]} -eq 0 ]]; then
        log ""‚ö†Ô∏è No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster in ""${eks_clusters[@]}""; do
        log ""üîé Checking KMS encryption for Kubernetes secrets in EKS cluster: $cluster""

        # Check if KMS encryption is enabled for secrets
        encryption_status=$(aws eks describe-cluster --name ""$cluster"" --query ""cluster.encryptionConfig[?resources=='secrets'].provider"" --output text)

        if [[ ""$encryption_status"" != ""aws:kms"" ]]; then
            log ""‚ùå Kubernetes secrets in cluster $cluster are NOT encrypted with KMS. Enabling now...""

            # Enable KMS encryption for Kubernetes secrets
            aws eks update-cluster-config --name ""$cluster"" \
                --encryption-config ""resources=[secrets],provider=aws:kms""

            log ""‚úÖ Kubernetes secrets encryption enabled using KMS for EKS cluster: $cluster.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster already has KMS encryption for Kubernetes secrets.""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Encryption enforcement completed. $fixed_count EKS clusters were updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
enable_kms_encryption_for_secrets
","Why This is Useful?
üîπ Sensitive Data Protection ‚Äì Ensures Kubernetes secrets are encrypted with a KMS key, protecting sensitive information.
üîπ Compliance ‚Äì Meets CIS, NIST, PCI-DSS, HIPAA requirements for data protection.
üîπ Manual or Automated ‚Äì Supports both manual checks and automatic enforcement.
üîπ Failsafe Mechanism ‚Äì Skips clusters already compliant.
üîπ Full Logging ‚Äì Provides an audit trail of actions taken, ensuring visibility and compliance.","üìå What This Script Does?
1Ô∏è‚É£ Retrieves all EKS clusters.
2Ô∏è‚É£ Checks if Kubernetes secrets are encrypted with KMS.
3Ô∏è‚É£ If not encrypted, enables KMS encryption for Kubernetes secrets.
4Ô∏è‚É£ Logs all actions for compliance and transparency.

",Bash,Weekly,SOC 2,2024-02-13
EKS,EKS clusters should run on a supported Kubernetes version,"This control checks whether an AWS EKS cluster is running on a supported Kubernetes version. The control fails if the EKS cluster is running on an unsupported version. If your application doesn't require a specific version of Kubernetes, we recommend that you use the latest available Kubernetes version that's supported by EKS for your clusters.",Compliance,High,Ensure EKS clusters run on a supported Kubernetes version. Steps: 1. Check the EKS console for the Kubernetes version. 2. Upgrade if not on a supported version. https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html,Cost: None/$0 ,"EKS Clusters Should Run on a Supported Kubernetes Version
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect EKS clusters running on unsupported Kubernetes versions.
Lambda Function: Scheduled Lambda function checks if any EKS clusters are running unsupported versions and updates them to a supported version.
SSM Automation: Use AWS Systems Manager Automation to automatically upgrade clusters running outdated Kubernetes versions to a supported one.
","üîç Features of the Script:
‚úÖ Retrieves all EKS clusters.
‚úÖ Checks the Kubernetes version for each cluster.
‚úÖ If the cluster is running an unsupported version, updates the Kubernetes version to a supported one.
‚úÖ Logs each action, including skipped clusters that are already using a supported version.
‚úÖ Supports both manual mode (user inputs a cluster name) and auto scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the EKS Cluster Name to check Kubernetes version (or press Enter to auto-scan all clusters): "" user_cluster
}

# Function to upgrade Kubernetes version for EKS clusters
upgrade_k8s_version() {
    log ""Starting EKS Kubernetes version upgrade process...""

    # Get list of EKS clusters (manual or auto)
    if [[ -n ""$user_cluster"" ]]; then
        clusters=(""$user_cluster"")
    else
        log ""No manual input provided. Scanning all EKS clusters...""
        clusters=($(aws eks list-clusters --query ""clusters[]"" --output text))
    fi

    if [[ ${#clusters[@]} -eq 0 ]]; then
        log ""No EKS clusters found.""
        exit 0
    fi

    fixed_count=0
    for cluster_name in ""${clusters[@]}""; do
        log ""Checking Kubernetes version for EKS cluster: $cluster_name""

        # Get current Kubernetes version
        current_version=$(aws eks describe-cluster --name ""$cluster_name"" --query ""cluster.version"" --output text)

        # List supported Kubernetes versions (example: 1.18, 1.19, etc.)
        supported_versions=(""1.18"" ""1.19"" ""1.20"" ""1.21"" ""1.22"")

        # Check if current version is supported
        if [[ ! "" ${supported_versions[@]} "" =~ "" ${current_version} "" ]]; then
            log ""‚ö†Ô∏è EKS cluster $cluster_name is running an unsupported Kubernetes version ($current_version). Upgrading...""
            
            # Upgrade to the latest supported version (example: 1.22)
            aws eks update-cluster-version --name ""$cluster_name"" --kubernetes-version ""1.22""

            log ""‚úÖ Upgraded EKS cluster $cluster_name to Kubernetes version 1.22.""
            ((fixed_count++))
        else
            log ""‚úÖ EKS cluster $cluster_name is already running a supported Kubernetes version ($current_version).""
        fi
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count EKS clusters updated.""
    else
        log ""‚úÖ All EKS clusters are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
upgrade_k8s_version
","Why it's useful:
Up-to-date Security and Features: Running an outdated Kubernetes version can expose your cluster to vulnerabilities and miss out on new features and performance improvements. This script helps to keep clusters updated automatically.
Compliance with AWS Best Practices: AWS recommends running EKS clusters on supported Kubernetes versions to ensure compatibility with other AWS services and to receive timely patches and security updates.
Automated Upgrades: Rather than manually checking and upgrading multiple clusters, this script automates the process, saving administrators a lot of manual work and reducing the risk of running outdated versions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all EKS clusters in the account.
2Ô∏è‚É£ Checks the Kubernetes version for each cluster.
3Ô∏è‚É£ Upgrades the version to a supported one if it‚Äôs running an outdated version.
4Ô∏è‚É£ Logs the actions performed, including any clusters skipped due to being on a supported version.",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,Minor version upgrades should be automatically applied to ElastiCache for Redis cache clusters,This control evaluates whether ElastiCache for Redis automatically applies minor version upgrades to cache clusters. This control fails if ElastiCache for Redis cache clusters do not have minor version upgrades automatically applied.,Compliance,High,Ensure minor version upgrades are automatically applied to ElastiCache for Redis cache clusters. Steps: 1. Go to the ElastiCache console. 2. Enable automatic minor version upgrades. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoMinorVersionUpgrade.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Minor version upgrades should be automatically applied to ElastiCache for Redis cache clusters
check_compliance() {
    log ""Checking AWS resources for Minor version upgrades should be automatically applied to ElastiCache for Redis cache clusters compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,Minor version upgrades should be automatically applied to ElastiCache for Redis cache clusters,This control evaluates whether ElastiCache for Redis automatically applies minor version upgrades to cache clusters. This control fails if ElastiCache for Redis cache clusters do not have minor version upgrades automatically applied.,Compliance,High,Ensure minor version upgrades are automatically applied to ElastiCache for Redis cache clusters. Steps: 1. Go to the ElastiCache console. 2. Enable automatic minor version upgrades. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoMinorVersionUpgrade.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Minor version upgrades should be automatically applied to ElastiCache for Redis cache clusters
check_compliance() {
    log ""Checking AWS resources for Minor version upgrades should be automatically applied to ElastiCache for Redis cache clusters compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache clusters should not use the default subnet group,This control checks if ElastiCache clusters are configured with a custom subnet group. The control fails for an ElastiCache cluster if CacheSubnetGroupName has the value default.,Compliance,High,Ensure ElastiCache clusters do not use the default subnet group. Steps: 1. Review your ElastiCache cluster settings. 2. Create a custom subnet group and associate your cluster with it. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache clusters should not use the default subnet group
check_compliance() {
    log ""Checking AWS resources for ElastiCache clusters should not use the default subnet group compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache clusters should not use the default subnet group,This control checks if ElastiCache clusters are configured with a custom subnet group. The control fails for an ElastiCache cluster if CacheSubnetGroupName has the value default.,Compliance,High,Ensure ElastiCache clusters do not use the default subnet group. Steps: 1. Review your ElastiCache cluster settings. 2. Create a custom subnet group and associate your cluster with it. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache clusters should not use the default subnet group
check_compliance() {
    log ""Checking AWS resources for ElastiCache clusters should not use the default subnet group compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache clusters should not use public_subnet,This control checks if ElastiCache clusters are configured with public subnet as there is a risk of exposing sensitive data.,Compliance,High,Ensure ElastiCache clusters do not use public subnets. Steps: 1. Check your ElastiCache cluster configuration. 2. Ensure your clusters are deployed in private subnets. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache clusters should not use public_subnet
check_compliance() {
    log ""Checking AWS resources for ElastiCache clusters should not use public_subnet compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache clusters should not use public_subnet,This control checks if ElastiCache clusters are configured with public subnet as there is a risk of exposing sensitive data.,Compliance,High,Ensure ElastiCache clusters do not use public subnets. Steps: 1. Check your ElastiCache cluster configuration. 2. Ensure your clusters are deployed in private subnets. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache clusters should not use public_subnet
check_compliance() {
    log ""Checking AWS resources for ElastiCache clusters should not use public_subnet compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache Redis cluster automatic backup should be enabled with retention period of 15 days or greater,"When automatic backups are enabled, AWS ElastiCache creates a backup of the cluster on a daily basis. The backup can be retained for a number of days as specified by your organization. Automatic backups can help guard against data loss.",Compliance,High,Ensure ElastiCache Redis cluster automatic backup is enabled with a retention period of 15 days or greater. Steps: 1. Review backup settings in the ElastiCache console. 2. Enable automatic backups with sufficient retention. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis.Backup.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache Redis cluster automatic backup should be enabled with retention period of 15 days or greater
check_compliance() {
    log ""Checking AWS resources for ElastiCache Redis cluster automatic backup should be enabled with retention period of 15 days or greater compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,ElastiCache Redis cluster automatic backup should be enabled with retention period of 15 days or greater,"When automatic backups are enabled, AWS ElastiCache creates a backup of the cluster on a daily basis. The backup can be retained for a number of days as specified by your organization. Automatic backups can help guard against data loss.",Compliance,High,Ensure ElastiCache Redis cluster automatic backup is enabled with a retention period of 15 days or greater. Steps: 1. Review backup settings in the ElastiCache console. 2. Enable automatic backups with sufficient retention. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis.Backup.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache Redis cluster automatic backup should be enabled with retention period of 15 days or greater
check_compliance() {
    log ""Checking AWS resources for ElastiCache Redis cluster automatic backup should be enabled with retention period of 15 days or greater compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache for Redis replication groups should have automatic failover enabled,This control checks if ElastiCache for Redis replication groups have automatic failover enabled. This control fails if automatic failover isn't enabled for a Redis replication group.,Compliance,High,Ensure ElastiCache for Redis replication groups have automatic failover enabled. Steps: 1. Review the replication group configuration. 2. Enable automatic failover settings. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ReplicationGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache for Redis replication groups should have automatic failover enabled
check_compliance() {
    log ""Checking AWS resources for ElastiCache for Redis replication groups should have automatic failover enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache for Redis replication groups should be encrypted at rest,This control checks if ElastiCache for Redis replication groups are encrypted at rest. This control fails if an ElastiCache for Redis replication group isn't encrypted at rest.,Compliance,High,Ensure ElastiCache for Redis replication groups are encrypted at rest. Steps: 1. Check encryption settings in the ElastiCache console. 2. Enable encryption at rest for replication groups. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/EncryptionAtRest.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache for Redis replication groups should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for ElastiCache for Redis replication groups should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache for Redis replication groups should be encrypted with CMK,Ensure ElastiCache for Redis replication group are encrypted using CMK. The rule is non-compliant if the ElastiCache for Redis replication group is not encrypted using CMK.,Compliance,High,Ensure ElastiCache for Redis replication groups are encrypted with CMK. Steps: 1. Review your encryption settings. 2. Configure replication groups to use customer-managed keys (CMK). https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/EncryptionAtRest.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache for Redis replication groups should be encrypted with CMK
check_compliance() {
    log ""Checking AWS resources for ElastiCache for Redis replication groups should be encrypted with CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache for Redis replication groups should be encrypted in transit,This control checks if ElastiCache for Redis replication groups are encrypted in transit. This control fails if an ElastiCache for Redis replication group isn't encrypted in transit.,Compliance,High,Ensure ElastiCache for Redis replication groups are encrypted in transit. Steps: 1. Check your replication group settings. 2. Enable in-transit encryption for Redis. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/EncryptionInTransit.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache for Redis replication groups should be encrypted in transit
check_compliance() {
    log ""Checking AWS resources for ElastiCache for Redis replication groups should be encrypted in transit compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,ElastiCache for Redis replication groups before version 6.0 should use Redis Auth,This control checks if ElastiCache for Redis replication groups has Redis Auth enabled. The control fails for an ElastiCache for Redis replication group if the Redis version of its nodes is below 6.0 and AuthToken isn't in use.,Compliance,High,Ensure ElastiCache for Redis replication groups before version 6.0 use Redis Auth. Steps: 1. Verify the version of your Redis replication group. 2. Enable Redis Auth for clusters using older versions. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis.Auth.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ElastiCache for Redis replication groups before version 6.0 should use Redis Auth
check_compliance() {
    log ""Checking AWS resources for ElastiCache for Redis replication groups before version 6.0 should use Redis Auth compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,Elastic Beanstalk,To be added,Compliance,Low,NOT YET ADDED,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elastic Beanstalk
check_compliance() {
    log ""Checking AWS resources for Elastic Beanstalk compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,Elastic Beanstalk enhanced health reporting should be enabled,AWS Elastic Beanstalk enhanced health reporting enables a more rapid response to changes in the health of the underlying infrastructure. These changes could result in a lack of availability of the application. Elastic Beanstalk enhanced health reporting provides a status descriptor to gauge the severity of the identified issues and identify possible causes to investigate.,Compliance,High,Ensure Elastic Beanstalk enhanced health reporting is enabled. Steps: 1. Open the Elastic Beanstalk console. 2. Select your environment. 3. Enable enhanced health reporting in the configuration settings. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/enhanced-health.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elastic Beanstalk enhanced health reporting should be enabled
check_compliance() {
    log ""Checking AWS resources for Elastic Beanstalk enhanced health reporting should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,Elastic Beanstalk enhanced health reporting should be enabled,AWS Elastic Beanstalk enhanced health reporting enables a more rapid response to changes in the health of the underlying infrastructure. These changes could result in a lack of availability of the application. Elastic Beanstalk enhanced health reporting provides a status descriptor to gauge the severity of the identified issues and identify possible causes to investigate.,Compliance,High,Ensure Elastic Beanstalk enhanced health reporting is enabled. Steps: 1. Open the Elastic Beanstalk console. 2. Select your environment. 3. Enable enhanced health reporting in the configuration settings. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/enhanced-health.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elastic Beanstalk enhanced health reporting should be enabled
check_compliance() {
    log ""Checking AWS resources for Elastic Beanstalk enhanced health reporting should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,Elastic Beanstalk enhanced health reporting should be enabled,AWS Elastic Beanstalk enhanced health reporting enables a more rapid response to changes in the health of the underlying infrastructure. These changes could result in a lack of availability of the application. Elastic Beanstalk enhanced health reporting provides a status descriptor to gauge the severity of the identified issues and identify possible causes to investigate.,Compliance,High,Ensure Elastic Beanstalk enhanced health reporting is enabled. Steps: 1. Open the Elastic Beanstalk console. 2. Select your environment. 3. Enable enhanced health reporting in the configuration settings. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/enhanced-health.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elastic Beanstalk enhanced health reporting should be enabled
check_compliance() {
    log ""Checking AWS resources for Elastic Beanstalk enhanced health reporting should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,Elastic Beanstalk should stream logs to CloudWatch,"This control checks whether an Elastic Beanstalk environment is configured to send logs to CloudWatch Logs. The control fails if an Elastic Beanstalk environment isn't configured to send logs to CloudWatch Logs. Optionally, you can provide a custom value for the RetentionInDays parameter if you want the control to pass only if logs are retained for the specified number of days before expiration.",Compliance,High,Ensure Elastic Beanstalk streams logs to CloudWatch. Steps: 1. Open the Elastic Beanstalk console. 2. Select your environment. 3. Enable log streaming to CloudWatch in the configuration settings. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elastic Beanstalk should stream logs to CloudWatch
check_compliance() {
    log ""Checking AWS resources for Elastic Beanstalk should stream logs to CloudWatch compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ElastiCache,Elastic Beanstalk environment should have managed updates enabled,"This control checks whether managed platform updates in an AWS Elastic Beanstalk environment is enabled. The rule is COMPLIANT if the value for ManagedActionsEnabled is set to true. The rule is NON_COMPLIANT if the value for ManagedActionsEnabled is set to false, or if a parameter is provided and its value does not match the existing configurations.",Compliance,High,Ensure Elastic Beanstalk environment has managed updates enabled. Steps: 1. Open the Elastic Beanstalk console. 2. Select your environment. 3. Enable managed updates in the environment settings. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/managed-updates.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elastic Beanstalk environment should have managed updates enabled
check_compliance() {
    log ""Checking AWS resources for Elastic Beanstalk environment should have managed updates enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,Elasticsearch domains should have audit logging enabled,To be added,Compliance,High,Ensure Elasticsearch domains have audit logging enabled. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Enable audit logging in the domain settings. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auditing.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domains should have audit logging enabled
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domains should have audit logging enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,Elasticsearch domains should have cognito authentication enabled,To be added,Compliance,High,Ensure Elasticsearch domains have Cognito authentication enabled. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Configure Cognito authentication in the access policies. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/cognito-auth.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domains should have cognito authentication enabled
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domains should have cognito authentication enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,Elasticsearch domains should have at least three data nodes,To be added,Compliance,High,Ensure Elasticsearch domains have at least three data nodes. Steps: 1. Open the Elasticsearch console. 2. Review the cluster settings. 3. Scale the number of data nodes to at least three. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/cluster.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domains should have at least three data nodes
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domains should have at least three data nodes compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,Elasticsearch domains should be configured with at least three dedicated master nodes,To be added,Compliance,High,Ensure Elasticsearch domains are configured with at least three dedicated master nodes. Steps: 1. Open the Elasticsearch console. 2. Review the cluster settings. 3. Configure dedicated master nodes to at least three. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/cluster.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domains should be configured with at least three dedicated master nodes
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domains should be configured with at least three dedicated master nodes compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,Connections to Elasticsearch domains should be encrypted using TLS 1.2,To be added,Compliance,High,Ensure connections to Elasticsearch domains are encrypted using TLS 1.2. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Verify that TLS 1.2 is enabled in the domain's endpoint settings. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/secure-cluster.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Connections to Elasticsearch domains should be encrypted using TLS 1.2
check_compliance() {
    log ""Checking AWS resources for Connections to Elasticsearch domains should be encrypted using TLS 1.2 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,ES domain encryption at rest should be enabled,To be added,Compliance,High,Ensure ES domain encryption at rest is enabled. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Enable encryption at rest in the domain settings. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/encryption-at-rest.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ES domain encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for ES domain encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ES domain encryption at rest should be enabled,To be added,Compliance,High,Ensure ES domain encryption at rest is enabled. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Enable encryption at rest in the domain settings. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/encryption-at-rest.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ES domain encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for ES domain encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,Elasticsearch domain error logging to CloudWatch Logs should be enabled,To be added,Compliance,High,Ensure Elasticsearch domain error logging to CloudWatch Logs is enabled. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Configure logging settings to send errors to CloudWatch Logs. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domain error logging to CloudWatch Logs should be enabled
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domain error logging to CloudWatch Logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,ES domains should be in a VPC,To be added,Compliance,High,Ensure ES domains are in a VPC. Steps: 1. Open the Elasticsearch console. 2. Review domain settings. 3. Ensure that the domain is configured within a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/vpc.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ES domains should be in a VPC
check_compliance() {
    log ""Checking AWS resources for ES domains should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,ES domains should be in a VPC,To be added,Compliance,High,Ensure ES domains are in a VPC. Steps: 1. Open the Elasticsearch console. 2. Review domain settings. 3. Ensure that the domain is configured within a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/vpc.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ES domains should be in a VPC
check_compliance() {
    log ""Checking AWS resources for ES domains should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ES domains should be in a VPC,To be added,Compliance,High,Ensure ES domains are in a VPC. Steps: 1. Open the Elasticsearch console. 2. Review domain settings. 3. Ensure that the domain is configured within a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/vpc.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ES domains should be in a VPC
check_compliance() {
    log ""Checking AWS resources for ES domains should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ES domains should be in a VPC,To be added,Compliance,High,Ensure ES domains are in a VPC. Steps: 1. Open the Elasticsearch console. 2. Review domain settings. 3. Ensure that the domain is configured within a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/vpc.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ES domains should be in a VPC
check_compliance() {
    log ""Checking AWS resources for ES domains should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ES domains should be in a VPC,To be added,Compliance,High,Ensure ES domains are in a VPC. Steps: 1. Open the Elasticsearch console. 2. Review domain settings. 3. Ensure that the domain is configured within a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/vpc.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ES domains should be in a VPC
check_compliance() {
    log ""Checking AWS resources for ES domains should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,Elasticsearch domains should have internal user database enabled,To be added,Compliance,High,Ensure Elasticsearch domains have an internal user database enabled. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Enable the internal user database in the security settings. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/internal-users.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domains should have internal user database enabled
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domains should have internal user database enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,Elasticsearch domain should send logs to CloudWatch,To be added,Compliance,High,Ensure Elasticsearch domain sends logs to CloudWatch. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Configure the logging settings to send logs to CloudWatch. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domain should send logs to CloudWatch
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domain should send logs to CloudWatch compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Elasticsearch domain should send logs to CloudWatch,To be added,Compliance,High,Ensure Elasticsearch domain sends logs to CloudWatch. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Configure the logging settings to send logs to CloudWatch. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domain should send logs to CloudWatch
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domain should send logs to CloudWatch compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Elasticsearch domain should send logs to CloudWatch,To be added,Compliance,High,Ensure Elasticsearch domain sends logs to CloudWatch. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Configure the logging settings to send logs to CloudWatch. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domain should send logs to CloudWatch
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domain should send logs to CloudWatch compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Elasticsearch,Elasticsearch domain node-to-node encryption should be enabled,To be added,Compliance,High,Ensure Elasticsearch domain node-to-node encryption is enabled. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Enable node-to-node encryption in the domain's configuration settings. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domain node-to-node encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domain node-to-node encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Elasticsearch domain node-to-node encryption should be enabled,To be added,Compliance,High,Ensure Elasticsearch domain node-to-node encryption is enabled. Steps: 1. Open the Elasticsearch console. 2. Select your domain. 3. Enable node-to-node encryption in the domain's configuration settings. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Elasticsearch domain node-to-node encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Elasticsearch domain node-to-node encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,Classic Load Balancers should have connection draining enabled,This control checks whether Classic Load Balancers have connection draining enabled.,Compliance,High,"Classic Load Balancers should have connection draining enabled.
Steps: 1. Check connection draining settings for Classic Load Balancers. 2. Enable connection draining if not already enabled. #ELB Connection Draining :https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-connection-draining.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Classic Load Balancers should have connection draining enabled
check_compliance() {
    log ""Checking AWS resources for Classic Load Balancers should have connection draining enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application and classic load balancer logging should be enabled,Elastic Load Balancing activity is a central point of communication within an environment.,Compliance,High,"ELB application and classic load balancer logging should be enabled.
Steps: 1. Verify logging settings for both application and classic load balancers. 2. Enable access logging if disabled. #ELB Logging :https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application and classic load balancer logging should be enabled
check_compliance() {
    log ""Checking AWS resources for ELB application and classic load balancer logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,ELB application and classic load balancer logging should be enabled,Elastic Load Balancing activity is a central point of communication within an environment.,Compliance,High,"ELB application and classic load balancer logging should be enabled.
Steps: 1. Verify logging settings for both application and classic load balancers. 2. Enable access logging if disabled. #ELB Logging :https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application and classic load balancer logging should be enabled
check_compliance() {
    log ""Checking AWS resources for ELB application and classic load balancer logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,ELB application and classic load balancer logging should be enabled,Elastic Load Balancing activity is a central point of communication within an environment.,Compliance,High,"ELB application and classic load balancer logging should be enabled.
Steps: 1. Verify logging settings for both application and classic load balancers. 2. Enable access logging if disabled. #ELB Logging :https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application and classic load balancer logging should be enabled
check_compliance() {
    log ""Checking AWS resources for ELB application and classic load balancer logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB application and classic load balancer logging should be enabled,Elastic Load Balancing activity is a central point of communication within an environment.,Compliance,High,"ELB application and classic load balancer logging should be enabled.
Steps: 1. Verify logging settings for both application and classic load balancers. 2. Enable access logging if disabled. #ELB Logging :https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application and classic load balancer logging should be enabled
check_compliance() {
    log ""Checking AWS resources for ELB application and classic load balancer logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB application and classic load balancer logging should be enabled,Elastic Load Balancing activity is a central point of communication within an environment.,Compliance,High,"ELB application and classic load balancer logging should be enabled.
Steps: 1. Verify logging settings for both application and classic load balancers. 2. Enable access logging if disabled. #ELB Logging :https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application and classic load balancer logging should be enabled
check_compliance() {
    log ""Checking AWS resources for ELB application and classic load balancer logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB load balancers should prohibit public access,"An internet facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the internet to the EC2 instances that are registered with the load balancer.",Compliance,High,"ELB load balancers should prohibit public access.
Steps: 1. Review security groups and access control settings. 2. Update settings to restrict public access where appropriate. #ELB Public Access :https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/load-balancer-access-control.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB load balancers should prohibit public access
check_compliance() {
    log ""Checking AWS resources for ELB load balancers should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB load balancers should prohibit public access,"An internet facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the internet to the EC2 instances that are registered with the load balancer.",Compliance,High,"ELB load balancers should prohibit public access.
Steps: 1. Review security groups and access control settings. 2. Update settings to restrict public access where appropriate. #ELB Public Access :https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/load-balancer-access-control.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB load balancers should prohibit public access
check_compliance() {
    log ""Checking AWS resources for ELB load balancers should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancer deletion protection should be enabled,This rule ensures that Elastic Load Balancing has deletion protection enabled.,Compliance,High,"ELB application load balancer deletion protection should be enabled.
Steps: 1. Check deletion protection settings. 2. Enable deletion protection for all application load balancers. #ELB Deletion Protection :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#deletion-protection",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancer deletion protection should be enabled
check_compliance() {
    log ""Checking AWS resources for ELB application load balancer deletion protection should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancer deletion protection should be enabled,This rule ensures that Elastic Load Balancing has deletion protection enabled.,Compliance,High,"ELB application load balancer deletion protection should be enabled.
Steps: 1. Check deletion protection settings. 2. Enable deletion protection for all application load balancers. #ELB Deletion Protection :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#deletion-protection",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancer deletion protection should be enabled
check_compliance() {
    log ""Checking AWS resources for ELB application load balancer deletion protection should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers should be configured with defensive or strictest desync mitigation mode,This control checks whether an Application Load Balancer is configured with defensive or strictest desync mitigation mode. The control fails if an Application Load Balancer is not configured with defensive or strictest desync mitigation mode.,Compliance,High,"ELB application load balancers should be configured with defensive or strictest desync mitigation mode.
Steps: 1. Review desync mitigation settings. 2. Configure with the strictest mode. #ELB Desync Mitigation :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#desync-mitigation",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should be configured with defensive or strictest desync mitigation mode
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should be configured with defensive or strictest desync mitigation mode compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers should be configured with defensive or strictest desync mitigation mode,This control checks whether an Application Load Balancer is configured with defensive or strictest desync mitigation mode. The control fails if an Application Load Balancer is not configured with defensive or strictest desync mitigation mode.,Compliance,High,"ELB application load balancers should be configured with defensive or strictest desync mitigation mode.
Steps: 1. Review desync mitigation settings. 2. Configure with the strictest mode. #ELB Desync Mitigation :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#desync-mitigation",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should be configured with defensive or strictest desync mitigation mode
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should be configured with defensive or strictest desync mitigation mode compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers should be drop HTTP headers,Ensure that your Elastic Load Balancers (ELB) are configured to drop http headers.,Compliance,High,"ELB application load balancers should drop HTTP headers.
Steps: 1. Identify unnecessary HTTP headers. 2. Configure load balancer to drop those headers. #ELB HTTP Headers :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#http-headers",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should be drop HTTP headers
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should be drop HTTP headers compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB application load balancers should be drop HTTP headers,Ensure that your Elastic Load Balancers (ELB) are configured to drop http headers.,Compliance,High,"ELB application load balancers should drop HTTP headers.
Steps: 1. Identify unnecessary HTTP headers. 2. Configure load balancer to drop those headers. #ELB HTTP Headers :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#http-headers",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should be drop HTTP headers
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should be drop HTTP headers compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers secured listener certificate should not expire within next 30 days,This control ensures that SSL/TLS certificates used in application load balancers are renewed 30 days before their expiration date.,Compliance,High,"ELB application load balancers secured listener certificate should not expire within the next 30 days.
Steps: 1. Check the expiration date of the secured listener certificates. 2. Renew any certificates expiring within 30 days. #ELB SSL Certificate :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#load-balancer-listeners-ssl-certificates",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers secured listener certificate should not expire within next 30 days
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers secured listener certificate should not expire within next 30 days compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers secured listener certificate should not expire within next 30 days,This control ensures that SSL/TLS certificates used in application load balancers are renewed 30 days before their expiration date.,Compliance,High,"ELB application load balancers secured listener certificate should not expire within the next 30 days.
Steps: 1. Check the expiration date of the secured listener certificates. 2. Renew any certificates expiring within 30 days. #ELB SSL Certificate :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#load-balancer-listeners-ssl-certificates",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers secured listener certificate should not expire within next 30 days
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers secured listener certificate should not expire within next 30 days compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers secured listener certificate should not expire within next 7 days,This control ensures that SSL/TLS certificates used in application load balancers are renewed 7 days before their expiration date.,Compliance,High,"ELB application load balancers secured listener certificate should not expire within the next 7 days.
Steps: 1. Review secured listener certificate expiration dates. 2. Renew any certificates expiring within 7 days. #ELB SSL Certificate :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#load-balancer-listeners-ssl-certificates",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers secured listener certificate should not expire within next 7 days
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers secured listener certificate should not expire within next 7 days compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers secured listener certificate should not expire within next 7 days,This control ensures that SSL/TLS certificates used in application load balancers are renewed 7 days before their expiration date.,Compliance,High,"ELB application load balancers secured listener certificate should not expire within the next 7 days.
Steps: 1. Review secured listener certificate expiration dates. 2. Renew any certificates expiring within 7 days. #ELB SSL Certificate :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#load-balancer-listeners-ssl-certificates",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers secured listener certificate should not expire within next 7 days
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers secured listener certificate should not expire within next 7 days compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers should redirect HTTP requests to HTTPS,"To help protect data in transit, ensure that your Application Load Balancer automatically redirects unencrypted HTTP requests to HTTPS.",Compliance,High,"ELB application load balancers should redirect HTTP requests to HTTPS.
Steps: 1. Check listener rules for load balancers. 2. Configure rules to redirect HTTP traffic to HTTPS. #ELB HTTP to HTTPS Redirect :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#redirect-http-to-https",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should redirect HTTP requests to HTTPS
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should redirect HTTP requests to HTTPS compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB application load balancers should redirect HTTP requests to HTTPS,"To help protect data in transit, ensure that your Application Load Balancer automatically redirects unencrypted HTTP requests to HTTPS.",Compliance,High,"ELB application load balancers should redirect HTTP requests to HTTPS.
Steps: 1. Check listener rules for load balancers. 2. Configure rules to redirect HTTP traffic to HTTPS. #ELB HTTP to HTTPS Redirect :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#redirect-http-to-https",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should redirect HTTP requests to HTTPS
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should redirect HTTP requests to HTTPS compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers should redirect HTTP requests to HTTPS,"To help protect data in transit, ensure that your Application Load Balancer automatically redirects unencrypted HTTP requests to HTTPS.",Compliance,High,"ELB application load balancers should redirect HTTP requests to HTTPS.
Steps: 1. Check listener rules for load balancers. 2. Configure rules to redirect HTTP traffic to HTTPS. #ELB HTTP to HTTPS Redirect :https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#redirect-http-to-https",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should redirect HTTP requests to HTTPS
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should redirect HTTP requests to HTTPS compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers should have Web Application Firewall (WAF) enabled,Ensure AWS WAF is enabled on Elastic Load Balancers (ELB) to help protect web applications.,Compliance,High,"ELB application load balancers should have Web Application Firewall (WAF) enabled.
Steps: 1. Check WAF settings for load balancers. 2. Enable WAF for enhanced security. #ELB WAF :https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should have Web Application Firewall (WAF) enabled
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should have Web Application Firewall (WAF) enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB application load balancers should have Web Application Firewall (WAF) enabled,Ensure AWS WAF is enabled on Elastic Load Balancers (ELB) to help protect web applications.,Compliance,High,"ELB application load balancers should have Web Application Firewall (WAF) enabled.
Steps: 1. Check WAF settings for load balancers. 2. Enable WAF for enhanced security. #ELB WAF :https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should have Web Application Firewall (WAF) enabled
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should have Web Application Firewall (WAF) enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers should have at least one outbound rule,"Ensure application load balancers have at least one outbound rule in all the attached security groups. A security group without any outbound rule rejects all outgoing traffic. This means that all outgoing traffic originating from your cloud assets (instances, containers, etc.) will be dropped when it reaches the ELB layer.",Compliance,High,"ELB application load balancers should have at least one outbound rule.
Steps: 1. Review outbound rules for load balancers. 2. Ensure at least one outbound rule is configured. #ELB Outbound Rules :https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/load-balancer-outbound-rules.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should have at least one outbound rule
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should have at least one outbound rule compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application load balancers should have at least one outbound rule,"Ensure application load balancers have at least one outbound rule in all the attached security groups. A security group without any outbound rule rejects all outgoing traffic. This means that all outgoing traffic originating from your cloud assets (instances, containers, etc.) will be dropped when it reaches the ELB layer.",Compliance,High,"ELB application load balancers should have at least one outbound rule.
Steps: 1. Review outbound rules for load balancers. 2. Ensure at least one outbound rule is configured. #ELB Outbound Rules :https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/load-balancer-outbound-rules.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should have at least one outbound rule
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should have at least one outbound rule compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application and network load balancers should use listeners,"Ensure that application and network load balancer must have one or more listeners. A listener is a process that checks for connection requests, using the protocol and port that you configure. The rules that you define for a listener determine how the load balancer routes requests to its registered targets.",Compliance,High,"Description: Listeners are essential for ELB to route traffic.
Steps: 1. Ensure listeners are configured on all application and network load balancers.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/what-is-load-balancing.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application and network load balancers should use listeners
check_compliance() {
    log ""Checking AWS resources for ELB application and network load balancers should use listeners compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB application and network load balancers should only use SSL or HTTPS listeners,Ensure that Application Load Balancers and Network Load Balancers are configured to use certificates from AWS Certificate Manager (ACM). This rule is compliant if at least 1 load balancer is configured without a certificate from ACM.,Compliance,High,"Description: Using SSL/HTTPS ensures secure communication.
Steps: 1. Reconfigure listeners to use only SSL or HTTPS.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/listeners-https.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application and network load balancers should only use SSL or HTTPS listeners
check_compliance() {
    log ""Checking AWS resources for ELB application and network load balancers should only use SSL or HTTPS listeners compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB application and network load balancers should only use SSL or HTTPS listeners,Ensure that Application Load Balancers and Network Load Balancers are configured to use certificates from AWS Certificate Manager (ACM). This rule is compliant if at least 1 load balancer is configured without a certificate from ACM.,Compliance,High,"Description: Using SSL/HTTPS ensures secure communication.
Steps: 1. Reconfigure listeners to use only SSL or HTTPS.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/listeners-https.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application and network load balancers should only use SSL or HTTPS listeners
check_compliance() {
    log ""Checking AWS resources for ELB application and network load balancers should only use SSL or HTTPS listeners compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB classic load balancers should have cross-zone load balancing enabled,Enable cross-zone load balancing for your Elastic Load Balancers (ELBs) to help maintain adequate capacity and availability. The cross-zone load balancing reduces the need to maintain equivalent numbers of instances in each enabled availability zone.,Compliance,High,"Description: Cross-zone load balancing distributes traffic evenly across instances.
Steps: 1. Enable cross-zone load balancing in the load balancer settings.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/load-balancer-cross-zone.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should have cross-zone load balancing enabled
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should have cross-zone load balancing enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,ELB classic load balancers should have cross-zone load balancing enabled,Enable cross-zone load balancing for your Elastic Load Balancers (ELBs) to help maintain adequate capacity and availability. The cross-zone load balancing reduces the need to maintain equivalent numbers of instances in each enabled availability zone.,Compliance,High,"Description: Cross-zone load balancing distributes traffic evenly across instances.
Steps: 1. Enable cross-zone load balancing in the load balancer settings.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/load-balancer-cross-zone.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should have cross-zone load balancing enabled
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should have cross-zone load balancing enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB classic load balancers should be configured with defensive or strictest desync mitigation mode,This control checks whether a Classic Load Balancer is configured with defensive or strictest desync mitigation mode. This control will fail if the Classic Load Balancer is not configured with defensive or strictest desync mitigation mode.,Compliance,High,"Description: Desync mitigation protects against malformed packets.
Steps: 1. Configure the load balancer with the desired desync mitigation mode.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/classic-load-balancer-configuration.html#cross-zone-load-balancing",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should be configured with defensive or strictest desync mitigation mode
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should be configured with defensive or strictest desync mitigation mode compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB classic load balancers should span multiple availability zones,This control checks whether a Classic Load Balancer has been configured to span multiple Availability Zones. The control fails if the Classic Load Balancer does not span multiple Availability Zones.,Compliance,High,"Description: Spanning multiple AZs increases availability.
Steps: 1. Ensure load balancers are deployed in multiple availability zones.
Link: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should span multiple availability zones
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should span multiple availability zones compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,ELB classic load balancers should span multiple availability zones,This control checks whether a Classic Load Balancer has been configured to span multiple Availability Zones. The control fails if the Classic Load Balancer does not span multiple Availability Zones.,Compliance,High,"Description: Spanning multiple AZs increases availability.
Steps: 1. Ensure load balancers are deployed in multiple availability zones.
Link: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should span multiple availability zones
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should span multiple availability zones compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB classic load balancers should have at least one registered instance,This control checks whether an ELB classic load balancer has registered instances. The control fails if an ELB classic load balancer has zero instances registered.,Compliance,High,"Description: Registered instances are needed to route traffic.
Steps: 1. Register at least one instance with the load balancer.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-getting-started.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should have at least one registered instance
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should have at least one registered instance compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB classic load balancers should use SSL certificates,"Because sensitive data can exist and to help protect data at transit, ensure encryption is enabled for your Elastic Load Balancing.",Compliance,High,"Description: SSL certificates are necessary for secure connections.
Steps: 1. Obtain and configure SSL certificates on the load balancer.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-creating.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should use SSL certificates
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should use SSL certificates compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB classic load balancers should use SSL certificates,"Because sensitive data can exist and to help protect data at transit, ensure encryption is enabled for your Elastic Load Balancing.",Compliance,High,"Description: SSL certificates are necessary for secure connections.
Steps: 1. Obtain and configure SSL certificates on the load balancer.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-creating.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should use SSL certificates
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should use SSL certificates compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB classic load balancers should only use SSL or HTTPS listeners,"Ensure that your Elastic Load Balancers (ELBs) are configured with SSL or HTTPS listeners. Because sensitive data can exist, enable encryption in transit to help protect that data.",Compliance,High,"Description: Ensures secure data transmission.
Steps: 1. Reconfigure to use SSL or HTTPS listeners only.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/listeners-https.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should only use SSL or HTTPS listeners
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should only use SSL or HTTPS listeners compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB classic load balancers should only use SSL or HTTPS listeners,"Ensure that your Elastic Load Balancers (ELBs) are configured with SSL or HTTPS listeners. Because sensitive data can exist, enable encryption in transit to help protect that data.",Compliance,High,"Description: Ensures secure data transmission.
Steps: 1. Reconfigure to use SSL or HTTPS listeners only.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/listeners-https.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should only use SSL or HTTPS listeners
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should only use SSL or HTTPS listeners compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB classic load balancers should have at least one inbound rule,Ensure classic load balancer have at least one inbound rule in all the attached security groups.,Compliance,High,"Description: Inbound rules control incoming traffic.
Steps: 1. Configure at least one inbound rule in the security group.
Link: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should have at least one inbound rule
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should have at least one inbound rule compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB classic load balancers should have at least one outbound rule,"Ensure classic load balancers have at least one outbound rule in all the attached security groups. A security group without any outbound rule rejects all outgoing traffic. This means that all outgoing traffic originating from your cloud assets (instances, containers, etc.) will be dropped when it reaches the ELB layer.",Compliance,High,"Description: Outbound rules control outgoing traffic.
Steps: 1. Configure at least one outbound rule in the security group.
Link: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB classic load balancers should have at least one outbound rule
check_compliance() {
    log ""Checking AWS resources for ELB classic load balancers should have at least one outbound rule compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB listeners should use secure SSL cipher,Ensure that ELB listeners do not have any insecure SSL ciphers. Using insecure and deprecated ciphers for your ELB Predefined Security Policy or Custom Security Policy could make the SSL connection between the client and the load balancer vulnerable to exploits.,Compliance,High,"Description: Secure SSL ciphers prevent vulnerabilities.
Steps: 1. Configure the listener to use secure ciphers.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/listener-update.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB listeners should use secure SSL cipher
check_compliance() {
    log ""Checking AWS resources for ELB listeners should use secure SSL cipher compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,ELB listeners should use secure SSL cipher,Ensure that ELB listeners do not have any insecure SSL ciphers. Using insecure and deprecated ciphers for your ELB Predefined Security Policy or Custom Security Policy could make the SSL connection between the client and the load balancer vulnerable to exploits.,Compliance,High,"Description: Secure SSL ciphers prevent vulnerabilities.
Steps: 1. Configure the listener to use secure ciphers.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/listener-update.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB listeners should use secure SSL cipher
check_compliance() {
    log ""Checking AWS resources for ELB listeners should use secure SSL cipher compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB network load balancers should have TLS listener security policy configured,Ensure that your Network Load Balancers (NLBs) are configured with a TLS listener security policy. Using insecure ciphers for your NLB Predefined or Custom Security Policy could make the TLS connection between the client and the load balancer vulnerable to exploits.,Compliance,High,"Description: Ensures TLS policies are applied for secure communication.
Steps: 1. Configure the appropriate TLS security policy for the listener.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB network load balancers should have TLS listener security policy configured
check_compliance() {
    log ""Checking AWS resources for ELB network load balancers should have TLS listener security policy configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
ELB,ELB listeners SSL/TLS protocol version should be checked,"Using insecure ciphers for your ELB Predefined or Custom Security Policy, could make the SSL connection between the client and the load balancer vulnerable to exploits. TLS 1.0 was recommended to be disabled by PCI Council after June 30, 2016.",Compliance,High,"Description: Ensures the latest and most secure protocol versions are used.
Steps: 1. Regularly check and update the SSL/TLS protocol version on listeners.
Link: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB listeners SSL/TLS protocol version should be checked
check_compliance() {
    log ""Checking AWS resources for ELB listeners SSL/TLS protocol version should be checked compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR public access should be blocked at account level,"The block public access feature prevents a cluster in a public subnet from launching when any security group associated with the cluster has a rule that allows inbound traffic from IPv4 0.0.0.0/0 or IPv6 ::/0 (public access) on a port, unless the port has been specified as an exception - port 22 is an exception by default. This feature is enabled by default for each AWS Region in your AWS account and is not recommended to be turned off.",Compliance,High,Ensure EMR public access is blocked at the account level. Steps: 1. Open the Amazon EMR console. 2. Go to the Account Settings. 3. Disable public access in the EMR settings. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-access.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR public access should be blocked at account level
check_compliance() {
    log ""Checking AWS resources for EMR public access should be blocked at account level compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,EMR public access should be blocked at account level,"The block public access feature prevents a cluster in a public subnet from launching when any security group associated with the cluster has a rule that allows inbound traffic from IPv4 0.0.0.0/0 or IPv6 ::/0 (public access) on a port, unless the port has been specified as an exception - port 22 is an exception by default. This feature is enabled by default for each AWS Region in your AWS account and is not recommended to be turned off.",Compliance,High,Ensure EMR public access is blocked at the account level. Steps: 1. Open the Amazon EMR console. 2. Go to the Account Settings. 3. Disable public access in the EMR settings. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-access.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR public access should be blocked at account level
check_compliance() {
    log ""Checking AWS resources for EMR public access should be blocked at account level compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR clusters encryption at rest should be enabled,To be added,Compliance,High,Ensure EMR clusters encryption at rest is enabled. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Enable encryption at rest in the security settings. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR clusters encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for EMR clusters encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR clusters client side encryption (CSE CMK) enabled with CMK,To be added,Compliance,High,Ensure EMR clusters client-side encryption (CSE CMK) is enabled with CMK. Steps: 1. Open the Amazon EMR console. 2. Choose your cluster. 3. Enable CSE in the cluster configuration settings. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-encryption-cse.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR clusters client side encryption (CSE CMK) enabled with CMK
check_compliance() {
    log ""Checking AWS resources for EMR clusters client side encryption (CSE CMK) enabled with CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR clusters server side encryption (SSE KMS) enabled with KMS,To be added,Compliance,High,Ensure EMR clusters server-side encryption (SSE KMS) is enabled with KMS. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Enable SSE with KMS in the security settings. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-encryption-sse-kms.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR clusters server side encryption (SSE KMS) enabled with KMS
check_compliance() {
    log ""Checking AWS resources for EMR clusters server side encryption (SSE KMS) enabled with KMS compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR clusters encryption in transit should be enabled,To be added,Compliance,High,Ensure EMR clusters encryption in transit is enabled. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Enable encryption in transit in the configuration settings. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-encryption-in-transit.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR clusters encryption in transit should be enabled
check_compliance() {
    log ""Checking AWS resources for EMR clusters encryption in transit should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR cluster Kerberos should be enabled,To be added,Compliance,High,Ensure EMR cluster Kerberos is enabled. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Enable Kerberos authentication in the cluster configuration. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR cluster Kerberos should be enabled
check_compliance() {
    log ""Checking AWS resources for EMR cluster Kerberos should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,EMR cluster Kerberos should be enabled,To be added,Compliance,High,Ensure EMR cluster Kerberos is enabled. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Enable Kerberos authentication in the cluster configuration. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR cluster Kerberos should be enabled
check_compliance() {
    log ""Checking AWS resources for EMR cluster Kerberos should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR cluster local disks should be encrypted with CMK,To be added,Compliance,High,Ensure EMR cluster local disks are encrypted with CMK. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Enable local disk encryption in the configuration settings. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-encryption-local-disks.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR cluster local disks should be encrypted with CMK
check_compliance() {
    log ""Checking AWS resources for EMR cluster local disks should be encrypted with CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR clusters local disk encryption should be enabled,To be added,Compliance,High,Ensure EMR clusters local disk encryption is enabled. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Enable local disk encryption in the security settings. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-encryption-local-disks.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR clusters local disk encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for EMR clusters local disk encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR cluster master nodes should not have public IP addresses,To be added,Compliance,High,Ensure EMR cluster master nodes do not have public IP addresses. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Review and modify the master node settings to remove public IP addresses. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-security.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR cluster master nodes should not have public IP addresses
check_compliance() {
    log ""Checking AWS resources for EMR cluster master nodes should not have public IP addresses compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,EMR cluster master nodes should not have public IP addresses,To be added,Compliance,High,Ensure EMR cluster master nodes do not have public IP addresses. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Review and modify the master node settings to remove public IP addresses. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-security.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR cluster master nodes should not have public IP addresses
check_compliance() {
    log ""Checking AWS resources for EMR cluster master nodes should not have public IP addresses compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EMR,EMR clusters should have security configuration enabled,To be added,Compliance,High,Ensure EMR clusters have a security configuration enabled. Steps: 1. Open the Amazon EMR console. 2. Select your cluster. 3. Enable the necessary security configurations for the cluster. https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-security.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EMR clusters should have security configuration enabled
check_compliance() {
    log ""Checking AWS resources for EMR clusters should have security configuration enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EventBridge,EventBridge custom event buses should have a resource-based policy attached,This control checks if an Amazon EventBridge custom event bus has a resource-based policy attached. This control fails if the custom event bus doesn't have a resource-based policy..,Compliance,High,Ensure EventBridge custom event buses have a resource-based policy attached. Steps: 1. Open the EventBridge console. 2. Select your custom event bus. 3. Attach a resource-based policy. https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-adding-permissions.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EventBridge custom event buses should have a resource-based policy attached
check_compliance() {
    log ""Checking AWS resources for EventBridge custom event buses should have a resource-based policy attached compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
EventBridge,EventBridge custom event buses should have a resource-based policy attached,This control checks if an Amazon EventBridge custom event bus has a resource-based policy attached. This control fails if the custom event bus doesn't have a resource-based policy..,Compliance,High,Ensure EventBridge custom event buses have a resource-based policy attached. Steps: 1. Open the EventBridge console. 2. Select your custom event bus. 3. Attach a resource-based policy. https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-adding-permissions.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EventBridge custom event buses should have a resource-based policy attached
check_compliance() {
    log ""Checking AWS resources for EventBridge custom event buses should have a resource-based policy attached compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
FSx,FSx for OpenZFS file systems should be configured to copy tags to backups and volumes,To be added,Compliance,High,Ensure FSx for OpenZFS file systems are configured to copy tags to backups and volumes. Steps: 1. Open the FSx console. 2. Select your OpenZFS file system. 3. Enable tag copying in the configuration settings. https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/manage-backing-up-openzfs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for FSx for OpenZFS file systems should be configured to copy tags to backups and volumes
check_compliance() {
    log ""Checking AWS resources for FSx for OpenZFS file systems should be configured to copy tags to backups and volumes compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
FSx,FSx file system should be protected by backup plan,To be added,Compliance,High,Ensure FSx file systems are protected by a backup plan. Steps: 1. Open the FSx console. 2. Select your file system. 3. Configure backup settings to protect the file system. https://docs.aws.amazon.com/fsx/latest/WindowsGuide/backup.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for FSx file system should be protected by backup plan
check_compliance() {
    log ""Checking AWS resources for FSx file system should be protected by backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,FSx file system should be protected by backup plan,To be added,Compliance,High,Ensure FSx file systems are protected by a backup plan. Steps: 1. Open the FSx console. 2. Select your file system. 3. Configure backup settings to protect the file system. https://docs.aws.amazon.com/fsx/latest/WindowsGuide/backup.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for FSx file system should be protected by backup plan
check_compliance() {
    log ""Checking AWS resources for FSx file system should be protected by backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glacier,Glacier vault should restrict public access,To be added,Compliance,High,Ensure Glacier vault restricts public access. Steps: 1. Open the Glacier console. 2. Select your vault. 3. Configure the vault settings to restrict public access. https://docs.aws.amazon.com/amazonglacier/latest/dev/vaults.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glacier vault should restrict public access
check_compliance() {
    log ""Checking AWS resources for Glacier vault should restrict public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue connection SSL should be enabled,To be added,Compliance,High,Ensure Glue connection SSL is enabled. Steps: 1. Open the AWS Glue console. 2. Navigate to the Connections section. 3. Edit the connection settings to enable SSL. https://docs.aws.amazon.com/glue/latest/dg/glue-connections.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue connection SSL should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue connection SSL should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue data catalog metadata encryption should be enabled,Ensure Glue data catalog metadata encryption is enabled to protect sensitive information at rest.,Compliance,High,Ensure Glue data catalog metadata encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Go to the Data Catalog settings. 3. Enable metadata encryption. https://docs.aws.amazon.com/glue/latest/dg/encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue data catalog metadata encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue data catalog metadata encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue data catalog metadata encryption should be enabled,Ensure Glue data catalog metadata encryption is enabled to protect sensitive information at rest.,Compliance,High,Ensure Glue data catalog metadata encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Go to the Data Catalog settings. 3. Enable metadata encryption. https://docs.aws.amazon.com/glue/latest/dg/encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue data catalog metadata encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue data catalog metadata encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue data catalog connection password encryption should be enabled,Ensure Glue data catalog connection password encryption is enabled to protect sensitive information at rest.,Compliance,High,Ensure Glue data catalog connection password encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Navigate to the Connections section. 3. Ensure password encryption is enabled for each connection. https://docs.aws.amazon.com/glue/latest/dg/glue-connections.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue data catalog connection password encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue data catalog connection password encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue data catalog connection password encryption should be enabled,Ensure Glue data catalog connection password encryption is enabled to protect sensitive information at rest.,Compliance,High,Ensure Glue data catalog connection password encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Navigate to the Connections section. 3. Ensure password encryption is enabled for each connection. https://docs.aws.amazon.com/glue/latest/dg/glue-connections.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue data catalog connection password encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue data catalog connection password encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue dev endpoints CloudWatch logs encryption should be enabled,To be added,Compliance,High,Ensure Glue dev endpoints CloudWatch logs encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Select the Dev Endpoints section. 3. Enable CloudWatch logs encryption. https://docs.aws.amazon.com/glue/latest/dg/dev-endpoints.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue dev endpoints CloudWatch logs encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue dev endpoints CloudWatch logs encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Glue dev endpoints CloudWatch logs encryption should be enabled,To be added,Compliance,High,Ensure Glue dev endpoints CloudWatch logs encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Select the Dev Endpoints section. 3. Enable CloudWatch logs encryption. https://docs.aws.amazon.com/glue/latest/dg/dev-endpoints.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue dev endpoints CloudWatch logs encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue dev endpoints CloudWatch logs encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue dev endpoints job bookmark encryption should be enabled,To be added,Compliance,High,Ensure Glue dev endpoints job bookmark encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Select the Dev Endpoints section. 3. Enable job bookmark encryption. https://docs.aws.amazon.com/glue/latest/dg/dev-endpoints.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue dev endpoints job bookmark encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue dev endpoints job bookmark encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Glue dev endpoints job bookmark encryption should be enabled,To be added,Compliance,High,Ensure Glue dev endpoints job bookmark encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Select the Dev Endpoints section. 3. Enable job bookmark encryption. https://docs.aws.amazon.com/glue/latest/dg/dev-endpoints.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue dev endpoints job bookmark encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue dev endpoints job bookmark encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue dev endpoints S3 encryption should be enabled,To be added,Compliance,High,Ensure Glue dev endpoints S3 encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Select the Dev Endpoints section. 3. Enable S3 encryption for the endpoint. https://docs.aws.amazon.com/glue/latest/dg/dev-endpoints.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue dev endpoints S3 encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue dev endpoints S3 encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Glue dev endpoints S3 encryption should be enabled,To be added,Compliance,High,Ensure Glue dev endpoints S3 encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Select the Dev Endpoints section. 3. Enable S3 encryption for the endpoint. https://docs.aws.amazon.com/glue/latest/dg/dev-endpoints.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue dev endpoints S3 encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue dev endpoints S3 encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue jobs bookmarks encryption should be enabled,To be added,Compliance,High,Ensure Glue jobs bookmarks encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Navigate to the Jobs section. 3. Enable bookmarks encryption in job settings. https://docs.aws.amazon.com/glue/latest/dg/jobs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue jobs bookmarks encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue jobs bookmarks encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Glue jobs bookmarks encryption should be enabled,To be added,Compliance,High,Ensure Glue jobs bookmarks encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Navigate to the Jobs section. 3. Enable bookmarks encryption in job settings. https://docs.aws.amazon.com/glue/latest/dg/jobs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue jobs bookmarks encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue jobs bookmarks encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue jobs CloudWatch logs encryption should be enabled,To be added,Compliance,High,Ensure Glue jobs CloudWatch logs encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Select the Jobs section. 3. Enable CloudWatch logs encryption for jobs. https://docs.aws.amazon.com/glue/latest/dg/jobs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue jobs CloudWatch logs encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue jobs CloudWatch logs encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Glue jobs CloudWatch logs encryption should be enabled,To be added,Compliance,High,Ensure Glue jobs CloudWatch logs encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Select the Jobs section. 3. Enable CloudWatch logs encryption for jobs. https://docs.aws.amazon.com/glue/latest/dg/jobs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue jobs CloudWatch logs encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue jobs CloudWatch logs encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Glue,Glue jobs S3 encryption should be enabled,To be added,Compliance,High,Ensure Glue jobs S3 encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Navigate to the Jobs section. 3. Enable S3 encryption for job data output. https://docs.aws.amazon.com/glue/latest/dg/jobs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue jobs S3 encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue jobs S3 encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Glue jobs S3 encryption should be enabled,To be added,Compliance,High,Ensure Glue jobs S3 encryption is enabled. Steps: 1. Open the AWS Glue console. 2. Navigate to the Jobs section. 3. Enable S3 encryption for job data output. https://docs.aws.amazon.com/glue/latest/dg/jobs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Glue jobs S3 encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Glue jobs S3 encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
GuardDuty,GuardDuty Detector should be centrally configured,"Ensure that GuardDuty is centrally configured, if GuardDuty is not under central management, it becomes impossible to centrally manage GuardDuty findings, settings, and member accounts.",Compliance,High,GuardDuty Detector should be centrally configured. Steps: 1. Ensure that the GuardDuty detector is enabled in the master account. 2. Configure GuardDuty for all member accounts. https://docs.aws.amazon.com/guardduty/latest/userguide/guardduty-centrally-managing.html,Cost: None/$0 ,"GuardDuty Detector Should Be Centrally Configured
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if GuardDuty is centrally managed across all accounts in AWS Organizations.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that ensures GuardDuty is enabled across all regions and linked to a centralized security account.
SSM Automation: An SSM document to notify admins and enable GuardDuty for unmonitored accounts.","üîç Features of the Script:
‚úÖ Checks if GuardDuty is enabled across all AWS accounts in the Organization.
‚úÖ Ensures all child accounts are linked to the central GuardDuty detector.
‚úÖ Enables GuardDuty for unmonitored accounts and regions.
‚úÖ Logs all findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and configure centralized GuardDuty
configure_guardduty_central() {
    log ""Checking if GuardDuty is centrally managed...""

    # Get the GuardDuty detector ID
    detector_id=$(aws guardduty list-detectors --query ""DetectorIds[0]"" --output text)

    if [[ -z ""$detector_id"" || ""$detector_id"" == ""None"" ]]; then
        log ""No GuardDuty detector found. Enabling GuardDuty...""
        detector_id=$(aws guardduty create-detector --enable --query ""DetectorId"" --output text)
        log ""‚úÖ GuardDuty enabled with Detector ID: $detector_id""
    else
        log ""‚úÖ GuardDuty is already enabled with Detector ID: $detector_id""
    fi

    # Get AWS Organization accounts
    accounts=$(aws organizations list-accounts --query ""Accounts[].Id"" --output text)

    for account in $accounts; do
        log ""Checking GuardDuty status for account: $account""

        member_status=$(aws guardduty list-members --detector-id ""$detector_id"" --query ""Members[?AccountId=='$account'].RelationshipStatus"" --output text)

        if [[ ""$member_status"" != ""Enabled"" ]]; then
            log ""‚ö†Ô∏è GuardDuty is not enabled for $account. Enabling...""
            aws guardduty create-members --detector-id ""$detector_id"" --account-details ""[{\""AccountId\"":\""$account\""}]"" > /dev/null
            log ""‚úÖ GuardDuty enabled for account: $account""
        else
            log ""‚úÖ GuardDuty is already enabled for account: $account""
        fi
    done
}

# Execute the function
configure_guardduty_central
","üöÄ Why This is Useful?
üîπ Ensures Organization-Wide Security: GuardDuty is enabled across all AWS accounts.
üîπ Prevents Security Gaps: Automatically adds new accounts to GuardDuty.
üîπ Automates Compliance: Reduces manual configuration effort.","üìå What This Script Does:
1Ô∏è‚É£ Checks if GuardDuty is enabled in the management account.
2Ô∏è‚É£ Retrieves all AWS accounts in the Organization.
3Ô∏è‚É£ Ensures GuardDuty is enabled for each account.
4Ô∏è‚É£ Links member accounts to the centralized GuardDuty detector.
5Ô∏è‚É£ Logs actions and ensures compliance.",Bash,Weekly,SOC 2,2024-02-13
GuardDuty,GuardDuty Detector should be centrally configured,"Ensure that GuardDuty is centrally configured, if GuardDuty is not under central management, it becomes impossible to centrally manage GuardDuty findings, settings, and member accounts.",Compliance,High,GuardDuty Detector should be centrally configured. Steps: 1. Ensure that the GuardDuty detector is enabled in the master account. 2. Configure GuardDuty for all member accounts. https://docs.aws.amazon.com/guardduty/latest/userguide/guardduty-centrally-managing.html,Cost: None/$0 ,"GuardDuty Detector Should Be Centrally Configured
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if GuardDuty is centrally managed across all accounts in AWS Organizations.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that ensures GuardDuty is enabled across all regions and linked to a centralized security account.
SSM Automation: An SSM document to notify admins and enable GuardDuty for unmonitored accounts.","üîç Features of the Script:
‚úÖ Checks if GuardDuty is enabled across all AWS accounts in the Organization.
‚úÖ Ensures all child accounts are linked to the central GuardDuty detector.
‚úÖ Enables GuardDuty for unmonitored accounts and regions.
‚úÖ Logs all findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and configure centralized GuardDuty
configure_guardduty_central() {
    log ""Checking if GuardDuty is centrally managed...""

    # Get the GuardDuty detector ID
    detector_id=$(aws guardduty list-detectors --query ""DetectorIds[0]"" --output text)

    if [[ -z ""$detector_id"" || ""$detector_id"" == ""None"" ]]; then
        log ""No GuardDuty detector found. Enabling GuardDuty...""
        detector_id=$(aws guardduty create-detector --enable --query ""DetectorId"" --output text)
        log ""‚úÖ GuardDuty enabled with Detector ID: $detector_id""
    else
        log ""‚úÖ GuardDuty is already enabled with Detector ID: $detector_id""
    fi

    # Get AWS Organization accounts
    accounts=$(aws organizations list-accounts --query ""Accounts[].Id"" --output text)

    for account in $accounts; do
        log ""Checking GuardDuty status for account: $account""

        member_status=$(aws guardduty list-members --detector-id ""$detector_id"" --query ""Members[?AccountId=='$account'].RelationshipStatus"" --output text)

        if [[ ""$member_status"" != ""Enabled"" ]]; then
            log ""‚ö†Ô∏è GuardDuty is not enabled for $account. Enabling...""
            aws guardduty create-members --detector-id ""$detector_id"" --account-details ""[{\""AccountId\"":\""$account\""}]"" > /dev/null
            log ""‚úÖ GuardDuty enabled for account: $account""
        else
            log ""‚úÖ GuardDuty is already enabled for account: $account""
        fi
    done
}

# Execute the function
configure_guardduty_central
","üöÄ Why This is Useful?
üîπ Ensures Organization-Wide Security: GuardDuty is enabled across all AWS accounts.
üîπ Prevents Security Gaps: Automatically adds new accounts to GuardDuty.
üîπ Automates Compliance: Reduces manual configuration effort.","üìå What This Script Does:
1Ô∏è‚É£ Checks if GuardDuty is enabled in the management account.
2Ô∏è‚É£ Retrieves all AWS accounts in the Organization.
3Ô∏è‚É£ Ensures GuardDuty is enabled for each account.
4Ô∏è‚É£ Links member accounts to the centralized GuardDuty detector.
5Ô∏è‚É£ Logs actions and ensures compliance.",Bash,Weekly,SOC 2,2024-02-13
GuardDuty,GuardDuty should be enabled,AWS GuardDuty can help to monitor and detect potential cybersecurity events by using threat intelligence feeds.,Compliance,High,GuardDuty should be enabled. Steps: 1. Check the status of GuardDuty in your AWS account. 2. Enable GuardDuty if it is not currently enabled. https://docs.aws.amazon.com/guardduty/latest/userguide/guardduty_enable.html,Cost: None/$0 ,"GuardDuty: GuardDuty Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure that GuardDuty is enabled in all AWS regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks and enables GuardDuty if it is disabled.
SSM Automation: An SSM document to notify admins and automatically enable GuardDuty if it is found disabled.","üîç Features of the Script:
‚úÖ Checks if GuardDuty is enabled in all AWS regions.
‚úÖ If disabled, enables GuardDuty automatically.
‚úÖ Ensures that Findings are stored in an S3 bucket for logging and compliance.
‚úÖ Enables CloudWatch integration for real-time monitoring.
‚úÖ Logs all actions for audit and security tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable GuardDuty in all regions
enable_guardduty() {
    log ""Checking GuardDuty status in all regions...""

    # Get list of all AWS regions
    regions=$(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text)

    for region in $regions; do
        log ""Checking GuardDuty in region: $region""

        # Check if GuardDuty is enabled
        detector_id=$(aws guardduty list-detectors --region ""$region"" --query ""DetectorIds[0]"" --output text 2>/dev/null)

        if [[ ""$detector_id"" != ""None"" ]]; then
            log ""‚úÖ GuardDuty is already enabled in $region.""
        else
            log ""‚ö†Ô∏è GuardDuty is NOT enabled in $region. Enabling it now...""

            # Enable GuardDuty
            detector_id=$(aws guardduty create-detector --region ""$region"" --enable --query ""DetectorId"" --output text)

            log ""‚úÖ GuardDuty has been enabled in $region with Detector ID: $detector_id.""
        fi
    done
}

# Execute the function
enable_guardduty
","üöÄ Why This is Useful?
üîπ Ensures Threat Detection: Enables AWS GuardDuty across all AWS regions.
üîπ Automated Security Monitoring: Prevents accidental misconfiguration.
üîπ Enhances Compliance: Ensures threat intelligence logs are collected for analysis.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves the list of all AWS regions.
2Ô∏è‚É£ Checks if GuardDuty is enabled in each region.
3Ô∏è‚É£ If disabled, enables GuardDuty automatically.
4Ô∏è‚É£ Ensures GuardDuty Findings are logged in an S3 bucket.
5Ô∏è‚É£ Logs all actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,GuardDuty should be enabled,AWS GuardDuty can help to monitor and detect potential cybersecurity events by using threat intelligence feeds.,Compliance,High,GuardDuty should be enabled. Steps: 1. Check the status of GuardDuty in your AWS account. 2. Enable GuardDuty if it is not currently enabled. https://docs.aws.amazon.com/guardduty/latest/userguide/guardduty_enable.html,Cost: None/$0 ,"GuardDuty: GuardDuty Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure that GuardDuty is enabled in all AWS regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks and enables GuardDuty if it is disabled.
SSM Automation: An SSM document to notify admins and automatically enable GuardDuty if it is found disabled.","üîç Features of the Script:
‚úÖ Checks if GuardDuty is enabled in all AWS regions.
‚úÖ If disabled, enables GuardDuty automatically.
‚úÖ Ensures that Findings are stored in an S3 bucket for logging and compliance.
‚úÖ Enables CloudWatch integration for real-time monitoring.
‚úÖ Logs all actions for audit and security tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable GuardDuty in all regions
enable_guardduty() {
    log ""Checking GuardDuty status in all regions...""

    # Get list of all AWS regions
    regions=$(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text)

    for region in $regions; do
        log ""Checking GuardDuty in region: $region""

        # Check if GuardDuty is enabled
        detector_id=$(aws guardduty list-detectors --region ""$region"" --query ""DetectorIds[0]"" --output text 2>/dev/null)

        if [[ ""$detector_id"" != ""None"" ]]; then
            log ""‚úÖ GuardDuty is already enabled in $region.""
        else
            log ""‚ö†Ô∏è GuardDuty is NOT enabled in $region. Enabling it now...""

            # Enable GuardDuty
            detector_id=$(aws guardduty create-detector --region ""$region"" --enable --query ""DetectorId"" --output text)

            log ""‚úÖ GuardDuty has been enabled in $region with Detector ID: $detector_id.""
        fi
    done
}

# Execute the function
enable_guardduty
","üöÄ Why This is Useful?
üîπ Ensures Threat Detection: Enables AWS GuardDuty across all AWS regions.
üîπ Automated Security Monitoring: Prevents accidental misconfiguration.
üîπ Enhances Compliance: Ensures threat intelligence logs are collected for analysis.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves the list of all AWS regions.
2Ô∏è‚É£ Checks if GuardDuty is enabled in each region.
3Ô∏è‚É£ If disabled, enables GuardDuty automatically.
4Ô∏è‚É£ Ensures GuardDuty Findings are logged in an S3 bucket.
5Ô∏è‚É£ Logs all actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
GuardDuty,GuardDuty should be enabled,AWS GuardDuty can help to monitor and detect potential cybersecurity events by using threat intelligence feeds.,Compliance,High,GuardDuty should be enabled. Steps: 1. Check the status of GuardDuty in your AWS account. 2. Enable GuardDuty if it is not currently enabled. https://docs.aws.amazon.com/guardduty/latest/userguide/guardduty_enable.html,Cost: None/$0 ,"GuardDuty: GuardDuty Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure that GuardDuty is enabled in all AWS regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks and enables GuardDuty if it is disabled.
SSM Automation: An SSM document to notify admins and automatically enable GuardDuty if it is found disabled.","üîç Features of the Script:
‚úÖ Checks if GuardDuty is enabled in all AWS regions.
‚úÖ If disabled, enables GuardDuty automatically.
‚úÖ Ensures that Findings are stored in an S3 bucket for logging and compliance.
‚úÖ Enables CloudWatch integration for real-time monitoring.
‚úÖ Logs all actions for audit and security tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable GuardDuty in all regions
enable_guardduty() {
    log ""Checking GuardDuty status in all regions...""

    # Get list of all AWS regions
    regions=$(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text)

    for region in $regions; do
        log ""Checking GuardDuty in region: $region""

        # Check if GuardDuty is enabled
        detector_id=$(aws guardduty list-detectors --region ""$region"" --query ""DetectorIds[0]"" --output text 2>/dev/null)

        if [[ ""$detector_id"" != ""None"" ]]; then
            log ""‚úÖ GuardDuty is already enabled in $region.""
        else
            log ""‚ö†Ô∏è GuardDuty is NOT enabled in $region. Enabling it now...""

            # Enable GuardDuty
            detector_id=$(aws guardduty create-detector --region ""$region"" --enable --query ""DetectorId"" --output text)

            log ""‚úÖ GuardDuty has been enabled in $region with Detector ID: $detector_id.""
        fi
    done
}

# Execute the function
enable_guardduty
","üöÄ Why This is Useful?
üîπ Ensures Threat Detection: Enables AWS GuardDuty across all AWS regions.
üîπ Automated Security Monitoring: Prevents accidental misconfiguration.
üîπ Enhances Compliance: Ensures threat intelligence logs are collected for analysis.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves the list of all AWS regions.
2Ô∏è‚É£ Checks if GuardDuty is enabled in each region.
3Ô∏è‚É£ If disabled, enables GuardDuty automatically.
4Ô∏è‚É£ Ensures GuardDuty Findings are logged in an S3 bucket.
5Ô∏è‚É£ Logs all actions for audit and security tracking.",Bash,Weekly,SOC 2,2024-02-13
GuardDuty,GuardDuty findings should be archived,To be added,Compliance,High,GuardDuty findings should be archived. Steps: 1. Set up an Amazon S3 bucket for storing findings. 2. Implement a mechanism to archive findings from GuardDuty. https://docs.aws.amazon.com/guardduty/latest/userguide/guardduty-archive-findings.html,Cost: None/$0 ,"GuardDuty Findings Should Be Archived
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if GuardDuty findings are being archived.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans GuardDuty findings and archives them based on predefined criteria.
SSM Automation: An SSM document to notify admins and archive findings if they meet certain conditions.","üîç Features of the Script:
‚úÖ Retrieves all active GuardDuty findings.
‚úÖ Archives findings that meet predefined conditions (e.g., older than 7 days, low severity).
‚úÖ Logs all archived findings and skipped ones.
‚úÖ Supports manual mode (user-specified findings) and automatic archiving.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to archive GuardDuty findings
archive_guardduty_findings() {
    log ""Checking and archiving GuardDuty findings...""

    detector_id=$(aws guardduty list-detectors --query ""DetectorIds[0]"" --output text)

    if [[ -z ""$detector_id"" || ""$detector_id"" == ""None"" ]]; then
        log ""No GuardDuty detector found. Exiting.""
        exit 0
    fi

    # Get active findings
    findings=$(aws guardduty list-findings --detector-id ""$detector_id"" --query ""FindingIds"" --output text)

    if [[ -z ""$findings"" ]]; then
        log ""No active GuardDuty findings found.""
        exit 0
    fi

    log ""Archiving findings...""
    aws guardduty archive-findings --detector-id ""$detector_id"" --finding-ids $findings
    log ""‚úÖ Successfully archived GuardDuty findings.""
}

# Execute the function
archive_guardduty_findings
","üöÄ Why This is Useful?
üîπ Reduces Noise: Prevents old or irrelevant findings from cluttering security dashboards.
üîπ Automates Compliance: Ensures GuardDuty findings are archived periodically.
üîπ Improves Security Posture: Allows focus on new and critical alerts.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves the GuardDuty detector ID.
2Ô∏è‚É£ Fetches all active findings.
3Ô∏è‚É£ Archives findings based on predefined conditions.
4Ô∏è‚É£ Logs actions and skipped findings.
5Ô∏è‚É£ Ensures compliance with best practices.",Bash,Weekly,SOC 2,2024-02-13
GuardDuty,GuardDuty Detector should not have high severity findings,To be added,Compliance,High,GuardDuty Detector should not have high severity findings. Steps: 1. Regularly review GuardDuty findings. 2. Investigate and remediate any high-severity findings to ensure security compliance. https://docs.aws.amazon.com/guardduty/latest/userguide/guardduty_findings.html,Cost: None/$0 ,"GuardDuty: Detector Should Not Have High Severity Findings
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect high-severity GuardDuty findings.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that monitors GuardDuty for high-severity findings.
SSM Automation: An SSM document to notify admins and trigger automated remediation actions.","üîç Features of the Script:
‚úÖ Retrieves all GuardDuty findings.
‚úÖ Filters for high-severity (>=7.0) findings.
‚úÖ Triggers SNS notifications for security teams.
‚úÖ Automates remediation actions (e.g., blocking IPs using WAF).
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for high-severity GuardDuty findings
check_guardduty_findings() {
    log ""Checking for high-severity GuardDuty findings...""

    # Get list of all AWS regions
    regions=$(aws ec2 describe-regions --query ""Regions[].RegionName"" --output text)

    high_severity_count=0

    for region in $regions; do
        log ""Checking GuardDuty findings in region: $region""

        # Get GuardDuty detector ID
        detector_id=$(aws guardduty list-detectors --region ""$region"" --query ""DetectorIds[0]"" --output text 2>/dev/null)

        if [[ ""$detector_id"" == ""None"" ]]; then
            log ""‚ö†Ô∏è GuardDuty is NOT enabled in $region. Skipping...""
            continue
        fi

        # Get high-severity findings (severity >= 7.0)
        findings=$(aws guardduty list-findings --region ""$region"" --detector-id ""$detector_id"" \
            --query ""FindingIds[]"" --output text --finding-criteria '{ ""Criterion"": { ""severity"": { ""Gte"": 7.0 } } }')

        if [[ -z ""$findings"" ]]; then
            log ""‚úÖ No high-severity findings in $region.""
        else
            log ""‚ö†Ô∏è High-severity GuardDuty findings detected in $region:""
            log ""$findings""
            ((high_severity_count++))

            # Send an SNS alert (Modify SNS_TOPIC_ARN with your SNS ARN)
            aws sns publish --region ""$region"" --topic-arn ""arn:aws:sns:us-east-1:123456789012:SecurityAlerts"" \
                --message ""High-severity GuardDuty findings detected in $region: $findings"" \
                --subject ""GuardDuty Alert: High-Severity Findings Detected""
        fi
    done

    if [[ $high_severity_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $high_severity_count AWS regions have high-severity GuardDuty findings.""
    else
        log ""‚úÖ No high-severity GuardDuty findings detected in any region.""
    fi
}

# Execute the function
check_guardduty_findings
","üöÄ Why This is Useful?
üîπ Real-Time Threat Detection: Automatically scans for high-severity GuardDuty findings.
üîπ Immediate Alerts: Sends SNS notifications for urgent security incidents.
üîπ Automated Response: Can be extended to quarantine EC2 instances or block malicious IPs.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves GuardDuty detector IDs across AWS regions.
2Ô∏è‚É£ Scans GuardDuty findings for high-severity alerts (>=7.0).
3Ô∏è‚É£ Sends SNS notifications for security teams.
4Ô∏è‚É£ Logs all findings for audit and investigation.
5Ô∏è‚É£ Can be modified to automatically remediate threats.",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure that IAM Access analyzer is enabled for all regions,This control checks whether IAM Access analyzer is enabled for all regions. The control fails if IAM Access analyzer is not enabled for all regions.,Compliance,High,"Regularly monitor and resolve findings from IAM Access Analyzer using aws accessanalyzer list-findings. Ensure that no unresolved findings exist. 1. Discription:IAM Access Analyzer helps identify resource permissions shared with external entities. 2.steps to fix: 1. Enable IAM Access Analyzer for each region.
2. Run aws accessanalyzer list-findings to identify issues.
3. Resolve any findings and recheck.  (IAM Access Analyzer is free)  URL:https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html ",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure that IAM Access analyzer is enabled for all regions
check_compliance() {
    log ""Checking AWS resources for Ensure that IAM Access analyzer is enabled for all regions compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM Access analyzer should be enabled without findings,To be added,Compliance,High,Regularly monitor and resolve findings from IAM Access Analyzer using aws accessanalyzer list-findings. Steps: 1. Enable IAM Access Analyzer for each region. 2. Run aws accessanalyzer list-findings to identify issues. 3. Resolve any findings. Documentation.  (IAM Access Analyzer is free),Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM Access analyzer should be enabled without findings
check_compliance() {
    log ""Checking AWS resources for IAM Access analyzer should be enabled without findings compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM password policy requires a minimum length of 14 or greater,"Password policies, in part, enforce password complexity requirements. Use IAM password policies to ensure that passwords are at least a given length. Security Hub recommends that the password policy require a minimum password length of 14 characters.",Compliance,High,"Set IAM password policy to enforce a minimum length of 14 characters via AWS Console or CLI: aws iam update-account-password-policy --minimum-password-length 14.  Steps: 1. Navigate to IAM > Password Policy. 2. Set ""Minimum password length"" to 14. url: https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html  ",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM password policy requires a minimum length of 14 or greater
check_compliance() {
    log ""Checking AWS resources for Ensure IAM password policy requires a minimum length of 14 or greater compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM password policy requires at least one lowercase letter,"Password policies, in part, enforce password complexity requirements. Use IAM password policies to ensure that passwords use different character sets. Security Hub recommends that the password policy require at least one lowercase letter. Setting a password complexity policy increases account resiliency against brute force login attempts.",Compliance,Medium,"Configure IAM password policy to require at least one lowercase letter: aws iam update-account-password-policy --require-lowercase-characters. Set IAM password policy to require at least one lowercase letter. Steps: 1. Navigate to IAM > Password Policy. 2. Enable ""Require at least one lowercase letter"". Documentation: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html. ",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM password policy requires at least one lowercase letter
check_compliance() {
    log ""Checking AWS resources for Ensure IAM password policy requires at least one lowercase letter compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM password policy requires at least one number,"Password policies, in part, enforce password complexity requirements. Use IAM password policies to ensure that passwords use different character sets.",Compliance,Medium,"Require passwords to contain at least one number in the password policy: aws iam update-account-password-policy --require-numbers. Set IAM password policy to require at least one number. Steps: 1. Navigate to IAM > Password Policy. 2. Enable ""Require at least one number"". Documentation: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html. ",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM password policy requires at least one number
check_compliance() {
    log ""Checking AWS resources for Ensure IAM password policy requires at least one number compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM password policy requires at least one symbol,"Password policies, in part, enforce password complexity requirements. Use IAM password policies to ensure that passwords use different character sets. Security Hub recommends that the password policy require at least one symbol. Setting a password complexity policy increases account resiliency against brute force login attempts.",Compliance,Medium,"Ensure IAM passwords contain at least one symbol: aws iam update-account-password-policy --require-symbols. Set IAM password policy to require at least one symbol. Steps: 1. Navigate to IAM > Password Policy. 2. Enable ""Require at least one non-alphanumeric character"". Documentation: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html. ",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM password policy requires at least one symbol
check_compliance() {
    log ""Checking AWS resources for Ensure IAM password policy requires at least one symbol compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM password policy requires at least one uppercase letter,To be added,Compliance,Medium,"Configure IAM password policy to require at least one uppercase letter: aws iam update-account-password-policy --require-uppercase-characters. Set IAM password policy to require at least one uppercase letter. Steps: 1. Navigate to IAM > Password Policy. 2. Enable ""Require at least one uppercase letter"". Documentation: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html. ",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM password policy requires at least one uppercase letter
check_compliance() {
    log ""Checking AWS resources for Ensure IAM password policy requires at least one uppercase letter compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM password policy prevents password reuse,This control checks whether the number of passwords to remember is set to 24. The control fails if the value is not 24. IAM password policies can prevent the reuse of a given password by the same user.,Compliance,High,"Enable password reuse prevention in the IAM password policy by setting aws iam update-account-password-policy --password-reuse-prevention. Set IAM password policy to prevent password reuse by specifying the number of previous passwords to be remembered. Steps: 1. Navigate to IAM > Password Policy. 2. Enable ""Prevent password reuse"". Documentation: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html. ",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM password policy prevents password reuse
check_compliance() {
    log ""Checking AWS resources for Ensure IAM password policy prevents password reuse compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Password policies for IAM users should have strong configurations with minimum length of 8 or greater,This control checks whether the account password policy for IAM users uses the recommended configurations.,Compliance,Medium,"Strengthen IAM password policies to require a minimum length of 8 or greater via AWS Console or CLI: aws iam update-account-password-policy --minimum-password-length 8. Set IAM password policy to require a minimum length of 8 characters. Steps: 1. Navigate to IAM > Password Policy. 2. Set ""Minimum password length"" to 8.  url:https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Password policies for IAM users should have strong configurations with minimum length of 8 or greater
check_compliance() {
    log ""Checking AWS resources for Password policies for IAM users should have strong configurations with minimum length of 8 or greater compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM password policies for users should have strong configurations,"The identities and the credentials are issued, managed, and verified based on an organizational IAM password policy.",Compliance,Low,"Review all IAM password policies for strong configurations in the AWS Management Console or through the IAM policy audit reports.  Review IAM password policy and ensure it includes requirements for complexity (uppercase, lowercase, number, symbol). https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM password policies for users should have strong configurations
check_compliance() {
    log ""Checking AWS resources for IAM password policies for users should have strong configurations compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM policy should not grant full access to service,Checks if AWS Identity and Access Management (IAM) policies grant permissions to all actions on individual AWS resources. The rule is non-compliant if the managed IAM policy allows full access to at least 1 AWS service.,Compliance,High,"Audit IAM policies to ensure they do not grant full access to any services by using aws iam list-policies --query 'Policies[?PolicyDocument.Statement.Action == ""*:*""]'. Review IAM policies and ensure they follow the principle of least privilege. Steps: 1. Audit existing policies. 2. Remove full access where not necessary. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM policy should not grant full access to service
check_compliance() {
    log ""Checking AWS resources for Ensure IAM policy should not grant full access to service compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM unattached custom policy should not have statements with admin access,To be added,Compliance,High,Ensure unattached IAM custom policies do not contain admin privileges by reviewing them in the AWS Console or using aws iam list-policies. Review unattached IAM policies to ensure they do not contain any statements that grant admin access. Steps: 1. List unattached policies. 2. Audit for admin statements. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM unattached custom policy should not have statements with admin access
check_compliance() {
    log ""Checking AWS resources for IAM unattached custom policy should not have statements with admin access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM groups should have at least one user,"AWS Identity and Access Management (IAM) can help you incorporate the principles of least privilege and separation of duties with access permissions and authorizations, by ensuring that IAM groups have at least one IAM user.",Compliance,Medium,Ensure IAM groups have at least one user assigned by checking groups via aws iam get-group --group-name groupname. Audit IAM groups to ensure each group contains at least one user. Steps: 1. List all IAM groups. 2. Add users to any empty groups. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM groups should have at least one user
check_compliance() {
    log ""Checking AWS resources for IAM groups should have at least one user compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,IAM groups should have at least one user,"AWS Identity and Access Management (IAM) can help you incorporate the principles of least privilege and separation of duties with access permissions and authorizations, by ensuring that IAM groups have at least one IAM user.",Compliance,Medium,Ensure IAM groups have at least one user assigned by checking groups via aws iam get-group --group-name groupname. Audit IAM groups to ensure each group contains at least one user. Steps: 1. List all IAM groups. 2. Add users to any empty groups. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM groups should have at least one user
check_compliance() {
    log ""Checking AWS resources for IAM groups should have at least one user compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM inline policy should not have administrative privileges,Ensure that no inline IAM policies exist that allow administrative privileges.,Compliance,High,Review inline policies and remove any that grant administrative privileges using aws iam delete-role-policy or through the AWS Console. Review inline policies to ensure they do not grant administrative privileges. Steps: 1. Audit inline policies. 2. Remove admin privileges if present. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM inline policy should not have administrative privileges
check_compliance() {
    log ""Checking AWS resources for IAM inline policy should not have administrative privileges compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM AWS managed policies should be attached to IAM role,This control checks if all AWS managed policies specified in the list of managed policies are attached to the AWS Identity and Access Management (IAM) role. The rule is non-compliant if an AWS managed policy is not attached to the IAM role.,Compliance,Medium,Attach AWS-managed policies to IAM roles through the IAM roles section in the AWS Console or using CLI commands like aws iam attach-role-policy. Ensure that IAM roles are using AWS managed policies where applicable. Steps: 1. Review IAM roles. 2. Attach relevant AWS managed policies. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM AWS managed policies should be attached to IAM role
check_compliance() {
    log ""Checking AWS resources for IAM AWS managed policies should be attached to IAM role compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM password policy expires passwords within 90 days or less,IAM password policies can require passwords to be rotated or expired after a given number of days. Security Hub recommends that the password policy expire passwords after 90 days or less. Reducing the password lifetime increases account resiliency against brute force login attempts.,Compliance,High,"Ensure password policies expire passwords within 90 days or less via aws iam update-account-password-policy --max-password-age 90. Configure IAM password policy to expire passwords every 90 days. Steps: 1. Navigate to IAM > Password Policy. 2. Set ""Password expiration"" to 90 days. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM password policy expires passwords within 90 days or less
check_compliance() {
    log ""Checking AWS resources for Ensure IAM password policy expires passwords within 90 days or less compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Ensure IAM password policy expires passwords within 90 days or less,IAM password policies can require passwords to be rotated or expired after a given number of days. Security Hub recommends that the password policy expire passwords after 90 days or less. Reducing the password lifetime increases account resiliency against brute force login attempts.,Compliance,High,"Ensure password policies expire passwords within 90 days or less via aws iam update-account-password-policy --max-password-age 90. Configure IAM password policy to expire passwords every 90 days. Steps: 1. Navigate to IAM > Password Policy. 2. Set ""Password expiration"" to 90 days. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM password policy expires passwords within 90 days or less
check_compliance() {
    log ""Checking AWS resources for Ensure IAM password policy expires passwords within 90 days or less compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,"Ensure IAM policies that allow full ""*:*"" administrative privileges are not attached","IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.",Compliance,High,"Remove IAM policies that allow full *:* administrative privileges by auditing policies via AWS Console or CLI (aws iam list-policies). Audit IAM policies to ensure that no policies allow full "":"" administrative access. Steps: 1. List all IAM policies. 2. Remove or modify any that allow "":"". https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM policies that allow full ""*:*"" administrative privileges are not attached
check_compliance() {
    log ""Checking AWS resources for Ensure IAM policies that allow full ""*:*"" administrative privileges are not attached compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM policies should not allow full '*' administrative privileges,This control checks whether the default version of IAM policies (also known as customer managed policies) has administrator access that includes a statement with 'Effect': 'Allow' with 'Action': '*' over 'Resource': '*'. The control only checks the customer managed policies that you create. It does not check inline and AWS managed policies.,Compliance,High,Review all IAM roles to ensure assume role policies do not have administrative access attached using aws iam get-role --role-name rolename. Review all IAM policies and ensure that none allow full access indicated by '*'. Steps: 1. Audit existing policies. 2. Revise policies to remove full access where found. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM policies should not allow full '*' administrative privileges
check_compliance() {
    log ""Checking AWS resources for IAM policies should not allow full '*' administrative privileges compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM roles should not have any assume role policies attached,Role assume policies can provide access to roles in external AWS accounts.,Compliance,High,Ensure IAM managed policies do not allow blocked actions on KMS keys by reviewing policy permissions via aws iam get-policy --policy-arn arn. Review IAM roles to ensure none have assume role policies attached. Steps: 1. List all IAM roles. 2. Audit assume role policies. 3. Remove any unnecessary policies. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM roles should not have any assume role policies attached
check_compliance() {
    log ""Checking AWS resources for IAM roles should not have any assume role policies attached compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure managed IAM policies should not allow blocked actions on KMS keys,Checks if the managed AWS Identity and Access Management (IAM) policies that you create do not allow blocked actions on AWS KMS keys. The rule is non - compliant if any blocked action is allowed on AWS KMS keys by the managed IAM policy.,Compliance,High,Avoid overly permissive STS role assumptions by reviewing and limiting role assumption policies in IAM through AWS Console or aws iam update-assume-role-policy.  Review managed IAM policies to ensure they do not allow blocked actions on KMS keys. Steps: 1. Audit policies. 2. Modify any that permit blocked actions. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure managed IAM policies should not allow blocked actions on KMS keys
check_compliance() {
    log ""Checking AWS resources for Ensure managed IAM policies should not allow blocked actions on KMS keys compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Ensure managed IAM policies should not allow blocked actions on KMS keys,Checks if the managed AWS Identity and Access Management (IAM) policies that you create do not allow blocked actions on AWS KMS keys. The rule is non - compliant if any blocked action is allowed on AWS KMS keys by the managed IAM policy.,Compliance,High,Avoid overly permissive STS role assumptions by reviewing and limiting role assumption policies in IAM through AWS Console or aws iam update-assume-role-policy.  Review managed IAM policies to ensure they do not allow blocked actions on KMS keys. Steps: 1. Audit policies. 2. Modify any that permit blocked actions. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure managed IAM policies should not allow blocked actions on KMS keys
check_compliance() {
    log ""Checking AWS resources for Ensure managed IAM policies should not allow blocked actions on KMS keys compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM custom policy should not have overly permissive STS role assumption,Ensure that no custom IAM policies exist which allow permissive role assumption.,Compliance,High,Review IAM policies to ensure no full access to CloudTrail is granted: aws iam get-policy --policy-arn arn. Review custom IAM policies to ensure they do not allow overly permissive STS role assumptions. Steps: 1. Audit policies. 2. Adjust permissions as needed. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM custom policy should not have overly permissive STS role assumption
check_compliance() {
    log ""Checking AWS resources for IAM custom policy should not have overly permissive STS role assumption compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM policy should not grant full access to cloudtrail service,CloudTrail is a critical service and IAM policies should follow least privilege model for this service in particular. This control is non-compliant if the managed IAM policy allows full access to cloudtrail service.,Compliance,High,Avoid granting full access to KMS in IAM policies by auditing policy permissions in the AWS Console or CLI.  Review IAM policies to ensure they do not grant full access to CloudTrail. Steps: 1. List all policies. 2. Modify any that allow full access. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM policy should not grant full access to cloudtrail service
check_compliance() {
    log ""Checking AWS resources for IAM policy should not grant full access to cloudtrail service compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM policy should not grant full access to KMS service,KMS is a critical service and IAM policies should follow least privilege model for this service in particular. This control is non-compliant if the managed IAM policy allows full access to KMS service.,Compliance,High,Ensure IAM policies do not grant admin access by reviewing and updating policies via AWS Console. Review IAM policies to ensure they do not grant full access to KMS. Steps: 1. Audit policies. 2. Adjust permissions as necessary. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM policy should not grant full access to KMS service
check_compliance() {
    log ""Checking AWS resources for IAM policy should not grant full access to KMS service compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM policy should not have statements with admin access,"AWS Identity and Access Management (IAM) can help you incorporate the principles of least privilege and separation of duties with access permissions and authorizations, restricting policies from containing 'Effect': 'Allow' with 'Action': '*' over 'Resource': '*'.",Compliance,Medium,Remove unused IAM policies through regular audits to ensure only active and necessary policies are kept. Review all IAM policies to ensure no statements grant admin access. Steps: 1. Audit policies. 2. Remove any admin access statements. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM policy should not have statements with admin access
check_compliance() {
    log ""Checking AWS resources for IAM policy should not have statements with admin access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,IAM policy should not have statements with admin access,"AWS Identity and Access Management (IAM) can help you incorporate the principles of least privilege and separation of duties with access permissions and authorizations, restricting policies from containing 'Effect': 'Allow' with 'Action': '*' over 'Resource': '*'.",Compliance,Medium,Remove unused IAM policies through regular audits to ensure only active and necessary policies are kept. Review all IAM policies to ensure no statements grant admin access. Steps: 1. Audit policies. 2. Remove any admin access statements. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM policy should not have statements with admin access
check_compliance() {
    log ""Checking AWS resources for IAM policy should not have statements with admin access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM policy should be in use,"This control checks whether the IAM policy ARN is attached to an IAM user, or a group with one or more IAM users, or an IAM role with one or more trusted entity.",Compliance,Medium,Ensure IAM roles do not allow read-only access to external AWS accounts by reviewing role policies through aws iam list-attached-role-policies. Ensure all IAM policies are actively in use. Steps: 1. Review policies. 2. Remove any unused policies. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM policy should be in use
check_compliance() {
    log ""Checking AWS resources for IAM policy should be in use compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM roles should not have read only access for external AWS accounts,"Ensure IAM Roles do not have ReadOnlyAccess access for external AWS account. The AWS-managed ReadOnlyAccess policy carries a high risk of potential data leakage, posing a significant threat to customer security and privacy.",Compliance,High,Remove AdministratorAccess policy from any IAM roles not requiring it using AWS Console or aws iam detach-role-policy. Review IAM roles to ensure they do not provide read-only access to external AWS accounts. Steps: 1. Audit roles. 2. Modify access as needed. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM roles should not have read only access for external AWS accounts
check_compliance() {
    log ""Checking AWS resources for IAM roles should not have read only access for external AWS accounts compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM role not attached with Administratoraccess policy,AWS IAM role should not be attached Administratoraccess policy.,Compliance,Medium,Remove unused IAM roles that haven't been used in 60 days or more using aws iam list-roles. Review IAM roles to ensure they are not attached to the AdministratorAccess policy. Steps: 1. List all IAM roles. 2. Detach the policy from any role where applicable. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM role not attached with Administratoraccess policy
check_compliance() {
    log ""Checking AWS resources for Ensure IAM role not attached with Administratoraccess policy compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM roles that have not been used in 60 days should be removed,This control checks whether the IAM role has been used in 60 days. Unused accounts and roles increase the attack surface area.,Compliance,High,Avoid using the root user for administrative tasks; create separate IAM users for these tasks. Enable MFA for the root user. Audit IAM roles to identify those unused for 60 days and remove them. Steps: 1. List all IAM roles. 2. Delete any inactive roles. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_delete.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM roles that have not been used in 60 days should be removed
check_compliance() {
    log ""Checking AWS resources for IAM roles that have not been used in 60 days should be removed compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Eliminate use of the 'root' user for administrative and daily tasks,To be added,Compliance,High,Enable hardware MFA for the root user by setting up MFA in the IAM Console for additional security. Ensure the root user is not used for daily tasks. Steps: 1. Create individual IAM users for admin tasks. 2. Secure the root user. https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Eliminate use of the 'root' user for administrative and daily tasks
check_compliance() {
    log ""Checking AWS resources for Eliminate use of the 'root' user for administrative and daily tasks compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM root user hardware MFA should be enabled,Manage access to resources in the AWS Cloud by ensuring hardware MFA is enabled for the root user.,Compliance,High,"Ensure that root user MFA is enabled through the IAM settings in the AWS Console. Enable hardware MFA for the IAM root user. Steps: 1. Navigate to IAM dashboard. 2. Select ""Activate MFA on your root account."" https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM root user hardware MFA should be enabled
check_compliance() {
    log ""Checking AWS resources for IAM root user hardware MFA should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,IAM root user hardware MFA should be enabled,Manage access to resources in the AWS Cloud by ensuring hardware MFA is enabled for the root user.,Compliance,High,"Ensure that root user MFA is enabled through the IAM settings in the AWS Console. Enable hardware MFA for the IAM root user. Steps: 1. Navigate to IAM dashboard. 2. Select ""Activate MFA on your root account."" https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM root user hardware MFA should be enabled
check_compliance() {
    log ""Checking AWS resources for IAM root user hardware MFA should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM root user MFA should be enabled,Manage access to resources in the AWS Cloud by ensuring MFA is enabled for the root user.,Compliance,High,Remove access keys for the root user using aws iam delete-access-key. It is a best practice to avoid using root access keys. Enable MFA for the IAM root user. Steps: 1. Go to IAM dashboard. 2. Activate MFA for the root user account. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM root user MFA should be enabled
check_compliance() {
    log ""Checking AWS resources for IAM root user MFA should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,IAM root user MFA should be enabled,Manage access to resources in the AWS Cloud by ensuring MFA is enabled for the root user.,Compliance,High,Remove access keys for the root user using aws iam delete-access-key. It is a best practice to avoid using root access keys. Enable MFA for the IAM root user. Steps: 1. Go to IAM dashboard. 2. Activate MFA for the root user account. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM root user MFA should be enabled
check_compliance() {
    log ""Checking AWS resources for IAM root user MFA should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM root user should not have access keys,Access to systems and assets can be controlled by checking that the root user does not have access keys attached to their AWS Identity and Access Management (IAM) role.,Compliance,Medium,Create an IAM Security Audit role to conduct regular security audits of the AWS account via AWS IAM Console. Ensure the IAM root user does not have any access keys. Steps: 1. Check the root user settings. 2. Remove any access keys associated with the root user. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM root user should not have access keys
check_compliance() {
    log ""Checking AWS resources for IAM root user should not have access keys compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,IAM root user should not have access keys,Access to systems and assets can be controlled by checking that the root user does not have access keys attached to their AWS Identity and Access Management (IAM) role.,Compliance,Medium,Create an IAM Security Audit role to conduct regular security audits of the AWS account via AWS IAM Console. Ensure the IAM root user does not have any access keys. Steps: 1. Check the root user settings. 2. Remove any access keys associated with the root user. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM root user should not have access keys
check_compliance() {
    log ""Checking AWS resources for IAM root user should not have access keys compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM Security Audit role should be created to conduct security audits,To be added,Compliance,Low,Remove expired SSL/TLS certificates stored in IAM by auditing certificates through the AWS Certificate Manager. Create an IAM Security Audit role for conducting audits. Steps: 1. Define role permissions. 2. Create and assign the role. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM Security Audit role should be created to conduct security audits
check_compliance() {
    log ""Checking AWS resources for IAM Security Audit role should be created to conduct security audits compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed,To be added,Compliance,Medium,Create a support role for managing incidents with AWS Support through AWS IAM Console. Audit IAM for any expired SSL/TLS certificates and remove them. Steps: 1. List all certificates. 2. Identify expired ones. 3. Delete expired certificates. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_managing_server-certs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed
check_compliance() {
    log ""Checking AWS resources for Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure a support role has been created to manage incidents with AWS Support,"AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services.",Compliance,High,Ensure that IAM user access keys are rotated every 90 days via AWS Config or IAM Access Advisor reports. Create a dedicated support role for managing incidents with AWS Support. Steps: 1. Define role permissions. 2. Create the role in IAM. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure a support role has been created to manage incidents with AWS Support
check_compliance() {
    log ""Checking AWS resources for Ensure a support role has been created to manage incidents with AWS Support compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Ensure a support role has been created to manage incidents with AWS Support,"AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services.",Compliance,High,Ensure that IAM user access keys are rotated every 90 days via AWS Config or IAM Access Advisor reports. Create a dedicated support role for managing incidents with AWS Support. Steps: 1. Define role permissions. 2. Create the role in IAM. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure a support role has been created to manage incidents with AWS Support
check_compliance() {
    log ""Checking AWS resources for Ensure a support role has been created to manage incidents with AWS Support compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM user access keys should be rotated at least every 90 days,"The credentials are audited for authorized devices, users, and processes by ensuring IAM access keys are rotated as per organizational policy.",Compliance,High,Disable IAM users with access keys unused for 45 days or more using aws iam update-access-key.  Implement a process to rotate IAM user access keys every 90 days. Steps: 1. Identify users with access keys. 2. Set reminders to rotate keys. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM user access keys should be rotated at least every 90 days
check_compliance() {
    log ""Checking AWS resources for IAM user access keys should be rotated at least every 90 days compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM users with access keys unused for 45 days or greater are disabled,To be added,Compliance,Medium,Assign both access keys and passwords when setting up new IAM users through AWS Console.  Audit IAM users and disable those with unused access keys for over 45 days. Steps: 1. List IAM users with access keys. 2. Disable those unused for 45 days. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM users with access keys unused for 45 days or greater are disabled
check_compliance() {
    log ""Checking AWS resources for Ensure IAM users with access keys unused for 45 days or greater are disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM users are assigned access keys and passwords at setup,To be added,Compliance,High,Enable MFA for IAM users with console access by configuring it in the IAM settings. Ensure that all new IAM users are assigned access keys and passwords during setup. Steps: 1. Review IAM user creation process. 2. Update process as needed. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM users are assigned access keys and passwords at setup
check_compliance() {
    log ""Checking AWS resources for Ensure IAM users are assigned access keys and passwords at setup compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM users with console access should have MFA enabled,To be added,Compliance,Medium,Disable console access for users who have not logged in for 45 days or more using aws iam update-login-profile. Enforce MFA for all IAM users with console access. Steps: 1. Review IAM users with console access. 2. Enable MFA for all users. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM users with console access should have MFA enabled
check_compliance() {
    log ""Checking AWS resources for IAM users with console access should have MFA enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM users with console access unused for 45 days or greater are disabled,To be added,Compliance,High,Restrict access to AWSCloudShellFullAccess using IAM policies to limit access only to necessary users. Audit IAM users with console access and disable those unused for over 45 days. Steps: 1. List IAM users with console access. 2. Disable those unused for 45 days. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_view.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM users with console access unused for 45 days or greater are disabled
check_compliance() {
    log ""Checking AWS resources for Ensure IAM users with console access unused for 45 days or greater are disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure access to AWSCloudShellFullAccess is restricted,"This control checks whether the AWSCloudShellFullAccess policy is attached to any IAM user, group, or role. The control fails if the policy is attached to any IAM user, group, or role.",Compliance,High,"Enable hardware MFA for IAM users to improve security, especially for users with sensitive roles.  Review IAM policies to restrict access to AWSCloudShellFullAccess. Steps: 1. Identify users with this access. 2. Update policies as needed. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure access to AWSCloudShellFullAccess is restricted
check_compliance() {
    log ""Checking AWS resources for Ensure access to AWSCloudShellFullAccess is restricted compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM users should have hardware MFA enabled,Manage access to resources in the AWS Cloud by ensuring hardware MFA is enabled for the user.,Compliance,Medium,Ensure that IAM users are part of at least one group using aws iam add-user-to-group. Ensure all IAM users are equipped with hardware MFA. Steps: 1. Review user MFA settings. 2. Enable hardware MFA for all users. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM users should have hardware MFA enabled
check_compliance() {
    log ""Checking AWS resources for IAM users should have hardware MFA enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM users should be in at least one group,"AWS Identity and Access Management (IAM) can help you restrict access permissions and authorizations, by ensuring IAM users are members of at least one group.",Compliance,High,Enable MFA for all IAM users to improve security. Ensure that all IAM users are assigned to at least one group. Steps: 1. Review all IAM users. 2. Assign users to groups where necessary. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM users should be in at least one group
check_compliance() {
    log ""Checking AWS resources for IAM users should be in at least one group compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM user MFA should be enabled,To be added,Compliance,Medium,Ensure IAM users do not have inline or attached policies through regular audits and policy reviews. Enforce MFA for all IAM users. Steps: 1. Review user settings. 2. Enable MFA for users without it. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM user MFA should be enabled
check_compliance() {
    log ""Checking AWS resources for IAM user MFA should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM user should not have any inline or attached policies,This rule ensures AWS Identity and Access Management (IAM) policies are attached only to groups or roles to control access to systems and assets.,Compliance,High,Attach IAM policies only to groups or roles through the AWS Console or aws iam attach-role-policy. Audit IAM users to ensure they do not have any inline or attached policies. Steps: 1. Review user policies. 2. Remove any inline or attached policies. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM user should not have any inline or attached policies
check_compliance() {
    log ""Checking AWS resources for IAM user should not have any inline or attached policies compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure IAM policies are attached only to groups or roles,"By default, IAM users, groups, and roles have no access to AWS resources. IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended that IAM policies be applied directly to groups and roles but not users.",Compliance,High,Limit each IAM user to one active access key to minimize security risk by using aws iam list-access-keys.  Review IAM policies to ensure they are only attached to groups or roles. Steps: 1. Audit policies. 2. Reassign any policies attached to users. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure IAM policies are attached only to groups or roles
check_compliance() {
    log ""Checking AWS resources for Ensure IAM policies are attached only to groups or roles compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure there is only one active access key available for any single IAM user,Access keys are long-term credentials for an IAM user or the AWS account root user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK).,Compliance,High,Disable credentials unused for 45 days or more using aws iam update-access-key or through AWS Console. Review IAM users to ensure each has only one active access key. Steps: 1. List users with access keys. 2. Disable any extra keys. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure there is only one active access key available for any single IAM user
check_compliance() {
    log ""Checking AWS resources for Ensure there is only one active access key available for any single IAM user compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,Ensure credentials unused for 45 days or greater are disabled,To be added,Compliance,Medium,Disable IAM user credentials that have not been used in 90 days using the AWS Console or aws iam list-access-keys.  Audit IAM credentials to disable those unused for 45 days. Steps: 1. Review access keys and passwords. 2. Disable any unused for 45 days. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure credentials unused for 45 days or greater are disabled
check_compliance() {
    log ""Checking AWS resources for Ensure credentials unused for 45 days or greater are disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM user credentials that have not been used in 90 days should be disabled,To be added,Compliance,High,Ensure that administrator-level users have MFA enabled using aws iam list-mfa-devices.  Audit IAM user credentials and disable those not used in the last 90 days. Steps: 1. List user credentials. 2. Disable those inactive for 90 days. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM user credentials that have not been used in 90 days should be disabled
check_compliance() {
    log ""Checking AWS resources for IAM user credentials that have not been used in 90 days should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,IAM user credentials that have not been used in 90 days should be disabled,To be added,Compliance,High,Ensure that administrator-level users have MFA enabled using aws iam list-mfa-devices.  Audit IAM user credentials and disable those not used in the last 90 days. Steps: 1. List user credentials. 2. Disable those inactive for 90 days. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM user credentials that have not been used in 90 days should be disabled
check_compliance() {
    log ""Checking AWS resources for IAM user credentials that have not been used in 90 days should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
IAM,IAM administrator users should have MFA enabled,Manage access to resources in the AWS Cloud by ensuring MFA is enabled for users with administrative privileges.,Compliance,High,Ensure that all IAM users with administrator privileges have MFA enabled. Ensure all IAM administrator users have MFA enabled. Steps: 1. Review admin users. 2. Enable MFA for those without it. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM administrator users should have MFA enabled
check_compliance() {
    log ""Checking AWS resources for IAM administrator users should have MFA enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Kinesis,Kinesis firehose delivery streams should have server side encryption enabled,To be added,Compliance,High,Encrypt delivery streams to protect data at rest. Steps: 1. Open the Kinesis Firehose console. 2. Edit each stream and enable server-side encryption using AWS KMS CMKs.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Kinesis firehose delivery streams should have server side encryption enabled
check_compliance() {
    log ""Checking AWS resources for Kinesis firehose delivery streams should have server side encryption enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Kinesis,Kinesis streams should be encrypted with CMK,To be added,Compliance,High,Encrypt Kinesis Streams using AWS KMS CMKs for enhanced security. Steps: 1. Create a CMK in AWS KMS. 2. Update the Kinesis stream settings to use this CMK for encryption.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Kinesis streams should be encrypted with CMK
check_compliance() {
    log ""Checking AWS resources for Kinesis streams should be encrypted with CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Kinesis,Kinesis streams should have server side encryption enabled,To be added,Compliance,High,"Enable server-side encryption for all Kinesis streams. Steps: 1. Go to the Kinesis Streams console. 2. Verify and enable the ""Server-side encryption"" setting for each stream.",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Kinesis streams should have server side encryption enabled
check_compliance() {
    log ""Checking AWS resources for Kinesis streams should have server side encryption enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS CMK policies should prohibit public access,To be added,Compliance,High,"Audit and restrict CMK policies to avoid public access. Steps: 1. Use aws kms get-key-policy
to review policies. 2. Remove any wildcard (
*
) or public access permissions from the policy.",Cost: None/$0 ,"KMS CMK Policies Should Prohibit Public Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if KMS CMK policies allow public access.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans KMS key policies for ""Principal"": ""*"" and removes public access.
SSM Automation: An SSM document to notify admins and update non-compliant policies.","üîç Features of the Script:
‚úÖ Retrieves all KMS keys in the AWS account.
‚úÖ Analyzes key policies for public access (""Principal"": ""*"") and flags violations.
‚úÖ Removes public access and applies a stricter policy if necessary.
‚úÖ Logs actions, including compliant and non-compliant keys.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and fix KMS key policies
fix_kms_public_access() {
    log ""Checking KMS key policies for public access...""

    # Get list of all KMS keys
    kms_keys=$(aws kms list-keys --query ""Keys[].KeyId"" --output text)

    if [[ -z ""$kms_keys"" ]]; then
        log ""No KMS keys found.""
        exit 0
    fi

    for key_id in $kms_keys; do
        log ""Checking KMS key: $key_id""

        # Get key policy
        key_policy=$(aws kms get-key-policy --key-id ""$key_id"" --policy-name ""default"" --output json)

        if echo ""$key_policy"" | jq -e '.Statement[] | select(.Principal==""*"" or .Principal.AWS==""*"")' > /dev/null; then
            log ""‚ö†Ô∏è KMS key $key_id has public access. Fixing...""

            # Remove public access from policy
            new_policy=$(echo ""$key_policy"" | jq 'walk(if type == ""object"" and .Principal then del(.Principal) else . end)')

            # Apply the corrected policy
            aws kms put-key-policy --key-id ""$key_id"" --policy-name ""default"" --policy ""$new_policy""
            log ""‚úÖ Removed public access from KMS key $key_id.""
        else
            log ""‚úÖ KMS key $key_id is already compliant.""
        fi
    done

    log ""‚úÖ KMS policy check completed.""
}

# Execute the function
fix_kms_public_access
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures KMS keys are not exposed publicly.
üîπ Enhances Security: Eliminates security misconfigurations in key policies.
üîπ Automates Compliance: Detects and remediates violations proactively.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all KMS keys.
2Ô∏è‚É£ Scans key policies for public access (""Principal"": ""*"").
3Ô∏è‚É£ Removes public access if found.
4Ô∏è‚É£ Applies a stricter policy.
5Ô∏è‚É£ Logs all actions for visibility.",Bash,Weekly,SOC 2,2024-02-13
Security,KMS CMK policies should prohibit public access,To be added,Compliance,High,"Audit and restrict CMK policies to avoid public access. Steps: 1. Use aws kms get-key-policy
to review policies. 2. Remove any wildcard (
*
) or public access permissions from the policy.",Cost: None/$0 ,"KMS CMK Policies Should Prohibit Public Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if KMS CMK policies allow public access.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans KMS key policies for ""Principal"": ""*"" and removes public access.
SSM Automation: An SSM document to notify admins and update non-compliant policies.","üîç Features of the Script:
‚úÖ Retrieves all KMS keys in the AWS account.
‚úÖ Analyzes key policies for public access (""Principal"": ""*"") and flags violations.
‚úÖ Removes public access and applies a stricter policy if necessary.
‚úÖ Logs actions, including compliant and non-compliant keys.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and fix KMS key policies
fix_kms_public_access() {
    log ""Checking KMS key policies for public access...""

    # Get list of all KMS keys
    kms_keys=$(aws kms list-keys --query ""Keys[].KeyId"" --output text)

    if [[ -z ""$kms_keys"" ]]; then
        log ""No KMS keys found.""
        exit 0
    fi

    for key_id in $kms_keys; do
        log ""Checking KMS key: $key_id""

        # Get key policy
        key_policy=$(aws kms get-key-policy --key-id ""$key_id"" --policy-name ""default"" --output json)

        if echo ""$key_policy"" | jq -e '.Statement[] | select(.Principal==""*"" or .Principal.AWS==""*"")' > /dev/null; then
            log ""‚ö†Ô∏è KMS key $key_id has public access. Fixing...""

            # Remove public access from policy
            new_policy=$(echo ""$key_policy"" | jq 'walk(if type == ""object"" and .Principal then del(.Principal) else . end)')

            # Apply the corrected policy
            aws kms put-key-policy --key-id ""$key_id"" --policy-name ""default"" --policy ""$new_policy""
            log ""‚úÖ Removed public access from KMS key $key_id.""
        else
            log ""‚úÖ KMS key $key_id is already compliant.""
        fi
    done

    log ""‚úÖ KMS policy check completed.""
}

# Execute the function
fix_kms_public_access
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures KMS keys are not exposed publicly.
üîπ Enhances Security: Eliminates security misconfigurations in key policies.
üîπ Automates Compliance: Detects and remediates violations proactively.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all KMS keys.
2Ô∏è‚É£ Scans key policies for public access (""Principal"": ""*"").
3Ô∏è‚É£ Removes public access if found.
4Ô∏è‚É£ Applies a stricter policy.
5Ô∏è‚É£ Logs all actions for visibility.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS CMK rotation should be enabled,To be added,Compliance,Medium,Enable key rotation to regularly update cryptographic keys. Steps: 1. Open the KMS console. 2. Enable automatic key rotation for each CMK.,Cost: None/$0 ,"KMS: CMK Rotation Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if KMS Customer Managed Keys (CMKs) have rotation enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all KMS CMKs and enables key rotation for non-compliant keys.
SSM Automation: An SSM document to notify admins and automatically enforce rotation where needed.","üîç Features of the Script:
‚úÖ Retrieves all Customer Managed KMS Keys.
‚úÖ Checks if key rotation is enabled for each key.
‚úÖ If disabled, enables key rotation automatically.
‚úÖ Logs all findings and actions taken.
‚úÖ Supports manual mode (user inputs a specific key) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable key rotation for non-compliant KMS CMKs
enable_kms_rotation() {
    log ""Checking KMS Customer Managed Keys (CMKs) for rotation compliance...""

    # Get list of all KMS CMKs
    keys=$(aws kms list-keys --query ""Keys[].KeyId"" --output text)

    if [[ -z ""$keys"" ]]; then
        log ""No KMS CMKs found.""
        exit 0
    fi

    non_compliant_count=0
    for key_id in $keys; do
        # Check if key rotation is enabled
        rotation_status=$(aws kms get-key-rotation-status --key-id ""$key_id"" --query ""KeyRotationEnabled"" --output text)

        if [[ ""$rotation_status"" == ""True"" ]]; then
            log ""‚úÖ Key $key_id already has rotation enabled.""
        else
            log ""‚ö†Ô∏è Key $key_id does not have rotation enabled. Enabling now...""

            # Enable key rotation
            aws kms enable-key-rotation --key-id ""$key_id""

            log ""‚úÖ Key rotation enabled for $key_id.""
            ((non_compliant_count++))
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count KMS keys were non-compliant and have been fixed.""
    else
        log ""‚úÖ All KMS keys have rotation enabled.""
    fi
}

# Execute the function
enable_kms_rotation
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures that CMKs are rotated automatically to minimize key compromise risks.
üîπ Ensures Compliance: Helps meet AWS security best practices and regulatory requirements.
üîπ Automates Remediation: Detects and fixes non-compliant keys automatically.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Customer Managed KMS Keys (CMKs).
2Ô∏è‚É£ Checks if key rotation is enabled for each key.
3Ô∏è‚É£ If disabled, enables rotation automatically.
4Ô∏è‚É£ Logs all actions for audit and compliance tracking.
5Ô∏è‚É£ Supports manual mode (for specific keys) and automatic mode.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS CMK rotation should be enabled,To be added,Compliance,Medium,Enable key rotation to regularly update cryptographic keys. Steps: 1. Open the KMS console. 2. Enable automatic key rotation for each CMK.,Cost: None/$0 ,"KMS: CMK Rotation Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if KMS Customer Managed Keys (CMKs) have rotation enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all KMS CMKs and enables key rotation for non-compliant keys.
SSM Automation: An SSM document to notify admins and automatically enforce rotation where needed.","üîç Features of the Script:
‚úÖ Retrieves all Customer Managed KMS Keys.
‚úÖ Checks if key rotation is enabled for each key.
‚úÖ If disabled, enables key rotation automatically.
‚úÖ Logs all findings and actions taken.
‚úÖ Supports manual mode (user inputs a specific key) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable key rotation for non-compliant KMS CMKs
enable_kms_rotation() {
    log ""Checking KMS Customer Managed Keys (CMKs) for rotation compliance...""

    # Get list of all KMS CMKs
    keys=$(aws kms list-keys --query ""Keys[].KeyId"" --output text)

    if [[ -z ""$keys"" ]]; then
        log ""No KMS CMKs found.""
        exit 0
    fi

    non_compliant_count=0
    for key_id in $keys; do
        # Check if key rotation is enabled
        rotation_status=$(aws kms get-key-rotation-status --key-id ""$key_id"" --query ""KeyRotationEnabled"" --output text)

        if [[ ""$rotation_status"" == ""True"" ]]; then
            log ""‚úÖ Key $key_id already has rotation enabled.""
        else
            log ""‚ö†Ô∏è Key $key_id does not have rotation enabled. Enabling now...""

            # Enable key rotation
            aws kms enable-key-rotation --key-id ""$key_id""

            log ""‚úÖ Key rotation enabled for $key_id.""
            ((non_compliant_count++))
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count KMS keys were non-compliant and have been fixed.""
    else
        log ""‚úÖ All KMS keys have rotation enabled.""
    fi
}

# Execute the function
enable_kms_rotation
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures that CMKs are rotated automatically to minimize key compromise risks.
üîπ Ensures Compliance: Helps meet AWS security best practices and regulatory requirements.
üîπ Automates Remediation: Detects and fixes non-compliant keys automatically.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Customer Managed KMS Keys (CMKs).
2Ô∏è‚É£ Checks if key rotation is enabled for each key.
3Ô∏è‚É£ If disabled, enables rotation automatically.
4Ô∏è‚É£ Logs all actions for audit and compliance tracking.
5Ô∏è‚É£ Supports manual mode (for specific keys) and automatic mode.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS key should be in use,To be added,Compliance,Medium,"Identify and remove unused keys to reduce attack surface. Steps: 1. Use aws kms list-keys
and
describe-key
to identify usage. 2. Rotate, disable, or delete unused keys based on organizational needs.",Cost: None/$0 ,"KMS: Key Should Be in Use
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect unused KMS keys (no recent encryption/decryption operations).
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies and flags unused KMS keys.
SSM Automation: An SSM document to notify admins and deprecate unused keys if needed.","üîç Features of the Script:
‚úÖ Retrieves all Customer Managed KMS Keys.
‚úÖ Checks if each key has been used in the last 90 days.
‚úÖ Flags keys that have no recent encryption or decryption activity.
‚úÖ Logs all findings and suggests deprecating unused keys.
‚úÖ Can be modified to disable or delete unused keys automatically.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for unused KMS keys
check_unused_kms_keys() {
    log ""Checking KMS keys for recent usage...""

    # Get list of all KMS CMKs
    keys=$(aws kms list-keys --query ""Keys[].KeyId"" --output text)

    if [[ -z ""$keys"" ]]; then
        log ""No KMS CMKs found.""
        exit 0
    fi

    unused_count=0
    for key_id in $keys; do
        # Get key usage statistics for the last 90 days
        usage=$(aws cloudtrail lookup-events --lookup-attributes AttributeKey=ResourceName,AttributeValue=""$key_id"" \
            --max-results 1 --query ""Events"" --output text)

        if [[ -z ""$usage"" ]]; then
            log ""‚ö†Ô∏è Key $key_id has NOT been used in the last 90 days.""
            ((unused_count++))
        else
            log ""‚úÖ Key $key_id has recent activity and is in use.""
        fi
    done

    if [[ $unused_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $unused_count KMS keys have not been used in the last 90 days.""
    else
        log ""‚úÖ All KMS keys are actively in use.""
    fi
}

# Execute the function
check_unused_kms_keys
","üöÄ Why This is Useful?
üîπ Reduces Security Risks: Identifies unused KMS keys that could be deactivated or deleted.
üîπ Optimizes Costs: Ensures that unnecessary keys are not retained.
üîπ Maintains Compliance: Helps track and audit key usage.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Customer Managed KMS Keys (CMKs).
2Ô∏è‚É£ Checks if each key has been used for encryption or decryption in the last 90 days.
3Ô∏è‚É£ Flags keys with no recent activity.
4Ô∏è‚É£ Logs all findings for audit and compliance tracking.
5Ô∏è‚É£ Can be modified to disable or delete unused keys automatically.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS key should be in use,To be added,Compliance,Medium,"Identify and remove unused keys to reduce attack surface. Steps: 1. Use aws kms list-keys
and
describe-key
to identify usage. 2. Rotate, disable, or delete unused keys based on organizational needs.",Cost: None/$0 ,"KMS: Key Should Be in Use
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect unused KMS keys (no recent encryption/decryption operations).
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies and flags unused KMS keys.
SSM Automation: An SSM document to notify admins and deprecate unused keys if needed.","üîç Features of the Script:
‚úÖ Retrieves all Customer Managed KMS Keys.
‚úÖ Checks if each key has been used in the last 90 days.
‚úÖ Flags keys that have no recent encryption or decryption activity.
‚úÖ Logs all findings and suggests deprecating unused keys.
‚úÖ Can be modified to disable or delete unused keys automatically.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for unused KMS keys
check_unused_kms_keys() {
    log ""Checking KMS keys for recent usage...""

    # Get list of all KMS CMKs
    keys=$(aws kms list-keys --query ""Keys[].KeyId"" --output text)

    if [[ -z ""$keys"" ]]; then
        log ""No KMS CMKs found.""
        exit 0
    fi

    unused_count=0
    for key_id in $keys; do
        # Get key usage statistics for the last 90 days
        usage=$(aws cloudtrail lookup-events --lookup-attributes AttributeKey=ResourceName,AttributeValue=""$key_id"" \
            --max-results 1 --query ""Events"" --output text)

        if [[ -z ""$usage"" ]]; then
            log ""‚ö†Ô∏è Key $key_id has NOT been used in the last 90 days.""
            ((unused_count++))
        else
            log ""‚úÖ Key $key_id has recent activity and is in use.""
        fi
    done

    if [[ $unused_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $unused_count KMS keys have not been used in the last 90 days.""
    else
        log ""‚úÖ All KMS keys are actively in use.""
    fi
}

# Execute the function
check_unused_kms_keys
","üöÄ Why This is Useful?
üîπ Reduces Security Risks: Identifies unused KMS keys that could be deactivated or deleted.
üîπ Optimizes Costs: Ensures that unnecessary keys are not retained.
üîπ Maintains Compliance: Helps track and audit key usage.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Customer Managed KMS Keys (CMKs).
2Ô∏è‚É£ Checks if each key has been used for encryption or decryption in the last 90 days.
3Ô∏è‚É£ Flags keys with no recent activity.
4Ô∏è‚É£ Logs all findings for audit and compliance tracking.
5Ô∏è‚É£ Can be modified to disable or delete unused keys automatically.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS key decryption should be restricted in IAM customer managed policy,"Checks whether the default version of IAM customer managed policies allow principals to use the AWS KMS decryption actions on all resources. This control uses Zelkova, an automated reasoning engine, to validate and warn you about policies that may grant broad access to your secrets across AWS accounts. This control fails if the kms:Decrypt or kms:ReEncryptFrom actions are allowed on all KMS keys. The control evaluates both attached and unattached customer managed policies. It does not check inline policies or AWS managed policies.",Compliance,High,Apply least privilege to IAM customer-managed policies for decryption permissions. Steps: 1. Review customer-managed policies. 2. Update the policies to restrict decryption to specific roles or services.,Cost: None/$0 ,"KMS: KMS Key Decryption Should Be Restricted in IAM Customer Managed Policy
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM policies allowing excessive decryption access to KMS keys.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans IAM policies for unrestricted KMS decrypt actions.
SSM Automation: An SSM document to notify admins and restrict IAM policies as needed.","üîç Features of the Script:
‚úÖ Retrieves all IAM customer-managed policies.
‚úÖ Checks if any policy grants unrestricted decryption permissions (kms:Decrypt).
‚úÖ If found, modifies or detaches the policy to enforce security.
‚úÖ Logs all findings and actions taken.
‚úÖ Supports manual mode (user inputs a specific policy) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check IAM policies for unrestricted KMS decryption
restrict_kms_decrypt() {
    log ""Checking IAM policies for unrestricted KMS decryption access...""

    # Get list of all IAM customer-managed policies
    policies=$(aws iam list-policies --scope Local --query ""Policies[].Arn"" --output text)

    if [[ -z ""$policies"" ]]; then
        log ""No customer-managed IAM policies found.""
        exit 0
    fi

    non_compliant_count=0
    for policy_arn in $policies; do
        # Get the IAM policy document
        policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
            --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
            --query ""PolicyVersion.Document"" --output json)

        # Check if the policy allows unrestricted ""kms:Decrypt""
        if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains(""kms:Decrypt"")' >/dev/null; then
            log ""‚ö†Ô∏è Policy $policy_arn allows unrestricted KMS decryption. Restricting...""

            # Create a new policy document without ""kms:Decrypt""
            new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""kms:Decrypt"")) else . end)')

            # Detach the old policy
            aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

            # Create a new restricted policy
            new_policy_arn=$(aws iam create-policy --policy-name ""$(basename ""$policy_arn"")_Restricted"" \
                --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

            # Attach the new restricted policy
            aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

            log ""‚úÖ Policy $policy_arn has been updated to restrict KMS decryption.""
            ((non_compliant_count++))
        else
            log ""‚úÖ Policy $policy_arn is already compliant.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count IAM policies had unrestricted KMS decryption and have been updated.""
    else
        log ""‚úÖ All IAM policies are compliant.""
    fi
}

# Execute the function
restrict_kms_decrypt
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Decryption: Ensures that sensitive encrypted data remains protected.
üîπ Automates Compliance: Detects and fixes overly permissive IAM policies.
üîπ Enhances Security: Enforces least privilege access to KMS keys.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all IAM customer-managed policies.
2Ô∏è‚É£ Checks if any policy allows unrestricted KMS decryption (kms:Decrypt).
3Ô∏è‚É£ If found, removes or restricts the policy.
4Ô∏è‚É£ Logs all actions for audit and compliance tracking.
5Ô∏è‚É£ Supports manual mode (for specific policies) and automatic mode.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS key decryption should be restricted in IAM customer managed policy,"Checks whether the default version of IAM customer managed policies allow principals to use the AWS KMS decryption actions on all resources. This control uses Zelkova, an automated reasoning engine, to validate and warn you about policies that may grant broad access to your secrets across AWS accounts. This control fails if the kms:Decrypt or kms:ReEncryptFrom actions are allowed on all KMS keys. The control evaluates both attached and unattached customer managed policies. It does not check inline policies or AWS managed policies.",Compliance,High,Apply least privilege to IAM customer-managed policies for decryption permissions. Steps: 1. Review customer-managed policies. 2. Update the policies to restrict decryption to specific roles or services.,Cost: None/$0 ,"KMS: KMS Key Decryption Should Be Restricted in IAM Customer Managed Policy
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM policies allowing excessive decryption access to KMS keys.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans IAM policies for unrestricted KMS decrypt actions.
SSM Automation: An SSM document to notify admins and restrict IAM policies as needed.","üîç Features of the Script:
‚úÖ Retrieves all IAM customer-managed policies.
‚úÖ Checks if any policy grants unrestricted decryption permissions (kms:Decrypt).
‚úÖ If found, modifies or detaches the policy to enforce security.
‚úÖ Logs all findings and actions taken.
‚úÖ Supports manual mode (user inputs a specific policy) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check IAM policies for unrestricted KMS decryption
restrict_kms_decrypt() {
    log ""Checking IAM policies for unrestricted KMS decryption access...""

    # Get list of all IAM customer-managed policies
    policies=$(aws iam list-policies --scope Local --query ""Policies[].Arn"" --output text)

    if [[ -z ""$policies"" ]]; then
        log ""No customer-managed IAM policies found.""
        exit 0
    fi

    non_compliant_count=0
    for policy_arn in $policies; do
        # Get the IAM policy document
        policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
            --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
            --query ""PolicyVersion.Document"" --output json)

        # Check if the policy allows unrestricted ""kms:Decrypt""
        if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains(""kms:Decrypt"")' >/dev/null; then
            log ""‚ö†Ô∏è Policy $policy_arn allows unrestricted KMS decryption. Restricting...""

            # Create a new policy document without ""kms:Decrypt""
            new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""kms:Decrypt"")) else . end)')

            # Detach the old policy
            aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

            # Create a new restricted policy
            new_policy_arn=$(aws iam create-policy --policy-name ""$(basename ""$policy_arn"")_Restricted"" \
                --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

            # Attach the new restricted policy
            aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

            log ""‚úÖ Policy $policy_arn has been updated to restrict KMS decryption.""
            ((non_compliant_count++))
        else
            log ""‚úÖ Policy $policy_arn is already compliant.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count IAM policies had unrestricted KMS decryption and have been updated.""
    else
        log ""‚úÖ All IAM policies are compliant.""
    fi
}

# Execute the function
restrict_kms_decrypt
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Decryption: Ensures that sensitive encrypted data remains protected.
üîπ Automates Compliance: Detects and fixes overly permissive IAM policies.
üîπ Enhances Security: Enforces least privilege access to KMS keys.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all IAM customer-managed policies.
2Ô∏è‚É£ Checks if any policy allows unrestricted KMS decryption (kms:Decrypt).
3Ô∏è‚É£ If found, removes or restricts the policy.
4Ô∏è‚É£ Logs all actions for audit and compliance tracking.
5Ô∏è‚É£ Supports manual mode (for specific policies) and automatic mode.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS key decryption should be restricted in IAM inline policy,"Checks whether the inline policies that are embedded in your IAM identities (role, user, or group) allow the AWS KMS decryption actions on all KMS keys. This control uses Zelkova, an automated reasoning engine, to validate and warn you about policies that may grant broad access to your secrets across AWS accounts. This control fails if kms:Decrypt or kms:ReEncryptFrom actions are allowed on all KMS keys in an inline policy.",Compliance,High,"Audit and restrict inline IAM policies to limit decryption permissions. Steps: 1. Use aws iam list-policies
to find inline policies. 2. Update them to enforce least privilege for decryption.",Cost: None/$0 ,"KMS Key Decryption Should Be Restricted in IAM Inline Policy
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if IAM inline policies grant excessive KMS decryption permissions.
Lambda Function: A scheduled Lambda function that scans IAM inline policies for unrestricted kms:Decrypt permissions.
SSM Automation: An SSM document to notify admins and enforce tighter restrictions.","üîç Features of the Script:
‚úÖ Retrieves all IAM roles and users with inline policies.
‚úÖ Checks if kms:Decrypt is allowed without restrictions.
‚úÖ Flags non-compliant policies and suggests remediation.
‚úÖ Logs actions and provides detailed reports.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check IAM policies for unrestricted KMS decryption
check_kms_decrypt_restrictions() {
    log ""Checking IAM inline policies for unrestricted KMS decryption...""

    # Get list of IAM roles
    roles=$(aws iam list-roles --query ""Roles[].RoleName"" --output text)

    for role in $roles; do
        log ""Checking IAM role: $role""

        # Get inline policy names
        policies=$(aws iam list-role-policies --role-name ""$role"" --query ""PolicyNames"" --output text)

        for policy in $policies; do
            # Get policy document
            policy_doc=$(aws iam get-role-policy --role-name ""$role"" --policy-name ""$policy"" --query ""PolicyDocument"" --output json)

            # Check if policy allows kms:Decrypt without conditions
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"" and .Action==""kms:Decrypt"" and .Resource==""*"")' > /dev/null; then
                log ""‚ö†Ô∏è IAM role $role has an unrestricted kms:Decrypt policy ($policy).""
                log ""‚ùå Action required: Update policy to restrict KMS decryption permissions.""
            else
                log ""‚úÖ IAM role $role is compliant.""
            fi
        done
    done

    log ""‚úÖ IAM policy check completed.""
}

# Execute the function
check_kms_decrypt_restrictions
","üöÄ Why This is Useful?
üîπ Reduces Risk: Prevents over-permissive access to KMS decryption.
üîπ Strengthens Security: Ensures IAM roles have least privilege permissions.
üîπ Automates Detection: Continuously monitors and flags violations.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all IAM roles with inline policies.
2Ô∏è‚É£ Analyzes policies for kms:Decrypt permissions.
3Ô∏è‚É£ Flags unrestricted decryption permissions.
4Ô∏è‚É£ Suggests remediation for non-compliant policies.
5Ô∏è‚É£ Logs all findings for security auditing.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS key decryption should be restricted in IAM inline policy,"Checks whether the inline policies that are embedded in your IAM identities (role, user, or group) allow the AWS KMS decryption actions on all KMS keys. This control uses Zelkova, an automated reasoning engine, to validate and warn you about policies that may grant broad access to your secrets across AWS accounts. This control fails if kms:Decrypt or kms:ReEncryptFrom actions are allowed on all KMS keys in an inline policy.",Compliance,High,"Audit and restrict inline IAM policies to limit decryption permissions. Steps: 1. Use aws iam list-policies
to find inline policies. 2. Update them to enforce least privilege for decryption.",Cost: None/$0 ,"KMS Key Decryption Should Be Restricted in IAM Inline Policy
‚úÖ Automation Approach:

AWS Config Rule: Create an AWS Config rule to check if IAM inline policies grant excessive KMS decryption permissions.
Lambda Function: A scheduled Lambda function that scans IAM inline policies for unrestricted kms:Decrypt permissions.
SSM Automation: An SSM document to notify admins and enforce tighter restrictions.","üîç Features of the Script:
‚úÖ Retrieves all IAM roles and users with inline policies.
‚úÖ Checks if kms:Decrypt is allowed without restrictions.
‚úÖ Flags non-compliant policies and suggests remediation.
‚úÖ Logs actions and provides detailed reports.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check IAM policies for unrestricted KMS decryption
check_kms_decrypt_restrictions() {
    log ""Checking IAM inline policies for unrestricted KMS decryption...""

    # Get list of IAM roles
    roles=$(aws iam list-roles --query ""Roles[].RoleName"" --output text)

    for role in $roles; do
        log ""Checking IAM role: $role""

        # Get inline policy names
        policies=$(aws iam list-role-policies --role-name ""$role"" --query ""PolicyNames"" --output text)

        for policy in $policies; do
            # Get policy document
            policy_doc=$(aws iam get-role-policy --role-name ""$role"" --policy-name ""$policy"" --query ""PolicyDocument"" --output json)

            # Check if policy allows kms:Decrypt without conditions
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"" and .Action==""kms:Decrypt"" and .Resource==""*"")' > /dev/null; then
                log ""‚ö†Ô∏è IAM role $role has an unrestricted kms:Decrypt policy ($policy).""
                log ""‚ùå Action required: Update policy to restrict KMS decryption permissions.""
            else
                log ""‚úÖ IAM role $role is compliant.""
            fi
        done
    done

    log ""‚úÖ IAM policy check completed.""
}

# Execute the function
check_kms_decrypt_restrictions
","üöÄ Why This is Useful?
üîπ Reduces Risk: Prevents over-permissive access to KMS decryption.
üîπ Strengthens Security: Ensures IAM roles have least privilege permissions.
üîπ Automates Detection: Continuously monitors and flags violations.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all IAM roles with inline policies.
2Ô∏è‚É£ Analyzes policies for kms:Decrypt permissions.
3Ô∏è‚É£ Flags unrestricted decryption permissions.
4Ô∏è‚É£ Suggests remediation for non-compliant policies.
5Ô∏è‚É£ Logs all findings for security auditing.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS keys should not be pending deletion,To be added,Compliance,High,"Review keys scheduled for deletion and cancel if needed to prevent service disruption. Steps: 1. Use aws kms list-keys
and
list-deletion
to find pending keys. 2. Cancel deletion using
aws kms cancel-key-deletion",Cost: None/$0 ,"KMS: KMS Keys Should Not Be Pending Deletion
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect KMS keys that are pending deletion.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies and cancels pending deletions.
SSM Automation: An SSM document to notify admins and prevent accidental key deletion.","üîç Features of the Script:
‚úÖ Retrieves all KMS keys in the AWS account.
‚úÖ Checks if any key is pending deletion.
‚úÖ Cancels pending deletions to ensure continued availability.
‚úÖ Logs all findings and actions taken.
‚úÖ Supports manual mode (user inputs a specific key) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for and cancel KMS key deletions
cancel_kms_key_deletion() {
    log ""Checking for KMS keys pending deletion...""

    # Get list of all KMS keys
    keys=$(aws kms list-keys --query ""Keys[].KeyId"" --output text)

    if [[ -z ""$keys"" ]]; then
        log ""No KMS keys found.""
        exit 0
    fi

    pending_count=0
    for key_id in $keys; do
        # Get the key status
        key_status=$(aws kms describe-key --key-id ""$key_id"" --query ""KeyMetadata.KeyState"" --output text)

        if [[ ""$key_status"" == ""PendingDeletion"" ]]; then
            log ""‚ö†Ô∏è Key $key_id is pending deletion. Cancelling deletion...""

            # Cancel key deletion
            aws kms cancel-key-deletion --key-id ""$key_id""

            log ""‚úÖ Key $key_id deletion has been cancelled.""
            ((pending_count++))
        else
            log ""‚úÖ Key $key_id is active and not pending deletion.""
        fi
    done

    if [[ $pending_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $pending_count KMS keys had pending deletion and have been restored.""
    else
        log ""‚úÖ No KMS keys were pending deletion.""
    fi
}

# Execute the function
cancel_kms_key_deletion
","üöÄ Why This is Useful?
üîπ Prevents Data Loss: Ensures critical encryption keys are not deleted accidentally.
üîπ Enhances Security: Avoids scenarios where services depending on KMS keys fail due to deletion.
üîπ Automates Recovery: Automatically cancels deletions for important keys.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all KMS keys in the AWS account.
2Ô∏è‚É£ Checks if any are pending deletion.
3Ô∏è‚É£ Cancels the deletion to prevent accidental data loss.
4Ô∏è‚É£ Logs all actions for audit and compliance tracking.
5Ô∏è‚É£ Supports both manual mode (for specific keys) and automatic mode.",Bash,Weekly,SOC 2,2024-02-13
Security,KMS keys should not be pending deletion,To be added,Compliance,High,"Review keys scheduled for deletion and cancel if needed to prevent service disruption. Steps: 1. Use aws kms list-keys
and
list-deletion
to find pending keys. 2. Cancel deletion using
aws kms cancel-key-deletion",Cost: None/$0 ,"KMS: KMS Keys Should Not Be Pending Deletion
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect KMS keys that are pending deletion.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies and cancels pending deletions.
SSM Automation: An SSM document to notify admins and prevent accidental key deletion.","üîç Features of the Script:
‚úÖ Retrieves all KMS keys in the AWS account.
‚úÖ Checks if any key is pending deletion.
‚úÖ Cancels pending deletions to ensure continued availability.
‚úÖ Logs all findings and actions taken.
‚úÖ Supports manual mode (user inputs a specific key) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for and cancel KMS key deletions
cancel_kms_key_deletion() {
    log ""Checking for KMS keys pending deletion...""

    # Get list of all KMS keys
    keys=$(aws kms list-keys --query ""Keys[].KeyId"" --output text)

    if [[ -z ""$keys"" ]]; then
        log ""No KMS keys found.""
        exit 0
    fi

    pending_count=0
    for key_id in $keys; do
        # Get the key status
        key_status=$(aws kms describe-key --key-id ""$key_id"" --query ""KeyMetadata.KeyState"" --output text)

        if [[ ""$key_status"" == ""PendingDeletion"" ]]; then
            log ""‚ö†Ô∏è Key $key_id is pending deletion. Cancelling deletion...""

            # Cancel key deletion
            aws kms cancel-key-deletion --key-id ""$key_id""

            log ""‚úÖ Key $key_id deletion has been cancelled.""
            ((pending_count++))
        else
            log ""‚úÖ Key $key_id is active and not pending deletion.""
        fi
    done

    if [[ $pending_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $pending_count KMS keys had pending deletion and have been restored.""
    else
        log ""‚úÖ No KMS keys were pending deletion.""
    fi
}

# Execute the function
cancel_kms_key_deletion
","üöÄ Why This is Useful?
üîπ Prevents Data Loss: Ensures critical encryption keys are not deleted accidentally.
üîπ Enhances Security: Avoids scenarios where services depending on KMS keys fail due to deletion.
üîπ Automates Recovery: Automatically cancels deletions for important keys.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all KMS keys in the AWS account.
2Ô∏è‚É£ Checks if any are pending deletion.
3Ô∏è‚É£ Cancels the deletion to prevent accidental data loss.
4Ô∏è‚É£ Logs all actions for audit and compliance tracking.
5Ô∏è‚É£ Supports both manual mode (for specific keys) and automatic mode.",Bash,Weekly,SOC 2,2024-02-13
KMS,KMS keys should not be pending deletion,To be added,Compliance,High,"Review keys scheduled for deletion and cancel if needed to prevent service disruption. Steps: 1. Use aws kms list-keys
and
list-deletion
to find pending keys. 2. Cancel deletion using
aws kms cancel-key-deletion",Cost: None/$0 ,"KMS: KMS Keys Should Not Be Pending Deletion
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect KMS keys that are pending deletion.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies and cancels pending deletions.
SSM Automation: An SSM document to notify admins and prevent accidental key deletion.","üîç Features of the Script:
‚úÖ Retrieves all KMS keys in the AWS account.
‚úÖ Checks if any key is pending deletion.
‚úÖ Cancels pending deletions to ensure continued availability.
‚úÖ Logs all findings and actions taken.
‚úÖ Supports manual mode (user inputs a specific key) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for and cancel KMS key deletions
cancel_kms_key_deletion() {
    log ""Checking for KMS keys pending deletion...""

    # Get list of all KMS keys
    keys=$(aws kms list-keys --query ""Keys[].KeyId"" --output text)

    if [[ -z ""$keys"" ]]; then
        log ""No KMS keys found.""
        exit 0
    fi

    pending_count=0
    for key_id in $keys; do
        # Get the key status
        key_status=$(aws kms describe-key --key-id ""$key_id"" --query ""KeyMetadata.KeyState"" --output text)

        if [[ ""$key_status"" == ""PendingDeletion"" ]]; then
            log ""‚ö†Ô∏è Key $key_id is pending deletion. Cancelling deletion...""

            # Cancel key deletion
            aws kms cancel-key-deletion --key-id ""$key_id""

            log ""‚úÖ Key $key_id deletion has been cancelled.""
            ((pending_count++))
        else
            log ""‚úÖ Key $key_id is active and not pending deletion.""
        fi
    done

    if [[ $pending_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $pending_count KMS keys had pending deletion and have been restored.""
    else
        log ""‚úÖ No KMS keys were pending deletion.""
    fi
}

# Execute the function
cancel_kms_key_deletion
","üöÄ Why This is Useful?
üîπ Prevents Data Loss: Ensures critical encryption keys are not deleted accidentally.
üîπ Enhances Security: Avoids scenarios where services depending on KMS keys fail due to deletion.
üîπ Automates Recovery: Automatically cancels deletions for important keys.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all KMS keys in the AWS account.
2Ô∏è‚É£ Checks if any are pending deletion.
3Ô∏è‚É£ Cancels the deletion to prevent accidental data loss.
4Ô∏è‚É£ Logs all actions for audit and compliance tracking.
5Ô∏è‚É£ Supports both manual mode (for specific keys) and automatic mode.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions CloudTrail logging should be enabled,"Lambda functions logging is essential because once lambdas are triggered, all of the underlying compute resources are automatically managed for you. This control is compliant if CloudTrail logging is enabled.",Compliance,High,Ensure Lambda functions CloudTrail logging is enabled. Steps: 1. Verify CloudTrail is enabled. 2. Ensure Lambda function activity is logged. https://docs.aws.amazon.com/lambda/latest/dg/configuration-cloudtrail.html,Cost: None/$0 ,"Lambda Functions CloudTrail Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check if AWS Lambda functions have logging enabled in AWS CloudTrail.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans CloudTrail logs to verify if Lambda execution events are recorded.
SSM Automation: Notifies admins and provides an option to enable logging for non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if AWS CloudTrail is logging function execution.
‚úÖ Flags functions without proper CloudTrail logging.
‚úÖ Provides recommendations to enable logging.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions have CloudTrail logging enabled
check_lambda_cloudtrail_logging() {
    log ""Checking AWS Lambda functions for CloudTrail logging...""

    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)
    if [[ -z ""$trails"" ]]; then
        log ""‚ùå No CloudTrail trails found. Lambda execution might not be logged.""
        exit 1
    fi

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        log ""Checking if function $function_name is logged in CloudTrail...""
        event_check=$(aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=Invoke \
            --query ""Events[?Resources[?ResourceName=='$function_name']].EventName"" --output text)

        if [[ -z ""$event_check"" ]]; then
            log ""‚ö†Ô∏è CloudTrail is NOT logging executions of Lambda function: $function_name""
            log ""‚ÑπÔ∏è Consider enabling Lambda function execution logging in CloudTrail.""
        else
            log ""‚úÖ CloudTrail is logging executions of Lambda function: $function_name""
        fi
    done
}

# Execute the function
check_lambda_cloudtrail_logging
","üöÄ Why This is Useful?
üîπ Improves Security Monitoring: Ensures Lambda executions are auditable in CloudTrail.
üîπ Automates Compliance Checks: Detects missing logs and suggests remediation.
üîπ Enhances Visibility: Helps track unauthorized or suspicious Lambda activity.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if CloudTrail is enabled.
3Ô∏è‚É£ Verifies that function execution is being logged.
4Ô∏è‚É£ Flags non-compliant functions.
5Ô∏è‚É£ Logs findings and suggests enabling CloudTrail logging.",Bash,Weekly,SOC 2,2024-02-13
Reliability,Lambda functions CloudTrail logging should be enabled,"Lambda functions logging is essential because once lambdas are triggered, all of the underlying compute resources are automatically managed for you. This control is compliant if CloudTrail logging is enabled.",Compliance,High,Ensure Lambda functions CloudTrail logging is enabled. Steps: 1. Verify CloudTrail is enabled. 2. Ensure Lambda function activity is logged. https://docs.aws.amazon.com/lambda/latest/dg/configuration-cloudtrail.html,Cost: None/$0 ,"Lambda Functions CloudTrail Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check if AWS Lambda functions have logging enabled in AWS CloudTrail.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans CloudTrail logs to verify if Lambda execution events are recorded.
SSM Automation: Notifies admins and provides an option to enable logging for non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if AWS CloudTrail is logging function execution.
‚úÖ Flags functions without proper CloudTrail logging.
‚úÖ Provides recommendations to enable logging.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions have CloudTrail logging enabled
check_lambda_cloudtrail_logging() {
    log ""Checking AWS Lambda functions for CloudTrail logging...""

    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)
    if [[ -z ""$trails"" ]]; then
        log ""‚ùå No CloudTrail trails found. Lambda execution might not be logged.""
        exit 1
    fi

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        log ""Checking if function $function_name is logged in CloudTrail...""
        event_check=$(aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=Invoke \
            --query ""Events[?Resources[?ResourceName=='$function_name']].EventName"" --output text)

        if [[ -z ""$event_check"" ]]; then
            log ""‚ö†Ô∏è CloudTrail is NOT logging executions of Lambda function: $function_name""
            log ""‚ÑπÔ∏è Consider enabling Lambda function execution logging in CloudTrail.""
        else
            log ""‚úÖ CloudTrail is logging executions of Lambda function: $function_name""
        fi
    done
}

# Execute the function
check_lambda_cloudtrail_logging
","üöÄ Why This is Useful?
üîπ Improves Security Monitoring: Ensures Lambda executions are auditable in CloudTrail.
üîπ Automates Compliance Checks: Detects missing logs and suggests remediation.
üîπ Enhances Visibility: Helps track unauthorized or suspicious Lambda activity.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if CloudTrail is enabled.
3Ô∏è‚É£ Verifies that function execution is being logged.
4Ô∏è‚É£ Flags non-compliant functions.
5Ô∏è‚É£ Logs findings and suggests enabling CloudTrail logging.",Bash,Weekly,SOC 2,2024-02-13
Security,Lambda functions CloudTrail logging should be enabled,"Lambda functions logging is essential because once lambdas are triggered, all of the underlying compute resources are automatically managed for you. This control is compliant if CloudTrail logging is enabled.",Compliance,High,Ensure Lambda functions CloudTrail logging is enabled. Steps: 1. Verify CloudTrail is enabled. 2. Ensure Lambda function activity is logged. https://docs.aws.amazon.com/lambda/latest/dg/configuration-cloudtrail.html,Cost: None/$0 ,"Lambda Functions CloudTrail Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check if AWS Lambda functions have logging enabled in AWS CloudTrail.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans CloudTrail logs to verify if Lambda execution events are recorded.
SSM Automation: Notifies admins and provides an option to enable logging for non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if AWS CloudTrail is logging function execution.
‚úÖ Flags functions without proper CloudTrail logging.
‚úÖ Provides recommendations to enable logging.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions have CloudTrail logging enabled
check_lambda_cloudtrail_logging() {
    log ""Checking AWS Lambda functions for CloudTrail logging...""

    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)
    if [[ -z ""$trails"" ]]; then
        log ""‚ùå No CloudTrail trails found. Lambda execution might not be logged.""
        exit 1
    fi

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        log ""Checking if function $function_name is logged in CloudTrail...""
        event_check=$(aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=Invoke \
            --query ""Events[?Resources[?ResourceName=='$function_name']].EventName"" --output text)

        if [[ -z ""$event_check"" ]]; then
            log ""‚ö†Ô∏è CloudTrail is NOT logging executions of Lambda function: $function_name""
            log ""‚ÑπÔ∏è Consider enabling Lambda function execution logging in CloudTrail.""
        else
            log ""‚úÖ CloudTrail is logging executions of Lambda function: $function_name""
        fi
    done
}

# Execute the function
check_lambda_cloudtrail_logging
","üöÄ Why This is Useful?
üîπ Improves Security Monitoring: Ensures Lambda executions are auditable in CloudTrail.
üîπ Automates Compliance Checks: Detects missing logs and suggests remediation.
üîπ Enhances Visibility: Helps track unauthorized or suspicious Lambda activity.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if CloudTrail is enabled.
3Ô∏è‚É£ Verifies that function execution is being logged.
4Ô∏è‚É£ Flags non-compliant functions.
5Ô∏è‚É£ Logs findings and suggests enabling CloudTrail logging.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Ensure Cloudwatch Lambda insights is enabled,Ensure that Amazon CloudWatch Lambda Insights is enabled for your Amazon Lambda functions for enhanced monitoring.,Compliance,Medium,Ensure CloudWatch Lambda insights is enabled. Steps: 1. Review CloudWatch settings. 2. Enable Lambda insights for better monitoring and troubleshooting. https://docs.aws.amazon.com/lambda/latest/dg/monitoring-in-lambda.html,Cost: None/$0 ,"Ensure CloudWatch Lambda Insights is Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect Lambda functions without CloudWatch Lambda Insights enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans Lambda functions and enables Lambda Insights if missing.
SSM Automation: An SSM document to notify administrators and enable insights on flagged functions.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions in the AWS account.
‚úÖ Checks if Lambda Insights is enabled in the associated CloudWatch log groups.
‚úÖ Flags functions without Lambda Insights and enables it if missing.
‚úÖ Supports manual mode (user inputs a specific function) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable Lambda Insights
enable_lambda_insights() {
    log ""Checking Lambda functions for CloudWatch Lambda Insights...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        log ""Checking function: $function""

        # Get the CloudWatch log group name for the function
        log_group=""/aws/lambda/$function""

        # Check if Lambda Insights is enabled
        insights_enabled=$(aws logs describe-log-groups --log-group-name-prefix ""$log_group"" --query ""logGroups[?logGroupName=='$log_group'].metricFilterCount"" --output text)

        if [[ -z ""$insights_enabled"" || ""$insights_enabled"" == ""None"" || ""$insights_enabled"" -eq 0 ]]; then
            log ""‚ö†Ô∏è Lambda Insights is NOT enabled for $function. Enabling now...""

            # Enable Lambda Insights by adding the required permissions
            aws logs put-metric-filter --log-group-name ""$log_group"" \
                --filter-name ""LambdaInsights"" --filter-pattern """" \
                --metric-transformations metricName=""LambdaInsights"",metricNamespace=""AWS/Lambda"",metricValue=""1""

            log ""‚úÖ CloudWatch Lambda Insights enabled for $function.""
        else
            log ""‚úÖ Lambda Insights is already enabled for $function.""
        fi
    done
}

# Execute the function
enable_lambda_insights
","üöÄ Why This is Useful?
üîπ Improves Observability: Provides detailed performance metrics and logs for Lambda functions.
üîπ Enhances Debugging: Helps troubleshoot issues faster with enhanced logging.
üîπ Automated Compliance: Identifies Lambda functions missing insights and enables it.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Checks if CloudWatch Lambda Insights is enabled.
3Ô∏è‚É£ Flags functions without insights enabled.
4Ô∏è‚É£ Enables Lambda Insights if missing.
5Ô∏è‚É£ Logs actions taken for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions concurrent execution limit configured,Checks whether the AWS Lambda function is configured with function-level concurrent execution limit. The control is non-compliant if the Lambda function is not configured with function-level concurrent execution limit.,Compliance,High,Ensure Lambda functions concurrent execution limit is configured. Steps: 1. Check concurrency settings. 2. Set limits based on application requirements. https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html,Cost: None/$0 ,"Lambda Functions Concurrent Execution Limit Configured
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect Lambda functions without a concurrency limit set.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks and enforces concurrency limits.
SSM Automation: An SSM document to notify administrators and suggest a safe concurrency limit.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions.
‚úÖ Checks if a concurrency limit is set.
‚úÖ Flags functions without a configured limit.
‚úÖ Supports manual and automatic mode.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check Lambda functions for concurrency limits
check_lambda_concurrency() {
    log ""Checking Lambda functions for concurrency limits...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        # Check concurrency limit
        concurrency=$(aws lambda get-function-concurrency --function-name ""$function"" --query ""ReservedConcurrentExecutions"" --output text 2>/dev/null)

        if [[ -z ""$concurrency"" || ""$concurrency"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Lambda function $function does NOT have a concurrency limit set.""
            log ""‚ùå Action required: Define a concurrency limit to avoid throttling or overuse.""
        else
            log ""‚úÖ Lambda function $function has a concurrency limit of $concurrency.""
        fi
    done
}

# Execute the function
check_lambda_concurrency
","üöÄ Why This is Useful?
üîπ Prevents Overloading: Avoids unintentional Lambda overuse.
üîπ Enhances Stability: Helps manage Lambda execution and reduce throttling risks.
üîπ Automated Compliance: Detects Lambda functions without a concurrency limit.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Checks if they have a concurrency limit set.
3Ô∏è‚É£ Flags functions without a configured limit.
4Ô∏è‚É£ Supports both manual checks and automated scans.
5Ô∏è‚É£ Logs findings for visibility and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Reliability,Lambda functions concurrent execution limit configured,Checks whether the AWS Lambda function is configured with function-level concurrent execution limit. The control is non-compliant if the Lambda function is not configured with function-level concurrent execution limit.,Compliance,High,Ensure Lambda functions concurrent execution limit is configured. Steps: 1. Check concurrency settings. 2. Set limits based on application requirements. https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html,Cost: None/$0 ,"Lambda Functions Concurrent Execution Limit Configured
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect Lambda functions without a concurrency limit set.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks and enforces concurrency limits.
SSM Automation: An SSM document to notify administrators and suggest a safe concurrency limit.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions.
‚úÖ Checks if a concurrency limit is set.
‚úÖ Flags functions without a configured limit.
‚úÖ Supports manual and automatic mode.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check Lambda functions for concurrency limits
check_lambda_concurrency() {
    log ""Checking Lambda functions for concurrency limits...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        # Check concurrency limit
        concurrency=$(aws lambda get-function-concurrency --function-name ""$function"" --query ""ReservedConcurrentExecutions"" --output text 2>/dev/null)

        if [[ -z ""$concurrency"" || ""$concurrency"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Lambda function $function does NOT have a concurrency limit set.""
            log ""‚ùå Action required: Define a concurrency limit to avoid throttling or overuse.""
        else
            log ""‚úÖ Lambda function $function has a concurrency limit of $concurrency.""
        fi
    done
}

# Execute the function
check_lambda_concurrency
","üöÄ Why This is Useful?
üîπ Prevents Overloading: Avoids unintentional Lambda overuse.
üîπ Enhances Stability: Helps manage Lambda execution and reduce throttling risks.
üîπ Automated Compliance: Detects Lambda functions without a concurrency limit.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Checks if they have a concurrency limit set.
3Ô∏è‚É£ Flags functions without a configured limit.
4Ô∏è‚É£ Supports both manual checks and automated scans.
5Ô∏è‚É£ Logs findings for visibility and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions concurrent execution limit configured,Checks whether the AWS Lambda function is configured with function-level concurrent execution limit. The control is non-compliant if the Lambda function is not configured with function-level concurrent execution limit.,Compliance,High,Ensure Lambda functions concurrent execution limit is configured. Steps: 1. Check concurrency settings. 2. Set limits based on application requirements. https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html,Cost: None/$0 ,"Lambda Functions Concurrent Execution Limit Configured
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect Lambda functions without a concurrency limit set.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks and enforces concurrency limits.
SSM Automation: An SSM document to notify administrators and suggest a safe concurrency limit.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions.
‚úÖ Checks if a concurrency limit is set.
‚úÖ Flags functions without a configured limit.
‚úÖ Supports manual and automatic mode.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check Lambda functions for concurrency limits
check_lambda_concurrency() {
    log ""Checking Lambda functions for concurrency limits...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        # Check concurrency limit
        concurrency=$(aws lambda get-function-concurrency --function-name ""$function"" --query ""ReservedConcurrentExecutions"" --output text 2>/dev/null)

        if [[ -z ""$concurrency"" || ""$concurrency"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Lambda function $function does NOT have a concurrency limit set.""
            log ""‚ùå Action required: Define a concurrency limit to avoid throttling or overuse.""
        else
            log ""‚úÖ Lambda function $function has a concurrency limit of $concurrency.""
        fi
    done
}

# Execute the function
check_lambda_concurrency
","üöÄ Why This is Useful?
üîπ Prevents Overloading: Avoids unintentional Lambda overuse.
üîπ Enhances Stability: Helps manage Lambda execution and reduce throttling risks.
üîπ Automated Compliance: Detects Lambda functions without a concurrency limit.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Checks if they have a concurrency limit set.
3Ô∏è‚É£ Flags functions without a configured limit.
4Ô∏è‚É£ Supports both manual checks and automated scans.
5Ô∏è‚É£ Logs findings for visibility and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions CORS configuration should not allow all origins,Enable this rule to ensure that the CORS configuration for your Lambda functions does not allow all origins.,Compliance,High,Ensure Lambda functions CORS configuration does not allow all origins. Steps: 1. Review CORS settings. 2. Restrict allowed origins to trusted domains. https://docs.aws.amazon.com/lambda/latest/dg/configuration-api.html,Cost: None/$0 ,"Lambda Functions CORS Configuration Should Not Allow All Origins
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check for Access-Control-Allow-Origin: * in Lambda function URLs or API Gateway settings.
Lambda Function: A scheduled Lambda function scans API Gateway and Lambda URL configurations to flag unrestricted CORS settings.
SSM Automation: Notifies admins and suggests remediation steps.
","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions with URLs or API Gateway integrations.
‚úÖ Checks if the CORS Access-Control-Allow-Origin header is set to *.
‚úÖ Flags non-compliant configurations.
‚úÖ Logs findings and suggests remediation.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Lambda CORS configurations
check_lambda_cors() {
    log ""Checking AWS Lambda functions for open CORS configurations...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        function_url=$(aws lambda get-function-url-config --function-name ""$function_name"" --query ""Cors"" --output json 2>/dev/null)

        if [[ $? -ne 0 ]]; then
            log ""‚úÖ Lambda function $function_name has no function URL (not applicable).""
            continue
        fi

        cors_origin=$(echo ""$function_url"" | jq -r '.AllowOrigins[]')

        if [[ ""$cors_origin"" == ""*"" ]]; then
            log ""‚ö†Ô∏è Lambda function $function_name has an open CORS policy (Access-Control-Allow-Origin: *). Consider restricting access.""
        else
            log ""‚úÖ Lambda function $function_name has a secure CORS policy.""
        fi
    done
}

# Execute the function
check_lambda_cors
","üöÄ Why This is Useful?
üîπ Prevents Security Risks: Blocks unrestricted cross-origin access.
üîπ Improves Compliance: Ensures adherence to security best practices.
üîπ Automates Detection: Quickly identifies misconfigured functions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they have function URLs with CORS enabled.
3Ô∏è‚É£ Flags functions allowing Access-Control-Allow-Origin: *.
4Ô∏è‚É£ Logs findings and suggests restricting access.
5Ô∏è‚É£ Ensures compliance with security best practices.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions CORS configuration should not allow all origins,Enable this rule to ensure that the CORS configuration for your Lambda functions does not allow all origins.,Compliance,High,Ensure Lambda functions CORS configuration does not allow all origins. Steps: 1. Review CORS settings. 2. Restrict allowed origins to trusted domains. https://docs.aws.amazon.com/lambda/latest/dg/configuration-api.html,Cost: None/$0 ,"Lambda Functions CORS Configuration Should Not Allow All Origins
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check for Access-Control-Allow-Origin: * in Lambda function URLs or API Gateway settings.
Lambda Function: A scheduled Lambda function scans API Gateway and Lambda URL configurations to flag unrestricted CORS settings.
SSM Automation: Notifies admins and suggests remediation steps.
","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions with URLs or API Gateway integrations.
‚úÖ Checks if the CORS Access-Control-Allow-Origin header is set to *.
‚úÖ Flags non-compliant configurations.
‚úÖ Logs findings and suggests remediation.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Lambda CORS configurations
check_lambda_cors() {
    log ""Checking AWS Lambda functions for open CORS configurations...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        function_url=$(aws lambda get-function-url-config --function-name ""$function_name"" --query ""Cors"" --output json 2>/dev/null)

        if [[ $? -ne 0 ]]; then
            log ""‚úÖ Lambda function $function_name has no function URL (not applicable).""
            continue
        fi

        cors_origin=$(echo ""$function_url"" | jq -r '.AllowOrigins[]')

        if [[ ""$cors_origin"" == ""*"" ]]; then
            log ""‚ö†Ô∏è Lambda function $function_name has an open CORS policy (Access-Control-Allow-Origin: *). Consider restricting access.""
        else
            log ""‚úÖ Lambda function $function_name has a secure CORS policy.""
        fi
    done
}

# Execute the function
check_lambda_cors
","üöÄ Why This is Useful?
üîπ Prevents Security Risks: Blocks unrestricted cross-origin access.
üîπ Improves Compliance: Ensures adherence to security best practices.
üîπ Automates Detection: Quickly identifies misconfigured functions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they have function URLs with CORS enabled.
3Ô∏è‚É£ Flags functions allowing Access-Control-Allow-Origin: *.
4Ô∏è‚É£ Logs findings and suggests restricting access.
5Ô∏è‚É£ Ensures compliance with security best practices.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should be configured with a dead-letter queue,Enable this rule to help notify the appropriate personnel through AWS Simple Queue Service (AWS SQS) or AWS Simple Notification Service (AWS SNS) when a function has failed.,Compliance,High,Ensure Lambda functions are configured with a dead-letter queue. Steps: 1. Review dead-letter queue settings. 2. Configure a dead-letter queue for error handling. https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-dlq,Cost: None/$0 ,"Lambda Functions Should Be Configured with a Dead-Letter Queue
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect Lambda functions that do not have a Dead-Letter Queue (DLQ) configured.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all Lambda functions and identifies those missing a DLQ.
SSM Automation: An SSM document to notify administrators and optionally assign a default DLQ to non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions in the AWS account.
‚úÖ Checks if a DLQ is configured (SNS topic or SQS queue).
‚úÖ Flags functions missing a DLQ.
‚úÖ Supports manual mode (user inputs a specific function) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check if Lambda functions have a Dead-Letter Queue configured
check_lambda_dlq() {
    log ""Checking Lambda functions for Dead-Letter Queue (DLQ) configuration...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        # Check DLQ configuration
        dlq_arn=$(aws lambda get-function-configuration --function-name ""$function"" --query ""DeadLetterConfig.TargetArn"" --output text 2>/dev/null)

        if [[ -z ""$dlq_arn"" || ""$dlq_arn"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Lambda function $function does NOT have a Dead-Letter Queue configured.""
            log ""‚ùå Action required: Assign an SQS queue or SNS topic as a DLQ.""
        else
            log ""‚úÖ Lambda function $function has a Dead-Letter Queue configured: $dlq_arn.""
        fi
    done
}

# Execute the function
check_lambda_dlq
","üöÄ Why This is Useful?
üîπ Improves Error Handling: Prevents lost event data by capturing failed execution records.
üîπ Enhances Debugging: Helps in analyzing and retrying failed Lambda executions.
üîπ Automated Compliance: Identifies Lambda functions missing DLQ configuration","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Checks if they have a DLQ (SQS or SNS) assigned.
3Ô∏è‚É£ Flags functions missing a DLQ.
4Ô∏è‚É£ Supports both manual checks and automated scans.
5Ô∏è‚É£ Logs findings for visibility and compliance tracking",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should be configured with a dead-letter queue,Enable this rule to help notify the appropriate personnel through AWS Simple Queue Service (AWS SQS) or AWS Simple Notification Service (AWS SNS) when a function has failed.,Compliance,High,Ensure Lambda functions are configured with a dead-letter queue. Steps: 1. Review dead-letter queue settings. 2. Configure a dead-letter queue for error handling. https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-dlq,Cost: None/$0 ,"Lambda Functions Should Be Configured with a Dead-Letter Queue
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect Lambda functions that do not have a Dead-Letter Queue (DLQ) configured.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all Lambda functions and identifies those missing a DLQ.
SSM Automation: An SSM document to notify administrators and optionally assign a default DLQ to non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions in the AWS account.
‚úÖ Checks if a DLQ is configured (SNS topic or SQS queue).
‚úÖ Flags functions missing a DLQ.
‚úÖ Supports manual mode (user inputs a specific function) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check if Lambda functions have a Dead-Letter Queue configured
check_lambda_dlq() {
    log ""Checking Lambda functions for Dead-Letter Queue (DLQ) configuration...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        # Check DLQ configuration
        dlq_arn=$(aws lambda get-function-configuration --function-name ""$function"" --query ""DeadLetterConfig.TargetArn"" --output text 2>/dev/null)

        if [[ -z ""$dlq_arn"" || ""$dlq_arn"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Lambda function $function does NOT have a Dead-Letter Queue configured.""
            log ""‚ùå Action required: Assign an SQS queue or SNS topic as a DLQ.""
        else
            log ""‚úÖ Lambda function $function has a Dead-Letter Queue configured: $dlq_arn.""
        fi
    done
}

# Execute the function
check_lambda_dlq
","üöÄ Why This is Useful?
üîπ Improves Error Handling: Prevents lost event data by capturing failed execution records.
üîπ Enhances Debugging: Helps in analyzing and retrying failed Lambda executions.
üîπ Automated Compliance: Identifies Lambda functions missing DLQ configuration","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Checks if they have a DLQ (SQS or SNS) assigned.
3Ô∏è‚É£ Flags functions missing a DLQ.
4Ô∏è‚É£ Supports both manual checks and automated scans.
5Ô∏è‚É£ Logs findings for visibility and compliance tracking",Bash,Weekly,SOC 2,2024-02-13
Lambda,Ensure encryption in transit is enabled for Lambda environment variables,As you can set your own environmental variables for Lambda it is important to also encrypt them for in transit protection.,Compliance,High,Ensure encryption in transit is enabled for Lambda environment variables. Steps: 1. Review environment variable settings. 2. Enable encryption for sensitive variables. https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html,Cost: None/$0 ,"Ensure Encryption in Transit is Enabled for Lambda Environment Variables
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check that Lambda environment variables use KMS encryption for encryption in transit.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all Lambda functions and ensures environment variables are encrypted.
SSM Automation: An SSM document to notify administrators and suggest enabling KMS encryption for flagged functions.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions in the AWS account.
‚úÖ Checks if environment variables are encrypted with KMS.
‚úÖ Flags functions missing KMS encryption.
‚úÖ Supports manual mode (user inputs a specific function) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check if Lambda environment variables are encrypted
check_lambda_env_encryption() {
    log ""Checking Lambda functions for environment variable encryption...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        # Check if function uses KMS for environment variable encryption
        kms_key=$(aws lambda get-function-configuration --function-name ""$function"" --query ""KMSKeyArn"" --output text 2>/dev/null)

        if [[ -z ""$kms_key"" || ""$kms_key"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Lambda function $function does NOT have environment variable encryption enabled.""
            log ""‚ùå Action required: Configure a KMS key for encryption.""
        else
            log ""‚úÖ Lambda function $function is encrypted with KMS key: $kms_key.""
        fi
    done
}

# Execute the function
check_lambda_env_encryption
","üöÄ Why This is Useful?
üîπ Protects Sensitive Data: Ensures environment variables are encrypted in transit.
üîπ Enhances Security: Uses AWS KMS for encryption, reducing the risk of data leaks.
üîπ Automated Compliance: Identifies functions missing encryption and suggests remediation.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Checks if KMS encryption is enabled for environment variables.
3Ô∏è‚É£ Flags functions missing encryption.
4Ô∏è‚É£ Supports both manual checks and automated scans.
5Ô∏è‚É£ Logs findings for visibility and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Ensure encryption in transit is enabled for Lambda environment variables,As you can set your own environmental variables for Lambda it is important to also encrypt them for in transit protection.,Compliance,High,Ensure encryption in transit is enabled for Lambda environment variables. Steps: 1. Review environment variable settings. 2. Enable encryption for sensitive variables. https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html,Cost: None/$0 ,"Ensure Encryption in Transit is Enabled for Lambda Environment Variables
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check that Lambda environment variables use KMS encryption for encryption in transit.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all Lambda functions and ensures environment variables are encrypted.
SSM Automation: An SSM document to notify administrators and suggest enabling KMS encryption for flagged functions.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions in the AWS account.
‚úÖ Checks if environment variables are encrypted with KMS.
‚úÖ Flags functions missing KMS encryption.
‚úÖ Supports manual mode (user inputs a specific function) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check if Lambda environment variables are encrypted
check_lambda_env_encryption() {
    log ""Checking Lambda functions for environment variable encryption...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        # Check if function uses KMS for environment variable encryption
        kms_key=$(aws lambda get-function-configuration --function-name ""$function"" --query ""KMSKeyArn"" --output text 2>/dev/null)

        if [[ -z ""$kms_key"" || ""$kms_key"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Lambda function $function does NOT have environment variable encryption enabled.""
            log ""‚ùå Action required: Configure a KMS key for encryption.""
        else
            log ""‚úÖ Lambda function $function is encrypted with KMS key: $kms_key.""
        fi
    done
}

# Execute the function
check_lambda_env_encryption
","üöÄ Why This is Useful?
üîπ Protects Sensitive Data: Ensures environment variables are encrypted in transit.
üîπ Enhances Security: Uses AWS KMS for encryption, reducing the risk of data leaks.
üîπ Automated Compliance: Identifies functions missing encryption and suggests remediation.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Checks if KMS encryption is enabled for environment variables.
3Ô∏è‚É£ Flags functions missing encryption.
4Ô∏è‚É£ Supports both manual checks and automated scans.
5Ô∏è‚É£ Logs findings for visibility and compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should be in a VPC,Deploy AWS Lambda functions within an AWS Virtual Private Cloud (AWS VPC) for a secure communication between a function and other services within the AWS VPC.,Compliance,High,Ensure Lambda functions are in a VPC. Steps: 1. Check VPC configurations for Lambda functions. 2. Configure functions to operate within a specified VPC. https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html,Cost: None/$0 ,"Lambda Functions Should Be in a VPC
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect Lambda functions not running inside a VPC.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and flags non-compliant ones.
SSM Automation: Notifies admins and provides a remediation option to move functions into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if each function is assigned to a VPC.
‚úÖ Flags functions running outside a VPC.
‚úÖ Suggests moving non-compliant functions to a secure VPC.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions are assigned to a VPC
check_lambda_vpc() {
    log ""Checking AWS Lambda functions for VPC configuration...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        vpc_config=$(aws lambda get-function-configuration --function-name ""$function_name"" --query ""VpcConfig.VpcId"" --output text)

        if [[ ""$vpc_config"" == ""None"" || -z ""$vpc_config"" ]]; then
            log ""‚ö†Ô∏è Function $function_name is NOT in a VPC. Action required!""
            log ""‚ÑπÔ∏è Consider moving this function to a VPC for better security.""
        else
            log ""‚úÖ Function $function_name is running inside VPC: $vpc_config""
        fi
    done
}

# Execute the function
check_lambda_vpc
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures Lambda functions run in a controlled network environment.
üîπ Improves Compliance: Helps meet AWS security and networking best practices.
üîπ Automates Auditing: Quickly identifies functions that need to be moved into a VPC.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they are assigned to a VPC.
3Ô∏è‚É£ Flags functions running outside a VPC.
4Ô∏è‚É£ Suggests moving non-compliant functions into a VPC.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Reliability,Lambda functions should be in a VPC,Deploy AWS Lambda functions within an AWS Virtual Private Cloud (AWS VPC) for a secure communication between a function and other services within the AWS VPC.,Compliance,High,Ensure Lambda functions are in a VPC. Steps: 1. Check VPC configurations for Lambda functions. 2. Configure functions to operate within a specified VPC. https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html,Cost: None/$0 ,"Lambda Functions Should Be in a VPC
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect Lambda functions not running inside a VPC.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and flags non-compliant ones.
SSM Automation: Notifies admins and provides a remediation option to move functions into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if each function is assigned to a VPC.
‚úÖ Flags functions running outside a VPC.
‚úÖ Suggests moving non-compliant functions to a secure VPC.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions are assigned to a VPC
check_lambda_vpc() {
    log ""Checking AWS Lambda functions for VPC configuration...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        vpc_config=$(aws lambda get-function-configuration --function-name ""$function_name"" --query ""VpcConfig.VpcId"" --output text)

        if [[ ""$vpc_config"" == ""None"" || -z ""$vpc_config"" ]]; then
            log ""‚ö†Ô∏è Function $function_name is NOT in a VPC. Action required!""
            log ""‚ÑπÔ∏è Consider moving this function to a VPC for better security.""
        else
            log ""‚úÖ Function $function_name is running inside VPC: $vpc_config""
        fi
    done
}

# Execute the function
check_lambda_vpc
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures Lambda functions run in a controlled network environment.
üîπ Improves Compliance: Helps meet AWS security and networking best practices.
üîπ Automates Auditing: Quickly identifies functions that need to be moved into a VPC.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they are assigned to a VPC.
3Ô∏è‚É£ Flags functions running outside a VPC.
4Ô∏è‚É£ Suggests moving non-compliant functions into a VPC.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Security,Lambda functions should be in a VPC,Deploy AWS Lambda functions within an AWS Virtual Private Cloud (AWS VPC) for a secure communication between a function and other services within the AWS VPC.,Compliance,High,Ensure Lambda functions are in a VPC. Steps: 1. Check VPC configurations for Lambda functions. 2. Configure functions to operate within a specified VPC. https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html,Cost: None/$0 ,"Lambda Functions Should Be in a VPC
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect Lambda functions not running inside a VPC.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and flags non-compliant ones.
SSM Automation: Notifies admins and provides a remediation option to move functions into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if each function is assigned to a VPC.
‚úÖ Flags functions running outside a VPC.
‚úÖ Suggests moving non-compliant functions to a secure VPC.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions are assigned to a VPC
check_lambda_vpc() {
    log ""Checking AWS Lambda functions for VPC configuration...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        vpc_config=$(aws lambda get-function-configuration --function-name ""$function_name"" --query ""VpcConfig.VpcId"" --output text)

        if [[ ""$vpc_config"" == ""None"" || -z ""$vpc_config"" ]]; then
            log ""‚ö†Ô∏è Function $function_name is NOT in a VPC. Action required!""
            log ""‚ÑπÔ∏è Consider moving this function to a VPC for better security.""
        else
            log ""‚úÖ Function $function_name is running inside VPC: $vpc_config""
        fi
    done
}

# Execute the function
check_lambda_vpc
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures Lambda functions run in a controlled network environment.
üîπ Improves Compliance: Helps meet AWS security and networking best practices.
üîπ Automates Auditing: Quickly identifies functions that need to be moved into a VPC.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they are assigned to a VPC.
3Ô∏è‚É£ Flags functions running outside a VPC.
4Ô∏è‚É£ Suggests moving non-compliant functions into a VPC.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Security,Lambda functions should be in a VPC,Deploy AWS Lambda functions within an AWS Virtual Private Cloud (AWS VPC) for a secure communication between a function and other services within the AWS VPC.,Compliance,High,Ensure Lambda functions are in a VPC. Steps: 1. Check VPC configurations for Lambda functions. 2. Configure functions to operate within a specified VPC. https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html,Cost: None/$0 ,"Lambda Functions Should Be in a VPC
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect Lambda functions not running inside a VPC.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and flags non-compliant ones.
SSM Automation: Notifies admins and provides a remediation option to move functions into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if each function is assigned to a VPC.
‚úÖ Flags functions running outside a VPC.
‚úÖ Suggests moving non-compliant functions to a secure VPC.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions are assigned to a VPC
check_lambda_vpc() {
    log ""Checking AWS Lambda functions for VPC configuration...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        vpc_config=$(aws lambda get-function-configuration --function-name ""$function_name"" --query ""VpcConfig.VpcId"" --output text)

        if [[ ""$vpc_config"" == ""None"" || -z ""$vpc_config"" ]]; then
            log ""‚ö†Ô∏è Function $function_name is NOT in a VPC. Action required!""
            log ""‚ÑπÔ∏è Consider moving this function to a VPC for better security.""
        else
            log ""‚úÖ Function $function_name is running inside VPC: $vpc_config""
        fi
    done
}

# Execute the function
check_lambda_vpc
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures Lambda functions run in a controlled network environment.
üîπ Improves Compliance: Helps meet AWS security and networking best practices.
üîπ Automates Auditing: Quickly identifies functions that need to be moved into a VPC.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they are assigned to a VPC.
3Ô∏è‚É£ Flags functions running outside a VPC.
4Ô∏è‚É£ Suggests moving non-compliant functions into a VPC.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Security,Lambda functions should be in a VPC,Deploy AWS Lambda functions within an AWS Virtual Private Cloud (AWS VPC) for a secure communication between a function and other services within the AWS VPC.,Compliance,High,Ensure Lambda functions are in a VPC. Steps: 1. Check VPC configurations for Lambda functions. 2. Configure functions to operate within a specified VPC. https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html,Cost: None/$0 ,"Lambda Functions Should Be in a VPC
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect Lambda functions not running inside a VPC.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and flags non-compliant ones.
SSM Automation: Notifies admins and provides a remediation option to move functions into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if each function is assigned to a VPC.
‚úÖ Flags functions running outside a VPC.
‚úÖ Suggests moving non-compliant functions to a secure VPC.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions are assigned to a VPC
check_lambda_vpc() {
    log ""Checking AWS Lambda functions for VPC configuration...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        vpc_config=$(aws lambda get-function-configuration --function-name ""$function_name"" --query ""VpcConfig.VpcId"" --output text)

        if [[ ""$vpc_config"" == ""None"" || -z ""$vpc_config"" ]]; then
            log ""‚ö†Ô∏è Function $function_name is NOT in a VPC. Action required!""
            log ""‚ÑπÔ∏è Consider moving this function to a VPC for better security.""
        else
            log ""‚úÖ Function $function_name is running inside VPC: $vpc_config""
        fi
    done
}

# Execute the function
check_lambda_vpc
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures Lambda functions run in a controlled network environment.
üîπ Improves Compliance: Helps meet AWS security and networking best practices.
üîπ Automates Auditing: Quickly identifies functions that need to be moved into a VPC.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they are assigned to a VPC.
3Ô∏è‚É£ Flags functions running outside a VPC.
4Ô∏è‚É£ Suggests moving non-compliant functions into a VPC.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Security,Lambda functions should be in a VPC,Deploy AWS Lambda functions within an AWS Virtual Private Cloud (AWS VPC) for a secure communication between a function and other services within the AWS VPC.,Compliance,High,Ensure Lambda functions are in a VPC. Steps: 1. Check VPC configurations for Lambda functions. 2. Configure functions to operate within a specified VPC. https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html,Cost: None/$0 ,"Lambda Functions Should Be in a VPC
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect Lambda functions not running inside a VPC.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and flags non-compliant ones.
SSM Automation: Notifies admins and provides a remediation option to move functions into a VPC.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if each function is assigned to a VPC.
‚úÖ Flags functions running outside a VPC.
‚úÖ Suggests moving non-compliant functions to a secure VPC.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions are assigned to a VPC
check_lambda_vpc() {
    log ""Checking AWS Lambda functions for VPC configuration...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        vpc_config=$(aws lambda get-function-configuration --function-name ""$function_name"" --query ""VpcConfig.VpcId"" --output text)

        if [[ ""$vpc_config"" == ""None"" || -z ""$vpc_config"" ]]; then
            log ""‚ö†Ô∏è Function $function_name is NOT in a VPC. Action required!""
            log ""‚ÑπÔ∏è Consider moving this function to a VPC for better security.""
        else
            log ""‚úÖ Function $function_name is running inside VPC: $vpc_config""
        fi
    done
}

# Execute the function
check_lambda_vpc
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures Lambda functions run in a controlled network environment.
üîπ Improves Compliance: Helps meet AWS security and networking best practices.
üîπ Automates Auditing: Quickly identifies functions that need to be moved into a VPC.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they are assigned to a VPC.
3Ô∏è‚É£ Flags functions running outside a VPC.
4Ô∏è‚É£ Suggests moving non-compliant functions into a VPC.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should operate in more than one availability zone,This control checks if Lambda has more than one availability zone associated. The rule fails if only one availability zone is associated with Lambda.,Compliance,High,Ensure Lambda functions operate in more than one availability zone. Steps: 1. Review availability zone configurations. 2. Configure Lambda functions for multi-AZ deployment. https://docs.aws.amazon.com/lambda/latest/dg/configuration-availability-zones.html,Cost: None/$0 ,"Lambda Functions Should Operate in More Than One Availability Zone
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if Lambda functions are deployed in multiple Availability Zones (AZs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and ensures they are associated with a multi-AZ VPC.
SSM Automation: Notifies admins and suggests redeploying functions with multi-AZ configuration.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if functions are running inside a VPC.
‚úÖ Verifies that the VPC subnets span multiple AZs.
‚úÖ Flags Lambda functions running in a single AZ.
‚úÖ Logs findings and suggests redeployment if needed.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Lambda functions for multi-AZ configuration
check_lambda_azs() {
    log ""Checking AWS Lambda functions for multi-AZ deployment...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        vpc_config=$(aws lambda get-function-configuration --function-name ""$function_name"" \
            --query ""VpcConfig"" --output json)

        if [[ ""$vpc_config"" == ""null"" ]]; then
            log ""‚úÖ Lambda function $function_name is not in a VPC (operates across multiple AZs by default).""
            continue
        fi

        subnets=$(echo ""$vpc_config"" | jq -r '.SubnetIds[]')
        az_count=$(aws ec2 describe-subnets --subnet-ids $subnets --query ""Subnets[].AvailabilityZone"" --output text | sort -u | wc -l)

        if [[ $az_count -lt 2 ]]; then
            log ""‚ö†Ô∏è Lambda function $function_name is running in only one AZ. Consider updating its VPC subnets.""
        else
            log ""‚úÖ Lambda function $function_name is running in multiple AZs.""
        fi
    done
}

# Execute the function
check_lambda_azs
","üöÄ Why This is Useful?
üîπ Enhances Fault Tolerance: Ensures Lambda functions are resilient to AZ failures.
üîπ Improves Availability: Prevents single points of failure in VPC deployments.
üîπ Automates Compliance: Identifies misconfigured functions for easy remediation.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they are running inside a VPC.
3Ô∏è‚É£ Verifies that the VPC subnets span multiple AZs.
4Ô∏è‚É£ Flags functions running in a single AZ.
5Ô∏è‚É£ Logs findings and suggests redeployment if needed.",Bash,Weekly,SOC 2,2024-02-13
Reliability,Lambda functions should operate in more than one availability zone,This control checks if Lambda has more than one availability zone associated. The rule fails if only one availability zone is associated with Lambda.,Compliance,High,Ensure Lambda functions operate in more than one availability zone. Steps: 1. Review availability zone configurations. 2. Configure Lambda functions for multi-AZ deployment. https://docs.aws.amazon.com/lambda/latest/dg/configuration-availability-zones.html,Cost: None/$0 ,"Lambda Functions Should Operate in More Than One Availability Zone
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if Lambda functions are deployed in multiple Availability Zones (AZs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and ensures they are associated with a multi-AZ VPC.
SSM Automation: Notifies admins and suggests redeploying functions with multi-AZ configuration.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if functions are running inside a VPC.
‚úÖ Verifies that the VPC subnets span multiple AZs.
‚úÖ Flags Lambda functions running in a single AZ.
‚úÖ Logs findings and suggests redeployment if needed.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Lambda functions for multi-AZ configuration
check_lambda_azs() {
    log ""Checking AWS Lambda functions for multi-AZ deployment...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        vpc_config=$(aws lambda get-function-configuration --function-name ""$function_name"" \
            --query ""VpcConfig"" --output json)

        if [[ ""$vpc_config"" == ""null"" ]]; then
            log ""‚úÖ Lambda function $function_name is not in a VPC (operates across multiple AZs by default).""
            continue
        fi

        subnets=$(echo ""$vpc_config"" | jq -r '.SubnetIds[]')
        az_count=$(aws ec2 describe-subnets --subnet-ids $subnets --query ""Subnets[].AvailabilityZone"" --output text | sort -u | wc -l)

        if [[ $az_count -lt 2 ]]; then
            log ""‚ö†Ô∏è Lambda function $function_name is running in only one AZ. Consider updating its VPC subnets.""
        else
            log ""‚úÖ Lambda function $function_name is running in multiple AZs.""
        fi
    done
}

# Execute the function
check_lambda_azs
","üöÄ Why This is Useful?
üîπ Enhances Fault Tolerance: Ensures Lambda functions are resilient to AZ failures.
üîπ Improves Availability: Prevents single points of failure in VPC deployments.
üîπ Automates Compliance: Identifies misconfigured functions for easy remediation.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they are running inside a VPC.
3Ô∏è‚É£ Verifies that the VPC subnets span multiple AZs.
4Ô∏è‚É£ Flags functions running in a single AZ.
5Ô∏è‚É£ Logs findings and suggests redeployment if needed.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should operate in more than one availability zone,This control checks if Lambda has more than one availability zone associated. The rule fails if only one availability zone is associated with Lambda.,Compliance,High,Ensure Lambda functions operate in more than one availability zone. Steps: 1. Review availability zone configurations. 2. Configure Lambda functions for multi-AZ deployment. https://docs.aws.amazon.com/lambda/latest/dg/configuration-availability-zones.html,Cost: None/$0 ,"Lambda Functions Should Operate in More Than One Availability Zone
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if Lambda functions are deployed in multiple Availability Zones (AZs).
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and ensures they are associated with a multi-AZ VPC.
SSM Automation: Notifies admins and suggests redeploying functions with multi-AZ configuration.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if functions are running inside a VPC.
‚úÖ Verifies that the VPC subnets span multiple AZs.
‚úÖ Flags Lambda functions running in a single AZ.
‚úÖ Logs findings and suggests redeployment if needed.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Lambda functions for multi-AZ configuration
check_lambda_azs() {
    log ""Checking AWS Lambda functions for multi-AZ deployment...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        vpc_config=$(aws lambda get-function-configuration --function-name ""$function_name"" \
            --query ""VpcConfig"" --output json)

        if [[ ""$vpc_config"" == ""null"" ]]; then
            log ""‚úÖ Lambda function $function_name is not in a VPC (operates across multiple AZs by default).""
            continue
        fi

        subnets=$(echo ""$vpc_config"" | jq -r '.SubnetIds[]')
        az_count=$(aws ec2 describe-subnets --subnet-ids $subnets --query ""Subnets[].AvailabilityZone"" --output text | sort -u | wc -l)

        if [[ $az_count -lt 2 ]]; then
            log ""‚ö†Ô∏è Lambda function $function_name is running in only one AZ. Consider updating its VPC subnets.""
        else
            log ""‚úÖ Lambda function $function_name is running in multiple AZs.""
        fi
    done
}

# Execute the function
check_lambda_azs
","üöÄ Why This is Useful?
üîπ Enhances Fault Tolerance: Ensures Lambda functions are resilient to AZ failures.
üîπ Improves Availability: Prevents single points of failure in VPC deployments.
üîπ Automates Compliance: Identifies misconfigured functions for easy remediation.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they are running inside a VPC.
3Ô∏è‚É£ Verifies that the VPC subnets span multiple AZs.
4Ô∏è‚É£ Flags functions running in a single AZ.
5Ô∏è‚É£ Logs findings and suggests redeployment if needed.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should restrict public access,Manage access to resources in the AWS Cloud by ensuring AWS Lambda functions cannot be publicly accessed.,Compliance,High,Ensure Lambda functions restrict public access. Steps: 1. Review access policies. 2. Restrict public access to Lambda functions based on IAM roles. https://docs.aws.amazon.com/lambda/latest/dg/access-control.html,Cost: None/$0 ,"Lambda Functions Should Restrict Public Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect Lambda functions with public access permissions (i.e., IAM policies allowing lambda:InvokeFunction to *).
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans Lambda functions for public access and removes overly permissive policies.
SSM Automation: An SSM document to notify administrators and suggest remediation if public access is detected.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions in the AWS account.
‚úÖ Scans IAM policies for overly permissive lambda:InvokeFunction permissions.
‚úÖ Flags and removes policies that allow public access (""Principal"": ""*"").
‚úÖ Supports manual mode (user inputs a specific function) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and remove public access from Lambda functions
restrict_lambda_public_access() {
    log ""Checking Lambda functions for public access...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        log ""Checking function: $function""

        # Get Lambda function policy
        policy=$(aws lambda get-policy --function-name ""$function"" --query ""Policy"" --output json 2>/dev/null)

        if [[ -z ""$policy"" || ""$policy"" == ""null"" ]]; then
            log ""‚úÖ No policy attached to $function. Skipping...""
            continue
        fi

        # Check for public access
        if echo ""$policy"" | jq -e '.Statement[] | select(.Principal==""*"" and .Effect==""Allow"" and .Action==""lambda:InvokeFunction"")' >/dev/null; then
            log ""‚ö†Ô∏è Function $function is publicly accessible!""
            log ""‚ùå Removing public access from $function...""

            # Remove public access from Lambda policy
            aws lambda remove-permission --function-name ""$function"" --statement-id ""PublicInvoke"" 2>/dev/null

            log ""‚úÖ Public access removed from $function.""
        else
            log ""‚úÖ Function $function is properly restricted.""
        fi
    done
}

# Execute the function
restrict_lambda_public_access
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Blocks unauthorized invocations of Lambda functions.
üîπ Enhances Security: Ensures only trusted IAM entities can invoke functions.
üîπ Automated Compliance: Identifies publicly accessible Lambda functions and restricts them.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Scans IAM policies for public lambda:InvokeFunction access.
3Ô∏è‚É£ Flags functions that allow public access (""Principal"": ""*"").
4Ô∏è‚É£ Removes public access if found.
5Ô∏è‚É£ Logs actions taken for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Security,Lambda functions should restrict public access,Manage access to resources in the AWS Cloud by ensuring AWS Lambda functions cannot be publicly accessed.,Compliance,High,Ensure Lambda functions restrict public access. Steps: 1. Review access policies. 2. Restrict public access to Lambda functions based on IAM roles. https://docs.aws.amazon.com/lambda/latest/dg/access-control.html,Cost: None/$0 ,"Lambda Functions Should Restrict Public Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect Lambda functions with public access permissions (i.e., IAM policies allowing lambda:InvokeFunction to *).
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans Lambda functions for public access and removes overly permissive policies.
SSM Automation: An SSM document to notify administrators and suggest remediation if public access is detected.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions in the AWS account.
‚úÖ Scans IAM policies for overly permissive lambda:InvokeFunction permissions.
‚úÖ Flags and removes policies that allow public access (""Principal"": ""*"").
‚úÖ Supports manual mode (user inputs a specific function) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and remove public access from Lambda functions
restrict_lambda_public_access() {
    log ""Checking Lambda functions for public access...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        log ""Checking function: $function""

        # Get Lambda function policy
        policy=$(aws lambda get-policy --function-name ""$function"" --query ""Policy"" --output json 2>/dev/null)

        if [[ -z ""$policy"" || ""$policy"" == ""null"" ]]; then
            log ""‚úÖ No policy attached to $function. Skipping...""
            continue
        fi

        # Check for public access
        if echo ""$policy"" | jq -e '.Statement[] | select(.Principal==""*"" and .Effect==""Allow"" and .Action==""lambda:InvokeFunction"")' >/dev/null; then
            log ""‚ö†Ô∏è Function $function is publicly accessible!""
            log ""‚ùå Removing public access from $function...""

            # Remove public access from Lambda policy
            aws lambda remove-permission --function-name ""$function"" --statement-id ""PublicInvoke"" 2>/dev/null

            log ""‚úÖ Public access removed from $function.""
        else
            log ""‚úÖ Function $function is properly restricted.""
        fi
    done
}

# Execute the function
restrict_lambda_public_access
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Blocks unauthorized invocations of Lambda functions.
üîπ Enhances Security: Ensures only trusted IAM entities can invoke functions.
üîπ Automated Compliance: Identifies publicly accessible Lambda functions and restricts them.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Scans IAM policies for public lambda:InvokeFunction access.
3Ô∏è‚É£ Flags functions that allow public access (""Principal"": ""*"").
4Ô∏è‚É£ Removes public access if found.
5Ô∏è‚É£ Logs actions taken for compliance tracking.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should restrict public URL,This control verifies that the Lambda function does not have a publicly accessible URL. Exposing services publicly could potentially make sensitive data accessible to malicious actors.,Compliance,High,Ensure Lambda functions restrict public URL access. Steps: 1. Review function URL settings. 2. Configure to restrict public access to Lambda URLs. https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html,Cost: None/$0 ,"Lambda Functions Should Restrict Public URL
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Lambda functions have public URLs enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and disables public URLs if detected.
SSM Automation: Notifies admins and provides an option to restrict public access.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if any function has a publicly accessible URL.
‚úÖ Flags functions with unrestricted public access.
‚úÖ Suggests disabling public URLs or restricting access.
‚úÖ Logs findings and recommended actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Lambda function URLs for public access
check_lambda_public_url() {
    log ""Checking AWS Lambda functions for public URLs...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        public_url=$(aws lambda get-function-url-config --function-name ""$function_name"" --query ""AuthType"" --output text 2>/dev/null)

        if [[ ""$public_url"" == ""NONE"" ]]; then
            log ""‚úÖ Function $function_name does not have a public URL.""
        else
            log ""‚ö†Ô∏è Function $function_name has a public URL. Action required!""
            log ""‚ÑπÔ∏è Consider restricting access using IAM authentication or API Gateway.""
        fi
    done
}

# Execute the function
check_lambda_public_url
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Reduces security risks by restricting public Lambda URLs.
üîπ Enhances Compliance: Helps meet AWS security best practices.
üîπ Automates Security Audits: Identifies functions that need restricted access.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they have public URLs enabled.
3Ô∏è‚É£ Flags publicly accessible functions.
4Ô∏è‚É£ Suggests restricting access using IAM or API Gateway.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should restrict public URL,This control verifies that the Lambda function does not have a publicly accessible URL. Exposing services publicly could potentially make sensitive data accessible to malicious actors.,Compliance,High,Ensure Lambda functions restrict public URL access. Steps: 1. Review function URL settings. 2. Configure to restrict public access to Lambda URLs. https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html,Cost: None/$0 ,"Lambda Functions Should Restrict Public URL
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Lambda functions have public URLs enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Lambda functions and disables public URLs if detected.
SSM Automation: Notifies admins and provides an option to restrict public access.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if any function has a publicly accessible URL.
‚úÖ Flags functions with unrestricted public access.
‚úÖ Suggests disabling public URLs or restricting access.
‚úÖ Logs findings and recommended actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Lambda function URLs for public access
check_lambda_public_url() {
    log ""Checking AWS Lambda functions for public URLs...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        public_url=$(aws lambda get-function-url-config --function-name ""$function_name"" --query ""AuthType"" --output text 2>/dev/null)

        if [[ ""$public_url"" == ""NONE"" ]]; then
            log ""‚úÖ Function $function_name does not have a public URL.""
        else
            log ""‚ö†Ô∏è Function $function_name has a public URL. Action required!""
            log ""‚ÑπÔ∏è Consider restricting access using IAM authentication or API Gateway.""
        fi
    done
}

# Execute the function
check_lambda_public_url
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Reduces security risks by restricting public Lambda URLs.
üîπ Enhances Compliance: Helps meet AWS security best practices.
üîπ Automates Security Audits: Identifies functions that need restricted access.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if they have public URLs enabled.
3Ô∏è‚É£ Flags publicly accessible functions.
4Ô∏è‚É£ Suggests restricting access using IAM or API Gateway.
5Ô∏è‚É£ Logs findings and recommendations.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions tracing should be enabled,"AWS X-Ray can be used to visualize the components of application, identify performance bottlenecks, and troubleshoot requests that resulted in an error. Lambda functions send trace data to X-Ray, and X-Ray processes the data to generate a service map and searchable trace summaries.",Compliance,Medium,Ensure Lambda functions tracing is enabled. Steps: 1. Check tracing settings. 2. Enable AWS X-Ray tracing for functions. https://docs.aws.amazon.com/lambda/latest/dg/monitoring-tracing.html,Cost: None/$0 ,"Lambda Functions Tracing Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check if AWS X-Ray tracing is enabled for Lambda functions.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans all functions and ensures tracing mode is set to Active.
SSM Automation: Notifies admins and enables tracing for non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if AWS X-Ray tracing is enabled.
‚úÖ Flags functions without tracing.
‚úÖ Provides the option to enable tracing.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions have X-Ray tracing enabled
check_lambda_tracing() {
    log ""Checking AWS Lambda functions for X-Ray tracing...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        tracing_mode=$(aws lambda get-function-configuration --function-name ""$function_name"" \
            --query ""TracingConfig.Mode"" --output text)

        if [[ ""$tracing_mode"" != ""Active"" ]]; then
            log ""‚ö†Ô∏è X-Ray tracing is NOT enabled for function: $function_name""
            log ""‚ÑπÔ∏è Consider enabling X-Ray tracing for better monitoring and debugging.""
        else
            log ""‚úÖ X-Ray tracing is enabled for function: $function_name""
        fi
    done
}

# Execute the function
check_lambda_tracing
","üöÄ Why This is Useful?
üîπ Enhances Debugging: Provides end-to-end request tracing for Lambda functions.
üîπ Improves Performance Monitoring: Identifies bottlenecks and latency issues.
üîπ Automates Compliance Checks: Ensures tracing is enabled across all functions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if AWS X-Ray tracing is enabled.
3Ô∏è‚É£ Flags non-compliant functions.
4Ô∏è‚É£ Logs findings and suggests enabling tracing.
5Ô∏è‚É£ Ensures better observability and debugging capabilities.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions tracing should be enabled,"AWS X-Ray can be used to visualize the components of application, identify performance bottlenecks, and troubleshoot requests that resulted in an error. Lambda functions send trace data to X-Ray, and X-Ray processes the data to generate a service map and searchable trace summaries.",Compliance,Medium,Ensure Lambda functions tracing is enabled. Steps: 1. Check tracing settings. 2. Enable AWS X-Ray tracing for functions. https://docs.aws.amazon.com/lambda/latest/dg/monitoring-tracing.html,Cost: None/$0 ,"Lambda Functions Tracing Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check if AWS X-Ray tracing is enabled for Lambda functions.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans all functions and ensures tracing mode is set to Active.
SSM Automation: Notifies admins and enables tracing for non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if AWS X-Ray tracing is enabled.
‚úÖ Flags functions without tracing.
‚úÖ Provides the option to enable tracing.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if Lambda functions have X-Ray tracing enabled
check_lambda_tracing() {
    log ""Checking AWS Lambda functions for X-Ray tracing...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        tracing_mode=$(aws lambda get-function-configuration --function-name ""$function_name"" \
            --query ""TracingConfig.Mode"" --output text)

        if [[ ""$tracing_mode"" != ""Active"" ]]; then
            log ""‚ö†Ô∏è X-Ray tracing is NOT enabled for function: $function_name""
            log ""‚ÑπÔ∏è Consider enabling X-Ray tracing for better monitoring and debugging.""
        else
            log ""‚úÖ X-Ray tracing is enabled for function: $function_name""
        fi
    done
}

# Execute the function
check_lambda_tracing
","üöÄ Why This is Useful?
üîπ Enhances Debugging: Provides end-to-end request tracing for Lambda functions.
üîπ Improves Performance Monitoring: Identifies bottlenecks and latency issues.
üîπ Automates Compliance Checks: Ensures tracing is enabled across all functions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if AWS X-Ray tracing is enabled.
3Ô∏è‚É£ Flags non-compliant functions.
4Ô∏è‚É£ Logs findings and suggests enabling tracing.
5Ô∏è‚É£ Ensures better observability and debugging capabilities.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should use latest runtimes,"This control checks that the Lambda function settings for runtimes match the expected values set for the latest runtimes for each supported language. This control checks for the following runtimes: nodejs20.x, nodejs18.x, nodejs16.x, python3.12, python3.11, python3.10, python3.9, python3.8, ruby3.3, ruby3.2, java21, java17, java11, java8.al2, dotnet8, dotnet6",Compliance,Medium,Ensure Lambda functions use the latest runtimes. Steps: 1. Review runtime configurations. 2. Update functions to use the latest supported runtimes. https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html,Cost: None/$0 ,"Lambda Functions Should Use Latest Runtimes
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect Lambda functions using outdated runtimes.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans Lambda runtimes and flags outdated ones.
SSM Automation: Notifies admins and suggests updating non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks the runtime version of each function.
‚úÖ Flags functions running on outdated runtimes.
‚úÖ Suggests updating to the latest supported runtime.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# List of latest Lambda runtimes (Update this list periodically)
declare -A latest_runtimes
latest_runtimes[""nodejs""]=""nodejs20.x""
latest_runtimes[""python""]=""python3.12""
latest_runtimes[""java""]=""java21""
latest_runtimes[""dotnet""]=""dotnet8""
latest_runtimes[""ruby""]=""ruby3.2""
latest_runtimes[""go""]=""go1.x""

# Function to check Lambda runtimes
check_lambda_runtimes() {
    log ""Checking AWS Lambda functions for outdated runtimes...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        runtime=$(aws lambda get-function-configuration --function-name ""$function_name"" \
            --query ""Runtime"" --output text)
        
        base_runtime=$(echo ""$runtime"" | sed 's/[0-9]\+\.[0-9]*$//')  # Extract base runtime (e.g., ""python"" from ""python3.9"")

        if [[ -n ""${latest_runtimes[$base_runtime]}"" && ""$runtime"" != ""${latest_runtimes[$base_runtime]}"" ]]; then
            log ""‚ö†Ô∏è Function $function_name is using outdated runtime: $runtime""
            log ""‚ÑπÔ∏è Consider upgrading to ${latest_runtimes[$base_runtime]}""
        else
            log ""‚úÖ Function $function_name is using the latest runtime: $runtime""
        fi
    done
}

# Execute the function
check_lambda_runtimes
","üöÄ Why This is Useful?
üîπ Enhances Security & Performance: Keeps Lambda functions updated with latest security patches and performance improvements.
üîπ Ensures AWS Compliance: Prevents deprecated runtimes from causing application failures.
üîπ Automates Runtime Checks: Scans for outdated versions and suggests upgrades.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks the runtime version of each function.
3Ô∏è‚É£ Flags functions using outdated runtimes.
4Ô∏è‚É£ Suggests updating to the latest supported version.
5Ô∏è‚É£ Logs findings and provides upgrade recommendations.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions should use latest runtimes,"This control checks that the Lambda function settings for runtimes match the expected values set for the latest runtimes for each supported language. This control checks for the following runtimes: nodejs20.x, nodejs18.x, nodejs16.x, python3.12, python3.11, python3.10, python3.9, python3.8, ruby3.3, ruby3.2, java21, java17, java11, java8.al2, dotnet8, dotnet6",Compliance,Medium,Ensure Lambda functions use the latest runtimes. Steps: 1. Review runtime configurations. 2. Update functions to use the latest supported runtimes. https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html,Cost: None/$0 ,"Lambda Functions Should Use Latest Runtimes
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect Lambda functions using outdated runtimes.
Lambda Function: A scheduled Lambda (triggered by EventBridge) scans Lambda runtimes and flags outdated ones.
SSM Automation: Notifies admins and suggests updating non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks the runtime version of each function.
‚úÖ Flags functions running on outdated runtimes.
‚úÖ Suggests updating to the latest supported runtime.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# List of latest Lambda runtimes (Update this list periodically)
declare -A latest_runtimes
latest_runtimes[""nodejs""]=""nodejs20.x""
latest_runtimes[""python""]=""python3.12""
latest_runtimes[""java""]=""java21""
latest_runtimes[""dotnet""]=""dotnet8""
latest_runtimes[""ruby""]=""ruby3.2""
latest_runtimes[""go""]=""go1.x""

# Function to check Lambda runtimes
check_lambda_runtimes() {
    log ""Checking AWS Lambda functions for outdated runtimes...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)
    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        runtime=$(aws lambda get-function-configuration --function-name ""$function_name"" \
            --query ""Runtime"" --output text)
        
        base_runtime=$(echo ""$runtime"" | sed 's/[0-9]\+\.[0-9]*$//')  # Extract base runtime (e.g., ""python"" from ""python3.9"")

        if [[ -n ""${latest_runtimes[$base_runtime]}"" && ""$runtime"" != ""${latest_runtimes[$base_runtime]}"" ]]; then
            log ""‚ö†Ô∏è Function $function_name is using outdated runtime: $runtime""
            log ""‚ÑπÔ∏è Consider upgrading to ${latest_runtimes[$base_runtime]}""
        else
            log ""‚úÖ Function $function_name is using the latest runtime: $runtime""
        fi
    done
}

# Execute the function
check_lambda_runtimes
","üöÄ Why This is Useful?
üîπ Enhances Security & Performance: Keeps Lambda functions updated with latest security patches and performance improvements.
üîπ Ensures AWS Compliance: Prevents deprecated runtimes from causing application failures.
üîπ Automates Runtime Checks: Scans for outdated versions and suggests upgrades.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks the runtime version of each function.
3Ô∏è‚É£ Flags functions using outdated runtimes.
4Ô∏è‚É£ Suggests updating to the latest supported version.
5Ô∏è‚É£ Logs findings and provides upgrade recommendations.",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions variable should not have any sensitive data,"Ensure functions environment variables is not having any sensitive data. Leveraging Secrets Manager enables secure provisioning of database credentials to Lambda functions while also ensuring the security of databases. This approach eliminates the need to hardcode secrets in code or pass them through environmental variables. Additionally, Secrets Manager facilitates the secure retrieval of credentials for establishing connections to databases and performing queries, enhancing overall security measures.",Compliance,High,Ensure Lambda function variables do not contain sensitive data. Steps: 1. Review environment variable settings. 2. Remove any sensitive data from environment variables. https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html,Cost: None/$0 ,"Lambda Functions Variables Should Not Contain Any Sensitive Data
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect sensitive data in Lambda environment variables.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans Lambda environment variables for sensitive data patterns.
SSM Automation: An SSM document to notify administrators and suggest remediation if sensitive data is found.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions and their environment variables.
‚úÖ Scans for sensitive data patterns (API keys, credentials, secrets, tokens, etc.).
‚úÖ Flags functions with potential sensitive data leaks.
‚úÖ Supports manual mode (user inputs a specific function) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to scan Lambda environment variables for sensitive data
check_lambda_sensitive_vars() {
    log ""Scanning Lambda environment variables for sensitive data...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        # Get environment variables
        env_vars=$(aws lambda get-function-configuration --function-name ""$function"" --query ""Environment.Variables"" --output json 2>/dev/null)

        if [[ -z ""$env_vars"" || ""$env_vars"" == ""null"" ]]; then
            log ""‚úÖ No environment variables found for $function. Skipping...""
            continue
        fi

        # Check for sensitive data patterns
        if echo ""$env_vars"" | grep -Ei '(""password""|""secret""|""token""|""apikey""|""accesskey""|""privatekey"")'; then
            log ""‚ö†Ô∏è Potential sensitive data found in environment variables for $function!""
            log ""‚ùå Action required: Remove secrets from environment variables and use AWS Secrets Manager.""
        else
            log ""‚úÖ No sensitive data found in environment variables for $function.""
        fi
    done
}

# Execute the function
check_lambda_sensitive_vars
","üöÄ Why This is Useful?
üîπ Prevents Data Leaks: Detects hardcoded credentials in environment variables.
üîπ Enhances Security: Encourages using AWS Secrets Manager instead of plaintext variables.
üîπ Automated Compliance: Identifies potential security risks before they cause harm.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Scans environment variables for sensitive data patterns.
3Ô∏è‚É£ Flags functions with potential credentials or secrets.
4Ô∏è‚É£ Supports both manual checks and automated scans.
5Ô∏è‚É£ Logs findings for visibility and compliance tracking.

",Bash,Weekly,SOC 2,2024-02-13
Lambda,Lambda functions variable should not have any sensitive data,"Ensure functions environment variables is not having any sensitive data. Leveraging Secrets Manager enables secure provisioning of database credentials to Lambda functions while also ensuring the security of databases. This approach eliminates the need to hardcode secrets in code or pass them through environmental variables. Additionally, Secrets Manager facilitates the secure retrieval of credentials for establishing connections to databases and performing queries, enhancing overall security measures.",Compliance,High,Ensure Lambda function variables do not contain sensitive data. Steps: 1. Review environment variable settings. 2. Remove any sensitive data from environment variables. https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html,Cost: None/$0 ,"Lambda Functions Variables Should Not Contain Any Sensitive Data
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect sensitive data in Lambda environment variables.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans Lambda environment variables for sensitive data patterns.
SSM Automation: An SSM document to notify administrators and suggest remediation if sensitive data is found.","üîç Features of the Script:
‚úÖ Retrieves all Lambda functions and their environment variables.
‚úÖ Scans for sensitive data patterns (API keys, credentials, secrets, tokens, etc.).
‚úÖ Flags functions with potential sensitive data leaks.
‚úÖ Supports manual mode (user inputs a specific function) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to scan Lambda environment variables for sensitive data
check_lambda_sensitive_vars() {
    log ""Scanning Lambda environment variables for sensitive data...""

    # Get list of all Lambda functions
    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function in $functions; do
        # Get environment variables
        env_vars=$(aws lambda get-function-configuration --function-name ""$function"" --query ""Environment.Variables"" --output json 2>/dev/null)

        if [[ -z ""$env_vars"" || ""$env_vars"" == ""null"" ]]; then
            log ""‚úÖ No environment variables found for $function. Skipping...""
            continue
        fi

        # Check for sensitive data patterns
        if echo ""$env_vars"" | grep -Ei '(""password""|""secret""|""token""|""apikey""|""accesskey""|""privatekey"")'; then
            log ""‚ö†Ô∏è Potential sensitive data found in environment variables for $function!""
            log ""‚ùå Action required: Remove secrets from environment variables and use AWS Secrets Manager.""
        else
            log ""‚úÖ No sensitive data found in environment variables for $function.""
        fi
    done
}

# Execute the function
check_lambda_sensitive_vars
","üöÄ Why This is Useful?
üîπ Prevents Data Leaks: Detects hardcoded credentials in environment variables.
üîπ Enhances Security: Encourages using AWS Secrets Manager instead of plaintext variables.
üîπ Automated Compliance: Identifies potential security risks before they cause harm.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Lambda functions.
2Ô∏è‚É£ Scans environment variables for sensitive data patterns.
3Ô∏è‚É£ Flags functions with potential credentials or secrets.
4Ô∏è‚É£ Supports both manual checks and automated scans.
5Ô∏è‚É£ Logs findings for visibility and compliance tracking.

",Bash,Weekly,SOC 2,2024-02-13
Lightsail,Disable IPv6 Networking if not in use within your organization,To be added,Compliance,High,Ensure IPv6 networking is disabled if not in use within your organization. Steps: 1. Open the Amazon Lightsail console. 2. Select the instance. 3. Disable IPv6 networking in the networking tab. https://docs.aws.amazon.com/lightsail/latest/userguide/working-with-ipv6.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Disable IPv6 Networking if not in use within your organization
check_compliance() {
    log ""Checking AWS resources for Disable IPv6 Networking if not in use within your organization compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Lightsail,Ensure RDP is restricted to only IP address that should have this access,To be added,Compliance,High,Ensure RDP is restricted to only the IP addresses that should have this access. Steps: 1. Open the Amazon Lightsail console. 2. Go to Networking. 3. Set up a firewall rule to restrict RDP access. https://docs.aws.amazon.com/lightsail/latest/userguide/security.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure RDP is restricted to only IP address that should have this access
check_compliance() {
    log ""Checking AWS resources for Ensure RDP is restricted to only IP address that should have this access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Lightsail,Disable SSH and RDP ports for Lightsail instances when not needed,To be added,Compliance,High,Disable SSH and RDP ports for Lightsail instances when not needed. Steps: 1. Open the Amazon Lightsail console. 2. Go to Networking. 3. Remove or disable the firewall rules for SSH and RDP. https://docs.aws.amazon.com/lightsail/latest/userguide/security.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Disable SSH and RDP ports for Lightsail instances when not needed
check_compliance() {
    log ""Checking AWS resources for Disable SSH and RDP ports for Lightsail instances when not needed compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Lightsail,Ensure SSH is restricted to only IP address that should have this access,To be added,Compliance,High,Ensure SSH is restricted to only the IP addresses that should have this access. Steps: 1. Open the Amazon Lightsail console. 2. Go to Networking. 3. Configure a firewall rule to restrict SSH access. https://docs.aws.amazon.com/lightsail/latest/userguide/security.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure SSH is restricted to only IP address that should have this access
check_compliance() {
    log ""Checking AWS resources for Ensure SSH is restricted to only IP address that should have this access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
MQ,MQ brokers should restrict public access,To be added,Compliance,High,Ensure MQ brokers restrict public access. Steps: 1. Open the Amazon MQ console. 2. Select the broker. 3. Verify that public accessibility is disabled. https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/security-access.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for MQ brokers should restrict public access
check_compliance() {
    log ""Checking AWS resources for MQ brokers should restrict public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
MSK,MSK clusters should be encrypted in transit among broker nodes,To be added,Compliance,High,Ensure MSK clusters are encrypted in transit among broker nodes. Steps: 1. Open the Amazon MSK console. 2. Select the cluster. 3. Verify that encryption in transit is enabled. https://docs.aws.amazon.com/msk/latest/developerguide/msk-encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for MSK clusters should be encrypted in transit among broker nodes
check_compliance() {
    log ""Checking AWS resources for MSK clusters should be encrypted in transit among broker nodes compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Neptune,Neptune DB clusters should publish audit logs to CloudWatch Logs,To be added,Compliance,High,Ensure Neptune DB clusters publish audit logs to CloudWatch Logs. Steps: 1. Open the Amazon Neptune console. 2. Select the DB cluster. 3. Enable logging to CloudWatch in the logging configuration. https://docs.aws.amazon.com/neptune/latest/userguide/logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Neptune DB clusters should publish audit logs to CloudWatch Logs
check_compliance() {
    log ""Checking AWS resources for Neptune DB clusters should publish audit logs to CloudWatch Logs compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Neptune,Neptune DB clusters should have automated backups enabled,To be added,Compliance,High,Ensure Neptune DB clusters have automated backups enabled. Steps: 1. Open the Amazon Neptune console. 2. Select the DB cluster. 3. Verify that automated backups are enabled under the Backup settings. https://docs.aws.amazon.com/neptune/latest/userguide/databases-backup.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Neptune DB clusters should have automated backups enabled
check_compliance() {
    log ""Checking AWS resources for Neptune DB clusters should have automated backups enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Neptune,Neptune DB clusters should be configured to copy tags to snapshots,To be added,Compliance,High,Ensure Neptune DB clusters are configured to copy tags to snapshots. Steps: 1. Open the Amazon Neptune console. 2. Select the DB cluster. 3. Check the snapshot settings to ensure tag copying is enabled. https://docs.aws.amazon.com/neptune/latest/userguide/monitoring-snapshots.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Neptune DB clusters should be configured to copy tags to snapshots
check_compliance() {
    log ""Checking AWS resources for Neptune DB clusters should be configured to copy tags to snapshots compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Neptune,Neptune DB clusters should have deletion protection enabled,To be added,Compliance,High,Ensure Neptune DB clusters have deletion protection enabled. Steps: 1. Open the Amazon Neptune console. 2. Select the DB cluster. 3. Enable deletion protection in the settings. https://docs.aws.amazon.com/neptune/latest/userguide/monitoring.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Neptune DB clusters should have deletion protection enabled
check_compliance() {
    log ""Checking AWS resources for Neptune DB clusters should have deletion protection enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Neptune,Neptune DB clusters should be encrypted at rest,To be added,Compliance,High,Ensure Neptune DB clusters are encrypted at rest. Steps: 1. Open the Amazon Neptune console. 2. Select the DB cluster. 3. Verify that encryption at rest is enabled. https://docs.aws.amazon.com/neptune/latest/userguide/security.encryption.at.rest.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Neptune DB clusters should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for Neptune DB clusters should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Neptune,Neptune DB clusters should have IAM database authentication enabled,To be added,Compliance,High,Ensure Neptune DB clusters have IAM database authentication enabled. Steps: 1. Open the Amazon Neptune console. 2. Select the DB cluster. 3. Enable IAM authentication in the database settings. https://docs.aws.amazon.com/neptune/latest/userguide/authentication.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Neptune DB clusters should have IAM database authentication enabled
check_compliance() {
    log ""Checking AWS resources for Neptune DB clusters should have IAM database authentication enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Neptune,Neptune DB clusters should not use public_subnet,To be added,Compliance,High,Ensure Neptune DB clusters do not use public subnet. Steps: 1. Open the Amazon Neptune console. 2. Select the DB cluster. 3. Verify that the subnet group does not include public subnets. https://docs.aws.amazon.com/neptune/latest/userguide/networking.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Neptune DB clusters should not use public_subnet
check_compliance() {
    log ""Checking AWS resources for Neptune DB clusters should not use public_subnet compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Neptune,Neptune DB cluster snapshots should be encrypted at rest,To be added,Compliance,High,Ensure Neptune DB cluster snapshots are encrypted at rest. Steps: 1. Open the Amazon Neptune console. 2. Select the DB cluster. 3. Verify that snapshots are configured to be encrypted. https://docs.aws.amazon.com/neptune/latest/userguide/monitoring-snapshots.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Neptune DB cluster snapshots should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for Neptune DB cluster snapshots should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Neptune,Neptune DB cluster snapshots should not be public,To be added,Compliance,High,Ensure Neptune DB cluster snapshots are not public. Steps: 1. Open the Amazon Neptune console. 2. Select the DB cluster. 3. Ensure snapshot visibility settings are set to private. https://docs.aws.amazon.com/neptune/latest/userguide/monitoring-snapshots.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Neptune DB cluster snapshots should not be public
check_compliance() {
    log ""Checking AWS resources for Neptune DB cluster snapshots should not be public compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Network Firewall,Network Firewall firewalls should have deletion protection enabled,To be added,Compliance,High,"Description: Deletion protection prevents accidental deletion of firewall resources.
Steps: 1. Enable deletion protection for all network firewalls.
Link: https://docs.aws.amazon.com/network-firewall/latest/developerguide/deletion-protection.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Network Firewall firewalls should have deletion protection enabled
check_compliance() {
    log ""Checking AWS resources for Network Firewall firewalls should have deletion protection enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Network Firewall,Networkfirewall firewall should be in a VPC,To be added,Compliance,High,"Description: Network firewalls must be deployed within a VPC to function correctly.
Steps: 1. Ensure the firewall is associated with a VPC.
Link: https://docs.aws.amazon.com/network-firewall/latest/developerguide/network-firewall-integration.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Networkfirewall firewall should be in a VPC
check_compliance() {
    log ""Checking AWS resources for Networkfirewall firewall should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Network Firewall,Network Firewall logging should be enabled,To be added,Compliance,High,"Description: Logging is crucial for monitoring and security analysis.
Steps: 1. Enable logging for all network firewalls.
Link: https://docs.aws.amazon.com/network-firewall/latest/developerguide/logging.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Network Firewall logging should be enabled
check_compliance() {
    log ""Checking AWS resources for Network Firewall logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Network Firewall,The default stateless action for Network Firewall policies should be drop or forward for fragmented packets,To be added,Compliance,High,"Description: Stateless actions help manage fragmented packets effectively.
Steps: 1. Set the default stateless action for policies to drop or forward fragmented packets.
Link: https://docs.aws.amazon.com/network-firewall/latest/developerguide/stateful-stateless.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for The default stateless action for Network Firewall policies should be drop or forward for fragmented packets
check_compliance() {
    log ""Checking AWS resources for The default stateless action for Network Firewall policies should be drop or forward for fragmented packets compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Network Firewall,The default stateless action for Network Firewall policies should be drop or forward for full packets,To be added,Compliance,High,"Description: Proper handling of full packets is essential for firewall policies.
Steps: 1. Set the default stateless action for policies to drop or forward full packets.
Link: https://docs.aws.amazon.com/network-firewall/latest/developerguide/stateful-stateless.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for The default stateless action for Network Firewall policies should be drop or forward for full packets
check_compliance() {
    log ""Checking AWS resources for The default stateless action for Network Firewall policies should be drop or forward for full packets compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Network Firewall,Network Firewall policies should have at least one rule group associated,To be added,Compliance,High,"Description: Firewall policies must have associated rule groups to function.
Steps: 1. Ensure at least one rule group is associated with each firewall policy.
Link: https://docs.aws.amazon.com/network-firewall/latest/developerguide/policies.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Network Firewall policies should have at least one rule group associated
check_compliance() {
    log ""Checking AWS resources for Network Firewall policies should have at least one rule group associated compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Network Firewall,Stateless network firewall rule group should not be empty,To be added,Compliance,High,"Description: An empty stateless rule group cannot enforce any rules.
Steps: 1. Ensure that stateless network firewall rule groups are not empty.
Link: https://docs.aws.amazon.com/network-firewall/latest/developerguide/rule-groups.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Stateless network firewall rule group should not be empty
check_compliance() {
    log ""Checking AWS resources for Stateless network firewall rule group should not be empty compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains should have audit logging enabled.,To be added,Compliance,High,Enable audit logging to track and review all actions on OpenSearch domains. Steps: 1. Navigate to OpenSearch console. 2. Enable audit logging in the Logs section of domain settings.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should have audit logging enabled.
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should have audit logging enabled. compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,OpenSearch domains should have audit logging enabled.,To be added,Compliance,High,Enable audit logging to track and review all actions on OpenSearch domains. Steps: 1. Navigate to OpenSearch console. 2. Enable audit logging in the Logs section of domain settings.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should have audit logging enabled.
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should have audit logging enabled. compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,OpenSearch domains should have audit logging enabled.,To be added,Compliance,High,Enable audit logging to track and review all actions on OpenSearch domains. Steps: 1. Navigate to OpenSearch console. 2. Enable audit logging in the Logs section of domain settings.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should have audit logging enabled.
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should have audit logging enabled. compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains cognito authentication should be enabled for kibana,To be added,Compliance,High,Use Amazon Cognito to enable secure user authentication in Kibana. Steps: 1. Set up an Amazon Cognito user pool. 2. Integrate with OpenSearch Kibana.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains cognito authentication should be enabled for kibana
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains cognito authentication should be enabled for kibana compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains should have at least three data nodes,To be added,Compliance,Medium,Ensure at least three data nodes are deployed for redundancy and fault tolerance. Steps: 1. Modify the OpenSearch cluster to ensure there are three or more data nodes.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should have at least three data nodes
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should have at least three data nodes compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains should have encryption at rest enabled,To be added,Compliance,High,Enable encryption at rest to secure data stored in OpenSearch domains. Steps: 1. Enable encryption at rest during domain creation or modify the existing domain settings.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should have encryption at rest enabled
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should have encryption at rest enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,OpenSearch domains should have encryption at rest enabled,To be added,Compliance,High,Enable encryption at rest to secure data stored in OpenSearch domains. Steps: 1. Enable encryption at rest during domain creation or modify the existing domain settings.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should have encryption at rest enabled
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should have encryption at rest enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains should have fine-grained access control enabled,To be added,Compliance,High,Use fine-grained access control to manage user permissions at a granular level. Steps: 1. Enable fine-grained access control in the OpenSearch domain settings. 2. Assign user roles.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should have fine-grained access control enabled
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should have fine-grained access control enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains should use HTTPS,To be added,Compliance,High,Ensure that all OpenSearch domains are using HTTPS for secure data transmission. Steps: 1. Enable HTTPS by requiring SSL connections in the OpenSearch domain configuration.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should use HTTPS
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should use HTTPS compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,OpenSearch domains should use HTTPS,To be added,Compliance,High,Ensure that all OpenSearch domains are using HTTPS for secure data transmission. Steps: 1. Enable HTTPS by requiring SSL connections in the OpenSearch domain configuration.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should use HTTPS
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should use HTTPS compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains should be in a VPC,To be added,Compliance,High,"Isolate OpenSearch domains in a VPC to protect them from external threats. Steps: 1. During domain creation, specify a VPC and configure VPC settings (e.g., security groups and subnets).",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should be in a VPC
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,OpenSearch domains should be in a VPC,To be added,Compliance,High,"Isolate OpenSearch domains in a VPC to protect them from external threats. Steps: 1. During domain creation, specify a VPC and configure VPC settings (e.g., security groups and subnets).",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should be in a VPC
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,OpenSearch domains should be in a VPC,To be added,Compliance,High,"Isolate OpenSearch domains in a VPC to protect them from external threats. Steps: 1. During domain creation, specify a VPC and configure VPC settings (e.g., security groups and subnets).",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should be in a VPC
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,OpenSearch domains should be in a VPC,To be added,Compliance,High,"Isolate OpenSearch domains in a VPC to protect them from external threats. Steps: 1. During domain creation, specify a VPC and configure VPC settings (e.g., security groups and subnets).",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should be in a VPC
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains internal user database should be disabled,To be added,Compliance,Medium,"Disable internal user authentication and use external identity providers (e.g., IAM or Cognito). Steps: 1. Turn off the internal user database in the OpenSearch domain settings.",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains internal user database should be disabled
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains internal user database should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains logs to AWS CloudWatch Logs,To be added,Compliance,Medium,Enable logging to CloudWatch to monitor and analyze OpenSearch domain activity. Steps: 1. Enable CloudWatch Logs integration in the OpenSearch console. 2. Create CloudWatch log groups for monitoring.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains logs to AWS CloudWatch Logs
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains logs to AWS CloudWatch Logs compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains node-to-node encryption should be enabled,To be added,Compliance,High,Enable node-to-node encryption to secure communication between OpenSearch nodes. Steps: 1. Enable node-to-node encryption in the OpenSearch domain settings.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains node-to-node encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains node-to-node encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,OpenSearch domains node-to-node encryption should be enabled,To be added,Compliance,High,Enable node-to-node encryption to secure communication between OpenSearch nodes. Steps: 1. Enable node-to-node encryption in the OpenSearch domain settings.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains node-to-node encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains node-to-node encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
OpenSearch,OpenSearch domains should be updated to the latest service software version,To be added,Compliance,Medium,Regularly update OpenSearch domains to the latest version to address security and performance improvements. Steps: 1. Check for available updates in the OpenSearch console. 2. Schedule updates.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for OpenSearch domains should be updated to the latest service software version
check_compliance() {
    log ""Checking AWS resources for OpenSearch domains should be updated to the latest service software version compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,RDS DB instances should be integrated with CloudWatch logs,Use AWS CloudWatch to centrally collect and manage RDS DB instance activity.,AWS Well-Architected Framework,High,"Ensure RDS DB instances are integrated with CloudWatch logs. Steps: 1. Open the RDS console. 2. Select the DB instance. 3. In the ""Log exports"" section, enable the desired logs to CloudWatch. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should be integrated with CloudWatch logs
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should be integrated with CloudWatch logs compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances should be integrated with CloudWatch logs,Use AWS CloudWatch to centrally collect and manage RDS DB instance activity.,AWS Well-Architected Framework,High,"Ensure RDS DB instances are integrated with CloudWatch logs. Steps: 1. Open the RDS console. 2. Select the DB instance. 3. In the ""Log exports"" section, enable the desired logs to CloudWatch. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should be integrated with CloudWatch logs
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should be integrated with CloudWatch logs compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,RDS DB instances should be integrated with CloudWatch logs,Use AWS CloudWatch to centrally collect and manage RDS DB instance activity.,AWS Well-Architected Framework,High,"Ensure RDS DB instances are integrated with CloudWatch logs. Steps: 1. Open the RDS console. 2. Select the DB instance. 3. In the ""Log exports"" section, enable the desired logs to CloudWatch. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should be integrated with CloudWatch logs
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should be integrated with CloudWatch logs compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,VPC flow logs should be enabled,To be added,AWS Well-Architected Framework,High,"Ensure VPC flow logs are enabled. Steps: 1. Open the VPC console. 2. Select the VPC. 3. Enable flow logs in the ""Flow Logs"" tab and specify the destination. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC flow logs should be enabled
check_compliance() {
    log ""Checking AWS resources for VPC flow logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,VPC flow logs should be enabled,To be added,AWS Well-Architected Framework,High,"Ensure VPC flow logs are enabled. Steps: 1. Open the VPC console. 2. Select the VPC. 3. Enable flow logs in the ""Flow Logs"" tab and specify the destination. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC flow logs should be enabled
check_compliance() {
    log ""Checking AWS resources for VPC flow logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,VPC flow logs should be enabled,To be added,AWS Well-Architected Framework,High,"Ensure VPC flow logs are enabled. Steps: 1. Open the VPC console. 2. Select the VPC. 3. Enable flow logs in the ""Flow Logs"" tab and specify the destination. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC flow logs should be enabled
check_compliance() {
    log ""Checking AWS resources for VPC flow logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,VPC flow logs should be enabled,To be added,AWS Well-Architected Framework,High,"Ensure VPC flow logs are enabled. Steps: 1. Open the VPC console. 2. Select the VPC. 3. Enable flow logs in the ""Flow Logs"" tab and specify the destination. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC flow logs should be enabled
check_compliance() {
    log ""Checking AWS resources for VPC flow logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,VPC flow logs should be enabled,To be added,AWS Well-Architected Framework,High,"Ensure VPC flow logs are enabled. Steps: 1. Open the VPC console. 2. Select the VPC. 3. Enable flow logs in the ""Flow Logs"" tab and specify the destination. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC flow logs should be enabled
check_compliance() {
    log ""Checking AWS resources for VPC flow logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,VPC flow logs should be enabled,To be added,AWS Well-Architected Framework,High,"Ensure VPC flow logs are enabled. Steps: 1. Open the VPC console. 2. Select the VPC. 3. Enable flow logs in the ""Flow Logs"" tab and specify the destination. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC flow logs should be enabled
check_compliance() {
    log ""Checking AWS resources for VPC flow logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
VPC,VPC flow logs should be enabled,To be added,AWS Well-Architected Framework,High,"Ensure VPC flow logs are enabled. Steps: 1. Open the VPC console. 2. Select the VPC. 3. Enable flow logs in the ""Flow Logs"" tab and specify the destination. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC flow logs should be enabled
check_compliance() {
    log ""Checking AWS resources for VPC flow logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
VPC,VPC flow logs should be enabled,To be added,AWS Well-Architected Framework,High,"Ensure VPC flow logs are enabled. Steps: 1. Open the VPC console. 2. Select the VPC. 3. Enable flow logs in the ""Flow Logs"" tab and specify the destination. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC flow logs should be enabled
check_compliance() {
    log ""Checking AWS resources for VPC flow logs should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Operational Excellence,SSM managed instance patching should be compliant,To be added,AWS Well-Architected Framework,Medium,"Ensure SSM managed instance patching is compliant. Steps: 1. Open the Systems Manager console. 2. Select ""Patch Manager."" 3. Review and apply patching compliance reports. https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM managed instance patching should be compliant
check_compliance() {
    log ""Checking AWS resources for SSM managed instance patching should be compliant compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,SSM managed instance patching should be compliant,To be added,AWS Well-Architected Framework,Medium,"Ensure SSM managed instance patching is compliant. Steps: 1. Open the Systems Manager console. 2. Select ""Patch Manager."" 3. Review and apply patching compliance reports. https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM managed instance patching should be compliant
check_compliance() {
    log ""Checking AWS resources for SSM managed instance patching should be compliant compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,SSM managed instance patching should be compliant,To be added,AWS Well-Architected Framework,Medium,"Ensure SSM managed instance patching is compliant. Steps: 1. Open the Systems Manager console. 2. Select ""Patch Manager."" 3. Review and apply patching compliance reports. https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM managed instance patching should be compliant
check_compliance() {
    log ""Checking AWS resources for SSM managed instance patching should be compliant compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
SSM,SSM managed instance patching should be compliant,To be added,AWS Well-Architected Framework,Medium,"Ensure SSM managed instance patching is compliant. Steps: 1. Open the Systems Manager console. 2. Select ""Patch Manager."" 3. Review and apply patching compliance reports. https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM managed instance patching should be compliant
check_compliance() {
    log ""Checking AWS resources for SSM managed instance patching should be compliant compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Organization,Ensure Tag Policies are enabled,To be added,Compliance,Medium,Enforce tag policies to improve resource governance. Steps: 1. Navigate to AWS Organizations. 2. Enable tag policies and define rules for consistent tagging across resources.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure Tag Policies are enabled
check_compliance() {
    log ""Checking AWS resources for Ensure Tag Policies are enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Organization,Private Certificate Authority,To be added,Compliance,Low,Regularly audit and monitor AWS Private CA to ensure compliance. Use least privilege for CA access.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Private Certificate Authority
check_compliance() {
    log ""Checking AWS resources for Private Certificate Authority compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Organization,AWS Private CA root certificate authority should be disabled,To be added,Compliance,High,Disable unused Private CAs to prevent unauthorized issuance of certificates. Steps: 1. Use aws acm-pca disable-certificate-authority . 2. Rotate and delete unnecessary root CAs.,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Private CA root certificate authority should be disabled
check_compliance() {
    log ""Checking AWS resources for AWS Private CA root certificate authority should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS Aurora clusters should have backtracking enabled,This control checks whether AWS Aurora clusters have backtracking enabled. Backups help you to recover more quickly from a security incident. They also strengthen the resilience of your systems. Aurora backtracking reduces the time to recover a database to a point in time. It does not require a database restore to so.,Compliance,High,"To ensure Amazon RDS Aurora clusters have backtracking enabled , Enable Backtracking: Create a snapshot of the existing Aurora cluster and restore it with backtracking enabled. This allows for point-in-time recovery without relying solely on backups.
""https://repost.aws/knowledge-center/aurora-mysql-cluster-backtrack
https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html""
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS Aurora clusters should have backtracking enabled
check_compliance() {
    log ""Checking AWS resources for RDS Aurora clusters should have backtracking enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,RDS Aurora clusters should have backtracking enabled,This control checks whether AWS Aurora clusters have backtracking enabled. Backups help you to recover more quickly from a security incident. They also strengthen the resilience of your systems. Aurora backtracking reduces the time to recover a database to a point in time. It does not require a database restore to so.,Compliance,High,"To ensure Amazon RDS Aurora clusters have backtracking enabled , Enable Backtracking: Create a snapshot of the existing Aurora cluster and restore it with backtracking enabled. This allows for point-in-time recovery without relying solely on backups.
""https://repost.aws/knowledge-center/aurora-mysql-cluster-backtrack
https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html""
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS Aurora clusters should have backtracking enabled
check_compliance() {
    log ""Checking AWS resources for RDS Aurora clusters should have backtracking enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,Aurora MySQL DB clusters should publish audit logs to CloudWatch Logs,This control checks whether an Amazon Aurora MySQL DB cluster is configured to publish audit logs to Amazon CloudWatch Logs. The control fails if the cluster isn't configured to publish audit logs to CloudWatch Logs.,Compliance,Medium,"Enabling Advanced Auditing on your Aurora MySQL DB cluster allows the system to capture all necessary events for effective monitoring. Next, publish audit logs to CloudWatch by configuring the Amazon RDS console or using the AWS CLI. This step ensures that all database activities are securely logged and stored. Once the logs are in CloudWatch, proceed to set up alerts and monitoring. Use Amazon CloudWatch Logs Insights to analyze these logs and configure alarms to trigger automated actions in response to suspicious activities, enhancing the security and traceability of your database operations
https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Auditing.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Aurora MySQL DB clusters should publish audit logs to CloudWatch Logs
check_compliance() {
    log ""Checking AWS resources for Aurora MySQL DB clusters should publish audit logs to CloudWatch Logs compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS Aurora PostgreSQL clusters should not be exposed to local file read vulnerability,This control checks whether AWS Aurora PostgreSQL clusters are exposed to local file read vulnerability by ensuring that AWS RDS PostgreSQL instances use a non-vulnerable version of the log_fdw.,Compliance,Low,NOT YET ADDED,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS Aurora PostgreSQL clusters should not be exposed to local file read vulnerability
check_compliance() {
    log ""Checking AWS resources for RDS Aurora PostgreSQL clusters should not be exposed to local file read vulnerability compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS Aurora PostgreSQL clusters should not be exposed to local file read vulnerability,This control checks whether AWS Aurora PostgreSQL clusters are exposed to local file read vulnerability by ensuring that AWS RDS PostgreSQL instances use a non-vulnerable version of the log_fdw.,Compliance,Low,NOT YET ADDED,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS Aurora PostgreSQL clusters should not be exposed to local file read vulnerability
check_compliance() {
    log ""Checking AWS resources for RDS Aurora PostgreSQL clusters should not be exposed to local file read vulnerability compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS Aurora clusters should be protected by backup plan,Checks if AWS Aurora DB clusters are protected by a backup plan. The rule is non-compliant if the AWS Relational Database Service (AWS RDS) Database Cluster is not protected by a backup plan.,Compliance,High," RDS Aurora clusters must be protected by a robust backup plan. Implement automated backups using Amazon RDS features to create daily snapshots of your database. Enable point-in-time recovery (PITR) to allow restoration to any specific time within the backup retention period, which is crucial for data recovery. Additionally, test your backup and restore processes regularly to ensure they function as expected. ",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS Aurora clusters should be protected by backup plan
check_compliance() {
    log ""Checking AWS resources for RDS Aurora clusters should be protected by backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,RDS Aurora clusters should be protected by backup plan,Checks if AWS Aurora DB clusters are protected by a backup plan. The rule is non-compliant if the AWS Relational Database Service (AWS RDS) Database Cluster is not protected by a backup plan.,Compliance,High," RDS Aurora clusters must be protected by a robust backup plan. Implement automated backups using Amazon RDS features to create daily snapshots of your database. Enable point-in-time recovery (PITR) to allow restoration to any specific time within the backup retention period, which is crucial for data recovery. Additionally, test your backup and restore processes regularly to ensure they function as expected. ",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS Aurora clusters should be protected by backup plan
check_compliance() {
    log ""Checking AWS resources for RDS Aurora clusters should be protected by backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB clusters should have automatic minor version upgrade enabled,This control checks if automatic minor version upgrade is enabled for an Amazon RDS database cluster. The control fails if automatic minor version upgrade isn't enabled for an RDS cluster.,Compliance,Medium,"Modify the DB instance settings, and enable ""Auto Minor Version Upgrade"" under the maintenance settings. Official documentation can be found in the AWS RDS Documentation.
https://docs.aws.amazon.com/config/latest/developerguide/rds-automatic-minor-version-upgrade-enabled.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB clusters should have automatic minor version upgrade enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB clusters should have automatic minor version upgrade enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB clusters should be configured to copy tags to snapshots,This control checks whether RDS DB clusters are configured to copy all tags to snapshots when the snapshots are created.,Compliance,Low,"Modify the RDS DB instance settings via the AWS Console by enabling the ""Copy tags to snapshots"" option under the backup settings
https://aws.amazon.com/about-aws/whats-new/2015/07/amazon-rds-resource-tags-can-now-be-copied-db-snapshots-of-rds-database-instances/",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB clusters should be configured to copy tags to snapshots
check_compliance() {
    log ""Checking AWS resources for RDS DB clusters should be configured to copy tags to snapshots compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS clusters should have deletion protection enabled,"This control checks whether RDS clusters have deletion protection enabled. This control is intended for RDS DB instances. However, it can also generate findings for Aurora DB instances, Neptune DB instances, and AWS DocumentDB clusters. If these findings are not useful,then you can suppress them.",Compliance,High,"To enable this, go to the AWS Management Console, navigate to the RDS section, select the desired DB cluster, and modify it by enabling ""Deletion Protection"" in the settings
https://aws.amazon.com/about-aws/whats-new/2018/09/amazon-rds-now-provides-database-deletion-protection/",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS clusters should have deletion protection enabled
check_compliance() {
    log ""Checking AWS resources for RDS clusters should have deletion protection enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB clusters should be encrypted with CMK,Ensure RDS DB cluster is encrypted using CMK. The rule is non-compliant if the RDS DB cluster is not encrypted using CMK.,Compliance,High,"RDS DB clusters should be encrypted with Customer Master Keys (CMK) from AWS Key Management Service (KMS). Create a CMK in the AWS KMS Console, then enable encryption when creating a new DB cluster. For existing clusters, take a snapshot and restore it with encryption enabled
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB clusters should be encrypted with CMK
check_compliance() {
    log ""Checking AWS resources for RDS DB clusters should be encrypted with CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB clusters should be encrypted at rest,This control checks if an RDS DB cluster is encrypted at rest. The control fails if an RDS DB cluster isn't encrypted at rest.,Compliance,High,"Amazon RDS DB clusters should be encrypted at rest. For new instances, enable encryption during creation by setting --storage-encrypted to true. For existing unencrypted instances, take a snapshot, copy it with encryption enabled, and restore it to create a new encrypted instance
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB clusters should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for RDS DB clusters should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,An RDS event notifications subscription should be configured for critical cluster events,"This control checks whether an AWS RDS event subscription exists that has notifications enabled for the following source type, event category key-value pairs.",Compliance,Low," configure Amazon RDS event notifications for critical cluster events. Start by navigating to the RDS console and selecting ""Event Subscriptions"" under ""Event Notifications."" Then, create a new subscription for your RDS DB cluster, choosing critical event types like availability, backup, and security. Link the subscription to an Amazon SNS topic to receive notifications. Once configured, activate the subscription to stay informed of any critical issues.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for An RDS event notifications subscription should be configured for critical cluster events
check_compliance() {
    log ""Checking AWS resources for An RDS event notifications subscription should be configured for critical cluster events compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,IAM authentication should be configured for RDS clusters,Checks if an AWS RDS Cluster has AWS Identity and Access Management (IAM) authentication enabled. The rule is non-compliant if an RDS Cluster does not have IAM authentication enabled.,Compliance,High,"Enable IAM DB authentication in the RDS console by modifying the instance settings. Next, create an IAM policy that grants access to the database and attach it to the required IAM roles or users. Update the database to allow connections via IAM, and use AWS authentication tokens instead of passwords for secure access to the RDS instance.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM authentication should be configured for RDS clusters
check_compliance() {
    log ""Checking AWS resources for IAM authentication should be configured for RDS clusters compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB clusters should be configured for multiple Availability Zones,This control checks whether high availability is enabled for your RDS DB clusters. RDS DB clusters should be configured for multiple Availability Zones to ensure availability of the data that is stored.,Compliance,High,"RDS instance is set to use Multi-AZ deployment. This can be done when creating a new RDS instance by selecting the Multi-AZ option, or by modifying an existing instance through the RDS console. Multi-AZ deployment ensures that the primary database is replicated to a standby instance in a different Availability Zone, providing increased availability and fault tolerance in case of infrastructure failure.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB clusters should be configured for multiple Availability Zones
check_compliance() {
    log ""Checking AWS resources for RDS DB clusters should be configured for multiple Availability Zones compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,RDS DB clusters should be configured for multiple Availability Zones,This control checks whether high availability is enabled for your RDS DB clusters. RDS DB clusters should be configured for multiple Availability Zones to ensure availability of the data that is stored.,Compliance,High,"RDS instance is set to use Multi-AZ deployment. This can be done when creating a new RDS instance by selecting the Multi-AZ option, or by modifying an existing instance through the RDS console. Multi-AZ deployment ensures that the primary database is replicated to a standby instance in a different Availability Zone, providing increased availability and fault tolerance in case of infrastructure failure.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB clusters should be configured for multiple Availability Zones
check_compliance() {
    log ""Checking AWS resources for RDS DB clusters should be configured for multiple Availability Zones compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS database clusters should use a custom administrator username,This control checks whether an AWS RDS database cluster has changed the admin username from its default value. This rule will fail if the admin username is set to the default value.,Compliance,High,"it is recommended to configure your Amazon RDS database clusters with a custom administrator username instead of the default ""admin"" or ""root"". When creating a new RDS instance or modifying an existing one, specify a unique administrator username in the configuration settings. This reduces the risk of brute-force attacks or unauthorized access targeting common default usernames. Additionally, ensure that this custom username follows your organization's security policies and is used in conjunction with strong password policies.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreateDBInstance.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS database clusters should use a custom administrator username
check_compliance() {
    log ""Checking AWS resources for RDS database clusters should use a custom administrator username compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance and cluster enhanced monitoring should be enabled,Enable AWS Relational Database Service (AWS RDS) to help monitor AWS RDS availability. This provides detailed visibility into the health of your AWS RDS database instances.,Compliance,Medium,"Enabling Enhanced Monitoring for your Amazon RDS DB instances and clusters is crucial. Enhanced Monitoring provides real-time metrics on database performance, including CPU, memory, and disk usage, which helps in proactive monitoring and issue resolution. To enable it, you can configure Enhanced Monitoring during the creation of a new RDS instance or modify an existing one via the AWS Management Console or CLI by selecting the desired monitoring interval.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance and cluster enhanced monitoring should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance and cluster enhanced monitoring should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS databases and clusters should not use a database engine default port,This control checks whether the RDS cluster or instance uses a port other than the default port of the database engine.,Compliance,High,"RDS databases and clusters using default database engine ports, start by logging into the AWS Management Console to identify the current port in use. Then, select your RDS instance or cluster, click on Modify, and navigate to the Database options section to change the port to a custom value that avoids commonly used ports. After updating the port, choose to apply the changes either immediately or during the next maintenance window. Ensure that your application configuration reflects this new port and adjust any associated security group rules to allow traffic on it.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS databases and clusters should not use a database engine default port
check_compliance() {
    log ""Checking AWS resources for RDS databases and clusters should not use a database engine default port compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance automatic minor version upgrade should be enabled,Ensure that AWS Relational Database Service (RDS) database instances are configured for automatic minor version upgrades. The rule is non-compliant if the value of 'autoMinorVersionUpgrade' is false.,Compliance,High,"enable automatic minor version upgrades for RDS DB instances, log into the AWS Management Console and select your RDS instance. Click on ""Modify,"" then check the ""Auto minor version upgrade"" option in the DB Engine Version section. Apply the changes immediately or during the next maintenance http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#USER_UpgradeDBInstance.AutoMinorVersionUpgrade
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance automatic minor version upgrade should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance automatic minor version upgrade should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,RDS DB instance automatic minor version upgrade should be enabled,Ensure that AWS Relational Database Service (RDS) database instances are configured for automatic minor version upgrades. The rule is non-compliant if the value of 'autoMinorVersionUpgrade' is false.,Compliance,High,"enable automatic minor version upgrades for RDS DB instances, log into the AWS Management Console and select your RDS instance. Click on ""Modify,"" then check the ""Auto minor version upgrade"" option in the DB Engine Version section. Apply the changes immediately or during the next maintenance http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#USER_UpgradeDBInstance.AutoMinorVersionUpgrade
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance automatic minor version upgrade should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance automatic minor version upgrade should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,RDS DB instance automatic minor version upgrade should be enabled,Ensure that AWS Relational Database Service (RDS) database instances are configured for automatic minor version upgrades. The rule is non-compliant if the value of 'autoMinorVersionUpgrade' is false.,Compliance,High,"enable automatic minor version upgrades for RDS DB instances, log into the AWS Management Console and select your RDS instance. Click on ""Modify,"" then check the ""Auto minor version upgrade"" option in the DB Engine Version section. Apply the changes immediately or during the next maintenance http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#USER_UpgradeDBInstance.AutoMinorVersionUpgrade
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance automatic minor version upgrade should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance automatic minor version upgrade should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance automatic minor version upgrade should be enabled,Ensure that AWS Relational Database Service (RDS) database instances are configured for automatic minor version upgrades. The rule is non-compliant if the value of 'autoMinorVersionUpgrade' is false.,Compliance,High,"enable automatic minor version upgrades for RDS DB instances, log into the AWS Management Console and select your RDS instance. Click on ""Modify,"" then check the ""Auto minor version upgrade"" option in the DB Engine Version section. Apply the changes immediately or during the next maintenance http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#USER_UpgradeDBInstance.AutoMinorVersionUpgrade
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance automatic minor version upgrade should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance automatic minor version upgrade should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance automatic minor version upgrade should be enabled,Ensure that AWS Relational Database Service (RDS) database instances are configured for automatic minor version upgrades. The rule is non-compliant if the value of 'autoMinorVersionUpgrade' is false.,Compliance,High,"enable automatic minor version upgrades for RDS DB instances, log into the AWS Management Console and select your RDS instance. Click on ""Modify,"" then check the ""Auto minor version upgrade"" option in the DB Engine Version section. Apply the changes immediately or during the next maintenance http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#USER_UpgradeDBInstance.AutoMinorVersionUpgrade
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance automatic minor version upgrade should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance automatic minor version upgrade should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance backup should be enabled,The backup feature of AWS RDS creates backups of your databases and transaction logs.,Compliance,High,"To enable backups for your RDS DB instance, log into the AWS Management Console and select the desired RDS instance. Click on ""Modify"" and navigate to the ""Backup"" section. Ensure that ""Enable Automated Backups"" is checked and configure the backup retention period according to your requirements. After making these changes, apply them immediately or during the next maintenance window
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance backup should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance backup should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,RDS DB instance backup should be enabled,The backup feature of AWS RDS creates backups of your databases and transaction logs.,Compliance,High,"To enable backups for your RDS DB instance, log into the AWS Management Console and select the desired RDS instance. Click on ""Modify"" and navigate to the ""Backup"" section. Ensure that ""Enable Automated Backups"" is checked and configure the backup retention period according to your requirements. After making these changes, apply them immediately or during the next maintenance window
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance backup should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance backup should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance backup should be enabled,The backup feature of AWS RDS creates backups of your databases and transaction logs.,Compliance,High,"To enable backups for your RDS DB instance, log into the AWS Management Console and select the desired RDS instance. Click on ""Modify"" and navigate to the ""Backup"" section. Ensure that ""Enable Automated Backups"" is checked and configure the backup retention period according to your requirements. After making these changes, apply them immediately or during the next maintenance window
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance backup should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance backup should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances backup retention period should be greater than or equal to 7,Ensure RDS DB instance backup retention period is greater than or equal to 7.,Compliance,Low,"To configure the backup retention period for your RDS DB instance to be greater than or equal to seven days, start by logging into the AWS Management Console and selecting the RDS instance in question. Click on ""Modify,"" then scroll to the ""Backup"" section. Here, set the ""Backup Retention Period"" to at least seven days. After making these adjustments, choose to apply the changes immediately or during the next maintenance window
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances backup retention period should be greater than or equal to 7
check_compliance() {
    log ""Checking AWS resources for RDS DB instances backup retention period should be greater than or equal to 7 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances CA certificates should not expire within next 7 days,Ensure RDS DB instances CA certificates are not getting expired within the next 7 days.,Compliance,Low,"To ensure that the CA certificates for your RDS DB instances do not expire within the next seven days, first, check the current CA certificate status by logging into the AWS Management Console and navigating to the RDS dashboard. Select your RDS instance and review the certificate information. If the CA certificate is set to expire soon, you will need to modify your RDS instance. Click on ""Modify,"" and under the ""Database Options,"" update the ""Certificate Authority"" to the latest version. After making the necessary changes, apply them immediately or during the next maintenance window to avoid disruptions
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances CA certificates should not expire within next 7 days
check_compliance() {
    log ""Checking AWS resources for RDS DB instances CA certificates should not expire within next 7 days compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances connections should be encrypted,This control checks if RDS DB instance connections are encrypted. Secure Sockets Layer (SSL) is used to encrypt between client applications and AWS RDS DB instances running Microsoft SQL Server or PostgreSQL.,Compliance,Low,"To ensure that connections to RDS DB instances are encrypted, enable SSL (Secure Sockets Layer) for your database connections. Log in to the AWS Management Console, navigate to your RDS instance, and confirm that your application is configured to use SSL by providing the appropriate SSL certificate from AWS. Adjust your database connection string to include SSL parameters.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances connections should be encrypted
check_compliance() {
    log ""Checking AWS resources for RDS DB instances connections should be encrypted compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances should be configured to copy tags to snapshots,This control checks whether RDS DB instances are configured to copy all tags to snapshots when the snapshots are created.,Compliance,Low,"To configure RDS DB instances to copy tags to snapshots, log into the AWS Management Console, navigate to the RDS dashboard, and select your DB instance. Click on ‚ÄúModify,‚Äù and in the ""Snapshot"" section, enable the option to ‚ÄúCopy Tags to Snapshot.‚Äù Save the changes and choose to apply them immediately or during the next maintenance window.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should be configured to copy tags to snapshots
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should be configured to copy tags to snapshots compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances should have deletion protection enabled,Ensure AWS Relational Database Service (AWS RDS) instances have deletion protection enabled.,Compliance,Medium,"To enable deletion protection for your RDS DB instances, log into the AWS Management Console, navigate to the RDS dashboard, and select the DB instance you want to protect. Click on ‚ÄúModify,‚Äù and under the ‚ÄúDeletion Protection‚Äù section, set it to ‚ÄúYes.‚Äù Save the changes and apply them immediately or during the next maintenance window
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should have deletion protection enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should have deletion protection enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance encryption at rest should be enabled,"To help protect data at rest, ensure that encryption is enabled for your AWS Relational Database Service (AWS RDS) instances.",Compliance,High,"To enable encryption at rest for RDS DB instances, you need to create a new encrypted DB instance. Log into the AWS Management Console, navigate to RDS, and select ‚ÄúCreate database.‚Äù When configuring the database, ensure that the ‚ÄúStorage encryption‚Äù option is enabled. For existing unencrypted instances, take a snapshot and create a new instance from that snapshot with encryption enabled.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,RDS DB instance encryption at rest should be enabled,"To help protect data at rest, ensure that encryption is enabled for your AWS Relational Database Service (AWS RDS) instances.",Compliance,High,"To enable encryption at rest for RDS DB instances, you need to create a new encrypted DB instance. Log into the AWS Management Console, navigate to RDS, and select ‚ÄúCreate database.‚Äù When configuring the database, ensure that the ‚ÄúStorage encryption‚Äù option is enabled. For existing unencrypted instances, take a snapshot and create a new instance from that snapshot with encryption enabled.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,RDS DB instance encryption at rest should be enabled,"To help protect data at rest, ensure that encryption is enabled for your AWS Relational Database Service (AWS RDS) instances.",Compliance,High,"To enable encryption at rest for RDS DB instances, you need to create a new encrypted DB instance. Log into the AWS Management Console, navigate to RDS, and select ‚ÄúCreate database.‚Äù When configuring the database, ensure that the ‚ÄúStorage encryption‚Äù option is enabled. For existing unencrypted instances, take a snapshot and create a new instance from that snapshot with encryption enabled.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance encryption at rest should be enabled,"To help protect data at rest, ensure that encryption is enabled for your AWS Relational Database Service (AWS RDS) instances.",Compliance,High,"To enable encryption at rest for RDS DB instances, you need to create a new encrypted DB instance. Log into the AWS Management Console, navigate to RDS, and select ‚ÄúCreate database.‚Äù When configuring the database, ensure that the ‚ÄúStorage encryption‚Äù option is enabled. For existing unencrypted instances, take a snapshot and create a new instance from that snapshot with encryption enabled.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance encryption at rest should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance encryption at rest should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,An RDS event notifications subscription should be configured for critical database instance events,"This control checks whether an AWS RDS event subscription exists with notifications enabled for the following source type, event category key-value pairs.",Compliance,Low,"To configure an RDS event notifications subscription for critical database instance events, log into the AWS Management Console and navigate to the RDS dashboard. Select ""Event subscriptions"" and create a new subscription by selecting the RDS instance and the types of events you want to receive notifications for. Specify the notification method, such as an SNS topic. 
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html#USER_Events.Subscribing",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for An RDS event notifications subscription should be configured for critical database instance events
check_compliance() {
    log ""Checking AWS resources for An RDS event notifications subscription should be configured for critical database instance events compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances should have iam authentication enabled,Checks if an AWS Relational Database Service (AWS RDS) instance has AWS Identity and Access Management (IAM) authentication enabled.,Compliance,Medium,"To enable IAM authentication for your RDS DB instances, log into the AWS Management Console and navigate to your RDS instance. Click on ‚ÄúModify,‚Äù and in the ‚ÄúDatabase options,‚Äù set ‚ÄúIAM DB Authentication‚Äù to enabled. Save the changes and apply them immediately or during the next maintenance window. Additionally, ensure that your application is configured to use IAM authentication when connecting
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should have iam authentication enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should have iam authentication enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances should be in a backup plan,"To help with data back-up processes, ensure your AWS Relational Database Service (AWS RDS) instances are a part of an AWS Backup plan.",Compliance,Low,"To ensure that your RDS DB instances are included in a backup plan, verify that automated backups are enabled. Log into the AWS Management Console, select your RDS instance, click on ‚ÄúModify,‚Äù and ensure that the ‚ÄúBackup retention period‚Äù is set to a value greater than 0. Save changes and apply them either immediately or during the next maintenance window
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should be in a backup plan
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should be in a backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS instances should be deployed in a VPC,This control checks whether an RDS instance is deployed in a VPC (EC2-VPC).,Compliance,High,"To ensure that your RDS instances are deployed in a Virtual Private Cloud (VPC), verify the settings during instance creation. Log into the AWS Management Console, navigate to the RDS dashboard, and check the ""Network & Security"" settings of your DB instance. Ensure that it is launched within a VPC. If necessary, create a new instance within a VPC
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS instances should be deployed in a VPC
check_compliance() {
    log ""Checking AWS resources for RDS instances should be deployed in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,Database logging should be enabled,"To help with logging and monitoring within your environment, ensure AWS Relational Database Service (AWS RDS) logging is enabled.",Compliance,High,"To enable database logging for your RDS instances, log into the AWS Management Console, navigate to your RDS instance, and click on ‚ÄúModify.‚Äù In the ‚ÄúLog exports‚Äù section, select the types of logs you wish to enable (e.g., error logs, general logs, slow query logs). Save the changes and choose to apply them immediately or during the next maintenance window.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Database logging should be enabled
check_compliance() {
    log ""Checking AWS resources for Database logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,Database logging should be enabled,"To help with logging and monitoring within your environment, ensure AWS Relational Database Service (AWS RDS) logging is enabled.",Compliance,High,"To enable database logging for your RDS instances, log into the AWS Management Console, navigate to your RDS instance, and click on ‚ÄúModify.‚Äù In the ‚ÄúLog exports‚Äù section, select the types of logs you wish to enable (e.g., error logs, general logs, slow query logs). Save the changes and choose to apply them immediately or during the next maintenance window.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Database logging should be enabled
check_compliance() {
    log ""Checking AWS resources for Database logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Database logging should be enabled,"To help with logging and monitoring within your environment, ensure AWS Relational Database Service (AWS RDS) logging is enabled.",Compliance,High,"To enable database logging for your RDS instances, log into the AWS Management Console, navigate to your RDS instance, and click on ‚ÄúModify.‚Äù In the ‚ÄúLog exports‚Äù section, select the types of logs you wish to enable (e.g., error logs, general logs, slow query logs). Save the changes and choose to apply them immediately or during the next maintenance window.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Database logging should be enabled
check_compliance() {
    log ""Checking AWS resources for Database logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Database logging should be enabled,"To help with logging and monitoring within your environment, ensure AWS Relational Database Service (AWS RDS) logging is enabled.",Compliance,High,"To enable database logging for your RDS instances, log into the AWS Management Console, navigate to your RDS instance, and click on ‚ÄúModify.‚Äù In the ‚ÄúLog exports‚Äù section, select the types of logs you wish to enable (e.g., error logs, general logs, slow query logs). Save the changes and choose to apply them immediately or during the next maintenance window.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Database logging should be enabled
check_compliance() {
    log ""Checking AWS resources for Database logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance multiple az should be enabled,Multi-AZ support in AWS Relational Database Service (AWS RDS) provides enhanced availability and durability for database instances.,Compliance,Medium,"To enable Multi-AZ deployment for RDS DB instances, log into the AWS Management Console, select your DB instance, and click on ‚ÄúModify.‚Äù In the ‚ÄúAvailability & durability‚Äù section, choose the option for Multi-AZ deployment and save your changes. Apply the modifications either immediately or during the next maintenance window.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance multiple az should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance multiple az should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,RDS DB instance multiple az should be enabled,Multi-AZ support in AWS Relational Database Service (AWS RDS) provides enhanced availability and durability for database instances.,Compliance,Medium,"To enable Multi-AZ deployment for RDS DB instances, log into the AWS Management Console, select your DB instance, and click on ‚ÄúModify.‚Äù In the ‚ÄúAvailability & durability‚Äù section, choose the option for Multi-AZ deployment and save your changes. Apply the modifications either immediately or during the next maintenance window.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance multiple az should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance multiple az should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance multiple az should be enabled,Multi-AZ support in AWS Relational Database Service (AWS RDS) provides enhanced availability and durability for database instances.,Compliance,Medium,"To enable Multi-AZ deployment for RDS DB instances, log into the AWS Management Console, select your DB instance, and click on ‚ÄúModify.‚Äù In the ‚ÄúAvailability & durability‚Äù section, choose the option for Multi-AZ deployment and save your changes. Apply the modifications either immediately or during the next maintenance window.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance multiple az should be enabled
check_compliance() {
    log ""Checking AWS resources for RDS DB instance multiple az should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS database instances should use a custom administrator username,This control checks whether you've changed the administrative username for AWS Relational Database Service (AWS RDS) database instances from the default value. The control fails if the administrative username is set to the default value.,Compliance,High,"To set a custom administrator username for your RDS DB instances, log into the AWS Management Console, navigate to the RDS dashboard, and create a new instance. During the creation process, specify your custom username in the ‚ÄúDB instance identifier‚Äù section. If you have existing instances, you may need to create a new instance and migrate data or change the existing username as per your requirements
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS database instances should use a custom administrator username
check_compliance() {
    log ""Checking AWS resources for RDS database instances should use a custom administrator username compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances should not use public subnet,This control checks if RDS DB instance is configured with public subnet as there is a risk of exposing sensitive data.,Compliance,Low,"To ensure that your RDS instances do not use public subnets, check the subnet configuration when creating the instance. Log into the AWS Management Console, navigate to the VPC dashboard, and verify that the selected subnet for your RDS instance is private. If needed, launch a new RDS instance in a private subnet
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should not use public subnet
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should not use public subnet compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS PostgreSQL DB instances should not be exposed to local file read vulnerability,This control checks whether AWS PostgreSQL DB isntance are exposed to local file read vulnerability by ensuring that AWS RDS PostgreSQL instances use a non-vulnerable version of the log_fdw.,Compliance,Low,"To protect RDS PostgreSQL instances from local file read vulnerabilities, ensure that the appropriate configurations are set. Verify that the local_file setting is disabled in your instance parameters. Log into the AWS Management Console, navigate to the RDS dashboard, select your PostgreSQL instance, and modify the DB parameter group settings

https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS PostgreSQL DB instances should not be exposed to local file read vulnerability
check_compliance() {
    log ""Checking AWS resources for RDS PostgreSQL DB instances should not be exposed to local file read vulnerability compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instances should prohibit public access,Manage access to resources in the AWS Cloud by ensuring that AWS Relational Database Service (AWS RDS) instances are not public.,Compliance,High,"To prohibit public access for RDS DB instances, log into the AWS Management Console and navigate to the RDS dashboard. Select your DB instance and ensure that the ""Public accessibility"" option is set to ‚ÄúNo.‚Äù Save changes and apply them either immediately or during the next maintenance window
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should prohibit public access
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,RDS DB instances should prohibit public access,Manage access to resources in the AWS Cloud by ensuring that AWS Relational Database Service (AWS RDS) instances are not public.,Compliance,High,"To prohibit public access for RDS DB instances, log into the AWS Management Console and navigate to the RDS dashboard. Select your DB instance and ensure that the ""Public accessibility"" option is set to ‚ÄúNo.‚Äù Save changes and apply them either immediately or during the next maintenance window
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instances should prohibit public access
check_compliance() {
    log ""Checking AWS resources for RDS DB instances should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB instance should be protected by backup plan,Ensure that AWS Relational Database Service (AWS RDS) instances are protected by a backup plan. The rule is non-compliant if the AWS RDS Database instance is not covered by a backup plan.,Compliance,Low,"To protect your RDS DB instances with a backup plan, ensure that automated backups are enabled. Log into the AWS Management Console, select your RDS instance, and click on ‚ÄúModify.‚Äù Ensure that the ‚ÄúBackup retention period‚Äù is greater than 0 days, and apply the changes immediately or during the next maintenance window
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB instance should be protected by backup plan
check_compliance() {
    log ""Checking AWS resources for RDS DB instance should be protected by backup plan compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,An RDS event notifications subscription should be configured for critical database parameter group events,To be added,Compliance,Low,"To configure an RDS event notifications subscription for critical database parameter group events, log into the AWS Management Console, navigate to the RDS dashboard, and select ""Event subscriptions."" Create a new subscription and select the parameter group events you wish to monitor. Specify the notification method, such as an SNS topic.
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html#USER_Events.Subscribing",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for An RDS event notifications subscription should be configured for critical database parameter group events
check_compliance() {
    log ""Checking AWS resources for An RDS event notifications subscription should be configured for critical database parameter group events compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,An RDS event notifications subscription should be configured for critical database security group events,To be added,Compliance,Medium,"RDS event notifications subscription for critical database security group events, log into the AWS Management Console, navigate to the RDS dashboard, and select ""Event subscriptions."" Create a new subscription by selecting the security group events you want to monitor, and specify the notification method (e.g., an SNS topic).
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html#USER_Events.Subscribing
",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for An RDS event notifications subscription should be configured for critical database security group events
check_compliance() {
    log ""Checking AWS resources for An RDS event notifications subscription should be configured for critical database security group events compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB snapshots should be encrypted at rest,Ensure that encryption is enabled for your AWS Relational Database Service (AWS RDS) snapshots.,Compliance,High,"RDS DB snapshots are encrypted at rest, create snapshots with encryption enabled. Log into the AWS Management Console, navigate to your RDS instance, and select ""Take snapshot."" Ensure that the ""Enable encryption"" option is selected. For existing unencrypted snapshots, you can create a copy of the snapshot with encryption enabled
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB snapshots should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for RDS DB snapshots should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,RDS DB snapshots should be encrypted at rest,Ensure that encryption is enabled for your AWS Relational Database Service (AWS RDS) snapshots.,Compliance,High,"RDS DB snapshots are encrypted at rest, create snapshots with encryption enabled. Log into the AWS Management Console, navigate to your RDS instance, and select ""Take snapshot."" Ensure that the ""Enable encryption"" option is selected. For existing unencrypted snapshots, you can create a copy of the snapshot with encryption enabled
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB snapshots should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for RDS DB snapshots should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,RDS DB snapshots should be encrypted at rest,Ensure that encryption is enabled for your AWS Relational Database Service (AWS RDS) snapshots.,Compliance,High,"RDS DB snapshots are encrypted at rest, create snapshots with encryption enabled. Log into the AWS Management Console, navigate to your RDS instance, and select ""Take snapshot."" Ensure that the ""Enable encryption"" option is selected. For existing unencrypted snapshots, you can create a copy of the snapshot with encryption enabled
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB snapshots should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for RDS DB snapshots should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS DB snapshots should be encrypted at rest,Ensure that encryption is enabled for your AWS Relational Database Service (AWS RDS) snapshots.,Compliance,High,"RDS DB snapshots are encrypted at rest, create snapshots with encryption enabled. Log into the AWS Management Console, navigate to your RDS instance, and select ""Take snapshot."" Ensure that the ""Enable encryption"" option is selected. For existing unencrypted snapshots, you can create a copy of the snapshot with encryption enabled
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS DB snapshots should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for RDS DB snapshots should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
RDS,RDS snapshots should prohibit public access,To be added,Compliance,High,"RDS snapshots, log into the AWS Management Console and navigate to the RDS dashboard. Select the snapshot you wish to modify and ensure that it is set to ‚ÄúPrivate‚Äù under the ‚ÄúPermissions‚Äù settings. If public access is enabled, modify the snapshot settings accordingly
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS snapshots should prohibit public access
check_compliance() {
    log ""Checking AWS resources for RDS snapshots should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,RDS snapshots should prohibit public access,To be added,Compliance,High,"RDS snapshots, log into the AWS Management Console and navigate to the RDS dashboard. Select the snapshot you wish to modify and ensure that it is set to ‚ÄúPrivate‚Äù under the ‚ÄúPermissions‚Äù settings. If public access is enabled, modify the snapshot settings accordingly
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for RDS snapshots should prohibit public access
check_compliance() {
    log ""Checking AWS resources for RDS snapshots should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Redshift,AWS Redshift audit logging should be enabled,This control ensures if redshift clusters are logging audits to a specific bucket. The rule is no compliant if audit logging is not enabled for a redshift cluster or if the 'bucketNames' parameter is provided but the audit logging destination does not match.,Compliance,High,Ensure AWS Redshift audit logging is enabled. Steps: 1. Go to the Redshift console. 2. Enable audit logging. https://docs.aws.amazon.com/redshift/latest/mgmt/managing-audit-logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift audit logging should be enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift audit logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,AWS Redshift audit logging should be enabled,This control ensures if redshift clusters are logging audits to a specific bucket. The rule is no compliant if audit logging is not enabled for a redshift cluster or if the 'bucketNames' parameter is provided but the audit logging destination does not match.,Compliance,High,Ensure AWS Redshift audit logging is enabled. Steps: 1. Go to the Redshift console. 2. Enable audit logging. https://docs.aws.amazon.com/redshift/latest/mgmt/managing-audit-logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift audit logging should be enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift audit logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,AWS Redshift audit logging should be enabled,This control ensures if redshift clusters are logging audits to a specific bucket. The rule is no compliant if audit logging is not enabled for a redshift cluster or if the 'bucketNames' parameter is provided but the audit logging destination does not match.,Compliance,High,Ensure AWS Redshift audit logging is enabled. Steps: 1. Go to the Redshift console. 2. Enable audit logging. https://docs.aws.amazon.com/redshift/latest/mgmt/managing-audit-logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift audit logging should be enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift audit logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,AWS Redshift audit logging should be enabled,This control ensures if redshift clusters are logging audits to a specific bucket. The rule is no compliant if audit logging is not enabled for a redshift cluster or if the 'bucketNames' parameter is provided but the audit logging destination does not match.,Compliance,High,Ensure AWS Redshift audit logging is enabled. Steps: 1. Go to the Redshift console. 2. Enable audit logging. https://docs.aws.amazon.com/redshift/latest/mgmt/managing-audit-logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift audit logging should be enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift audit logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,AWS Redshift audit logging should be enabled,This control ensures if redshift clusters are logging audits to a specific bucket. The rule is no compliant if audit logging is not enabled for a redshift cluster or if the 'bucketNames' parameter is provided but the audit logging destination does not match.,Compliance,High,Ensure AWS Redshift audit logging is enabled. Steps: 1. Go to the Redshift console. 2. Enable audit logging. https://docs.aws.amazon.com/redshift/latest/mgmt/managing-audit-logging.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift audit logging should be enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift audit logging should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Redshift,AWS Redshift clusters should have automatic snapshots enabled,This control checks whether AWS Redshift clusters have automated snapshots enabled. It also checks whether the snapshot retention period is greater than or equal to seven.,Compliance,High,Ensure AWS Redshift clusters have automatic snapshots enabled. Steps: 1. Go to the Redshift console. 2. Enable automatic snapshots. https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift clusters should have automatic snapshots enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift clusters should have automatic snapshots enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Redshift,AWS Redshift should have automatic upgrades to major versions enabled,This control checks whether automatic major version upgrades are enabled for the AWS Redshift cluster.,Compliance,High,Ensure AWS Redshift has automatic upgrades to major versions enabled. Steps: 1. Go to the Redshift console. 2. Enable automatic upgrades. https://docs.aws.amazon.com/redshift/latest/mgmt/cluster-management.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift should have automatic upgrades to major versions enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift should have automatic upgrades to major versions enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Redshift,Redshift clusters should be encrypted with CMK,Ensure Redshift cluster is encrypted using CMK. The rule is non-compliant if the Redshift clusters is not encrypted using CMK.,Compliance,High,Ensure Redshift clusters are encrypted with CMK. Steps: 1. Go to the Redshift console. 2. Enable CMK encryption for clusters. https://docs.aws.amazon.com/redshift/latest/mgmt/security-iam.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Redshift clusters should be encrypted with CMK
check_compliance() {
    log ""Checking AWS resources for Redshift clusters should be encrypted with CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Redshift,Redshift cluster encryption in transit should be enabled,Ensure that your AWS Redshift clusters require TLS/SSL encryption to connect to SQL clients.,Compliance,High,Ensure Redshift cluster encryption in transit is enabled. Steps: 1. Go to the Redshift console. 2. Enable encryption in transit. https://docs.aws.amazon.com/redshift/latest/mgmt/security-iam.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Redshift cluster encryption in transit should be enabled
check_compliance() {
    log ""Checking AWS resources for Redshift cluster encryption in transit should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,Redshift cluster encryption in transit should be enabled,Ensure that your AWS Redshift clusters require TLS/SSL encryption to connect to SQL clients.,Compliance,High,Ensure Redshift cluster encryption in transit is enabled. Steps: 1. Go to the Redshift console. 2. Enable encryption in transit. https://docs.aws.amazon.com/redshift/latest/mgmt/security-iam.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Redshift cluster encryption in transit should be enabled
check_compliance() {
    log ""Checking AWS resources for Redshift cluster encryption in transit should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Redshift,Redshift cluster audit logging and encryption should be enabled,"To protect data at rest, ensure that encryption is enabled for your AWS Redshift clusters. You must also ensure that required configurations are deployed on AWS Redshift clusters. The audit logging should be enabled to provide information about connections and user activities in the database.",Compliance,High,Ensure Redshift cluster audit logging and encryption are enabled. Steps: 1. Go to the Redshift console. 2. Enable audit logging and encryption. https://docs.aws.amazon.com/redshift/latest/mgmt/security-iam.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Redshift cluster audit logging and encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for Redshift cluster audit logging and encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Redshift,AWS Redshift enhanced VPC routing should be enabled,Ensure that AWS Redshift cluster has 'enhancedVpcRouting' enabled. The rule is non-compliant if 'enhancedVpcRouting' is not enabled or if the configuration.enhancedVpcRouting field is 'false'.,Compliance,High,Ensure AWS Redshift enhanced VPC routing is enabled. Steps: 1. Go to the Redshift console. 2. Enable enhanced VPC routing. https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift enhanced VPC routing should be enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift enhanced VPC routing should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Reliability,AWS Redshift enhanced VPC routing should be enabled,Ensure that AWS Redshift cluster has 'enhancedVpcRouting' enabled. The rule is non-compliant if 'enhancedVpcRouting' is not enabled or if the configuration.enhancedVpcRouting field is 'false'.,Compliance,High,Ensure AWS Redshift enhanced VPC routing is enabled. Steps: 1. Go to the Redshift console. 2. Enable enhanced VPC routing. https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift enhanced VPC routing should be enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift enhanced VPC routing should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",Bash,Weekly,SOC 2,2024-02-13
Security,AWS Redshift enhanced VPC routing should be enabled,Ensure that AWS Redshift cluster has 'enhancedVpcRouting' enabled. The rule is non-compliant if 'enhancedVpcRouting' is not enabled or if the configuration.enhancedVpcRouting field is 'false'.,Compliance,High,Ensure AWS Redshift enhanced VPC routing is enabled. Steps: 1. Go to the Redshift console. 2. Enable enhanced VPC routing. https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift enhanced VPC routing should be enabled
check_compliance() {
    log ""Checking AWS resources for AWS Redshift enhanced VPC routing should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Redshift,AWS Redshift clusters should be encrypted with KMS,Ensure that AWS Redshift clusters are using a specified AWS Key Management Service (AWS KMS) key for encryption. The rule is compliant if encryption is enabled and the cluster is encrypted with the key provided in the kmsKeyArn parameter. The rule is non-compliant if the cluster is not encrypted or encrypted with another key.,Compliance,High,Ensure AWS Redshift clusters are encrypted with KMS. Steps: 1. Go to the Redshift console. 2. Enable KMS encryption for clusters. https://docs.aws.amazon.com/redshift/latest/mgmt/security-iam.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift clusters should be encrypted with KMS
check_compliance() {
    log ""Checking AWS resources for AWS Redshift clusters should be encrypted with KMS compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,AWS Redshift clusters should be encrypted with KMS,Ensure that AWS Redshift clusters are using a specified AWS Key Management Service (AWS KMS) key for encryption. The rule is compliant if encryption is enabled and the cluster is encrypted with the key provided in the kmsKeyArn parameter. The rule is non-compliant if the cluster is not encrypted or encrypted with another key.,Compliance,High,Ensure AWS Redshift clusters are encrypted with KMS. Steps: 1. Go to the Redshift console. 2. Enable KMS encryption for clusters. https://docs.aws.amazon.com/redshift/latest/mgmt/security-iam.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift clusters should be encrypted with KMS
check_compliance() {
    log ""Checking AWS resources for AWS Redshift clusters should be encrypted with KMS compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Redshift,AWS Redshift should have required maintenance settings,Ensure whether AWS Redshift clusters have the specified maintenance settings. Redshift clusters `allowVersionUpgrade` should be set to `true` and `automatedSnapshotRetentionPeriod` should be greater than 7.,Compliance,High,Ensure AWS Redshift has required maintenance settings. Steps: 1. Go to the Redshift console. 2. Verify maintenance settings. https://docs.aws.amazon.com/redshift/latest/mgmt/maintenance.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift should have required maintenance settings
check_compliance() {
    log ""Checking AWS resources for AWS Redshift should have required maintenance settings compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,AWS Redshift should have required maintenance settings,Ensure whether AWS Redshift clusters have the specified maintenance settings. Redshift clusters `allowVersionUpgrade` should be set to `true` and `automatedSnapshotRetentionPeriod` should be greater than 7.,Compliance,High,Ensure AWS Redshift has required maintenance settings. Steps: 1. Go to the Redshift console. 2. Verify maintenance settings. https://docs.aws.amazon.com/redshift/latest/mgmt/maintenance.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift should have required maintenance settings
check_compliance() {
    log ""Checking AWS resources for AWS Redshift should have required maintenance settings compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Redshift,AWS Redshift clusters should not use the default Admin username,This control checks whether a AWS Redshift cluster has changed the admin username from its default value. This control will fail if the admin username for a Redshift cluster is set to awsuser.,Compliance,High,Ensure AWS Redshift clusters do not use the default Admin username. Steps: 1. Go to the Redshift console. 2. Change the Admin username. https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS Redshift clusters should not use the default Admin username
check_compliance() {
    log ""Checking AWS resources for AWS Redshift clusters should not use the default Admin username compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Redshift,Redshift clusters should not use the default database name,This control checks whether an AWS Redshift cluster has changed the database name from its default value. The control will fail if the database name for a Redshift cluster is set to dev.,Compliance,High,Ensure Redshift clusters do not use the default database name. Steps: 1. Go to the Redshift console. 2. Change the database name. https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Redshift clusters should not use the default database name
check_compliance() {
    log ""Checking AWS resources for Redshift clusters should not use the default database name compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Redshift,Redshift clusters should prohibit public access,Manage access to resources in the AWS Cloud by ensuring that AWS Redshift clusters are not public.,Compliance,High,Ensure Redshift clusters prohibit public access. Steps: 1. Go to the Redshift console. 2. Set public access to prohibited. https://docs.aws.amazon.com/redshift/latest/mgmt/security-iam.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Redshift clusters should prohibit public access
check_compliance() {
    log ""Checking AWS resources for Redshift clusters should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,Redshift clusters should prohibit public access,Manage access to resources in the AWS Cloud by ensuring that AWS Redshift clusters are not public.,Compliance,High,Ensure Redshift clusters prohibit public access. Steps: 1. Go to the Redshift console. 2. Set public access to prohibited. https://docs.aws.amazon.com/redshift/latest/mgmt/security-iam.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Redshift clusters should prohibit public access
check_compliance() {
    log ""Checking AWS resources for Redshift clusters should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Reliability,S3 bucket cross-region replication should be enabled,To be added,AWS Well-Architected Framework,Medium,Ensure S3 bucket cross-region replication is enabled. Steps: 1. Review S3 bucket settings. 2. Enable cross-region replication for improved disaster recovery. https://docs.aws.amazon.com/AmazonS3/latest/userguide/Replication.html,Cost: None/$0 ,"S3 Bucket Cross-Region Replication Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect buckets without cross-region replication.
Lambda Function: A scheduled Lambda function scans S3 buckets and enables cross-region replication if missing.
SSM Automation: Notifies administrators before enabling replication to allow destination bucket selection.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if cross-region replication (CRR) is enabled for each bucket.
‚úÖ Flags buckets without CRR and logs them.
‚úÖ Configures cross-region replication for non-compliant buckets.
‚úÖ Ensures replication rules are correctly applied.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Define destination bucket for replication (Update this with the correct bucket name)
DEST_BUCKET=""your-destination-bucket""

# Function to enable cross-region replication
enable_s3_crr() {
    log ""Checking S3 buckets for cross-region replication compliance...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Check if replication configuration exists
        replication_status=$(aws s3api get-bucket-replication --bucket ""$bucket"" --query ""ReplicationConfiguration"" --output text 2>/dev/null)

        if [[ -n ""$replication_status"" ]]; then
            log ""‚úÖ Bucket $bucket already has replication enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have replication enabled. Configuring now...""

            # Apply replication rule
            REPLICATION_RULE='{
                ""Role"": ""arn:aws:iam::YOUR_ACCOUNT_ID:role/S3ReplicationRole"",
                ""Rules"": [
                    {
                        ""ID"": ""CRRRule"",
                        ""Status"": ""Enabled"",
                        ""Prefix"": """",
                        ""Destination"": {
                            ""Bucket"": ""arn:aws:s3:::'$DEST_BUCKET'"",
                            ""StorageClass"": ""STANDARD""
                        }
                    }
                ]
            }'

            echo ""$REPLICATION_RULE"" | aws s3api put-bucket-replication --bucket ""$bucket"" --replication-configuration file://-

            log ""‚úÖ Cross-region replication enabled for bucket $bucket.""
        fi
    done
}

# Execute the function
enable_s3_crr
","üöÄ Why This is Useful?
üîπ Ensures High Availability: Replicates critical data across regions.
üîπ Disaster Recovery Ready: Provides data redundancy to prevent loss.
üîπ Automates Compliance Enforcement for AWS security best practices.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets and checks their replication status.
2Ô∏è‚É£ Identifies non-compliant buckets without replication.
3Ô∏è‚É£ Enables cross-region replication for flagged buckets.
4Ô∏è‚É£ Configures replication rules with a predefined role and destination bucket.
5Ô∏è‚É£ Logs all actions, ensuring visibility and compliance.",,,,
S3,S3 bucket cross-region replication should be enabled,To be added,AWS Well-Architected Framework,Medium,Ensure S3 bucket cross-region replication is enabled. Steps: 1. Review S3 bucket settings. 2. Enable cross-region replication for improved disaster recovery. https://docs.aws.amazon.com/AmazonS3/latest/userguide/Replication.html,Cost: None/$0 ,"S3 Bucket Cross-Region Replication Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect buckets without cross-region replication.
Lambda Function: A scheduled Lambda function scans S3 buckets and enables cross-region replication if missing.
SSM Automation: Notifies administrators before enabling replication to allow destination bucket selection.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if cross-region replication (CRR) is enabled for each bucket.
‚úÖ Flags buckets without CRR and logs them.
‚úÖ Configures cross-region replication for non-compliant buckets.
‚úÖ Ensures replication rules are correctly applied.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Define destination bucket for replication (Update this with the correct bucket name)
DEST_BUCKET=""your-destination-bucket""

# Function to enable cross-region replication
enable_s3_crr() {
    log ""Checking S3 buckets for cross-region replication compliance...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Check if replication configuration exists
        replication_status=$(aws s3api get-bucket-replication --bucket ""$bucket"" --query ""ReplicationConfiguration"" --output text 2>/dev/null)

        if [[ -n ""$replication_status"" ]]; then
            log ""‚úÖ Bucket $bucket already has replication enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have replication enabled. Configuring now...""

            # Apply replication rule
            REPLICATION_RULE='{
                ""Role"": ""arn:aws:iam::YOUR_ACCOUNT_ID:role/S3ReplicationRole"",
                ""Rules"": [
                    {
                        ""ID"": ""CRRRule"",
                        ""Status"": ""Enabled"",
                        ""Prefix"": """",
                        ""Destination"": {
                            ""Bucket"": ""arn:aws:s3:::'$DEST_BUCKET'"",
                            ""StorageClass"": ""STANDARD""
                        }
                    }
                ]
            }'

            echo ""$REPLICATION_RULE"" | aws s3api put-bucket-replication --bucket ""$bucket"" --replication-configuration file://-

            log ""‚úÖ Cross-region replication enabled for bucket $bucket.""
        fi
    done
}

# Execute the function
enable_s3_crr
","üöÄ Why This is Useful?
üîπ Ensures High Availability: Replicates critical data across regions.
üîπ Disaster Recovery Ready: Provides data redundancy to prevent loss.
üîπ Automates Compliance Enforcement for AWS security best practices.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets and checks their replication status.
2Ô∏è‚É£ Identifies non-compliant buckets without replication.
3Ô∏è‚É£ Enables cross-region replication for flagged buckets.
4Ô∏è‚É£ Configures replication rules with a predefined role and destination bucket.
5Ô∏è‚É£ Logs all actions, ensuring visibility and compliance.",,,,
Reliability,Both VPN tunnels provided by AWS Site-to-Site VPN should be in UP status,To be added,AWS Well-Architected Framework,High,Ensure both VPN tunnels provided by AWS Site-to-Site VPN are in UP status. Steps: 1. Check the status of both VPN tunnels. 2. Troubleshoot if any tunnel is down. https://docs.aws.amazon.com/vpn/latest/sitetositevpn/MonitoringVPNConnections.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Both VPN tunnels provided by AWS Site-to-Site VPN should be in UP status
check_compliance() {
    log ""Checking AWS resources for Both VPN tunnels provided by AWS Site-to-Site VPN should be in UP status compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Reliability,Route 53 zones should have query logging enabled,To be added,AWS Well-Architected Framework,High,Ensure Route 53 zones have query logging enabled. Steps: 1. Review Route 53 settings. 2. Enable query logging for insights into DNS queries. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logging.html,Cost: None/$0 ,"Route 53 Zones Should Have Query Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Route 53 hosted zones have query logging enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all hosted zones and enables query logging if missing.
SSM Automation: Sends an SNS notification to admins when query logging is not enabled.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 hosted zones.
‚úÖ Checks if query logging is enabled.
‚úÖ If missing, enables query logging and associates it with a CloudWatch log group.
‚úÖ Logs findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check and enable query logging for Route 53 hosted zones
enable_query_logging() {
    log ""Checking Route 53 hosted zones for query logging...""

    hosted_zones=$(aws route53 list-hosted-zones --query ""HostedZones[].Id"" --output text)

    if [[ -z ""$hosted_zones"" ]]; then
        log ""No Route 53 hosted zones found.""
        exit 0
    fi

    for zone_id in $hosted_zones; do
        zone_id_cleaned=$(echo ""$zone_id"" | sed 's|/hostedzone/||')
        
        log ""Checking hosted zone: $zone_id_cleaned""

        query_log_status=$(aws route53 get-query-logging-config --id ""$zone_id_cleaned"" --query ""QueryLoggingConfig"" --output json 2>/dev/null)

        if [[ -z ""$query_log_status"" ]]; then
            log ""‚ö†Ô∏è Query logging is NOT enabled for $zone_id_cleaned. Enabling now...""
            
            # Create a CloudWatch log group if not exists
            log_group_name=""/aws/route53/query-logs/$zone_id_cleaned""
            aws logs create-log-group --log-group-name ""$log_group_name"" 2>/dev/null
            
            # Create query logging configuration
            aws route53 create-query-logging-config \
                --hosted-zone-id ""$zone_id_cleaned"" \
                --cloud-watch-logs-log-group-arn ""arn:aws:logs:$(aws configure get region):$(aws sts get-caller-identity --query ""Account"" --output text):log-group:$log_group_name"" \
                --query ""QueryLoggingConfig.Id"" --output text
            
            log ""‚úÖ Query logging enabled for hosted zone $zone_id_cleaned.""
        else
            log ""‚úÖ Query logging is already enabled for $zone_id_cleaned.""
        fi
    done
}

# Execute the function
enable_query_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Provides visibility into DNS queries for security monitoring.
üîπ Automates Compliance: Ensures all hosted zones have query logging enabled.
üîπ Centralized Logging: Stores logs in CloudWatch for easy analysis and alerting.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 hosted zones.
2Ô∏è‚É£ Checks if query logging is enabled.
3Ô∏è‚É£ If missing, creates a CloudWatch log group and enables logging.
4Ô∏è‚É£ Associates the log group with the hosted zone.
5Ô∏è‚É£ Logs actions and ensures compliance.",,,,
Route 53,Route 53 zones should have query logging enabled,To be added,AWS Well-Architected Framework,High,Ensure Route 53 zones have query logging enabled. Steps: 1. Review Route 53 settings. 2. Enable query logging for insights into DNS queries. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logging.html,Cost: None/$0 ,"Route 53 Zones Should Have Query Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Route 53 hosted zones have query logging enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all hosted zones and enables query logging if missing.
SSM Automation: Sends an SNS notification to admins when query logging is not enabled.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 hosted zones.
‚úÖ Checks if query logging is enabled.
‚úÖ If missing, enables query logging and associates it with a CloudWatch log group.
‚úÖ Logs findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check and enable query logging for Route 53 hosted zones
enable_query_logging() {
    log ""Checking Route 53 hosted zones for query logging...""

    hosted_zones=$(aws route53 list-hosted-zones --query ""HostedZones[].Id"" --output text)

    if [[ -z ""$hosted_zones"" ]]; then
        log ""No Route 53 hosted zones found.""
        exit 0
    fi

    for zone_id in $hosted_zones; do
        zone_id_cleaned=$(echo ""$zone_id"" | sed 's|/hostedzone/||')
        
        log ""Checking hosted zone: $zone_id_cleaned""

        query_log_status=$(aws route53 get-query-logging-config --id ""$zone_id_cleaned"" --query ""QueryLoggingConfig"" --output json 2>/dev/null)

        if [[ -z ""$query_log_status"" ]]; then
            log ""‚ö†Ô∏è Query logging is NOT enabled for $zone_id_cleaned. Enabling now...""
            
            # Create a CloudWatch log group if not exists
            log_group_name=""/aws/route53/query-logs/$zone_id_cleaned""
            aws logs create-log-group --log-group-name ""$log_group_name"" 2>/dev/null
            
            # Create query logging configuration
            aws route53 create-query-logging-config \
                --hosted-zone-id ""$zone_id_cleaned"" \
                --cloud-watch-logs-log-group-arn ""arn:aws:logs:$(aws configure get region):$(aws sts get-caller-identity --query ""Account"" --output text):log-group:$log_group_name"" \
                --query ""QueryLoggingConfig.Id"" --output text
            
            log ""‚úÖ Query logging enabled for hosted zone $zone_id_cleaned.""
        else
            log ""‚úÖ Query logging is already enabled for $zone_id_cleaned.""
        fi
    done
}

# Execute the function
enable_query_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Provides visibility into DNS queries for security monitoring.
üîπ Automates Compliance: Ensures all hosted zones have query logging enabled.
üîπ Centralized Logging: Stores logs in CloudWatch for easy analysis and alerting.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 hosted zones.
2Ô∏è‚É£ Checks if query logging is enabled.
3Ô∏è‚É£ If missing, creates a CloudWatch log group and enables logging.
4Ô∏è‚É£ Associates the log group with the hosted zone.
5Ô∏è‚É£ Logs actions and ensures compliance.",,,,
Security,Route 53 zones should have query logging enabled,To be added,AWS Well-Architected Framework,High,Ensure Route 53 zones have query logging enabled. Steps: 1. Review Route 53 settings. 2. Enable query logging for insights into DNS queries. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logging.html,Cost: None/$0 ,"Route 53 Zones Should Have Query Logging Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if Route 53 hosted zones have query logging enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all hosted zones and enables query logging if missing.
SSM Automation: Sends an SNS notification to admins when query logging is not enabled.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 hosted zones.
‚úÖ Checks if query logging is enabled.
‚úÖ If missing, enables query logging and associates it with a CloudWatch log group.
‚úÖ Logs findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check and enable query logging for Route 53 hosted zones
enable_query_logging() {
    log ""Checking Route 53 hosted zones for query logging...""

    hosted_zones=$(aws route53 list-hosted-zones --query ""HostedZones[].Id"" --output text)

    if [[ -z ""$hosted_zones"" ]]; then
        log ""No Route 53 hosted zones found.""
        exit 0
    fi

    for zone_id in $hosted_zones; do
        zone_id_cleaned=$(echo ""$zone_id"" | sed 's|/hostedzone/||')
        
        log ""Checking hosted zone: $zone_id_cleaned""

        query_log_status=$(aws route53 get-query-logging-config --id ""$zone_id_cleaned"" --query ""QueryLoggingConfig"" --output json 2>/dev/null)

        if [[ -z ""$query_log_status"" ]]; then
            log ""‚ö†Ô∏è Query logging is NOT enabled for $zone_id_cleaned. Enabling now...""
            
            # Create a CloudWatch log group if not exists
            log_group_name=""/aws/route53/query-logs/$zone_id_cleaned""
            aws logs create-log-group --log-group-name ""$log_group_name"" 2>/dev/null
            
            # Create query logging configuration
            aws route53 create-query-logging-config \
                --hosted-zone-id ""$zone_id_cleaned"" \
                --cloud-watch-logs-log-group-arn ""arn:aws:logs:$(aws configure get region):$(aws sts get-caller-identity --query ""Account"" --output text):log-group:$log_group_name"" \
                --query ""QueryLoggingConfig.Id"" --output text
            
            log ""‚úÖ Query logging enabled for hosted zone $zone_id_cleaned.""
        else
            log ""‚úÖ Query logging is already enabled for $zone_id_cleaned.""
        fi
    done
}

# Execute the function
enable_query_logging
","üöÄ Why This is Useful?
üîπ Enhances Security: Provides visibility into DNS queries for security monitoring.
üîπ Automates Compliance: Ensures all hosted zones have query logging enabled.
üîπ Centralized Logging: Stores logs in CloudWatch for easy analysis and alerting.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 hosted zones.
2Ô∏è‚É£ Checks if query logging is enabled.
3Ô∏è‚É£ If missing, creates a CloudWatch log group and enables logging.
4Ô∏è‚É£ Associates the log group with the hosted zone.
5Ô∏è‚É£ Logs actions and ensures compliance.",,,,
Reliability,S3 bucket logging should be enabled,To be added,AWS Well-Architected Framework,High,Ensure S3 bucket logging is enabled. Steps: 1. Review S3 bucket settings. 2. Enable logging to track requests made to the bucket. https://docs.aws.amazon.com/AmazonS3/latest/userguide/LoggingHowTo.html,Cost: None/$0 ,"S3 Bucket Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if logging is enabled for S3 buckets.
Lambda Function: A scheduled Lambda that scans all S3 buckets and enables logging if missing.
SSM Automation: Sends a notification for non-compliant buckets.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if logging is enabled.
‚úÖ If missing, applies logging to a designated bucket.
‚úÖ Logs findings and actions.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 bucket logging settings...""

destination_bucket=""my-centralized-logging-bucket""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    logging=$(aws s3api get-bucket-logging --bucket ""$bucket"" --query ""LoggingEnabled"" --output json 2>/dev/null)

    if [[ -z ""$logging"" ]]; then
        log ""‚ö†Ô∏è Bucket $bucket does not have logging enabled. Applying logging...""
        aws s3api put-bucket-logging --bucket ""$bucket"" --bucket-logging-status ""{\""LoggingEnabled\"": {\""TargetBucket\"": \""$destination_bucket\"", \""TargetPrefix\"": \""$bucket/\""}}""
        log ""‚úÖ Logging enabled for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket already has logging enabled.""
    fi
done
","üöÄ Why This is Useful?
üîπ Enhances Security Monitoring: Logs all S3 access and operations.
üîπ Ensures Compliance: Meets audit and regulatory requirements.
üîπ Automated Fixing: Enables logging if it's missing.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if logging is enabled.
3Ô∏è‚É£ If missing, applies logging to a central bucket.
4Ô∏è‚É£ Logs findings and updates.
5Ô∏è‚É£ Ensures compliance with security best practices.",,,,
S3,S3 bucket logging should be enabled,To be added,AWS Well-Architected Framework,High,Ensure S3 bucket logging is enabled. Steps: 1. Review S3 bucket settings. 2. Enable logging to track requests made to the bucket. https://docs.aws.amazon.com/AmazonS3/latest/userguide/LoggingHowTo.html,Cost: None/$0 ,"S3 Bucket Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if logging is enabled for S3 buckets.
Lambda Function: A scheduled Lambda that scans all S3 buckets and enables logging if missing.
SSM Automation: Sends a notification for non-compliant buckets.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if logging is enabled.
‚úÖ If missing, applies logging to a designated bucket.
‚úÖ Logs findings and actions.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 bucket logging settings...""

destination_bucket=""my-centralized-logging-bucket""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    logging=$(aws s3api get-bucket-logging --bucket ""$bucket"" --query ""LoggingEnabled"" --output json 2>/dev/null)

    if [[ -z ""$logging"" ]]; then
        log ""‚ö†Ô∏è Bucket $bucket does not have logging enabled. Applying logging...""
        aws s3api put-bucket-logging --bucket ""$bucket"" --bucket-logging-status ""{\""LoggingEnabled\"": {\""TargetBucket\"": \""$destination_bucket\"", \""TargetPrefix\"": \""$bucket/\""}}""
        log ""‚úÖ Logging enabled for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket already has logging enabled.""
    fi
done
","üöÄ Why This is Useful?
üîπ Enhances Security Monitoring: Logs all S3 access and operations.
üîπ Ensures Compliance: Meets audit and regulatory requirements.
üîπ Automated Fixing: Enables logging if it's missing.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if logging is enabled.
3Ô∏è‚É£ If missing, applies logging to a central bucket.
4Ô∏è‚É£ Logs findings and updates.
5Ô∏è‚É£ Ensures compliance with security best practices.",,,,
Reliability,S3 buckets object logging should be enabled,To be added,AWS Well-Architected Framework,High,Ensure S3 bucket object logging is enabled. Steps: 1. Review S3 bucket object settings. 2. Enable logging to track changes to objects. https://docs.aws.amazon.com/AmazonS3/latest/userguide/LoggingHowTo.html,Cost: None/$0 ,"S3 Buckets Object Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect S3 buckets without object logging.
Lambda Function: A scheduled Lambda function to identify and enable logging.
SSM Automation: Automatically apply remediation or notify administrators.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if server access logging is enabled.
‚úÖ Flags buckets without logging enabled.
‚úÖ Enables logging to a designated bucket.
‚úÖ Logs findings and actions taken.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Target bucket for storing logs (replace with your log bucket name)
LOG_BUCKET=""s3-access-logs-bucket""

# Function to enable logging on S3 buckets
enable_s3_logging() {
    log ""Checking S3 buckets for object logging status...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Get logging status
        logging_status=$(aws s3api get-bucket-logging --bucket ""$bucket"" --query ""LoggingEnabled"" --output text)

        if [[ -n ""$logging_status"" ]]; then
            log ""‚úÖ Bucket $bucket has object logging enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have logging enabled. Enabling now...""
            aws s3api put-bucket-logging --bucket ""$bucket"" --bucket-logging-status ""{\""LoggingEnabled\"":{\""TargetBucket\"":\""$LOG_BUCKET\"",\""TargetPrefix\"":\""logs/$bucket/\""}}""
            log ""‚úÖ Object logging enabled for bucket $bucket.""
        fi
    done
}

# Execute the function
enable_s3_logging
","üöÄ Why This is Useful?
üîπ Improves Security & Monitoring: Helps track access and modifications.
üîπ Ensures Compliance: Enables audit trails for security reviews.
üîπ Automates Remediation: Fixes buckets without logging automatically.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if server access logging is enabled.
3Ô∏è‚É£ Flags buckets without logging.
4Ô∏è‚É£ Enables logging to a designated S3 bucket.
5Ô∏è‚É£ Logs findings and actions taken.",,,,
S3,S3 buckets object logging should be enabled,To be added,AWS Well-Architected Framework,High,Ensure S3 bucket object logging is enabled. Steps: 1. Review S3 bucket object settings. 2. Enable logging to track changes to objects. https://docs.aws.amazon.com/AmazonS3/latest/userguide/LoggingHowTo.html,Cost: None/$0 ,"S3 Buckets Object Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect S3 buckets without object logging.
Lambda Function: A scheduled Lambda function to identify and enable logging.
SSM Automation: Automatically apply remediation or notify administrators.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if server access logging is enabled.
‚úÖ Flags buckets without logging enabled.
‚úÖ Enables logging to a designated bucket.
‚úÖ Logs findings and actions taken.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Target bucket for storing logs (replace with your log bucket name)
LOG_BUCKET=""s3-access-logs-bucket""

# Function to enable logging on S3 buckets
enable_s3_logging() {
    log ""Checking S3 buckets for object logging status...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Get logging status
        logging_status=$(aws s3api get-bucket-logging --bucket ""$bucket"" --query ""LoggingEnabled"" --output text)

        if [[ -n ""$logging_status"" ]]; then
            log ""‚úÖ Bucket $bucket has object logging enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have logging enabled. Enabling now...""
            aws s3api put-bucket-logging --bucket ""$bucket"" --bucket-logging-status ""{\""LoggingEnabled\"":{\""TargetBucket\"":\""$LOG_BUCKET\"",\""TargetPrefix\"":\""logs/$bucket/\""}}""
            log ""‚úÖ Object logging enabled for bucket $bucket.""
        fi
    done
}

# Execute the function
enable_s3_logging
","üöÄ Why This is Useful?
üîπ Improves Security & Monitoring: Helps track access and modifications.
üîπ Ensures Compliance: Enables audit trails for security reviews.
üîπ Automates Remediation: Fixes buckets without logging automatically.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if server access logging is enabled.
3Ô∏è‚É£ Flags buckets without logging.
4Ô∏è‚É£ Enables logging to a designated S3 bucket.
5Ô∏è‚É£ Logs findings and actions taken.",,,,
Security,S3 buckets object logging should be enabled,To be added,AWS Well-Architected Framework,High,Ensure S3 bucket object logging is enabled. Steps: 1. Review S3 bucket object settings. 2. Enable logging to track changes to objects. https://docs.aws.amazon.com/AmazonS3/latest/userguide/LoggingHowTo.html,Cost: None/$0 ,"S3 Buckets Object Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to detect S3 buckets without object logging.
Lambda Function: A scheduled Lambda function to identify and enable logging.
SSM Automation: Automatically apply remediation or notify administrators.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if server access logging is enabled.
‚úÖ Flags buckets without logging enabled.
‚úÖ Enables logging to a designated bucket.
‚úÖ Logs findings and actions taken.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Target bucket for storing logs (replace with your log bucket name)
LOG_BUCKET=""s3-access-logs-bucket""

# Function to enable logging on S3 buckets
enable_s3_logging() {
    log ""Checking S3 buckets for object logging status...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Get logging status
        logging_status=$(aws s3api get-bucket-logging --bucket ""$bucket"" --query ""LoggingEnabled"" --output text)

        if [[ -n ""$logging_status"" ]]; then
            log ""‚úÖ Bucket $bucket has object logging enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have logging enabled. Enabling now...""
            aws s3api put-bucket-logging --bucket ""$bucket"" --bucket-logging-status ""{\""LoggingEnabled\"":{\""TargetBucket\"":\""$LOG_BUCKET\"",\""TargetPrefix\"":\""logs/$bucket/\""}}""
            log ""‚úÖ Object logging enabled for bucket $bucket.""
        fi
    done
}

# Execute the function
enable_s3_logging
","üöÄ Why This is Useful?
üîπ Improves Security & Monitoring: Helps track access and modifications.
üîπ Ensures Compliance: Enables audit trails for security reviews.
üîπ Automates Remediation: Fixes buckets without logging automatically.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if server access logging is enabled.
3Ô∏è‚É£ Flags buckets without logging.
4Ô∏è‚É£ Enables logging to a designated S3 bucket.
5Ô∏è‚É£ Logs findings and actions taken.",,,,
Reliability,WAF web ACL logging should be enabled,To be added,AWS Well-Architected Framework,High,Ensure WAF web ACL logging is enabled. Steps: 1. Review WAF settings. 2. Enable logging for web ACLs to monitor requests. https://docs.aws.amazon.com/waf/latest/developerguide/logging.html,Cost: None/$0 ,"WAF Web ACL Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect WAF Web ACLs without logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all WAF Web ACLs and enables logging if missing.
SSM Automation: An SSM document to notify admins and automatically enable logging on non-compliant ACLs.","üîç Features of the Script:
‚úÖ Retrieves all AWS WAF Web ACLs (Regional & Global/CloudFront).
‚úÖ Checks if logging is enabled for each Web ACL.
‚úÖ If missing, enables logging and configures a CloudWatch Log Group.
‚úÖ Logs all findings and actions taken.
‚úÖ Supports manual mode (user inputs a specific Web ACL) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable logging on AWS WAF Web ACLs
enable_waf_logging() {
    log ""Checking AWS WAF Web ACLs for logging configuration...""

    # Get all Web ACLs in regional scope
    web_acls=$(aws wafv2 list-web-acls --scope REGIONAL --query ""WebACLs[].ARN"" --output text)

    # Get all Web ACLs in global (CloudFront) scope
    global_acls=$(aws wafv2 list-web-acls --scope CLOUDFRONT --query ""WebACLs[].ARN"" --output text)

    # Combine lists
    all_acls=""$web_acls $global_acls""

    if [[ -z ""$all_acls"" ]]; then
        log ""No AWS WAF Web ACLs found.""
        exit 0
    fi

    updated_count=0
    for acl_arn in $all_acls; do
        log ""Checking Web ACL: $acl_arn""

        # Check if logging is enabled
        logging_status=$(aws wafv2 get-logging-configuration --resource-arn ""$acl_arn"" --query ""LoggingConfiguration.ResourceArn"" --output text 2>/dev/null)

        if [[ ""$logging_status"" == ""None"" || -z ""$logging_status"" ]]; then
            log ""‚ö†Ô∏è Logging is NOT enabled for Web ACL: $acl_arn. Enabling now...""

            # Define a log group for WAF logs
            log_group_name=""WAFLogs-$(basename ""$acl_arn"")""

            # Create the log group if it doesn't exist
            aws logs create-log-group --log-group-name ""$log_group_name"" 2>/dev/null

            # Enable logging for the Web ACL
            aws wafv2 put-logging-configuration --logging-configuration ResourceArn=""$acl_arn"",LogDestinationConfigs=""arn:aws:logs:us-east-1:123456789012:log-group:$log_group_name""

            log ""‚úÖ Logging enabled for Web ACL: $acl_arn""
            ((updated_count++))
        else
            log ""‚úÖ Logging is already enabled for Web ACL: $acl_arn""
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ $updated_count WAF Web ACLs were updated to enable logging.""
    else
        log ""‚úÖ All WAF Web ACLs already have logging enabled.""
    fi
}

# Execute the function
enable_waf_logging
","üöÄ Why This is Useful?
üîπ Enhances Security Visibility: Provides detailed logs for analyzing WAF traffic.
üîπ Automates Compliance: Ensures all Web ACLs have logging enabled.
üîπ Reduces Manual Effort: Eliminates the need for manual configuration.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS WAF Web ACLs (Regional & Global/CloudFront).
2Ô∏è‚É£ Checks if logging is enabled.
3Ô∏è‚É£ If missing, creates a CloudWatch Log Group and enables logging.
4Ô∏è‚É£ Logs all actions for audit and compliance tracking.
5Ô∏è‚É£ Supports both manual and automatic execution.",,,,
WAF,WAF web ACL logging should be enabled,To be added,AWS Well-Architected Framework,High,Ensure WAF web ACL logging is enabled. Steps: 1. Review WAF settings. 2. Enable logging for web ACLs to monitor requests. https://docs.aws.amazon.com/waf/latest/developerguide/logging.html,Cost: None/$0 ,"WAF Web ACL Logging Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect WAF Web ACLs without logging enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all WAF Web ACLs and enables logging if missing.
SSM Automation: An SSM document to notify admins and automatically enable logging on non-compliant ACLs.","üîç Features of the Script:
‚úÖ Retrieves all AWS WAF Web ACLs (Regional & Global/CloudFront).
‚úÖ Checks if logging is enabled for each Web ACL.
‚úÖ If missing, enables logging and configures a CloudWatch Log Group.
‚úÖ Logs all findings and actions taken.
‚úÖ Supports manual mode (user inputs a specific Web ACL) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable logging on AWS WAF Web ACLs
enable_waf_logging() {
    log ""Checking AWS WAF Web ACLs for logging configuration...""

    # Get all Web ACLs in regional scope
    web_acls=$(aws wafv2 list-web-acls --scope REGIONAL --query ""WebACLs[].ARN"" --output text)

    # Get all Web ACLs in global (CloudFront) scope
    global_acls=$(aws wafv2 list-web-acls --scope CLOUDFRONT --query ""WebACLs[].ARN"" --output text)

    # Combine lists
    all_acls=""$web_acls $global_acls""

    if [[ -z ""$all_acls"" ]]; then
        log ""No AWS WAF Web ACLs found.""
        exit 0
    fi

    updated_count=0
    for acl_arn in $all_acls; do
        log ""Checking Web ACL: $acl_arn""

        # Check if logging is enabled
        logging_status=$(aws wafv2 get-logging-configuration --resource-arn ""$acl_arn"" --query ""LoggingConfiguration.ResourceArn"" --output text 2>/dev/null)

        if [[ ""$logging_status"" == ""None"" || -z ""$logging_status"" ]]; then
            log ""‚ö†Ô∏è Logging is NOT enabled for Web ACL: $acl_arn. Enabling now...""

            # Define a log group for WAF logs
            log_group_name=""WAFLogs-$(basename ""$acl_arn"")""

            # Create the log group if it doesn't exist
            aws logs create-log-group --log-group-name ""$log_group_name"" 2>/dev/null

            # Enable logging for the Web ACL
            aws wafv2 put-logging-configuration --logging-configuration ResourceArn=""$acl_arn"",LogDestinationConfigs=""arn:aws:logs:us-east-1:123456789012:log-group:$log_group_name""

            log ""‚úÖ Logging enabled for Web ACL: $acl_arn""
            ((updated_count++))
        else
            log ""‚úÖ Logging is already enabled for Web ACL: $acl_arn""
        fi
    done

    if [[ $updated_count -gt 0 ]]; then
        log ""‚úÖ $updated_count WAF Web ACLs were updated to enable logging.""
    else
        log ""‚úÖ All WAF Web ACLs already have logging enabled.""
    fi
}

# Execute the function
enable_waf_logging
","üöÄ Why This is Useful?
üîπ Enhances Security Visibility: Provides detailed logs for analyzing WAF traffic.
üîπ Automates Compliance: Ensures all Web ACLs have logging enabled.
üîπ Reduces Manual Effort: Eliminates the need for manual configuration.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS WAF Web ACLs (Regional & Global/CloudFront).
2Ô∏è‚É£ Checks if logging is enabled.
3Ô∏è‚É£ If missing, creates a CloudWatch Log Group and enables logging.
4Ô∏è‚É£ Logs all actions for audit and compliance tracking.
5Ô∏è‚É£ Supports both manual and automatic execution.",,,,
Reliability,S3 bucket default encryption should be enabled,To be added,AWS Well-Architected Framework,High,Ensure S3 bucket default encryption is enabled. Steps: 1. Review S3 bucket settings. 2. Enable default encryption for all objects. https://docs.aws.amazon.com/AmazonS3/latest/userguide/Encryption.html,Cost: None/$0 ,"S3 Bucket Default Encryption Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect S3 buckets without default encryption enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans S3 buckets and enables default encryption if missing.
SSM Automation: Notifies administrators before enabling encryption and allows manual approval if needed.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if default encryption is enabled for each bucket.
‚úÖ Flags buckets without default encryption and logs them.
‚úÖ Automatically applies AES-256 encryption to non-compliant buckets.
‚úÖ Option to use KMS encryption instead of AES-256.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable default encryption for S3 buckets
enable_s3_default_encryption() {
    log ""Checking S3 buckets for default encryption compliance...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Check if encryption is enabled
        encryption_status=$(aws s3api get-bucket-encryption --bucket ""$bucket"" --query ""ServerSideEncryptionConfiguration"" --output text 2>/dev/null)

        if [[ -n ""$encryption_status"" ]]; then
            log ""‚úÖ Bucket $bucket already has default encryption enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have encryption enabled. Applying AES-256 encryption...""

            # Apply AES-256 encryption
            aws s3api put-bucket-encryption --bucket ""$bucket"" --server-side-encryption-configuration '{
                ""Rules"": [{
                    ""ApplyServerSideEncryptionByDefault"": {
                        ""SSEAlgorithm"": ""AES256""
                    }
                }]
            }'

            log ""‚úÖ Default encryption enabled for bucket $bucket using AES-256.""
        fi
    done
}

# Execute the function
enable_s3_default_encryption
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures all objects stored in S3 are encrypted by default.
üîπ Compliance Ready: Meets AWS security best practices and regulatory requirements.
üîπ Automates Compliance Enforcement, reducing manual intervention.
üîπ Logs all actions, ensuring visibility and tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets in the AWS account.
2Ô∏è‚É£ Checks if default encryption is already enabled.
3Ô∏è‚É£ Flags buckets without encryption and logs them.
4Ô∏è‚É£ Applies AES-256 encryption to non-compliant buckets.
5Ô∏è‚É£ Logs all actions, ensuring compliance tracking.",,,,
S3,S3 bucket default encryption should be enabled,To be added,AWS Well-Architected Framework,High,Ensure S3 bucket default encryption is enabled. Steps: 1. Review S3 bucket settings. 2. Enable default encryption for all objects. https://docs.aws.amazon.com/AmazonS3/latest/userguide/Encryption.html,Cost: None/$0 ,"S3 Bucket Default Encryption Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect S3 buckets without default encryption enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans S3 buckets and enables default encryption if missing.
SSM Automation: Notifies administrators before enabling encryption and allows manual approval if needed.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if default encryption is enabled for each bucket.
‚úÖ Flags buckets without default encryption and logs them.
‚úÖ Automatically applies AES-256 encryption to non-compliant buckets.
‚úÖ Option to use KMS encryption instead of AES-256.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable default encryption for S3 buckets
enable_s3_default_encryption() {
    log ""Checking S3 buckets for default encryption compliance...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Check if encryption is enabled
        encryption_status=$(aws s3api get-bucket-encryption --bucket ""$bucket"" --query ""ServerSideEncryptionConfiguration"" --output text 2>/dev/null)

        if [[ -n ""$encryption_status"" ]]; then
            log ""‚úÖ Bucket $bucket already has default encryption enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have encryption enabled. Applying AES-256 encryption...""

            # Apply AES-256 encryption
            aws s3api put-bucket-encryption --bucket ""$bucket"" --server-side-encryption-configuration '{
                ""Rules"": [{
                    ""ApplyServerSideEncryptionByDefault"": {
                        ""SSEAlgorithm"": ""AES256""
                    }
                }]
            }'

            log ""‚úÖ Default encryption enabled for bucket $bucket using AES-256.""
        fi
    done
}

# Execute the function
enable_s3_default_encryption
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures all objects stored in S3 are encrypted by default.
üîπ Compliance Ready: Meets AWS security best practices and regulatory requirements.
üîπ Automates Compliance Enforcement, reducing manual intervention.
üîπ Logs all actions, ensuring visibility and tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets in the AWS account.
2Ô∏è‚É£ Checks if default encryption is already enabled.
3Ô∏è‚É£ Flags buckets without encryption and logs them.
4Ô∏è‚É£ Applies AES-256 encryption to non-compliant buckets.
5Ô∏è‚É£ Logs all actions, ensuring compliance tracking.",,,,
Security,S3 bucket default encryption should be enabled,To be added,AWS Well-Architected Framework,High,Ensure S3 bucket default encryption is enabled. Steps: 1. Review S3 bucket settings. 2. Enable default encryption for all objects. https://docs.aws.amazon.com/AmazonS3/latest/userguide/Encryption.html,Cost: None/$0 ,"S3 Bucket Default Encryption Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect S3 buckets without default encryption enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans S3 buckets and enables default encryption if missing.
SSM Automation: Notifies administrators before enabling encryption and allows manual approval if needed.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if default encryption is enabled for each bucket.
‚úÖ Flags buckets without default encryption and logs them.
‚úÖ Automatically applies AES-256 encryption to non-compliant buckets.
‚úÖ Option to use KMS encryption instead of AES-256.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable default encryption for S3 buckets
enable_s3_default_encryption() {
    log ""Checking S3 buckets for default encryption compliance...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Check if encryption is enabled
        encryption_status=$(aws s3api get-bucket-encryption --bucket ""$bucket"" --query ""ServerSideEncryptionConfiguration"" --output text 2>/dev/null)

        if [[ -n ""$encryption_status"" ]]; then
            log ""‚úÖ Bucket $bucket already has default encryption enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have encryption enabled. Applying AES-256 encryption...""

            # Apply AES-256 encryption
            aws s3api put-bucket-encryption --bucket ""$bucket"" --server-side-encryption-configuration '{
                ""Rules"": [{
                    ""ApplyServerSideEncryptionByDefault"": {
                        ""SSEAlgorithm"": ""AES256""
                    }
                }]
            }'

            log ""‚úÖ Default encryption enabled for bucket $bucket using AES-256.""
        fi
    done
}

# Execute the function
enable_s3_default_encryption
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures all objects stored in S3 are encrypted by default.
üîπ Compliance Ready: Meets AWS security best practices and regulatory requirements.
üîπ Automates Compliance Enforcement, reducing manual intervention.
üîπ Logs all actions, ensuring visibility and tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets in the AWS account.
2Ô∏è‚É£ Checks if default encryption is already enabled.
3Ô∏è‚É£ Flags buckets without encryption and logs them.
4Ô∏è‚É£ Applies AES-256 encryption to non-compliant buckets.
5Ô∏è‚É£ Logs all actions, ensuring compliance tracking.",,,,
Route 53,Route 53 domains auto renew should be enabled,To be added,Compliance,High,Ensure Route 53 domains auto-renew is enabled. Steps: 1. Review domain settings in Route 53. 2. Enable auto-renew for all domains. #Auto-Renew Domains,Cost: None/$0 ,"Route 53 Domains Auto Renew Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Route 53 registered domains have auto-renew enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies domains without auto-renew and enables it.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.
","üîç Features of the Script:
‚úÖ Retrieves all Route 53 registered domains.
‚úÖ Checks if auto-renew is enabled.
‚úÖ Flags domains without auto-renew and enables it.
‚úÖ Logs all actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable auto-renew on Route 53 domains
enable_auto_renew() {
    log ""Checking Route 53 domains for auto-renew...""

    # Get list of all registered domains
    domains=$(aws route53domains list-domains --query ""Domains[].DomainName"" --output text)

    if [[ -z ""$domains"" ]]; then
        log ""No Route 53 registered domains found.""
        exit 0
    fi

    for domain in $domains; do
        log ""Checking domain: $domain""

        # Check if auto-renew is enabled
        auto_renew_status=$(aws route53domains get-domain-detail --domain-name ""$domain"" --query ""AutoRenew"" --output text)

        if [[ ""$auto_renew_status"" == ""True"" ]]; then
            log ""‚úÖ Domain $domain has auto-renew enabled.""
        else
            log ""‚ö†Ô∏è Domain $domain does not have auto-renew enabled. Enabling it now...""

            # Enable auto-renew
            aws route53domains update-domain-nameservers --domain-name ""$domain"" --auto-renew

            log ""‚úÖ Auto-renew enabled for domain $domain.""
        fi
    done
}

# Execute the function
enable_auto_renew
","üöÄ Why This is Useful?
üîπ Prevents Domain Expiry: Ensures domains do not expire unexpectedly.
üîπ Automates Compliance: Identifies domains without auto-renew and corrects them.
üîπ Minimizes Manual Effort: No need to manually check and enable auto-renew for each domain.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 registered domains.
2Ô∏è‚É£ Checks if auto-renew is enabled.
3Ô∏è‚É£ Flags domains without auto-renew.
4Ô∏è‚É£ Enables auto-renew for non-compliant domains.
5Ô∏è‚É£ Logs findings and changes.",,,,
Route 53,Route 53 domains should not expire within next 30 days,To be added,Compliance,High,Ensure Route 53 domains do not expire within the next 30 days. Steps: 1. Check expiration dates for all domains. 2. Renew any domains expiring within 30 days. Domain Expiration,Cost: None/$0 ,"Route 53 Domains Should Not Expire Within the Next 30 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check for domains expiring within 30 days.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans Route 53 domains and sends alerts if expiration is near.
SSM Automation: Sends an SNS notification to admins when a domain is nearing expiration.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 registered domains.
‚úÖ Checks their expiration dates.
‚úÖ Flags domains expiring within 30 days.
‚úÖ Sends an alert if renewal is needed.
‚úÖ Logs findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Route 53 domain expiration dates
check_domain_expiration() {
    log ""Checking Route 53 domains for expiration within 30 days...""

    domains=$(aws route53domains list-domains --query ""Domains[].DomainName"" --output text)

    if [[ -z ""$domains"" ]]; then
        log ""No Route 53 domains found.""
        exit 0
    fi

    warning_days=30
    current_date=$(date -u +%Y-%m-%d)

    for domain in $domains; do
        expiration_date=$(aws route53domains get-domain-detail --domain-name ""$domain"" --query ""ExpirationDate"" --output text | cut -d'T' -f1)

        if [[ -z ""$expiration_date"" ]]; then
            log ""‚ö†Ô∏è Unable to fetch expiration date for $domain.""
            continue
        fi

        days_remaining=$(( ( $(date -d ""$expiration_date"" +%s) - $(date -d ""$current_date"" +%s) ) / 86400 ))

        if [[ ""$days_remaining"" -le ""$warning_days"" ]]; then
            log ""‚ö†Ô∏è Domain $domain is expiring in $days_remaining days. Action required: Renew the domain.""
        else
            log ""‚úÖ Domain $domain is valid (Expires in $days_remaining days).""
        fi
    done
}

# Execute the function
check_domain_expiration
","üöÄ Why This is Useful?
üîπ Prevents Downtime: Avoids disruptions due to expired domains.
üîπ Ensures Compliance: Keeps business-critical domains active.
üîπ Automates Monitoring: Provides proactive alerts on expiring","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 registered domains.
2Ô∏è‚É£ Checks their expiration dates.
3Ô∏è‚É£ Flags domains expiring within 30 days.
4Ô∏è‚É£ Suggests renewal for expiring domains.
5Ô∏è‚É£ Logs findings and actions.",,,,
Route 53,Route 53 domains should not expire within next 7 days,To be added,Compliance,High,Ensure Route 53 domains do not expire within the next 7 days. Steps: 1. Review expiration dates. 2. Renew any domains expiring within 7 days immediately. Domain Expiration,Cost: None/$0 ,"Route 53 Domains Should Not Expire Within the Next 7 Days
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check for domains expiring within 7 days.
Lambda Function: A scheduled Lambda that checks domain expiration dates daily and sends urgent alerts for domains expiring soon.
SSM Automation: Triggers a high-priority notification for immediate action.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 registered domains.
‚úÖ Checks their expiration dates.
‚úÖ Flags domains expiring within 7 days.
‚úÖ Sends a critical alert for renewal.
‚úÖ Logs findings and required actions.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check Route 53 domain expiration dates
check_domain_expiration_7_days() {
    log ""Checking Route 53 domains for expiration within 7 days...""

    domains=$(aws route53domains list-domains --query ""Domains[].DomainName"" --output text)

    if [[ -z ""$domains"" ]]; then
        log ""No Route 53 domains found.""
        exit 0
    fi

    warning_days=7
    current_date=$(date -u +%Y-%m-%d)

    for domain in $domains; do
        expiration_date=$(aws route53domains get-domain-detail --domain-name ""$domain"" --query ""ExpirationDate"" --output text | cut -d'T' -f1)

        if [[ -z ""$expiration_date"" ]]; then
            log ""‚ö†Ô∏è Unable to fetch expiration date for $domain.""
            continue
        fi

        days_remaining=$(( ( $(date -d ""$expiration_date"" +%s) - $(date -d ""$current_date"" +%s) ) / 86400 ))

        if [[ ""$days_remaining"" -le ""$warning_days"" ]]; then
            log ""‚ùå URGENT: Domain $domain expires in $days_remaining days! Renew immediately!""
        else
            log ""‚úÖ Domain $domain is valid (Expires in $days_remaining days).""
        fi
    done
}

# Execute the function
check_domain_expiration_7_days
","üöÄ Why This is Useful?
üîπ Prevents Critical Downtime: Immediate alerts for domains near expiration.
üîπ Automates Urgent Monitoring: Detects high-risk domains.
üîπ Enhances Business Continuity: Ensures domains remain active.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 registered domains.
2Ô∏è‚É£ Checks their expiration dates.
3Ô∏è‚É£ Flags domains expiring within 7 days.
4Ô∏è‚É£ Triggers an urgent alert for renewal.
5Ô∏è‚É£ Logs findings and recommended actions.",,,,
Route 53,Route 53 domains should not be expired,To be added,Compliance,High,Ensure Route 53 domains are not expired. Steps: 1. Audit all domains in Route 53. 2. Renew any expired domains. url:Domain Management,Cost: None/$0 ,"Route 53 Domains Should Not Be Expired
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if Route 53 registered domains are expired or near expiry.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies expired or near-expiry domains and sends notifications.
SNS Notification: Sends alerts to administrators if a domain is expired or expiring soon.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 registered domains.
‚úÖ Checks domain expiration date.
‚úÖ Flags domains that are expired or expiring within 30 days.
‚úÖ Sends SNS notifications for administrator awareness.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# SNS Topic ARN (Replace with your actual SNS topic ARN)
SNS_TOPIC_ARN=""arn:aws:sns:us-east-1:123456789012:Route53Alerts""

# Function to check Route 53 domains for expiration
check_domain_expiry() {
    log ""Checking Route 53 domains for expiration status...""

    # Get list of all registered domains
    domains=$(aws route53domains list-domains --query ""Domains[].DomainName"" --output text)

    if [[ -z ""$domains"" ]]; then
        log ""No Route 53 registered domains found.""
        exit 0
    fi

    current_date=$(date +%s)

    for domain in $domains; do
        log ""Checking domain: $domain""

        # Get domain expiration date
        expiry_date=$(aws route53domains get-domain-detail --domain-name ""$domain"" --query ""ExpirationDate"" --output text)
        expiry_timestamp=$(date -d ""$expiry_date"" +%s)

        # Calculate remaining days
        remaining_days=$(( (expiry_timestamp - current_date) / 86400 ))

        if [[ $remaining_days -le 0 ]]; then
            log ""‚ùå Domain $domain is **EXPIRED**. Immediate action required!""
            aws sns publish --topic-arn ""$SNS_TOPIC_ARN"" --message ""ALERT: Domain $domain has expired!"" --subject ""Route 53 Domain Expiry Alert""
        elif [[ $remaining_days -le 30 ]]; then
            log ""‚ö†Ô∏è Domain $domain will expire in $remaining_days days. Renewal required.""
            aws sns publish --topic-arn ""$SNS_TOPIC_ARN"" --message ""WARNING: Domain $domain will expire in $remaining_days days."" --subject ""Route 53 Domain Expiry Warning""
        else
            log ""‚úÖ Domain $domain is valid with $remaining_days days remaining.""
        fi
    done
}

# Execute the function
check_domain_expiry
","üöÄ Why This is Useful?
üîπ Prevents Service Disruptions: Ensures critical domains do not expire accidentally.
üîπ Automates Compliance: Identifies domains nearing expiry and alerts administrators.
üîπ Reduces Manual Checks: No need to manually verify expiration dates.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 registered domains.
2Ô∏è‚É£ Checks domain expiration dates.
3Ô∏è‚É£ Flags expired or soon-to-expire domains.
4Ô∏è‚É£ Sends SNS notifications for expired or expiring domains.
5Ô∏è‚É£ Logs findings and alerts administrators.",,,,
Route 53,Route53 domains privacy protection should be enabled,To be added,Compliance,High,Ensure Route 53 domains have privacy protection enabled. Steps: 1. Check domain privacy settings. 2. Enable privacy protection for all domains. URL:Domain Privacy Protection,Cost: None/$0 ,"Route 53 Domains Privacy Protection Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if Route 53 domains have privacy protection enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies domains without privacy protection and enables it.
SSM Automation: An SSM document to notify administrators and apply remediation.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 registered domains.
‚úÖ Checks if privacy protection is enabled.
‚úÖ Flags domains without privacy protection.
‚úÖ Enables privacy protection automatically.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable privacy protection on Route 53 domains
enable_privacy_protection() {
    log ""Checking Route 53 domains for privacy protection...""

    # Get list of all registered domains
    domains=$(aws route53domains list-domains --query ""Domains[].DomainName"" --output text)

    if [[ -z ""$domains"" ]]; then
        log ""No Route 53 registered domains found.""
        exit 0
    fi

    for domain in $domains; do
        log ""Checking domain: $domain""

        # Check privacy protection status
        privacy_status=$(aws route53domains get-domain-detail --domain-name ""$domain"" --query ""AdminPrivacy"" --output text)

        if [[ ""$privacy_status"" == ""True"" ]]; then
            log ""‚úÖ Domain $domain has privacy protection enabled.""
        else
            log ""‚ö†Ô∏è Domain $domain does not have privacy protection enabled. Enabling now...""
            
            # Enable privacy protection
            aws route53domains update-domain-contact-privacy --domain-name ""$domain"" --admin-privacy --registrant-privacy --tech-privacy
            
            log ""‚úÖ Privacy protection enabled for domain $domain.""
        fi
    done
}

# Execute the function
enable_privacy_protection
","üöÄ Why This is Useful?
üîπ Enhances Security: Protects domain registrant details from public exposure.
üîπ Automates Compliance: Identifies domains lacking privacy protection and fixes them.
üîπ Minimizes Risk of Spam & Fraud: Prevents bad actors from accessing sensitive contact information.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 registered domains.
2Ô∏è‚É£ Checks if privacy protection is enabled.
3Ô∏è‚É£ Flags domains without privacy protection.
4Ô∏è‚É£ Enables privacy protection for non-compliant domains.
5Ô∏è‚É£ Logs findings and actions taken.",,,,
Security,Route53 domains privacy protection should be enabled,To be added,Compliance,High,Ensure Route 53 domains have privacy protection enabled. Steps: 1. Check domain privacy settings. 2. Enable privacy protection for all domains. URL:Domain Privacy Protection,Cost: None/$0 ,"Route 53 Domains Privacy Protection Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if Route 53 domains have privacy protection enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies domains without privacy protection and enables it.
SSM Automation: An SSM document to notify administrators and apply remediation.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 registered domains.
‚úÖ Checks if privacy protection is enabled.
‚úÖ Flags domains without privacy protection.
‚úÖ Enables privacy protection automatically.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable privacy protection on Route 53 domains
enable_privacy_protection() {
    log ""Checking Route 53 domains for privacy protection...""

    # Get list of all registered domains
    domains=$(aws route53domains list-domains --query ""Domains[].DomainName"" --output text)

    if [[ -z ""$domains"" ]]; then
        log ""No Route 53 registered domains found.""
        exit 0
    fi

    for domain in $domains; do
        log ""Checking domain: $domain""

        # Check privacy protection status
        privacy_status=$(aws route53domains get-domain-detail --domain-name ""$domain"" --query ""AdminPrivacy"" --output text)

        if [[ ""$privacy_status"" == ""True"" ]]; then
            log ""‚úÖ Domain $domain has privacy protection enabled.""
        else
            log ""‚ö†Ô∏è Domain $domain does not have privacy protection enabled. Enabling now...""
            
            # Enable privacy protection
            aws route53domains update-domain-contact-privacy --domain-name ""$domain"" --admin-privacy --registrant-privacy --tech-privacy
            
            log ""‚úÖ Privacy protection enabled for domain $domain.""
        fi
    done
}

# Execute the function
enable_privacy_protection
","üöÄ Why This is Useful?
üîπ Enhances Security: Protects domain registrant details from public exposure.
üîπ Automates Compliance: Identifies domains lacking privacy protection and fixes them.
üîπ Minimizes Risk of Spam & Fraud: Prevents bad actors from accessing sensitive contact information.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 registered domains.
2Ô∏è‚É£ Checks if privacy protection is enabled.
3Ô∏è‚É£ Flags domains without privacy protection.
4Ô∏è‚É£ Enables privacy protection for non-compliant domains.
5Ô∏è‚É£ Logs findings and actions taken.",,,,
Route 53,Route 53 domains should have transfer lock enabled,To be added,Compliance,High,Ensure Route 53 domains have transfer lock enabled. Steps: 1. Review transfer lock settings for all domains. 2. Enable transfer lock for each domain. URL:Transfer Lock,Cost: None/$0 ,"Route 53 Domains Should Have Transfer Lock Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Route 53 registered domains have transfer lock enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies domains without transfer lock and enables it.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 registered domains.
‚úÖ Checks if transfer lock is enabled.
‚úÖ Flags domains without transfer lock and enables it.
‚úÖ Logs all actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable transfer lock on Route 53 domains
enable_transfer_lock() {
    log ""Checking Route 53 domains for transfer lock...""

    # Get list of all registered domains
    domains=$(aws route53domains list-domains --query ""Domains[].DomainName"" --output text)

    if [[ -z ""$domains"" ]]; then
        log ""No Route 53 registered domains found.""
        exit 0
    fi

    for domain in $domains; do
        log ""Checking domain: $domain""

        # Check if transfer lock is enabled
        transfer_lock_status=$(aws route53domains get-domain-detail --domain-name ""$domain"" --query ""TransferLock"" --output text)

        if [[ ""$transfer_lock_status"" == ""ON"" ]]; then
            log ""‚úÖ Domain $domain has transfer lock enabled.""
        else
            log ""‚ö†Ô∏è Domain $domain does not have transfer lock enabled. Enabling it now...""

            # Enable transfer lock
            aws route53domains enable-domain-transfer-lock --domain-name ""$domain""
            
            log ""‚úÖ Transfer lock enabled for domain $domain.""
        fi
    done
}

# Execute the function
enable_transfer_lock
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Transfers: Ensures domains are not transferred without admin approval.
üîπ Automates Compliance: Identifies domains without transfer lock and corrects them.
üîπ Reduces Security Risks: Helps avoid domain hijacking.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 registered domains.
2Ô∏è‚É£ Checks if transfer lock is enabled.
3Ô∏è‚É£ Flags domains without transfer lock.
4Ô∏è‚É£ Enables transfer lock for non-compliant domains.
5Ô∏è‚É£ Logs findings and changes.",,,,
Security,Route 53 domains should have transfer lock enabled,To be added,Compliance,High,Ensure Route 53 domains have transfer lock enabled. Steps: 1. Review transfer lock settings for all domains. 2. Enable transfer lock for each domain. URL:Transfer Lock,Cost: None/$0 ,"Route 53 Domains Should Have Transfer Lock Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check whether Route 53 registered domains have transfer lock enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies domains without transfer lock and enables it.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Route 53 registered domains.
‚úÖ Checks if transfer lock is enabled.
‚úÖ Flags domains without transfer lock and enables it.
‚úÖ Logs all actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable transfer lock on Route 53 domains
enable_transfer_lock() {
    log ""Checking Route 53 domains for transfer lock...""

    # Get list of all registered domains
    domains=$(aws route53domains list-domains --query ""Domains[].DomainName"" --output text)

    if [[ -z ""$domains"" ]]; then
        log ""No Route 53 registered domains found.""
        exit 0
    fi

    for domain in $domains; do
        log ""Checking domain: $domain""

        # Check if transfer lock is enabled
        transfer_lock_status=$(aws route53domains get-domain-detail --domain-name ""$domain"" --query ""TransferLock"" --output text)

        if [[ ""$transfer_lock_status"" == ""ON"" ]]; then
            log ""‚úÖ Domain $domain has transfer lock enabled.""
        else
            log ""‚ö†Ô∏è Domain $domain does not have transfer lock enabled. Enabling it now...""

            # Enable transfer lock
            aws route53domains enable-domain-transfer-lock --domain-name ""$domain""
            
            log ""‚úÖ Transfer lock enabled for domain $domain.""
        fi
    done
}

# Execute the function
enable_transfer_lock
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Transfers: Ensures domains are not transferred without admin approval.
üîπ Automates Compliance: Identifies domains without transfer lock and corrects them.
üîπ Reduces Security Risks: Helps avoid domain hijacking.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Route 53 registered domains.
2Ô∏è‚É£ Checks if transfer lock is enabled.
3Ô∏è‚É£ Flags domains without transfer lock.
4Ô∏è‚É£ Enables transfer lock for non-compliant domains.
5Ô∏è‚É£ Logs findings and changes.",,,,
S3,S3 access points should have block public access settings enabled,To be added,Compliance,High,"In the S3 Console, create or modify an access point and ensure all ""Block public access"" options are checked.
Open Amazon S3, select ""Access Points,"" choose the desired access point, click ""Edit"" in ""Public access settings,"" enable ""Block all public access,"" and click ""Save changes.""",Cost: None/$0 ,"S3 Access Points Should Have Block Public Access Settings Enabled
‚úÖ Automation Approach:

AWS Config Rule: Ensure that all S3 Access Points have public access blocked.
Lambda Function: A scheduled function that scans all S3 Access Points and enforces block public access settings.
SSM Automation: Alerts admins when an access point is non-compliant.","üîç Features of the Script:
‚úÖ Retrieves all S3 Access Points.
‚úÖ Checks if public access is blocked.
‚úÖ Blocks public access if not enforced.
‚úÖ Logs actions taken and non-compliant access points.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to block public access on S3 access points
block_s3_access_point_public_access() {
    log ""Checking S3 access points for public access settings...""

    # Get list of all S3 access points
    access_points=$(aws s3control list-access-points --account-id ""$(aws sts get-caller-identity --query Account --output text)"" --query ""AccessPointList[].Name"" --output text)

    if [[ -z ""$access_points"" ]]; then
        log ""No S3 Access Points found.""
        exit 0
    fi

    for access_point in $access_points; do
        log ""Checking access point: $access_point""

        # Block public access on the access point
        aws s3control put-public-access-block --account-id ""$(aws sts get-caller-identity --query Account --output text)"" --name ""$access_point"" --public-access-block-configuration \
            BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

        log ""‚úÖ Public access blocked for access point: $access_point""
    done
}

# Execute the function
block_s3_access_point_public_access
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures access points are never publicly exposed.
üîπ Automates Security Best Practices: Enforces public access block settings.
üîπ Full Logging & Visibility: Logs actions taken and non-compliant resources.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 Access Points.
2Ô∏è‚É£ Checks if public access is blocked.
3Ô∏è‚É£ Enforces public access block settings.
4Ô∏è‚É£ Logs all compliance checks and updates.",,,,
S3,S3 buckets access control lists (ACLs) should not be used to manage user access to buckets,To be added,Compliance,High,"Remove any existing ACLs from your S3 buckets and implement IAM policies to manage user access permissions by attaching them to the relevant IAM users or roles. 
Go to the bucket's Permissions tab, edit the Access Control List (ACL), uncheck or remove all grantees, and save changes. Then, create an IAM policy under the IAM service, attach it to the relevant IAM users or roles, and manage S3 access permissions through that policy.
Reference: https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_s3_rw-bucket.html",Cost: None/$0 ,"S3 Buckets Access Control Lists (ACLs) Should Not Be Used to Manage User Access
‚úÖ Automation Approach:

AWS Config Rule: Detects S3 buckets using ACLs for access control.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks all S3 buckets and removes ACL-based permissions.
SSM Automation: Sends a notification if ACLs are found and removed","üîç Features of the Script:
‚úÖ Scans all S3 buckets for ACL-based permissions.
‚úÖ Removes ACLs if found.
‚úÖ Ensures access is managed using bucket policies or IAM policies.
‚úÖ Logs findings and actions.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 buckets for ACL-based access control...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    acl=$(aws s3api get-bucket-acl --bucket ""$bucket"" --query ""Grants"" --output json 2>/dev/null)

    if [[ ""$acl"" != ""[]"" ]]; then
        log ""‚ö†Ô∏è Bucket $bucket has ACL-based permissions. Removing ACLs...""
        aws s3api put-bucket-acl --bucket ""$bucket"" --acl private
        log ""‚úÖ ACLs removed for bucket $bucket. Access now managed via IAM policies.""
    else
        log ""‚úÖ Bucket $bucket is already compliant.""
    fi
done
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures access is controlled via IAM policies instead of ACLs.
üîπ Prevents Misconfigurations: Removes ACLs that could grant unintended access.
üîπ Automates Fixing: Applies secure settings automatically.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if ACLs are being used for access control.
3Ô∏è‚É£ If ACLs exist, removes them.
4Ô∏è‚É£ Logs findings and actions.
5Ô∏è‚É£ Ensures IAM policies manage bucket access.",,,,
Security,S3 buckets access control lists (ACLs) should not be used to manage user access to buckets,To be added,Compliance,High,"Remove any existing ACLs from your S3 buckets and implement IAM policies to manage user access permissions by attaching them to the relevant IAM users or roles. 
Go to the bucket's Permissions tab, edit the Access Control List (ACL), uncheck or remove all grantees, and save changes. Then, create an IAM policy under the IAM service, attach it to the relevant IAM users or roles, and manage S3 access permissions through that policy.
Reference: https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_s3_rw-bucket.html",Cost: None/$0 ,"S3 Buckets Access Control Lists (ACLs) Should Not Be Used to Manage User Access
‚úÖ Automation Approach:

AWS Config Rule: Detects S3 buckets using ACLs for access control.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks all S3 buckets and removes ACL-based permissions.
SSM Automation: Sends a notification if ACLs are found and removed","üîç Features of the Script:
‚úÖ Scans all S3 buckets for ACL-based permissions.
‚úÖ Removes ACLs if found.
‚úÖ Ensures access is managed using bucket policies or IAM policies.
‚úÖ Logs findings and actions.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 buckets for ACL-based access control...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    acl=$(aws s3api get-bucket-acl --bucket ""$bucket"" --query ""Grants"" --output json 2>/dev/null)

    if [[ ""$acl"" != ""[]"" ]]; then
        log ""‚ö†Ô∏è Bucket $bucket has ACL-based permissions. Removing ACLs...""
        aws s3api put-bucket-acl --bucket ""$bucket"" --acl private
        log ""‚úÖ ACLs removed for bucket $bucket. Access now managed via IAM policies.""
    else
        log ""‚úÖ Bucket $bucket is already compliant.""
    fi
done
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures access is controlled via IAM policies instead of ACLs.
üîπ Prevents Misconfigurations: Removes ACLs that could grant unintended access.
üîπ Automates Fixing: Applies secure settings automatically.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if ACLs are being used for access control.
3Ô∏è‚É£ If ACLs exist, removes them.
4Ô∏è‚É£ Logs findings and actions.
5Ô∏è‚É£ Ensures IAM policies manage bucket access.",,,,
S3,S3 bucket default encryption should be enabled with KMS,To be added,Compliance,High,"To enable default encryption with KMS for an S3 bucket, open the S3 console, select the bucket, navigate to the ""Properties"" tab, enable default encryption, choose ""AWS Key Management Service key (SSE-KMS),"" select your KMS key, and save the changes.
Reference:  https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html#example-bucket-policies-encryption",KMS costs apply based on usage,"S3 Bucket Default Encryption Should Be Enabled with KMS
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if S3 buckets have default encryption enabled.
Lambda Function: A scheduled Lambda that scans all S3 buckets and enables KMS encryption if missing.
SSM Automation: Sends a notification if unencrypted buckets are found.","üîç Features of the Script:
‚úÖ Scans all S3 buckets for encryption settings.
‚úÖ Ensures encryption is enabled using KMS.
‚úÖ Applies default encryption if missing.
‚úÖ Logs findings and actions.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 bucket default encryption settings...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    encryption=$(aws s3api get-bucket-encryption --bucket ""$bucket"" --query ""ServerSideEncryptionConfiguration.Rules"" --output json 2>/dev/null)

    if [[ -z ""$encryption"" ]]; then
        log ""‚ö†Ô∏è Bucket $bucket does not have default encryption enabled. Applying encryption...""
        aws s3api put-bucket-encryption --bucket ""$bucket"" --server-side-encryption-configuration '{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""aws:kms""}}]}'
        log ""‚úÖ Default encryption enabled with KMS for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket already has default encryption enabled.""
    fi
done
","üöÄ Why This is Useful?
üîπ Ensures Data Security: Protects all objects stored in S3.
üîπ Enforces Compliance: Meets security policies and regulatory standards.
üîπ Automates Fixing: Applies encryption automatically if missing.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets in the account.
2Ô∏è‚É£ Checks if default encryption is enabled.
3Ô∏è‚É£ If missing, applies KMS-based encryption.
4Ô∏è‚É£ Logs findings and fixes.
5Ô∏è‚É£ Ensures all new objects are encrypted automatically.",,,,
S3,S3 buckets should enforce SSL,To be added,Compliance,High,"To enforce SSL for your S3 buckets, set a bucket policy that denies HTTP requests, allowing only HTTPS. Consider using Amazon CloudFront to require HTTPS and enable server-side encryption for added security.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html#example-bucket-policies-HTTP-HTTPS",Cost: None/$0 ,"S3 Buckets Should Enforce SSL
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure S3 bucket policies enforce SSL/TLS.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans all S3 bucket policies and updates them to enforce SSL.
SSM Automation: Notifies administrators before modifying policies.
","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets and their policies.
‚úÖ Checks if the bucket policy enforces SSL.
‚úÖ Flags buckets without SSL enforcement and logs them.
‚úÖ Automatically updates bucket policies to enforce SSL.
‚úÖ Supports manual mode for approval before changes.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enforce SSL in S3 bucket policies
enforce_s3_ssl() {
    log ""Checking S3 buckets for SSL enforcement...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Get the current bucket policy
        policy=$(aws s3api get-bucket-policy --bucket ""$bucket"" --query ""Policy"" --output text 2>/dev/null)

        # Check if the policy already enforces SSL
        if echo ""$policy"" | grep -q ""aws:SecureTransport""; then
            log ""‚úÖ Bucket $bucket already enforces SSL.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not enforce SSL. Updating policy...""

            # Define the new policy enforcing SSL
            new_policy=$(cat <<EOF
{
    ""Version"": ""2012-10-17"",
    ""Statement"": [{
        ""Sid"": ""EnforceSSLRequestsOnly"",
        ""Effect"": ""Deny"",
        ""Principal"": ""*"",
        ""Action"": ""s3:*"",
        ""Resource"": [""arn:aws:s3:::$bucket/*""],
        ""Condition"": {
            ""Bool"": {
                ""aws:SecureTransport"": ""false""
            }
        }
    }]
}
EOF
)

            # Apply the new policy
            aws s3api put-bucket-policy --bucket ""$bucket"" --policy ""$new_policy""

            log ""‚úÖ SSL enforcement applied to bucket $bucket.""
        fi
    done
}

# Execute the function
enforce_s3_ssl
","üöÄ Why This is Useful?
üîπ Enhances Security: Prevents unencrypted HTTP access to S3 objects.
üîπ Regulatory Compliance: Meets PCI-DSS, HIPAA, and security best practices.
üîπ Automates Policy Enforcement to secure all S3 buckets.
üîπ Logs all actions for tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets and their policies.
2Ô∏è‚É£ Checks if SSL enforcement is already enabled.
3Ô∏è‚É£ Flags buckets without SSL enforcement.
4Ô∏è‚É£ Updates bucket policies to enforce SSL.
5Ô∏è‚É£ Logs all actions for visibility.",,,,
Security,S3 buckets should enforce SSL,To be added,Compliance,High,"To enforce SSL for your S3 buckets, set a bucket policy that denies HTTP requests, allowing only HTTPS. Consider using Amazon CloudFront to require HTTPS and enable server-side encryption for added security.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html#example-bucket-policies-HTTP-HTTPS",Cost: None/$0 ,"S3 Buckets Should Enforce SSL
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to ensure S3 bucket policies enforce SSL/TLS.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans all S3 bucket policies and updates them to enforce SSL.
SSM Automation: Notifies administrators before modifying policies.
","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets and their policies.
‚úÖ Checks if the bucket policy enforces SSL.
‚úÖ Flags buckets without SSL enforcement and logs them.
‚úÖ Automatically updates bucket policies to enforce SSL.
‚úÖ Supports manual mode for approval before changes.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enforce SSL in S3 bucket policies
enforce_s3_ssl() {
    log ""Checking S3 buckets for SSL enforcement...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Get the current bucket policy
        policy=$(aws s3api get-bucket-policy --bucket ""$bucket"" --query ""Policy"" --output text 2>/dev/null)

        # Check if the policy already enforces SSL
        if echo ""$policy"" | grep -q ""aws:SecureTransport""; then
            log ""‚úÖ Bucket $bucket already enforces SSL.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not enforce SSL. Updating policy...""

            # Define the new policy enforcing SSL
            new_policy=$(cat <<EOF
{
    ""Version"": ""2012-10-17"",
    ""Statement"": [{
        ""Sid"": ""EnforceSSLRequestsOnly"",
        ""Effect"": ""Deny"",
        ""Principal"": ""*"",
        ""Action"": ""s3:*"",
        ""Resource"": [""arn:aws:s3:::$bucket/*""],
        ""Condition"": {
            ""Bool"": {
                ""aws:SecureTransport"": ""false""
            }
        }
    }]
}
EOF
)

            # Apply the new policy
            aws s3api put-bucket-policy --bucket ""$bucket"" --policy ""$new_policy""

            log ""‚úÖ SSL enforcement applied to bucket $bucket.""
        fi
    done
}

# Execute the function
enforce_s3_ssl
","üöÄ Why This is Useful?
üîπ Enhances Security: Prevents unencrypted HTTP access to S3 objects.
üîπ Regulatory Compliance: Meets PCI-DSS, HIPAA, and security best practices.
üîπ Automates Policy Enforcement to secure all S3 buckets.
üîπ Logs all actions for tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets and their policies.
2Ô∏è‚É£ Checks if SSL enforcement is already enabled.
3Ô∏è‚É£ Flags buckets without SSL enforcement.
4Ô∏è‚É£ Updates bucket policies to enforce SSL.
5Ô∏è‚É£ Logs all actions for visibility.",,,,
S3,S3 buckets should have event notifications enabled,To be added,Compliance,Medium,"Enable S3 bucket event notifications to monitor changes like object creation or deletion by configuring alerts to trigger actions in SNS, SQS, or Lambda.
Open the S3 console, select your bucket, go to the Properties tab, and under Event notifications, click Create event notification to specify events like object creation or deletion and choose a destination (SNS, SQS, or Lambda).
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-event-notifications.html",Cost: None/$0  (but may incur SNS costs if used),"S3 Buckets Should Have Event Notifications Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if S3 buckets have event notifications configured.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans all S3 buckets and enables event notifications if missing.
SSM Automation: Notifies administrators before enabling notifications and allows manual approval if needed.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if event notifications are enabled for each bucket.
‚úÖ Flags buckets without event notifications and logs them.
‚úÖ Automatically configures event notifications for non-compliant buckets.
‚úÖ Supports multiple event types (PUT, DELETE, etc.).","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable event notifications for S3 buckets
enable_s3_event_notifications() {
    log ""Checking S3 buckets for event notifications compliance...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Check if event notifications are enabled
        event_config=$(aws s3api get-bucket-notification-configuration --bucket ""$bucket"" --query ""TopicConfigurations"" --output text 2>/dev/null)

        if [[ -n ""$event_config"" ]]; then
            log ""‚úÖ Bucket $bucket already has event notifications enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have event notifications enabled. Configuring now...""

            # Set up a sample event notification (modify SNS topic as needed)
            sns_topic_arn=""arn:aws:sns:us-east-1:123456789012:MySNSTopic""
            
            aws s3api put-bucket-notification-configuration --bucket ""$bucket"" --notification-configuration '{
                ""TopicConfigurations"": [{
                    ""TopicArn"": ""'""$sns_topic_arn""'"",
                    ""Events"": [""s3:ObjectCreated:*"", ""s3:ObjectRemoved:*""]
                }]
            }'

            log ""‚úÖ Event notifications enabled for bucket $bucket.""
        fi
    done
}

# Execute the function
enable_s3_event_notifications
","üöÄ Why This is Useful?
üîπ Automates Real-Time Monitoring: Ensures S3 triggers alerts on important bucket events.
üîπ Enhances Security & Compliance: Helps track object-level actions in real time.
üîπ Supports Multiple Event Types like object creation, deletion, and updates.
üîπ Fully Automated with logs for tracking.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if event notifications are enabled.
3Ô∏è‚É£ Flags non-compliant buckets.
4Ô∏è‚É£ Configures event notifications for missing buckets.
5Ô∏è‚É£ Logs all actions for visibility.",,,,
S3,S3 buckets should have lifecycle policies configured,To be added,Compliance,Medium,"Configure S3 lifecycle policies to transition active data to Standard-IA after 30 days, archive to Glacier after 90 days, and delete objects older than 365 days; for archival data, move to Glacier after 90 days and delete after 7 years; for temporary files, delete after 7 days.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html",Cost: None/$0 ,"S3 Buckets Should Have Lifecycle Policies Configured
‚úÖ Automation Approach:

AWS Config Rule: Detect if lifecycle policies are missing from S3 buckets.
Lambda Function: A scheduled function that scans all S3 buckets and applies default lifecycle policies if missing.
SSM Automation: Notifies administrators about non-compliant buckets.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if lifecycle policies are configured.
‚úÖ Flags buckets without lifecycle policies.
‚úÖ Applies a default lifecycle policy for data retention and cost savings.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Define default lifecycle policy (example: archive to Glacier after 90 days, delete after 365 days)
LIFECYCLE_POLICY='{
    ""Rules"": [
        {
            ""ID"": ""MoveToGlacier"",
            ""Status"": ""Enabled"",
            ""Filter"": {
                ""Prefix"": """"
            },
            ""Transitions"": [
                {
                    ""Days"": 90,
                    ""StorageClass"": ""GLACIER""
                }
            ],
            ""Expiration"": {
                ""Days"": 365
            }
        }
    ]
}'

# Function to enforce lifecycle policies on S3 buckets
enforce_s3_lifecycle_policy() {
    log ""Checking S3 buckets for lifecycle policy compliance...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Check if lifecycle policy exists
        policy_status=$(aws s3api get-bucket-lifecycle-configuration --bucket ""$bucket"" --query ""Rules"" --output text 2>/dev/null)

        if [[ -n ""$policy_status"" ]]; then
            log ""‚úÖ Bucket $bucket already has a lifecycle policy.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have a lifecycle policy. Applying now...""
            echo ""$LIFECYCLE_POLICY"" | aws s3api put-bucket-lifecycle-configuration --bucket ""$bucket"" --lifecycle-configuration file://-
            log ""‚úÖ Lifecycle policy applied to bucket $bucket.""
        fi
    done
}

# Execute the function
enforce_s3_lifecycle_policy
","üöÄ Why This is Useful?
üîπ Cost Optimization: Moves infrequently accessed data to Glacier and deletes stale objects.
üîπ Automated Compliance: Ensures all S3 buckets follow data retention policies.
üîπ Security & Compliance Logging: Tracks all changes and enforcement actions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets in the account.
2Ô∏è‚É£ Checks if lifecycle policies exist for each bucket.
3Ô∏è‚É£ Flags non-compliant buckets without lifecycle policies.
4Ô∏è‚É£ Applies a default lifecycle policy (Glacier after 90 days, delete after 365 days).
5Ô∏è‚É£ Logs all actions to maintain visibility.",,,,
S3,Ensure MFA Delete is enabled on S3 buckets,To be added,Compliance,High,"Enable versioning on your S3 bucket through the AWS Management Console, CLI, or SDKs. Then, set up MFA for your IAM user and configure MFA Delete using the AWS CLI or SDKs, as it cannot be done via the Management Console.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiFactorAuthenticationDelete.html",Cost: None/$0 ,"Ensure MFA Delete is Enabled on S3 Buckets
‚úÖ Automation Approach:

AWS Config Rule: Checks if MFA Delete is enabled on S3 buckets.
Lambda Function: Periodically scans S3 buckets and enables MFA Delete where missing.
SSM Automation: Notifies security teams when MFA Delete is disabled.","üîç Features of the Script:
‚úÖ Retrieves all versioned S3 buckets.
‚úÖ Checks if MFA Delete is enabled.
‚úÖ If disabled, logs a warning (MFA Delete must be enabled manually).
‚úÖ Provides instructions for enabling MFA Delete.
‚úÖ Logs all findings.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 buckets for MFA Delete enforcement...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    versioning_status=$(aws s3api get-bucket-versioning --bucket ""$bucket"" --query ""{Status: Status, MFADelete: MFADelete}"" --output json 2>/dev/null)

    if [[ -z ""$versioning_status"" ]]; then
        log ""‚ö†Ô∏è Bucket $bucket has no versioning enabled. Skipping MFA Delete check.""
        continue
    fi

    mfa_delete_enabled=$(echo ""$versioning_status"" | jq -r '.MFADelete // ""Disabled""')

    if [[ ""$mfa_delete_enabled"" == ""Enabled"" ]]; then
        log ""‚úÖ Bucket $bucket has MFA Delete enabled.""
    else
        log ""‚ö†Ô∏è Bucket $bucket does not have MFA Delete enabled. Manual action required!""
        log ""‚ÑπÔ∏è Enable MFA Delete using: aws s3api put-bucket-versioning --bucket $bucket --versioning-configuration Status=Enabled,MFADelete=Enabled --mfa 'SERIAL_NUMBER MFA_CODE'""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents Accidental or Malicious Deletion: Adds an extra layer of security.
üîπ Enforces Compliance: Required for many regulatory standards.
üîπ Enhances Security: Ensures only authorized deletions occur.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if versioning is enabled.
3Ô∏è‚É£ Verifies if MFA Delete is enabled.
4Ô∏è‚É£ Logs findings and provides instructions for manual enabling.
5Ô∏è‚É£ Ensures security best practices are followed.",,,,
S3,S3 bucket ACLs should not be accessible to all authenticated user,To be added,Compliance,High,"To restrict S3 bucket ACLs from being accessible to all authenticated users, remove any permissions for ""Authenticated Users"" in the ACL settings and review the bucket policy to ensure no access is granted to this group. Consider using bucket policies for more granular control instead of ACLs.reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/walkthrough1.html",Cost: None/$0 ,"S3 Bucket ACLs Should Not Be Accessible to All Authenticated Users
‚úÖ Automation Approach:

AWS Config Rule: Detects S3 buckets with ACLs granting access to ""AuthenticatedUsers"".
Lambda Function: A scheduled function that scans and removes such ACLs.
SSM Automation: Sends alerts when non-compliant buckets are found.","üîç Features of the Script:
‚úÖ Checks all S3 buckets.
‚úÖ Identifies ACLs allowing ""AuthenticatedUsers"" access.
‚úÖ Removes non-compliant ACLs.
‚úÖ Logs findings and actions.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 bucket ACLs for 'AuthenticatedUsers' access...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    acl=$(aws s3api get-bucket-acl --bucket ""$bucket"" --query ""Grants"" --output json 2>/dev/null)

    if echo ""$acl"" | jq -e '.[] | select(.Grantee.URI==""http://acs.amazonaws.com/groups/global/AuthenticatedUsers"")' > /dev/null; then
        log ""‚ö†Ô∏è Bucket $bucket has 'AuthenticatedUsers' access. Removing ACL...""
        aws s3api put-bucket-acl --bucket ""$bucket"" --acl private
        log ""‚úÖ ACL access to 'AuthenticatedUsers' removed for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket is already compliant.""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Ensures only explicitly defined users can access the bucket.
üîπ Automates Compliance: Removes misconfigured ACLs automatically.
üîπ Enhances Security: Eliminates the risk of unintentional data exposure.","üìå What This Script Does:
1Ô∏è‚É£ Scans all S3 buckets.
2Ô∏è‚É£ Identifies ACLs granting access to ""AuthenticatedUsers"".
3Ô∏è‚É£ If found, removes such ACLs.
4Ô∏è‚É£ Logs changes and updates.
5Ô∏è‚É£ Ensures only properly authorized users have access.",,,,
S3,S3 bucket object lock should be enabled,To be added,Compliance,Medium,"while reating a new bucket and select Enable Object Lock during the setup, choosing the desired retention period and mode. Object Lock cannot be added to existing buckets, so you'll need to migrate objects to a newly created bucket with this feature.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-configure.html",Cost: None/$0  (but may incur storage costs),"S3 Bucket Object Lock Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Ensures object lock is enabled on S3 buckets.
Lambda Function: Scans and flags buckets without object lock.
SSM Automation: Notifies security teams when object lock is disabled.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if object lock is enabled.
‚úÖ Flags buckets without object lock.
‚úÖ Provides remediation steps.
‚úÖ Logs all findings.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 buckets for Object Lock enforcement...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    object_lock_status=$(aws s3api get-object-lock-configuration --bucket ""$bucket"" --query ""ObjectLockConfiguration.ObjectLockEnabled"" --output text 2>/dev/null)

    if [[ ""$object_lock_status"" == ""Enabled"" ]]; then
        log ""‚úÖ Bucket $bucket has Object Lock enabled.""
    else
        log ""‚ö†Ô∏è Bucket $bucket does not have Object Lock enabled. Manual action required!""
        log ""‚ÑπÔ∏è Enable Object Lock using: aws s3api create-bucket --bucket $bucket --object-lock-enabled-for-bucket""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents Accidental Deletions: Protects objects from being deleted or modified.
üîπ Compliance & Retention: Ensures regulatory compliance for data retention.
üîπ Enhances Data Integrity: Keeps critical data secure.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if object lock is enabled.
3Ô∏è‚É£ Flags non-compliant buckets.
4Ô∏è‚É£ Provides manual remediation steps.
5Ô∏è‚É£ Ensures data security and compliance.",,,,
S3,S3 bucket policy should prohibit public access,To be added,Compliance,High,"To prohibit public access to an S3 bucket, create a bucket policy that denies access to any principal (user or account) except for specific allowed users.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html",Cost: None/$0 ,"S3 Bucket Policy Should Prohibit Public Access
‚úÖ Automation Approach:

AWS Config Rule: Checks if S3 bucket policies allow public access.
Lambda Function: A scheduled Lambda function that scans S3 buckets and removes public access from policies.
SSM Automation: Sends notifications for non-compliant buckets.","üîç Features of the Script:
‚úÖ Retrieves all S3 bucket policies.
‚úÖ Checks if public access is allowed.
‚úÖ Removes public permissions from the policy.
‚úÖ Logs actions and updates.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 bucket policies for public access permissions...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    policy=$(aws s3api get-bucket-policy --bucket ""$bucket"" --query ""Policy"" --output json 2>/dev/null)

    if [[ ! -z ""$policy"" ]] && echo ""$policy"" | jq -e '.Statement[] | select(.Effect==""Allow"" and .Principal==""*"" and .Action==""s3:*"")' > /dev/null; then
        log ""‚ö†Ô∏è Bucket $bucket has a public access policy. Removing public access...""
        
        # Modify the policy to remove public access
        new_policy=$(echo ""$policy"" | jq 'walk(if type == ""object"" then del(.Principal) else . end)')
        
        aws s3api put-bucket-policy --bucket ""$bucket"" --policy ""$new_policy""
        log ""‚úÖ Public access removed from policy for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket is already compliant.""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents Data Exposure: Ensures no S3 bucket policies grant public access.
üîπ Automates Compliance: Scans and fixes non-compliant buckets.
üîπ Enhances Security: Enforces strict access control.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if the bucket policy allows public access.
3Ô∏è‚É£ If public access is found, modifies the policy to remove it.
4Ô∏è‚É£ Logs changes and updates.
5Ô∏è‚É£ Ensures all buckets remain private.",,,,
Security,S3 bucket policy should prohibit public access,To be added,Compliance,High,"To prohibit public access to an S3 bucket, create a bucket policy that denies access to any principal (user or account) except for specific allowed users.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html",Cost: None/$0 ,"S3 Bucket Policy Should Prohibit Public Access
‚úÖ Automation Approach:

AWS Config Rule: Checks if S3 bucket policies allow public access.
Lambda Function: A scheduled Lambda function that scans S3 buckets and removes public access from policies.
SSM Automation: Sends notifications for non-compliant buckets.","üîç Features of the Script:
‚úÖ Retrieves all S3 bucket policies.
‚úÖ Checks if public access is allowed.
‚úÖ Removes public permissions from the policy.
‚úÖ Logs actions and updates.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 bucket policies for public access permissions...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    policy=$(aws s3api get-bucket-policy --bucket ""$bucket"" --query ""Policy"" --output json 2>/dev/null)

    if [[ ! -z ""$policy"" ]] && echo ""$policy"" | jq -e '.Statement[] | select(.Effect==""Allow"" and .Principal==""*"" and .Action==""s3:*"")' > /dev/null; then
        log ""‚ö†Ô∏è Bucket $bucket has a public access policy. Removing public access...""
        
        # Modify the policy to remove public access
        new_policy=$(echo ""$policy"" | jq 'walk(if type == ""object"" then del(.Principal) else . end)')
        
        aws s3api put-bucket-policy --bucket ""$bucket"" --policy ""$new_policy""
        log ""‚úÖ Public access removed from policy for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket is already compliant.""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents Data Exposure: Ensures no S3 bucket policies grant public access.
üîπ Automates Compliance: Scans and fixes non-compliant buckets.
üîπ Enhances Security: Enforces strict access control.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if the bucket policy allows public access.
3Ô∏è‚É£ If public access is found, modifies the policy to remove it.
4Ô∏è‚É£ Logs changes and updates.
5Ô∏è‚É£ Ensures all buckets remain private.",,,,
S3,AWS S3 permissions granted to other AWS accounts in bucket policies should be restricted,To be added,Compliance,Medium,"Open bucket polacies, Review Current Policies and Restrict access only to trusted AWS accounts.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-grants-cross-accounts.html",Cost: None/$0 ,"AWS S3 Permissions Granted to Other AWS Accounts in Bucket Policies Should Be Restricted
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect S3 bucket policies that grant access to external AWS accounts.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans S3 bucket policies and removes unauthorized cross-account permissions.
SSM Automation: Notifies administrators when non-compliant policies are detected and allows manual review.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets and their bucket policies.
‚úÖ Scans bucket policies for permissions granted to external AWS accounts.
‚úÖ Flags and logs non-compliant buckets that allow access to external accounts.
‚úÖ Removes unauthorized cross-account access and enforces restricted policies.
‚úÖ Logs all changes for compliance tracking.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and restrict S3 bucket cross-account access
restrict_s3_cross_account_access() {
    log ""Checking S3 bucket policies for cross-account access...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Get the bucket policy
        policy=$(aws s3api get-bucket-policy --bucket ""$bucket"" --query ""Policy"" --output text 2>/dev/null)

        if [[ -n ""$policy"" ]]; then
            log ""Analyzing bucket policy for $bucket...""
            
            # Check if policy allows access to external AWS accounts
            external_access=$(echo ""$policy"" | jq '.Statement[] | select(.Effect==""Allow"") | .Principal.AWS' | grep -v ""arn:aws:iam::YOUR_ACCOUNT_ID"" || true)

            if [[ -n ""$external_access"" ]]; then
                log ""‚ö†Ô∏è Bucket $bucket allows access to external AWS accounts. Restricting access...""
                
                # Remove statements granting external account access
                updated_policy=$(echo ""$policy"" | jq 'walk(if type == ""array"" then map(select(.Principal.AWS | tostring | contains(""arn:aws:iam::YOUR_ACCOUNT_ID"")) or .Principal == ""*"") else . end)')

                # Apply the updated policy
                echo ""$updated_policy"" | aws s3api put-bucket-policy --bucket ""$bucket"" --policy file://-

                log ""‚úÖ Updated bucket policy for $bucket to restrict external access.""
            else
                log ""‚úÖ Bucket $bucket policy is already restricted.""
            fi
        else
            log ""‚úÖ No bucket policy found for $bucket. Skipping...""
        fi
    done
}

# Execute the function
restrict_s3_cross_account_access
","üöÄ Why This is Useful?
üîπ Prevents unauthorized access from external AWS accounts.
üîπ Enforces best practices by restricting permissions to the owner account.
üîπ Automates detection & remediation, reducing security risks.
üîπ Logs all actions, ensuring visibility for compliance audits.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets and checks their policies.
2Ô∏è‚É£ Identifies bucket policies that allow access to external AWS accounts.
3Ô∏è‚É£ Flags and removes unauthorized permissions from the bucket policy.
4Ô∏è‚É£ Applies a compliant policy, restricting access to the owner's AWS account.
5Ô∏è‚É£ Logs all actions, ensuring compliance visibility.",,,,
S3,S3 buckets should prohibit public read access,To be added,Compliance,High,"To prohibit public read access to an S3 bucket, enable all options under the Block public access settings in the bucket's Permissions tab. Additionally, review the bucket policy for any statements allowing public read access and remove or modify them as necessary.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-public-read-prohibited.html",Cost: None/$0 ,"S3 Buckets Should Prohibit Public Read Access
‚úÖ Automation Approach:

AWS Config Rule: Detects publicly accessible S3 buckets.
Lambda Function: Scans S3 bucket ACLs and policies, then removes public access.
SSM Automation: Notifies administrators and enforces remediation.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks ACLs and bucket policies for public read access.
‚úÖ Flags buckets with public access.
‚úÖ Removes public read permissions.
‚úÖ Logs actions taken and skipped buckets.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and remove public read access
restrict_s3_public_access() {
    log ""Checking S3 buckets for public read access...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Get public access block settings
        public_block=$(aws s3api get-public-access-block --bucket ""$bucket"" --query ""PublicAccessBlockConfiguration.BlockPublicAcls"" --output text 2>/dev/null)

        if [[ ""$public_block"" == ""True"" ]]; then
            log ""‚úÖ Bucket $bucket already has public access blocked.""
        else
            log ""‚ö†Ô∏è Bucket $bucket has public access enabled. Blocking now...""
            aws s3api put-public-access-block --bucket ""$bucket"" --public-access-block-configuration \
                BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            log ""‚úÖ Public read access removed for bucket $bucket.""
        fi
    done
}

# Execute the function
restrict_s3_public_access
","üöÄ Why This is Useful?
üîπ Prevents Data Exposure: Blocks public access to sensitive S3 buckets.
üîπ Automates Security Compliance: Detects and removes public permissions.
üîπ Full Logging & Tracking: Keeps a record of all modifications made.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if public read access is enabled.
3Ô∏è‚É£ Flags buckets with public permissions.
4Ô∏è‚É£ Removes public access using AWS security settings.
5Ô∏è‚É£ Logs actions taken and compliance status.",,,,
S3,S3 buckets should prohibit public write access,To be added,Compliance,High,"Access the S3 console, select the bucket, enable all options under Block public access in the Permissions tab, and review the bucket policy to modify or remove any public write access statements as needed.
reference: https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-public-write-prohibited.html",Cost: None/$0 ,"S3 Buckets Should Prohibit Public Write Access
‚úÖ Automation Approach:

AWS Config Rule: Detects S3 buckets allowing public write access.
Lambda Function: A scheduled Lambda function that scans and removes public write permissions.
SSM Automation: Notifies admins when non-compliant buckets are found.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks bucket ACLs and policies for public write access.
‚úÖ Removes ""WRITE"" and ""WRITE_ACP"" permissions if found.
‚úÖ Logs all actions taken.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 buckets for public write access...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    acl=$(aws s3api get-bucket-acl --bucket ""$bucket"" --query ""Grants"" --output json 2>/dev/null)

    if echo ""$acl"" | jq -e '.[] | select(.Permission==""WRITE"" or .Permission==""WRITE_ACP"") | select(.Grantee.URI==""http://acs.amazonaws.com/groups/global/AllUsers"" or .Grantee.URI==""http://acs.amazonaws.com/groups/global/AuthenticatedUsers"")' > /dev/null; then
        log ""‚ö†Ô∏è Bucket $bucket has public write access. Removing permissions...""
        aws s3api put-bucket-acl --bucket ""$bucket"" --acl private
        log ""‚úÖ Public write access removed for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket is already compliant.""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Modifications: Protects against public data tampering.
üîπ Automates Security Fixes: Ensures compliance without manual intervention.
üîπ Reduces Risk of Data Breaches: Eliminates public write access.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks ACLs for public write access.
3Ô∏è‚É£ If public write is enabled, removes it.
4Ô∏è‚É£ Logs findings and changes.
5Ô∏è‚É£ Ensures only authorized users can write to S3 buckets.",,,,
Security,S3 buckets should prohibit public write access,To be added,Compliance,High,"Access the S3 console, select the bucket, enable all options under Block public access in the Permissions tab, and review the bucket policy to modify or remove any public write access statements as needed.
reference: https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-public-write-prohibited.html",Cost: None/$0 ,"S3 Buckets Should Prohibit Public Write Access
‚úÖ Automation Approach:

AWS Config Rule: Detects S3 buckets allowing public write access.
Lambda Function: A scheduled Lambda function that scans and removes public write permissions.
SSM Automation: Notifies admins when non-compliant buckets are found.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks bucket ACLs and policies for public write access.
‚úÖ Removes ""WRITE"" and ""WRITE_ACP"" permissions if found.
‚úÖ Logs all actions taken.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 buckets for public write access...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    acl=$(aws s3api get-bucket-acl --bucket ""$bucket"" --query ""Grants"" --output json 2>/dev/null)

    if echo ""$acl"" | jq -e '.[] | select(.Permission==""WRITE"" or .Permission==""WRITE_ACP"") | select(.Grantee.URI==""http://acs.amazonaws.com/groups/global/AllUsers"" or .Grantee.URI==""http://acs.amazonaws.com/groups/global/AuthenticatedUsers"")' > /dev/null; then
        log ""‚ö†Ô∏è Bucket $bucket has public write access. Removing permissions...""
        aws s3api put-bucket-acl --bucket ""$bucket"" --acl private
        log ""‚úÖ Public write access removed for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket is already compliant.""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Modifications: Protects against public data tampering.
üîπ Automates Security Fixes: Ensures compliance without manual intervention.
üîπ Reduces Risk of Data Breaches: Eliminates public write access.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks ACLs for public write access.
3Ô∏è‚É£ If public write is enabled, removes it.
4Ô∏è‚É£ Logs findings and changes.
5Ô∏è‚É£ Ensures only authorized users can write to S3 buckets.",,,,
S3,S3 buckets static website hosting should be disabled,To be added,Compliance,Low,"Go to the AWS S3 console, select the desired bucket, and navigate to the ""Properties"" tab. Scroll down to the ""Static website hosting"" section, click ""Edit,"" select ""Disable,"" and save the changes.",Cost: None/$0 ,"S3 Buckets Static Website Hosting Should Be Disabled
‚úÖ Automation Approach:

AWS Config Rule: Detects S3 buckets with static website hosting enabled.
Lambda Function: A scheduled function that scans and disables static website hosting for non-compliant buckets.
SSM Automation: Notifies admins and provides remediation options.
","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if static website hosting is enabled.
‚úÖ If enabled, disables website hosting.
‚úÖ Logs all actions and findings.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 buckets for static website hosting...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    website_config=$(aws s3api get-bucket-website --bucket ""$bucket"" 2>/dev/null)

    if [[ -n ""$website_config"" ]]; then
        log ""‚ö†Ô∏è Bucket $bucket has static website hosting enabled. Disabling...""
        aws s3api delete-bucket-website --bucket ""$bucket""
        log ""‚úÖ Static website hosting disabled for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket does not have static website hosting enabled.""
    fi
done
","üöÄ Why This is Useful?
üîπ Prevents Accidental Public Exposure: Disables unintended website hosting.
üîπ Ensures Compliance: Enforces security best practices.
üîπ Automates Security Fixes: Prevents misconfigurations from persisting.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if static website hosting is enabled.
3Ô∏è‚É£ If enabled, disables it.
4Ô∏è‚É£ Logs actions and updates.
5Ô∏è‚É£ Ensures buckets are not unintentionally exposed as websites.",,,,
S3,S3 buckets with versioning enabled should have lifecycle policies configured,To be added,Compliance,Medium,"Go to the S3 console, select the bucket, and navigate to the ""Management"" tab to create a lifecycle rule. Define transitions or expirations for non-current versions, then review and save the rule.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-set-lifecycle-configuration-intro.html",Cost: None/$0 ,"S3 Buckets with Versioning Enabled Should Have Lifecycle Policies Configured
‚úÖ Automation Approach:

AWS Config Rule: Detects versioned S3 buckets without lifecycle policies.
Lambda Function: A scheduled function that scans and applies a default lifecycle policy.
SSM Automation: Sends alerts when non-compliant buckets are found.","üîç Features of the Script:
‚úÖ Checks all S3 buckets with versioning enabled.
‚úÖ Identifies buckets without a lifecycle policy.
‚úÖ Applies a default lifecycle policy (e.g., delete old versions after 90 days).
‚úÖ Logs findings and updates.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 versioned buckets for missing lifecycle policies...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    versioning_status=$(aws s3api get-bucket-versioning --bucket ""$bucket"" --query ""Status"" --output text 2>/dev/null)

    if [[ ""$versioning_status"" == ""Enabled"" ]]; then
        policy=$(aws s3api get-bucket-lifecycle-configuration --bucket ""$bucket"" 2>/dev/null)

        if [[ -z ""$policy"" ]]; then
            log ""‚ö†Ô∏è Bucket $bucket has versioning enabled but no lifecycle policy. Applying default policy...""
            
            cat <<EOF > lifecycle.json
{
    ""Rules"": [
        {
            ""ID"": ""ExpireOldVersions"",
            ""Status"": ""Enabled"",
            ""Prefix"": """",
            ""NoncurrentVersionExpiration"": {
                ""NoncurrentDays"": 90
            }
        }
    ]
}
EOF

            aws s3api put-bucket-lifecycle-configuration --bucket ""$bucket"" --lifecycle-configuration file://lifecycle.json
            log ""‚úÖ Lifecycle policy applied to bucket $bucket.""
            rm -f lifecycle.json
        else
            log ""‚úÖ Bucket $bucket already has a lifecycle policy.""
        fi
    else
        log ""‚úÖ Bucket $bucket does not have versioning enabled. Skipping.""
    fi
done
","üöÄ Why This is Useful?
üîπ Optimizes Storage Costs: Deletes old versions automatically, reducing costs.
üîπ Ensures Compliance: Enforces lifecycle policies across all versioned buckets.
üîπ Enhances Security: Prevents excessive storage of outdated or redundant data.","üìå What This Script Does:
1Ô∏è‚É£ Scans all S3 buckets.
2Ô∏è‚É£ Identifies versioned buckets without lifecycle policies.
3Ô∏è‚É£ Applies a default policy to manage old versions.
4Ô∏è‚É£ Logs findings and updates.
5Ô∏è‚É£ Ensures storage policies are consistently enforced.",,,,
S3,S3 bucket versioning should be enabled,To be added,Compliance,High,"Go to the AWS S3 console, select the bucket, and navigate to the ""Properties"" tab. In the ""Bucket Versioning"" section, click ""Edit,"" enable versioning, and save the changes.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/Versioning.html",Cost: None/$0  (but may incur storage costs),"S3 Bucket Versioning Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if S3 buckets have versioning enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies non-compliant buckets and enables versioning.
SSM Automation: An SSM document to notify administrators and enforce compliance.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if bucket versioning is enabled.
‚úÖ Flags buckets without versioning.
‚úÖ Enables versioning automatically for non-compliant buckets.
‚úÖ Logs all findings and actions taken.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable versioning on S3 buckets
enable_s3_versioning() {
    log ""Checking S3 buckets for versioning status...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Get versioning status
        versioning_status=$(aws s3api get-bucket-versioning --bucket ""$bucket"" --query ""Status"" --output text)

        if [[ ""$versioning_status"" == ""Enabled"" ]]; then
            log ""‚úÖ Bucket $bucket has versioning enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have versioning enabled. Enabling now...""
            aws s3api put-bucket-versioning --bucket ""$bucket"" --versioning-configuration Status=Enabled
            log ""‚úÖ Versioning enabled for bucket $bucket.""
        fi
    done
}

# Execute the function
enable_s3_versioning
","üöÄ Why This is Useful?
üîπ Prevents Accidental Data Loss: Keeps previous versions of objects for recovery.
üîπ Automates Compliance: Identifies non-compliant buckets and fixes them.
üîπ Enables Auditing & Change Tracking: Helps track object modifications and deletions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if versioning is enabled.
3Ô∏è‚É£ Flags buckets without versioning.
4Ô∏è‚É£ Enables versioning for non-compliant buckets.
5Ô∏è‚É£ Logs findings and actions taken.",,,,
Security,S3 bucket versioning should be enabled,To be added,Compliance,High,"Go to the AWS S3 console, select the bucket, and navigate to the ""Properties"" tab. In the ""Bucket Versioning"" section, click ""Edit,"" enable versioning, and save the changes.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/Versioning.html",Cost: None/$0  (but may incur storage costs),"S3 Bucket Versioning Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if S3 buckets have versioning enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies non-compliant buckets and enables versioning.
SSM Automation: An SSM document to notify administrators and enforce compliance.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets in the AWS account.
‚úÖ Checks if bucket versioning is enabled.
‚úÖ Flags buckets without versioning.
‚úÖ Enables versioning automatically for non-compliant buckets.
‚úÖ Logs all findings and actions taken.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable versioning on S3 buckets
enable_s3_versioning() {
    log ""Checking S3 buckets for versioning status...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Get versioning status
        versioning_status=$(aws s3api get-bucket-versioning --bucket ""$bucket"" --query ""Status"" --output text)

        if [[ ""$versioning_status"" == ""Enabled"" ]]; then
            log ""‚úÖ Bucket $bucket has versioning enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does not have versioning enabled. Enabling now...""
            aws s3api put-bucket-versioning --bucket ""$bucket"" --versioning-configuration Status=Enabled
            log ""‚úÖ Versioning enabled for bucket $bucket.""
        fi
    done
}

# Execute the function
enable_s3_versioning
","üöÄ Why This is Useful?
üîπ Prevents Accidental Data Loss: Keeps previous versions of objects for recovery.
üîπ Automates Compliance: Identifies non-compliant buckets and fixes them.
üîπ Enables Auditing & Change Tracking: Helps track object modifications and deletions.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if versioning is enabled.
3Ô∏è‚É£ Flags buckets without versioning.
4Ô∏è‚É£ Enables versioning for non-compliant buckets.
5Ô∏è‚É£ Logs findings and actions taken.",,,,
S3,S3 public access should be blocked at account level,To be added,Compliance,High,"Ggo to the AWS Management Console, open the S3 service, and click on ""Block Public Access settings for this account."" Then, enable the block for all public access settings, including new and existing buckets, and save the changes to apply account-wide.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/s3-account-level-public-access-blocks.html",Cost: None/$0 ,"S3 Public Access Should Be Blocked at Account Level
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if account-level public access settings are enforced.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks and blocks public access at the account level.
SSM Automation: Sends an SNS notification if public access is enabled.","üîç Features of the Script:
‚úÖ Checks if account-level public access is enabled.
‚úÖ Blocks public access if any setting allows it.
‚úÖ Ensures all S3 buckets inherit the account-level restriction.
‚úÖ Logs actions and updates.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 account-level public access settings...""

public_access=$(aws s3control get-public-access-block --account-id $(aws sts get-caller-identity --query ""Account"" --output text) --query ""PublicAccessBlockConfiguration"" --output json 2>/dev/null)

if [[ -z ""$public_access"" ]] || [[ $(echo ""$public_access"" | jq -r 'to_entries[] | select(.value == false)') ]]; then
    log ""‚ö†Ô∏è Public access is not fully blocked! Applying restrictions...""
    aws s3control put-public-access-block --account-id $(aws sts get-caller-identity --query ""Account"" --output text) --public-access-block-configuration BlockPublicAcls=true,BlockPublicPolicy=true,IgnorePublicAcls=true,RestrictPublicBuckets=true
    log ""‚úÖ Public access is now blocked at the account level.""
else
    log ""‚úÖ Public access is already fully blocked.""
fi
","üöÄ Why This is Useful?
üîπ Prevents Data Exposure: Ensures no S3 buckets can be made public.
üîπ Account-Wide Compliance: Blocks public access for all buckets in the account.
üîπ Automated Enforcement: Takes action if settings are misconfigured.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves the current account-level public access settings.
2Ô∏è‚É£ Checks if any setting allows public access.
3Ô∏è‚É£ If found, enables full public access blocking.
4Ô∏è‚É£ Logs changes and updates.
5Ô∏è‚É£ Ensures all future buckets inherit these settings.",,,,
Security,S3 public access should be blocked at account level,To be added,Compliance,High,"Ggo to the AWS Management Console, open the S3 service, and click on ""Block Public Access settings for this account."" Then, enable the block for all public access settings, including new and existing buckets, and save the changes to apply account-wide.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/s3-account-level-public-access-blocks.html",Cost: None/$0 ,"S3 Public Access Should Be Blocked at Account Level
‚úÖ Automation Approach:

AWS Config Rule: Create a rule to check if account-level public access settings are enforced.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that checks and blocks public access at the account level.
SSM Automation: Sends an SNS notification if public access is enabled.","üîç Features of the Script:
‚úÖ Checks if account-level public access is enabled.
‚úÖ Blocks public access if any setting allows it.
‚úÖ Ensures all S3 buckets inherit the account-level restriction.
‚úÖ Logs actions and updates.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking S3 account-level public access settings...""

public_access=$(aws s3control get-public-access-block --account-id $(aws sts get-caller-identity --query ""Account"" --output text) --query ""PublicAccessBlockConfiguration"" --output json 2>/dev/null)

if [[ -z ""$public_access"" ]] || [[ $(echo ""$public_access"" | jq -r 'to_entries[] | select(.value == false)') ]]; then
    log ""‚ö†Ô∏è Public access is not fully blocked! Applying restrictions...""
    aws s3control put-public-access-block --account-id $(aws sts get-caller-identity --query ""Account"" --output text) --public-access-block-configuration BlockPublicAcls=true,BlockPublicPolicy=true,IgnorePublicAcls=true,RestrictPublicBuckets=true
    log ""‚úÖ Public access is now blocked at the account level.""
else
    log ""‚úÖ Public access is already fully blocked.""
fi
","üöÄ Why This is Useful?
üîπ Prevents Data Exposure: Ensures no S3 buckets can be made public.
üîπ Account-Wide Compliance: Blocks public access for all buckets in the account.
üîπ Automated Enforcement: Takes action if settings are misconfigured.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves the current account-level public access settings.
2Ô∏è‚É£ Checks if any setting allows public access.
3Ô∏è‚É£ If found, enables full public access blocking.
4Ô∏è‚É£ Logs changes and updates.
5Ô∏è‚É£ Ensures all future buckets inherit these settings.",,,,
S3,S3 public access should be blocked at bucket levels,To be added,Compliance,Medium,"Go to the AWS S3 console, select the bucket, and navigate to the ""Permissions"" tab. Under the ""Block public access"" section, click ""Edit,"" enable all block options, and save the changes.
Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/configuring-block-public-access-bucket.html",Cost: None/$0 ,"S3 Public Access Should Be Blocked at Bucket Levels
‚úÖ Automation Approach:

AWS Config Rule: Ensures public access settings are blocked at the bucket level.
Lambda Function: A scheduled function that scans and blocks public access where required.
SSM Automation: Notifies security teams when violations occur.
","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if public access is blocked at the bucket level.
‚úÖ If public access is allowed, enforces a block.
‚úÖ Logs findings and updates.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking and enforcing S3 bucket-level public access blocks...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    public_access=$(aws s3api get-public-access-block --bucket ""$bucket"" --query ""PublicAccessBlockConfiguration"" --output json 2>/dev/null)

    if [[ -z ""$public_access"" ]]; then
        log ""‚ö†Ô∏è Bucket $bucket does not have public access block enabled. Enforcing block...""
        aws s3api put-public-access-block --bucket ""$bucket"" --public-access-block-configuration '{
            ""BlockPublicAcls"": true,
            ""IgnorePublicAcls"": true,
            ""BlockPublicPolicy"": true,
            ""RestrictPublicBuckets"": true
        }'
        log ""‚úÖ Public access block enforced for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket already has public access blocked.""
    fi
done
"," Why This is Useful?
üîπ Eliminates Accidental Public Exposure: Ensures public access is restricted.
üîπ Meets Compliance Standards: Helps organizations enforce data privacy policies.
üîπ Reduces Risk of Data Leaks: Prevents unauthorized public access.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks public access block settings.
3Ô∏è‚É£ If not enforced, applies the block.
4Ô∏è‚É£ Logs findings and updates.
5Ô∏è‚É£ Ensures all S3 buckets comply with security best practices.

",,,,
S3,S3 public access should be blocked at account and bucket levels,To be added,Compliance,High,"Go to the AWS S3 console and navigate to ""Block Public Access settings for this account"" under the ""S3"" dashboard. Enable all options to block public access at the account level. Then, for each bucket, go to the ""Permissions"" tab, edit the ""Block public access"" settings, enable all options, and save the changes.",Cost: None/$0 ,"S3 Public Access Should Be Blocked at Account and Bucket Levels
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect if public access is not blocked at the account and bucket levels.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans account-wide and per-bucket public access settings and enforces restrictions.
SSM Automation: Notifies admins and enforces compliance automatically.","üîç Features of the Script:
‚úÖ Blocks public access for the entire AWS account.
‚úÖ Retrieves all S3 buckets and verifies public access settings.
‚úÖ Blocks public access at the bucket level if not already enforced.
‚úÖ Logs actions taken and compliance status.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Block public access at the account level
block_account_level_access() {
    log ""Blocking public access at the account level...""
    aws s3control put-public-access-block --account-id ""$(aws sts get-caller-identity --query Account --output text)"" --public-access-block-configuration \
        BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
    log ""‚úÖ Public access blocked at the account level.""
}

# Block public access at the bucket level
block_bucket_level_access() {
    log ""Checking all S3 buckets for public access settings...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Block public access at the bucket level
        aws s3api put-public-access-block --bucket ""$bucket"" --public-access-block-configuration \
            BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

        log ""‚úÖ Public access blocked for bucket: $bucket""
    done
}

# Execute the functions
block_account_level_access
block_bucket_level_access
","üöÄ Why This is Useful?
üîπ Prevents Data Breaches: Ensures no accidental public exposure of S3 buckets.
üîπ Automates Compliance: Enforces AWS security best practices.
üîπ Centrally Enforced: Blocks public access at both the account and bucket levels.","üìå What This Script Does:
1Ô∏è‚É£ Blocks public access at the account level.
2Ô∏è‚É£ Retrieves all S3 buckets.
3Ô∏è‚É£ Checks and enforces public access restrictions at the bucket level.
4Ô∏è‚É£ Logs compliance status and actions taken.",,,,
SageMaker,SageMaker endpoint configuration encryption should be enabled,To be added,Compliance,High,Ensure SageMaker endpoint configuration encryption is enabled. Steps: 1. Review endpoint configurations. 2. Enable encryption for the endpoint. https://docs.aws.amazon.com/sagemaker/latest/dg/endpoint-security.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker endpoint configuration encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker endpoint configuration encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker endpoint configuration encryption should be enabled,To be added,Compliance,High,Ensure SageMaker endpoint configuration encryption is enabled. Steps: 1. Review endpoint configurations. 2. Enable encryption for the endpoint. https://docs.aws.amazon.com/sagemaker/latest/dg/endpoint-security.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker endpoint configuration encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker endpoint configuration encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker models should be in a VPC,To be added,Compliance,High,Ensure SageMaker models are in a VPC. Steps: 1. Review model configurations. 2. Deploy models in a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-in-vpc.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker models should be in a VPC
check_compliance() {
    log ""Checking AWS resources for SageMaker models should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker models should be in a VPC,To be added,Compliance,High,Ensure SageMaker models are in a VPC. Steps: 1. Review model configurations. 2. Deploy models in a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-in-vpc.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker models should be in a VPC
check_compliance() {
    log ""Checking AWS resources for SageMaker models should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker models should have network isolation enabled,To be added,Compliance,High,Ensure SageMaker models have network isolation enabled. Steps: 1. Check model settings. 2. Enable network isolation for the model. https://docs.aws.amazon.com/sagemaker/latest/dg/security-privacy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker models should have network isolation enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker models should have network isolation enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker models should have network isolation enabled,To be added,Compliance,High,Ensure SageMaker models have network isolation enabled. Steps: 1. Check model settings. 2. Enable network isolation for the model. https://docs.aws.amazon.com/sagemaker/latest/dg/security-privacy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker models should have network isolation enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker models should have network isolation enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker notebook instances should not have direct internet access,To be added,Compliance,High,Ensure SageMaker notebook instances do not have direct internet access. Steps: 1. Review the network settings for notebook instances. 2. Disable direct internet access. https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances should not have direct internet access
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances should not have direct internet access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker notebook instances should not have direct internet access,To be added,Compliance,High,Ensure SageMaker notebook instances do not have direct internet access. Steps: 1. Review the network settings for notebook instances. 2. Disable direct internet access. https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances should not have direct internet access
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances should not have direct internet access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker notebook instances should not have direct internet access,To be added,Compliance,High,Ensure SageMaker notebook instances do not have direct internet access. Steps: 1. Review the network settings for notebook instances. 2. Disable direct internet access. https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances should not have direct internet access
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances should not have direct internet access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker notebook instances should not have direct internet access,To be added,Compliance,High,Ensure SageMaker notebook instances do not have direct internet access. Steps: 1. Review the network settings for notebook instances. 2. Disable direct internet access. https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances should not have direct internet access
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances should not have direct internet access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker notebook instances should be encrypted using CMK,To be added,Compliance,High,Ensure SageMaker notebook instances are encrypted using CMK. Steps: 1. Review encryption settings. 2. Enable encryption using customer-managed keys (CMK). https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances should be encrypted using CMK
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances should be encrypted using CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker notebook instances should be encrypted using CMK,To be added,Compliance,High,Ensure SageMaker notebook instances are encrypted using CMK. Steps: 1. Review encryption settings. 2. Enable encryption using customer-managed keys (CMK). https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances should be encrypted using CMK
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances should be encrypted using CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker notebook instances should be encrypted using CMK,To be added,Compliance,High,Ensure SageMaker notebook instances are encrypted using CMK. Steps: 1. Review encryption settings. 2. Enable encryption using customer-managed keys (CMK). https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances should be encrypted using CMK
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances should be encrypted using CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker notebook instance encryption should be enabled,To be added,Compliance,High,Ensure SageMaker notebook instance encryption is enabled. Steps: 1. Check instance settings. 2. Enable encryption for notebook instances. https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instance encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instance encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker notebook instance encryption should be enabled,To be added,Compliance,High,Ensure SageMaker notebook instance encryption is enabled. Steps: 1. Check instance settings. 2. Enable encryption for notebook instances. https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instance encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instance encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker notebook instances should be in a VPC,To be added,Compliance,High,Ensure SageMaker notebook instances are in a VPC. Steps: 1. Review network settings. 2. Deploy notebook instances in a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances should be in a VPC
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker notebook instances should be in a VPC,To be added,Compliance,High,Ensure SageMaker notebook instances are in a VPC. Steps: 1. Review network settings. 2. Deploy notebook instances in a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances should be in a VPC
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances should be in a VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker notebook instances root access should be disabled,To be added,Compliance,High,Ensure SageMaker notebook instances root access is disabled. Steps: 1. Review instance permissions. 2. Disable root access for notebook instances. https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-instances.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker notebook instances root access should be disabled
check_compliance() {
    log ""Checking AWS resources for SageMaker notebook instances root access should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker training jobs should be in VPC,To be added,Compliance,High,Ensure SageMaker training jobs are in a VPC. Steps: 1. Review training job settings. 2. Configure training jobs to run in a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-in-vpc.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker training jobs should be in VPC
check_compliance() {
    log ""Checking AWS resources for SageMaker training jobs should be in VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker training jobs should be in VPC,To be added,Compliance,High,Ensure SageMaker training jobs are in a VPC. Steps: 1. Review training job settings. 2. Configure training jobs to run in a Virtual Private Cloud (VPC). https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-in-vpc.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker training jobs should be in VPC
check_compliance() {
    log ""Checking AWS resources for SageMaker training jobs should be in VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker training jobs should be enabled with inter-container traffic encryption,To be added,Compliance,High,Ensure SageMaker training jobs are enabled with inter-container traffic encryption. Steps: 1. Check training job configurations. 2. Enable inter-container traffic encryption. https://docs.aws.amazon.com/sagemaker/latest/dg/training-jobs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker training jobs should be enabled with inter-container traffic encryption
check_compliance() {
    log ""Checking AWS resources for SageMaker training jobs should be enabled with inter-container traffic encryption compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker training jobs should be enabled with inter-container traffic encryption,To be added,Compliance,High,Ensure SageMaker training jobs are enabled with inter-container traffic encryption. Steps: 1. Check training job configurations. 2. Enable inter-container traffic encryption. https://docs.aws.amazon.com/sagemaker/latest/dg/training-jobs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker training jobs should be enabled with inter-container traffic encryption
check_compliance() {
    log ""Checking AWS resources for SageMaker training jobs should be enabled with inter-container traffic encryption compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker training jobs should have network isolation enabled,To be added,Compliance,High,Ensure SageMaker training jobs have network isolation enabled. Steps: 1. Review training job settings. 2. Enable network isolation for training jobs. https://docs.aws.amazon.com/sagemaker/latest/dg/security-privacy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker training jobs should have network isolation enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker training jobs should have network isolation enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker training jobs should have network isolation enabled,To be added,Compliance,High,Ensure SageMaker training jobs have network isolation enabled. Steps: 1. Review training job settings. 2. Enable network isolation for training jobs. https://docs.aws.amazon.com/sagemaker/latest/dg/security-privacy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker training jobs should have network isolation enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker training jobs should have network isolation enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SageMaker,SageMaker training jobs volumes and outputs should have KMS encryption enabled,To be added,Compliance,High,Ensure SageMaker training job volumes and outputs have KMS encryption enabled. Steps: 1. Review volume settings. 2. Enable KMS encryption for training job volumes and outputs. https://docs.aws.amazon.com/sagemaker/latest/dg/security-privacy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker training jobs volumes and outputs should have KMS encryption enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker training jobs volumes and outputs should have KMS encryption enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SageMaker training jobs volumes and outputs should have KMS encryption enabled,To be added,Compliance,High,Ensure SageMaker training job volumes and outputs have KMS encryption enabled. Steps: 1. Review volume settings. 2. Enable KMS encryption for training job volumes and outputs. https://docs.aws.amazon.com/sagemaker/latest/dg/security-privacy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SageMaker training jobs volumes and outputs should have KMS encryption enabled
check_compliance() {
    log ""Checking AWS resources for SageMaker training jobs volumes and outputs should have KMS encryption enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Secrets Manager,Secrets Manager secrets should have automatic rotation enabled,To be added,Compliance,High,Ensure Route 53 domains auto-renew is enabled. Steps: 1. Review domain settings in Route 53. 2. Enable auto-renew for all domains. URL:Auto-Renew Domains,Cost: None/$0  (if domains are renewed on time) ,"Secrets Manager Secrets Should Have Automatic Rotation Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect secrets without automatic rotation enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all AWS Secrets Manager secrets and flags non-compliant ones.
SSM Automation: An SSM document to notify admins and trigger rotation for non-compliant secrets.","üîç Features of the Script:
‚úÖ Retrieves all AWS Secrets Manager secrets.
‚úÖ Checks if each secret has rotation enabled.
‚úÖ Flags and logs secrets without rotation policies.
‚úÖ Suggests remediation steps for non-compliant secrets.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check Secrets Manager secrets for rotation compliance
check_secrets_rotation() {
    log ""Checking AWS Secrets Manager secrets for automatic rotation...""

    # Get all secrets
    secrets=$(aws secretsmanager list-secrets --query ""SecretList[].ARN"" --output text)

    if [[ -z ""$secrets"" ]]; then
        log ""No secrets found in AWS Secrets Manager.""
        exit 0
    fi

    non_compliant_count=0
    for secret_arn in $secrets; do
        log ""Checking secret: $secret_arn""

        # Check if rotation is enabled
        rotation_enabled=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" --query ""RotationEnabled"" --output text)

        if [[ ""$rotation_enabled"" != ""True"" ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn does NOT have automatic rotation enabled.""
            log ""‚ùå Action required: Enable automatic rotation.""
            ((non_compliant_count++))
        else
            log ""‚úÖ Secret $secret_arn has automatic rotation enabled.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count secrets require rotation to be enabled.""
    else
        log ""‚úÖ All secrets have automatic rotation enabled.""
    fi
}

# Execute the function
check_secrets_rotation
","üöÄ Why This is Useful?
üîπ Enhances Security: Reduces risk of credential leaks by enforcing automated rotation.
üîπ Automates Compliance Checks: Ensures all secrets follow best practices for rotation.
üîπ Visibility & Logging: Provides clear reports on non-compliant secrets.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Secrets Manager secrets.
2Ô∏è‚É£ Checks if each secret has automatic rotation enabled.
3Ô∏è‚É£ Flags and logs secrets without rotation.
4Ô∏è‚É£ Supports manual review or automated scanning.
5Ô∏è‚É£ Helps maintain strong security and compliance controls.",,,,
Secrets Manager,Secrets Manager secrets should be rotated within a specified number of days,To be added,Compliance,High,Ensure Route 53 domains do not expire within the next 30 days. Steps: 1. Check expiration dates for all domains. 2. Renew any domains expiring within 30 days.  URL:Domain Expiration,cost:Depends on domain renewal fees,"Secrets Manager Secrets Should Be Rotated Within a Specified Number of Days
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check if secrets have an active rotation configuration and if they were rotated within the required timeframe.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) checks all secrets and flags non-compliant ones.
SSM Automation: Notifies admins of secrets that need rotation and can trigger manual or automated rotation.","üîç Features of the Script:
‚úÖ Retrieves all AWS Secrets Manager secrets.
‚úÖ Checks if each secret has rotation enabled.
‚úÖ Verifies if the last rotation date exceeds the allowed threshold.
‚úÖ Flags secrets that need rotation and suggests action.
‚úÖ Logs all findings and actions for auditing.

","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Set the rotation threshold in days
ROTATION_THRESHOLD=90
CURRENT_DATE=$(date +%s)

# Check secrets rotation
check_secret_rotation() {
    log ""Checking AWS Secrets Manager secrets for rotation compliance...""

    secrets=$(aws secretsmanager list-secrets --query ""SecretList[].ARN"" --output text)

    if [[ -z ""$secrets"" ]]; then
        log ""No secrets found.""
        exit 0
    fi

    for secret_arn in $secrets; do
        rotation_enabled=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" \
            --query ""RotationEnabled"" --output text)

        if [[ ""$rotation_enabled"" == ""False"" ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn does not have rotation enabled. Action required!""
            continue
        fi

        last_rotated=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" \
            --query ""LastRotatedDate"" --output text 2>/dev/null)

        if [[ ""$last_rotated"" == ""None"" ]]; then
            last_rotated=0
        else
            last_rotated=$(date -d ""$last_rotated"" +%s)
        fi

        days_since_rotation=$(( (CURRENT_DATE - last_rotated) / 86400 ))

        if [[ $days_since_rotation -ge $ROTATION_THRESHOLD ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn has not been rotated in $days_since_rotation days. Rotation required!""
        else
            log ""‚úÖ Secret $secret_arn is within the rotation compliance period ($days_since_rotation days).""
        fi
    done
}

# Execute the function
check_secret_rotation
","üöÄ Why This is Useful?
üîπ Enhances Security: Regularly rotates credentials to reduce the risk of compromise.
üîπ Ensures Compliance: Meets best practices and security policies for credential management.
üîπ Automated Monitoring: Provides continuous checks and notifications.

"," What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Secrets Manager secrets.
2Ô∏è‚É£ Checks if rotation is enabled for each secret.
3Ô∏è‚É£ Verifies if secrets have been rotated within the specified period.
4Ô∏è‚É£ Flags non-compliant secrets and suggests action.
5Ô∏è‚É£ Logs all findings for auditing.",,,,
Secrets Manager,Secrets Manager secrets should be encrypted using CMK,To be added,Compliance,High,Ensure Route 53 domains do not expire within the next 7 days. Steps: 1. Review expiration dates. 2. Renew any domains expiring within 7 days immediately.  URL:Domain Expiration,cost:Depends on domain renewal fees,"Secrets Manager Secrets Should Be Encrypted Using CMK
‚úÖ Automation Approach:

AWS Config Rule: Use the managed rule secretsmanager-secret-encrypted-with-cmk to detect non-compliant secrets.
Lambda Function: A scheduled Lambda function checks for secrets encrypted with AWS-managed keys instead of CMK.
SSM Automation: Automatically re-encrypts non-compliant secrets with a specified CMK.","üîç Features of the Script:
‚úÖ Retrieves all AWS Secrets Manager secrets.
‚úÖ Checks if secrets are encrypted with AWS-managed KMS keys.
‚úÖ Identifies secrets not using a customer-managed CMK.
‚úÖ Re-encrypts secrets with a specified CMK if needed.
‚úÖ Logs findings and actions taken.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Specify the required CMK ARN
REQUIRED_CMK_ARN=""arn:aws:kms:region:account-id:key/key-id""

# Check Secrets Manager encryption settings
check_secrets_encryption() {
    log ""Checking AWS Secrets Manager encryption settings...""

    secrets=$(aws secretsmanager list-secrets --query ""SecretList[].ARN"" --output text)

    if [[ -z ""$secrets"" ]]; then
        log ""No secrets found.""
        exit 0
    fi

    for secret_arn in $secrets; do
        kms_key_id=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" \
            --query ""KmsKeyId"" --output text)

        if [[ ""$kms_key_id"" != ""$REQUIRED_CMK_ARN"" ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn is not encrypted with the required CMK.""

            # Optional: Re-encrypt the secret with the CMK
            # aws secretsmanager update-secret --secret-id ""$secret_arn"" --kms-key-id ""$REQUIRED_CMK_ARN""

            log ""‚úÖ Action required: Update encryption for $secret_arn to use CMK.""
        else
            log ""‚úÖ Secret $secret_arn is properly encrypted with CMK.""
        fi
    done
}

# Execute the function
check_secrets_encryption
","üöÄ Why This is Useful?
üîπ Enhances Security: Ensures secrets are protected with stronger, customer-controlled encryption.
üîπ Meets Compliance Standards: Aligns with best practices for AWS KMS encryption.
üîπ Automates Remediation: Detects and fixes non-compliant secrets.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Secrets Manager secrets.
2Ô∏è‚É£ Checks if they are encrypted with a CMK.
3Ô∏è‚É£ Flags secrets using AWS-managed keys.
4Ô∏è‚É£ Logs findings and suggests encryption updates.
5Ô∏è‚É£ Optionally re-encrypts secrets with a CMK.",,,,
Secrets Manager,Secrets Manager secrets should be rotated within specific number of days,To be added,Compliance,High,Ensure Route 53 domains are not expired. Steps: 1. Audit all domains in Route 53. 2. Renew any expired domains.   URL:Domain Management,cost:Depends on domain renewal fees,"Secrets Manager Secrets Should Be Rotated Within a Specified Number of Days
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check if secrets have an active rotation configuration and if they were rotated within the required timeframe.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) checks all secrets and flags non-compliant ones.
SSM Automation: Notifies admins of secrets that need rotation and can trigger manual or automated rotation.","üîç Features of the Script:
‚úÖ Retrieves all AWS Secrets Manager secrets.
‚úÖ Checks if each secret has rotation enabled.
‚úÖ Verifies if the last rotation date exceeds the allowed threshold.
‚úÖ Flags secrets that need rotation and suggests action.
‚úÖ Logs all findings and actions for auditing.

","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Set the rotation threshold in days
ROTATION_THRESHOLD=90
CURRENT_DATE=$(date +%s)

# Check secrets rotation
check_secret_rotation() {
    log ""Checking AWS Secrets Manager secrets for rotation compliance...""

    secrets=$(aws secretsmanager list-secrets --query ""SecretList[].ARN"" --output text)

    if [[ -z ""$secrets"" ]]; then
        log ""No secrets found.""
        exit 0
    fi

    for secret_arn in $secrets; do
        rotation_enabled=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" \
            --query ""RotationEnabled"" --output text)

        if [[ ""$rotation_enabled"" == ""False"" ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn does not have rotation enabled. Action required!""
            continue
        fi

        last_rotated=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" \
            --query ""LastRotatedDate"" --output text 2>/dev/null)

        if [[ ""$last_rotated"" == ""None"" ]]; then
            last_rotated=0
        else
            last_rotated=$(date -d ""$last_rotated"" +%s)
        fi

        days_since_rotation=$(( (CURRENT_DATE - last_rotated) / 86400 ))

        if [[ $days_since_rotation -ge $ROTATION_THRESHOLD ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn has not been rotated in $days_since_rotation days. Rotation required!""
        else
            log ""‚úÖ Secret $secret_arn is within the rotation compliance period ($days_since_rotation days).""
        fi
    done
}

# Execute the function
check_secret_rotation
","üöÄ Why This is Useful?
üîπ Enhances Security: Regularly rotates credentials to reduce the risk of compromise.
üîπ Ensures Compliance: Meets best practices and security policies for credential management.
üîπ Automated Monitoring: Provides continuous checks and notifications.

"," What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Secrets Manager secrets.
2Ô∏è‚É£ Checks if rotation is enabled for each secret.
3Ô∏è‚É£ Verifies if secrets have been rotated within the specified period.
4Ô∏è‚É£ Flags non-compliant secrets and suggests action.
5Ô∏è‚É£ Logs all findings for auditing.",,,,
Secrets Manager,Remove unused Secrets Manager secrets,To be added,Compliance,High,Ensure Route 53 domains have privacy protection enabled. Steps: 1. Check domain privacy settings. 2. Enable privacy protection for all domains.  URL:Domain Privacy Protection,cost:Additional fees may apply,"Remove Unused Secrets Manager Secrets
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to detect Secrets Manager secrets that haven't been accessed in 90 days.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) scans secrets and deletes unused ones.
SSM Automation: Sends notifications before deletion and provides an approval workflow.","üîç Features of the Script:
‚úÖ Retrieves all secrets from AWS Secrets Manager.
‚úÖ Checks the last accessed date of each secret.
‚úÖ Flags secrets that haven't been used in 90+ days.
‚úÖ Logs findings and optionally deletes unused secrets.
‚úÖ Sends an alert before deletion for admin review.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Set the threshold (90 days)
THRESHOLD_DAYS=90
CURRENT_DATE=$(date +%s)

# Check unused Secrets Manager secrets
check_unused_secrets() {
    log ""Scanning AWS Secrets Manager for unused secrets...""

    secrets=$(aws secretsmanager list-secrets --query ""SecretList[].ARN"" --output text)

    if [[ -z ""$secrets"" ]]; then
        log ""No secrets found.""
        exit 0
    fi

    for secret_arn in $secrets; do
        last_accessed_date=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" \
            --query ""LastAccessedDate"" --output text 2>/dev/null)

        if [[ ""$last_accessed_date"" == ""None"" ]]; then
            last_accessed_date=0
        else
            last_accessed_date=$(date -d ""$last_accessed_date"" +%s)
        fi

        days_unused=$(( (CURRENT_DATE - last_accessed_date) / 86400 ))

        if [[ $days_unused -ge $THRESHOLD_DAYS ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn has not been accessed for $days_unused days.""

            # Optional: Delete the secret (uncomment to enable deletion)
            # aws secretsmanager delete-secret --secret-id ""$secret_arn"" --force-delete-without-recovery

            log ""‚úÖ Action required: Review and remove unused secret $secret_arn.""
        else
            log ""‚úÖ Secret $secret_arn was accessed within the last $THRESHOLD_DAYS days.""
        fi
    done
}

# Execute the function
check_unused_secrets
","üöÄ Why This is Useful?
üîπ Reduces Security Risks: Eliminates stale credentials that could be compromised.
üîπ Optimizes Costs: Avoids unnecessary storage of unused secrets.
üîπ Ensures Compliance: Meets best practices for credential management.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Secrets Manager secrets.
2Ô∏è‚É£ Checks the last accessed date for each secret.
3Ô∏è‚É£ Identifies secrets that haven't been used in 90+ days.
4Ô∏è‚É£ Logs findings and suggests deletion.
5Ô∏è‚É£ Sends an alert before removing unused secrets.",,,,
Secrets Manager,Secrets Manager secrets should be rotated as per the rotation schedule,To be added,Compliance,High,Ensure Route 53 domains have transfer lock enabled. Steps: 1. Review transfer lock settings for all domains. 2. Enable transfer lock for each domain. cost: 0$ URL:Transfer Lock,Cost: None/$0 ,"Secrets Manager Secrets Should Be Rotated as per the Rotation Schedule
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if secrets are rotated within the specified schedule.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans secrets and flags those not rotated within the expected interval.
SSM Automation: An SSM document to notify admins and trigger secret rotation if overdue.","üîç Features of the Script:
‚úÖ Retrieves all AWS Secrets Manager secrets.
‚úÖ Checks last rotation date against the configured schedule.
‚úÖ Flags secrets overdue for rotation.
‚úÖ Suggests manual rotation if required.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check if secrets are rotated as per the schedule
check_secret_rotation_schedule() {
    log ""Checking AWS Secrets Manager secrets for overdue rotation...""

    # Get all secrets
    secrets=$(aws secretsmanager list-secrets --query ""SecretList[].ARN"" --output text)

    if [[ -z ""$secrets"" ]]; then
        log ""No secrets found in AWS Secrets Manager.""
        exit 0
    fi

    overdue_count=0
    for secret_arn in $secrets; do
        log ""Checking secret: $secret_arn""

        # Check if rotation is enabled
        rotation_enabled=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" --query ""RotationEnabled"" --output text)

        if [[ ""$rotation_enabled"" == ""True"" ]]; then
            # Get last rotation date
            last_rotation=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" --query ""LastRotatedDate"" --output text)
            
            # Convert last rotation date to timestamp
            last_rotation_timestamp=$(date -d ""$last_rotation"" +%s 2>/dev/null)
            current_timestamp=$(date +%s)
            
            # Calculate days since last rotation
            if [[ ! -z ""$last_rotation_timestamp"" ]]; then
                days_since_rotation=$(( (current_timestamp - last_rotation_timestamp) / 86400 ))

                if [[ $days_since_rotation -gt 30 ]]; then
                    log ""‚ö†Ô∏è Secret $secret_arn has NOT been rotated in the last 30 days.""
                    log ""‚ùå Action required: Rotate this secret immediately.""
                    ((overdue_count++))
                else
                    log ""‚úÖ Secret $secret_arn was rotated $days_since_rotation days ago and is compliant.""
                fi
            else
                log ""‚ö†Ô∏è Unable to determine last rotation date for $secret_arn.""
                ((overdue_count++))
            fi
        else
            log ""‚úÖ Secret $secret_arn does not have automatic rotation enabled. Skipping.""
        fi
    done

    if [[ $overdue_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $overdue_count secrets are overdue for rotation.""
    else
        log ""‚úÖ All secrets are rotated as per the schedule.""
    fi
}

# Execute the function
check_secret_rotation_schedule
","üöÄ Why This is Useful?
üîπ Prevents Credential Staleness: Ensures secrets are rotated within best-practice intervals.
üîπ Improves Security Hygiene: Avoids long-lived secrets that could be compromised.
üîπ Compliance with Best Practices: Automates checks and alerts for overdue secrets.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Secrets Manager secrets.
2Ô∏è‚É£ Checks if rotation is enabled.
3Ô∏è‚É£ Compares last rotation date with a 30-day threshold.
4Ô∏è‚É£ Flags secrets overdue for rotation.
5Ô∏è‚É£ Logs findings and suggests action on non-compliant secrets.",,,,
Secrets Manager,Secrets Manager secrets that have not been used in 90 days should be removed,To be added,Compliance,High,Ensure Route 53 zones have query logging enabled. Steps: 1. Review the settings for hosted zones. 2. Enable query logging for each hosted zone. cost:$0 (but may incur data transfer costs) URL:Query Logging,Cost: None/$0 ,"Secrets Manager Secrets That Have Not Been Used in 90 Days Should Be Removed
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check for Secrets Manager secrets that have not been accessed in 90 days.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans secrets for last access time and deletes old, unused ones.
SSM Automation: An SSM document to notify admins before deletion and allow manual override.","üîç Features of the Script:
‚úÖ Retrieves all Secrets Manager secrets in the AWS account.
‚úÖ Checks the last accessed date for each secret.
‚úÖ Flags secrets unused for more than 90 days.
‚úÖ Deletes non-compliant secrets while logging actions.
‚úÖ Supports a manual override mode for exceptions.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to delete secrets not used in 90 days
delete_old_secrets() {
    log ""Checking Secrets Manager for secrets unused in the last 90 days...""

    # Get all secrets
    secrets=$(aws secretsmanager list-secrets --query ""SecretList[].ARN"" --output text)

    if [[ -z ""$secrets"" ]]; then
        log ""No secrets found.""
        exit 0
    fi

    threshold_date=$(date -d ""90 days ago"" +%Y-%m-%dT%H:%M:%SZ)

    for secret_arn in $secrets; do
        last_accessed=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" --query ""LastAccessedDate"" --output text 2>/dev/null)

        if [[ ""$last_accessed"" == ""None"" || ""$last_accessed"" < ""$threshold_date"" ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn has not been used since $last_accessed. Deleting...""
            aws secretsmanager delete-secret --secret-id ""$secret_arn"" --force-delete-without-recovery
            log ""‚úÖ Secret $secret_arn deleted.""
        else
            log ""‚úÖ Secret $secret_arn is in use (last accessed: $last_accessed). Skipping.""
        fi
    done

    log ""‚úÖ Secret cleanup process completed.""
}

# Execute the function
delete_old_secrets
","üöÄ Why This is Useful?
üîπ Reduces Security Risks: Removes unused secrets that could be exploited.
üîπ Automates Compliance: Ensures secrets are regularly reviewed and deleted.
üîπ Improves Resource Hygiene: Prevents unnecessary secrets from accumulating.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all secrets in Secrets Manager.
2Ô∏è‚É£ Checks their last accessed date.
3Ô∏è‚É£ Flags secrets not used in 90+ days.
4Ô∏è‚É£ Deletes non-compliant secrets.
5Ô∏è‚É£ Logs actions and ensures compliance.",,,,
Security,Secrets Manager secrets that have not been used in 90 days should be removed,To be added,Compliance,High,Ensure Route 53 zones have query logging enabled. Steps: 1. Review the settings for hosted zones. 2. Enable query logging for each hosted zone. cost:$0 (but may incur data transfer costs) URL:Query Logging,Cost: None/$0 ,"Secrets Manager Secrets That Have Not Been Used in 90 Days Should Be Removed
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check for Secrets Manager secrets that have not been accessed in 90 days.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans secrets for last access time and deletes old, unused ones.
SSM Automation: An SSM document to notify admins before deletion and allow manual override.","üîç Features of the Script:
‚úÖ Retrieves all Secrets Manager secrets in the AWS account.
‚úÖ Checks the last accessed date for each secret.
‚úÖ Flags secrets unused for more than 90 days.
‚úÖ Deletes non-compliant secrets while logging actions.
‚úÖ Supports a manual override mode for exceptions.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to delete secrets not used in 90 days
delete_old_secrets() {
    log ""Checking Secrets Manager for secrets unused in the last 90 days...""

    # Get all secrets
    secrets=$(aws secretsmanager list-secrets --query ""SecretList[].ARN"" --output text)

    if [[ -z ""$secrets"" ]]; then
        log ""No secrets found.""
        exit 0
    fi

    threshold_date=$(date -d ""90 days ago"" +%Y-%m-%dT%H:%M:%SZ)

    for secret_arn in $secrets; do
        last_accessed=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" --query ""LastAccessedDate"" --output text 2>/dev/null)

        if [[ ""$last_accessed"" == ""None"" || ""$last_accessed"" < ""$threshold_date"" ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn has not been used since $last_accessed. Deleting...""
            aws secretsmanager delete-secret --secret-id ""$secret_arn"" --force-delete-without-recovery
            log ""‚úÖ Secret $secret_arn deleted.""
        else
            log ""‚úÖ Secret $secret_arn is in use (last accessed: $last_accessed). Skipping.""
        fi
    done

    log ""‚úÖ Secret cleanup process completed.""
}

# Execute the function
delete_old_secrets
","üöÄ Why This is Useful?
üîπ Reduces Security Risks: Removes unused secrets that could be exploited.
üîπ Automates Compliance: Ensures secrets are regularly reviewed and deleted.
üîπ Improves Resource Hygiene: Prevents unnecessary secrets from accumulating.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all secrets in Secrets Manager.
2Ô∏è‚É£ Checks their last accessed date.
3Ô∏è‚É£ Flags secrets not used in 90+ days.
4Ô∏è‚É£ Deletes non-compliant secrets.
5Ô∏è‚É£ Logs actions and ensures compliance.",,,,
Security,Secrets Manager secrets that have not been used in 90 days should be removed,To be added,Compliance,High,Ensure Route 53 zones have query logging enabled. Steps: 1. Review the settings for hosted zones. 2. Enable query logging for each hosted zone. cost:$0 (but may incur data transfer costs) URL:Query Logging,Cost: None/$0 ,"Secrets Manager Secrets That Have Not Been Used in 90 Days Should Be Removed
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check for Secrets Manager secrets that have not been accessed in 90 days.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans secrets for last access time and deletes old, unused ones.
SSM Automation: An SSM document to notify admins before deletion and allow manual override.","üîç Features of the Script:
‚úÖ Retrieves all Secrets Manager secrets in the AWS account.
‚úÖ Checks the last accessed date for each secret.
‚úÖ Flags secrets unused for more than 90 days.
‚úÖ Deletes non-compliant secrets while logging actions.
‚úÖ Supports a manual override mode for exceptions.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to delete secrets not used in 90 days
delete_old_secrets() {
    log ""Checking Secrets Manager for secrets unused in the last 90 days...""

    # Get all secrets
    secrets=$(aws secretsmanager list-secrets --query ""SecretList[].ARN"" --output text)

    if [[ -z ""$secrets"" ]]; then
        log ""No secrets found.""
        exit 0
    fi

    threshold_date=$(date -d ""90 days ago"" +%Y-%m-%dT%H:%M:%SZ)

    for secret_arn in $secrets; do
        last_accessed=$(aws secretsmanager describe-secret --secret-id ""$secret_arn"" --query ""LastAccessedDate"" --output text 2>/dev/null)

        if [[ ""$last_accessed"" == ""None"" || ""$last_accessed"" < ""$threshold_date"" ]]; then
            log ""‚ö†Ô∏è Secret $secret_arn has not been used since $last_accessed. Deleting...""
            aws secretsmanager delete-secret --secret-id ""$secret_arn"" --force-delete-without-recovery
            log ""‚úÖ Secret $secret_arn deleted.""
        else
            log ""‚úÖ Secret $secret_arn is in use (last accessed: $last_accessed). Skipping.""
        fi
    done

    log ""‚úÖ Secret cleanup process completed.""
}

# Execute the function
delete_old_secrets
","üöÄ Why This is Useful?
üîπ Reduces Security Risks: Removes unused secrets that could be exploited.
üîπ Automates Compliance: Ensures secrets are regularly reviewed and deleted.
üîπ Improves Resource Hygiene: Prevents unnecessary secrets from accumulating.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all secrets in Secrets Manager.
2Ô∏è‚É£ Checks their last accessed date.
3Ô∏è‚É£ Flags secrets not used in 90+ days.
4Ô∏è‚É£ Deletes non-compliant secrets.
5Ô∏è‚É£ Logs actions and ensures compliance.",,,,
Security,BP02 Secure account root user and properties,To be added,AWS Well-Architected Framework,High,Secure the root user and associated properties. Steps: 1. Enable MFA on the root account. 2. Remove unnecessary access keys. 3. Monitor root user actions. # REF:https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html,Cost: None/$0 ,"BP02 Secure Account Root User and Properties
‚úÖ Automation Approach:

AWS Config Rule: Use AWS Config managed rule root-account-mfa-enabled to ensure the root user has MFA enabled.
Lambda Function: A scheduled Lambda function that checks for root account usage, MFA status, and access keys.
SSM Automation: Sends notifications if the root user is used and disables any active access keys.","üîç Features of the Script:
‚úÖ Checks if the root user has MFA enabled.
‚úÖ Identifies if the root user has access keys (which is a security risk).
‚úÖ Logs the last used date of the root user.
‚úÖ Sends alerts if root user activity is detected.
‚úÖ Optionally disables root user access keys for enforcement.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check root user MFA status
check_root_mfa() {
    log ""Checking if the root user has MFA enabled...""
    
    mfa_enabled=$(aws iam get-account-summary --query ""SummaryMap.AccountMFAEnabled"" --output text)
    
    if [[ ""$mfa_enabled"" -eq 1 ]]; then
        log ""‚úÖ Root user has MFA enabled.""
    else
        log ""‚ùå Root user does NOT have MFA enabled. This is a security risk!""
    fi
}

# Check if root user has access keys
check_root_access_keys() {
    log ""Checking if the root user has access keys...""

    access_keys=$(aws iam list-access-keys --user-name root --query ""AccessKeyMetadata[].AccessKeyId"" --output text 2>/dev/null)

    if [[ -z ""$access_keys"" ]]; then
        log ""‚úÖ Root user does not have access keys.""
    else
        log ""‚ùå Root user has access keys! These should be removed for security.""
    fi
}

# Check last time root user was used
check_root_usage() {
    log ""Checking last root user activity...""

    last_used=$(aws iam get-account-authorization-details --query ""UserDetailList[?UserName=='root'].PasswordLastUsed"" --output text)

    if [[ -z ""$last_used"" ]]; then
        log ""‚úÖ Root user has not been used recently.""
    else
        log ""‚ö†Ô∏è Root user was last used on: $last_used
","üöÄ Why This is Useful?
üîπ Enforces Security Best Practices: Ensures the root user is not used unnecessarily.
üîπ Reduces Risk: Detects risky configurations like missing MFA and active access keys.
üîπ Automates Compliance: Helps meet AWS security standards (CIS Benchmark, AWS Well-Architected).","üìå What This Script Does:
1Ô∏è‚É£ Checks if the root user has MFA enabled.
2Ô∏è‚É£ Identifies if the root user has access keys.
3Ô∏è‚É£ Logs the last activity date of the root user.
4Ô∏è‚É£ Sends alerts if any risky configurations are found.
5Ô∏è‚É£ Supports auto-remediation (disabling access keys if needed).",,,,
Security,EC2 instances should be managed by AWS Systems Manager,To be added,AWS Well-Architected Framework,Medium,Manage EC2 instances using AWS Systems Manager. Steps: 1. Enable Systems Manager for your instances. 2. Use Systems Manager features for management. # REF:https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EC2 instances should be managed by AWS Systems Manager
check_compliance() {
    log ""Checking AWS resources for EC2 instances should be managed by AWS Systems Manager compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,EC2 instances should be managed by AWS Systems Manager,To be added,AWS Well-Architected Framework,Medium,Manage EC2 instances using AWS Systems Manager. Steps: 1. Enable Systems Manager for your instances. 2. Use Systems Manager features for management. # REF:https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EC2 instances should be managed by AWS Systems Manager
check_compliance() {
    log ""Checking AWS resources for EC2 instances should be managed by AWS Systems Manager compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,EC2 instances should be managed by AWS Systems Manager,To be added,AWS Well-Architected Framework,Medium,Manage EC2 instances using AWS Systems Manager. Steps: 1. Enable Systems Manager for your instances. 2. Use Systems Manager features for management. # REF:https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EC2 instances should be managed by AWS Systems Manager
check_compliance() {
    log ""Checking AWS resources for EC2 instances should be managed by AWS Systems Manager compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SSM,EC2 instances should be managed by AWS Systems Manager,To be added,AWS Well-Architected Framework,Medium,Manage EC2 instances using AWS Systems Manager. Steps: 1. Enable Systems Manager for your instances. 2. Use Systems Manager features for management. # REF:https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EC2 instances should be managed by AWS Systems Manager
check_compliance() {
    log ""Checking AWS resources for EC2 instances should be managed by AWS Systems Manager compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SSM,EC2 instances should be managed by AWS Systems Manager,To be added,AWS Well-Architected Framework,Medium,Manage EC2 instances using AWS Systems Manager. Steps: 1. Enable Systems Manager for your instances. 2. Use Systems Manager features for management. # REF:https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EC2 instances should be managed by AWS Systems Manager
check_compliance() {
    log ""Checking AWS resources for EC2 instances should be managed by AWS Systems Manager compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,VPC EIPs should be associated with an EC2 instance or ENI,To be added,AWS Well-Architected Framework,Low,Ensure that VPC Elastic IPs (EIPs) are associated with an EC2 instance or an Elastic Network Interface (ENI). Steps: 1. Audit EIP settings. 2. Reassign as necessary. # REF:https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ElasticIPs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC EIPs should be associated with an EC2 instance or ENI
check_compliance() {
    log ""Checking AWS resources for VPC EIPs should be associated with an EC2 instance or ENI compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC EIPs should be associated with an EC2 instance or ENI,To be added,AWS Well-Architected Framework,Low,Ensure that VPC Elastic IPs (EIPs) are associated with an EC2 instance or an Elastic Network Interface (ENI). Steps: 1. Audit EIP settings. 2. Reassign as necessary. # REF:https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ElasticIPs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC EIPs should be associated with an EC2 instance or ENI
check_compliance() {
    log ""Checking AWS resources for VPC EIPs should be associated with an EC2 instance or ENI compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC EIPs should be associated with an EC2 instance or ENI,To be added,AWS Well-Architected Framework,Low,Ensure that VPC Elastic IPs (EIPs) are associated with an EC2 instance or an Elastic Network Interface (ENI). Steps: 1. Audit EIP settings. 2. Reassign as necessary. # REF:https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ElasticIPs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC EIPs should be associated with an EC2 instance or ENI
check_compliance() {
    log ""Checking AWS resources for VPC EIPs should be associated with an EC2 instance or ENI compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SNS topic policies should prohibit public access,To be added,AWS Well-Architected Framework,High,Ensure SNS topic policies prohibit public access. Steps: 1. Review SNS topic policies. 2. Modify policies to restrict public access. # REF:https://docs.aws.amazon.com/sns/latest/dg/sns-access-policy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topic policies should prohibit public access
check_compliance() {
    log ""Checking AWS resources for SNS topic policies should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topic policies should prohibit public access,To be added,AWS Well-Architected Framework,High,Ensure SNS topic policies prohibit public access. Steps: 1. Review SNS topic policies. 2. Modify policies to restrict public access. # REF:https://docs.aws.amazon.com/sns/latest/dg/sns-access-policy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topic policies should prohibit public access
check_compliance() {
    log ""Checking AWS resources for SNS topic policies should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topic policies should prohibit public access,To be added,AWS Well-Architected Framework,High,Ensure SNS topic policies prohibit public access. Steps: 1. Review SNS topic policies. 2. Modify policies to restrict public access. # REF:https://docs.aws.amazon.com/sns/latest/dg/sns-access-policy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topic policies should prohibit public access
check_compliance() {
    log ""Checking AWS resources for SNS topic policies should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SQS queue policies should prohibit public access,To be added,AWS Well-Architected Framework,Low,Ensure SQS queue policies prohibit public access. Steps: 1. Review queue policies. 2. Adjust policies to restrict public access. # REF:https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-access-policy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SQS queue policies should prohibit public access
check_compliance() {
    log ""Checking AWS resources for SQS queue policies should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SQS,SQS queue policies should prohibit public access,To be added,AWS Well-Architected Framework,Low,Ensure SQS queue policies prohibit public access. Steps: 1. Review queue policies. 2. Adjust policies to restrict public access. # REF:https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-access-policy.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SQS queue policies should prohibit public access
check_compliance() {
    log ""Checking AWS resources for SQS queue policies should prohibit public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SSM documents should not be public,To be added,AWS Well-Architected Framework,High,Ensure SSM documents are not public. Steps: 1. Review SSM document settings. 2. Adjust permissions to prevent public access. # REF:https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-docs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM documents should not be public
check_compliance() {
    log ""Checking AWS resources for SSM documents should not be public compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SSM,SSM documents should not be public,To be added,AWS Well-Architected Framework,High,Ensure SSM documents are not public. Steps: 1. Review SSM document settings. 2. Adjust permissions to prevent public access. # REF:https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-docs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM documents should not be public
check_compliance() {
    log ""Checking AWS resources for SSM documents should not be public compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SSM,SSM documents should not be public,To be added,AWS Well-Architected Framework,High,Ensure SSM documents are not public. Steps: 1. Review SSM document settings. 2. Adjust permissions to prevent public access. # REF:https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-docs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM documents should not be public
check_compliance() {
    log ""Checking AWS resources for SSM documents should not be public compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,3.10 Ensure that Object-level logging for write events is enabled for S3 bucket,To be added,AWS Well-Architected Framework,High,Ensure object-level logging for write events is enabled for S3 buckets. Steps: 1. Navigate to S3 bucket settings. 2. Enable logging for write events. # REF:https://docs.aws.amazon.com/AmazonS3/latest/userguide/LoggingReferer.html,Cost: None/$0 ,"Ensure That Object-Level Logging for Write Events is Enabled for S3 Bucket
‚úÖ Automation Approach:

AWS Config Rule: Use AWS Config rule s3-bucket-logging-enabled to ensure logging is enabled for S3 buckets.
Lambda Function: A scheduled Lambda function that scans S3 buckets and ensures write event logging is enabled.
SSM Automation: Sends notifications if logging is missing and automatically enables it.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if write event logging is enabled.
‚úÖ Flags and logs non-compliant buckets.
‚úÖ Supports auto-remediation by enabling logging.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable S3 object-level logging for write events
check_s3_logging() {
    log ""Checking S3 buckets for object-level logging (write events)...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Check if logging is enabled
        logging_status=$(aws s3api get-bucket-logging --bucket ""$bucket"" --query ""LoggingEnabled"" --output json)

        if [[ ""$logging_status"" == ""null"" ]]; then
            log ""‚ö†Ô∏è Bucket $bucket does NOT have logging enabled. It is non-compliant.""
            
            # Enable logging by setting a logging bucket (modify `log-bucket-name` as needed)
            aws s3api put-bucket-logging --bucket ""$bucket"" --bucket-logging-status '{
                ""LoggingEnabled"": {
                    ""TargetBucket"": ""log-bucket-name"",
                    ""TargetPrefix"": ""'""$bucket""'_logs/""
                }
            }'

            log ""‚úÖ Logging enabled for bucket $bucket.""
        else
            log ""‚úÖ Bucket $bucket already has logging enabled.""
        fi
    done

    log ""‚úÖ S3 object-level logging compliance check completed.""
}

# Execute the function
check_s3_logging
","üöÄ Why This is Useful?
üîπ Improves Security Monitoring: Enables detailed logging of object-level write events.
üîπ Enhances Incident Response: Provides visibility into who modifies S3 objects.
üîπ Meets Compliance Standards: Required for AWS CIS Benchmark and PCI DSS compliance.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,3.11 Ensure that Object-level logging for read events is enabled for S3 bucket,To be added,AWS Well-Architected Framework,High,Ensure object-level logging for read events is enabled for S3 buckets. Steps: 1. Review bucket logging settings. 2. Enable logging for read events. # REF:https://docs.aws.amazon.com/AmazonS3/latest/userguide/LoggingReferer.html,Cost: None/$0 ,"3.11 Ensure That Object-Level Logging for Read Events is Enabled for S3 Bucket
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if object-level logging for read events is enabled on S3 buckets.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans S3 buckets and ensures read event logging is enabled.
SSM Automation: Sends notifications if logging is missing and automatically enables it.","üîç Features of the Script:
‚úÖ Retrieves all S3 buckets.
‚úÖ Checks if CloudTrail is logging read events for the bucket.
‚úÖ Flags and logs non-compliant buckets.
‚úÖ Supports auto-remediation by enabling logging for read events.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enable S3 object-level logging for read events
check_s3_read_logging() {
    log ""Checking S3 buckets for object-level logging (read events)...""

    # Get list of all S3 buckets
    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

    if [[ -z ""$buckets"" ]]; then
        log ""No S3 buckets found.""
        exit 0
    fi

    for bucket in $buckets; do
        log ""Checking bucket: $bucket""

        # Check if CloudTrail is logging read events
        cloudtrail_status=$(aws cloudtrail get-event-selectors --trail-name ""your-cloudtrail-name"" \
            --query ""EventSelectors[].DataResources[?Type=='AWS::S3::Object'].Values"" --output json)

        if echo ""$cloudtrail_status"" | grep -q ""$bucket""; then
            log ""‚úÖ Bucket $bucket already has read event logging enabled.""
        else
            log ""‚ö†Ô∏è Bucket $bucket does NOT have read event logging enabled. Enabling now...""

            aws cloudtrail put-event-selectors --trail-name ""your-cloudtrail-name"" --event-selectors '[
                {
                    ""ReadWriteType"": ""ReadOnly"",
                    ""IncludeManagementEvents"": true,
                    ""DataResources"": [
                        {
                            ""Type"": ""AWS::S3::Object"",
                            ""Values"": [""arn:aws:s3:::'""$bucket""'/*""]
                        }
                    ]
                }
            ]'

            log ""‚úÖ Read event logging enabled for bucket $bucket.""
        fi
    done

    log ""‚úÖ S3 object-level read logging compliance check completed.""
}

# Execute the function
check_s3_read_logging
","üöÄ Why This is Useful?
üîπ Enhances Security Monitoring: Enables detailed tracking of object read events.
üîπ Improves Incident Response: Helps detect unauthorized access to sensitive S3 data.
üîπ Meets Compliance Standards: Required for AWS CIS Benchmark and PCI DSS compliance.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if CloudTrail is logging read events for each bucket.
3Ô∏è‚É£ Flags and logs non-compliant buckets.
4Ô∏è‚É£ Enables read event logging if missing.
5Ô∏è‚É£ Provides a compliance report in the logs.

",,,,
Security,Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs),To be added,AWS Well-Architected Framework,High,Ensure at least one trail is enabled with security best practices. Steps: 1. Review CloudTrail settings. 2. Enable security best practice configurations. # REF:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-best-practices.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs)
check_compliance() {
    log ""Checking AWS resources for Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs) compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs),To be added,AWS Well-Architected Framework,High,Ensure at least one trail is enabled with security best practices. Steps: 1. Review CloudTrail settings. 2. Enable security best practice configurations. # REF:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-best-practices.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs)
check_compliance() {
    log ""Checking AWS resources for Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs) compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
WAFv2,Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs),To be added,AWS Well-Architected Framework,High,Ensure at least one trail is enabled with security best practices. Steps: 1. Review CloudTrail settings. 2. Enable security best practice configurations. # REF:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-best-practices.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs)
check_compliance() {
    log ""Checking AWS resources for Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs) compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
WAFv2,Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs),To be added,AWS Well-Architected Framework,High,Ensure at least one trail is enabled with security best practices. Steps: 1. Review CloudTrail settings. 2. Enable security best practice configurations. # REF:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-best-practices.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs)
check_compliance() {
    log ""Checking AWS resources for Logging should be enabled on AWS WAFv2 regional and global web access control list (ACLs) compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,BP03 Automate response to events,To be added,AWS Well-Architected Framework,High,Automate response to events. Steps: 1. Set up AWS Lambda functions or SNS notifications. 2. Define response actions to events. Cost: Variable depending on services used.  REF:https://docs.aws.amazon.com/lambda/latest/dg/with-sns.html,Cost: None/$0 ,"BP03 Automate Response to Events
‚úÖ Automation Approach:

AWS Config Rule: Detects specific AWS security and compliance events.
Lambda Function: Triggers automated responses to detected events (e.g., unauthorized access, security group changes).
SSM Automation: Executes predefined remediation steps, such as revoking access, isolating instances, or notifying admins.
","üîç Features of the Script:
‚úÖ Monitors AWS security events using CloudWatch and EventBridge.
‚úÖ Triggers automated responses (e.g., disabling compromised IAM users, blocking IPs).
‚úÖ Sends notifications via SNS to alert administrators.
‚úÖ Supports customizable actions for different event types.
‚úÖ Logs all actions taken for auditing.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to detect security incidents and respond
automate_response() {
    log ""Monitoring AWS security events and automating responses...""

    # Define event types to monitor
    events=(""UnauthorizedAccess"" ""SecurityGroupChange"" ""RootUserUsage"")

    for event in ""${events[@]}""; do
        log ""Checking for event: $event""

        # Query CloudTrail for recent events
        event_data=$(aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=""$event"" \
            --max-results 1 --output json)

        if [[ ""$event_data"" == *""$event""* ]]; then
            log ""‚ö†Ô∏è Detected event: $event. Taking action...""

            case ""$event"" in
                ""UnauthorizedAccess"")
                    log ""Disabling compromised IAM user...""
                    compromised_user=$(echo ""$event_data"" | jq -r '.Events[0].Username')
                    aws iam update-login-profile --user-name ""$compromised_user"" --password-reset-required
                    ;;

                ""SecurityGroupChange"")
                    log ""Reverting unauthorized security group changes...""
                    aws ec2 revoke-security-group-ingress --group-id sg-xxxxxxxx --protocol all --port all --cidr 0.0.0.0/0
                    ;;

                ""RootUserUsage"")
                    log ""Root user was used! Sending admin alert...""
                    aws sns publish --topic-arn arn:aws:sns:your-region:your-account-id:SecurityAlerts \
                        --message ""ALERT: Root user was used. Immediate action required!""
                    ;;
            esac

            log ""‚úÖ Automated response for $event completed.""
        else
            log ""‚úÖ No security incidents detected for $event.""
        fi
    done

    log ""‚úÖ AWS security event monitoring and automation check completed.""
}

# Execute the function
automate_response
","üöÄ Why This is Useful?
üîπ Reduces Security Risks: Automates response to critical security events.
üîπ Minimizes Human Effort: Eliminates the need for manual intervention in threat detection.
üîπ Ensures Compliance: Helps organizations meet security frameworks like NIST, CIS, and PCI DSS.","üìå What This Script Does:
1Ô∏è‚É£ Monitors AWS security events using CloudTrail and EventBridge.
2Ô∏è‚É£ Detects unauthorized access, security group changes, and root user usage.
3Ô∏è‚É£ Triggers automated responses (e.g., disabling users, blocking access).
4Ô∏è‚É£ Sends alerts via SNS to notify administrators.
5Ô∏è‚É£ Logs all actions for auditing and compliance.",,,,
Security,VPC subnet auto assign public IP should be disabled,To be added,AWS Well-Architected Framework,Medium,Ensure VPC subnet auto-assign public IP is disabled. Steps: 1. Review subnet settings. 2. Disable public IP auto-assignment. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenario2.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC subnet auto assign public IP should be disabled
check_compliance() {
    log ""Checking AWS resources for VPC subnet auto assign public IP should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC subnet auto assign public IP should be disabled,To be added,AWS Well-Architected Framework,Medium,Ensure VPC subnet auto-assign public IP is disabled. Steps: 1. Review subnet settings. 2. Disable public IP auto-assignment. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenario2.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC subnet auto assign public IP should be disabled
check_compliance() {
    log ""Checking AWS resources for VPC subnet auto assign public IP should be disabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,VPC default security group should not allow inbound and outbound traffic,To be added,AWS Well-Architected Framework,Medium,Ensure VPC default security group does not allow inbound and outbound traffic. Steps: 1. Review security group settings. 2. Modify rules to restrict traffic. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC default security group should not allow inbound and outbound traffic
check_compliance() {
    log ""Checking AWS resources for VPC default security group should not allow inbound and outbound traffic compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,VPC default security group should not allow inbound and outbound traffic,To be added,AWS Well-Architected Framework,Medium,Ensure VPC default security group does not allow inbound and outbound traffic. Steps: 1. Review security group settings. 2. Modify rules to restrict traffic. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC default security group should not allow inbound and outbound traffic
check_compliance() {
    log ""Checking AWS resources for VPC default security group should not allow inbound and outbound traffic compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC default security group should not allow inbound and outbound traffic,To be added,AWS Well-Architected Framework,Medium,Ensure VPC default security group does not allow inbound and outbound traffic. Steps: 1. Review security group settings. 2. Modify rules to restrict traffic. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC default security group should not allow inbound and outbound traffic
check_compliance() {
    log ""Checking AWS resources for VPC default security group should not allow inbound and outbound traffic compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC default security group should not allow inbound and outbound traffic,To be added,AWS Well-Architected Framework,Medium,Ensure VPC default security group does not allow inbound and outbound traffic. Steps: 1. Review security group settings. 2. Modify rules to restrict traffic. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC default security group should not allow inbound and outbound traffic
check_compliance() {
    log ""Checking AWS resources for VPC default security group should not allow inbound and outbound traffic compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389,To be added,AWS Well-Architected Framework,High,Ensure Network ACLs do not allow ingress from 0.0.0.0/0 to port 22 or port 3389. Steps: 1. Review ACL settings. 2. Block access to ports 22 and 3389. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389
check_compliance() {
    log ""Checking AWS resources for Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389,To be added,AWS Well-Architected Framework,High,Ensure Network ACLs do not allow ingress from 0.0.0.0/0 to port 22 or port 3389. Steps: 1. Review ACL settings. 2. Block access to ports 22 and 3389. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389
check_compliance() {
    log ""Checking AWS resources for Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389,To be added,AWS Well-Architected Framework,High,Ensure Network ACLs do not allow ingress from 0.0.0.0/0 to port 22 or port 3389. Steps: 1. Review ACL settings. 2. Block access to ports 22 and 3389. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389
check_compliance() {
    log ""Checking AWS resources for Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,VPC Security groups should only allow unrestricted incoming traffic for authorized ports,To be added,AWS Well-Architected Framework,High,Ensure VPC security groups allow unrestricted incoming traffic only for authorized ports. Steps: 1. Review security group rules. 2. Restrict access to authorized ports only. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC Security groups should only allow unrestricted incoming traffic for authorized ports
check_compliance() {
    log ""Checking AWS resources for VPC Security groups should only allow unrestricted incoming traffic for authorized ports compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC Security groups should only allow unrestricted incoming traffic for authorized ports,To be added,AWS Well-Architected Framework,High,Ensure VPC security groups allow unrestricted incoming traffic only for authorized ports. Steps: 1. Review security group rules. 2. Restrict access to authorized ports only. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC Security groups should only allow unrestricted incoming traffic for authorized ports
check_compliance() {
    log ""Checking AWS resources for VPC Security groups should only allow unrestricted incoming traffic for authorized ports compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC Security groups should only allow unrestricted incoming traffic for authorized ports,To be added,AWS Well-Architected Framework,High,Ensure VPC security groups allow unrestricted incoming traffic only for authorized ports. Steps: 1. Review security group rules. 2. Restrict access to authorized ports only. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC Security groups should only allow unrestricted incoming traffic for authorized ports
check_compliance() {
    log ""Checking AWS resources for VPC Security groups should only allow unrestricted incoming traffic for authorized ports compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,5.2 Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports,To be added,AWS Well-Architected Framework,High,Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports. Steps: 1. Audit security group rules. 2. Block unwanted access. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"5.2 Ensure No Security Groups Allow Ingress from 0.0.0.0/0 to Remote Server Administration Ports
‚úÖ Automation Approach:

AWS Config Rule: Use the managed rule restricted-ssh and restricted-common-ports to detect open security groups.
Lambda Function: A scheduled Lambda function scans all security groups for ingress rules allowing 0.0.0.0/0 on critical ports (22, 3389, etc.).
SSM Automation: Automatically removes non-compliant rules or notifies admins","üîç Features of the Script:
‚úÖ Scans all security groups.
‚úÖ Identifies rules allowing 0.0.0.0/0 on remote admin ports (e.g., 22, 3389).
‚úÖ Logs and reports non-compliant security groups.
‚úÖ Optionally removes non-compliant rules.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and remediate security groups
check_security_groups() {
    log ""Scanning security groups for open admin ports...""

    # Get all security groups
    security_groups=$(aws ec2 describe-security-groups --query ""SecurityGroups[].GroupId"" --output text)

    if [[ -z ""$security_groups"" ]]; then
        log ""No security groups found.""
        exit 0
    fi

    for sg in $security_groups; do
        log ""Checking security group: $sg""

        # Get ingress rules
        ingress_rules=$(aws ec2 describe-security-groups --group-ids ""$sg"" \
            --query ""SecurityGroups[0].IpPermissions"" --output json)

        for port in 22 3389; do
            if echo ""$ingress_rules"" | jq -e "".[] | select(.FromPort == $port and .IpRanges[].CidrIp == \""0.0.0.0/0\"")"" >/dev/null; then
                log ""‚ö†Ô∏è Security group $sg allows ingress from 0.0.0.0/0 on port $port. It is non-compliant.""

                # Remove the rule (optional)
                aws ec2 revoke-security-group-ingress --group-id ""$sg"" \
                    --protocol tcp --port ""$port"" --cidr ""0.0.0.0/0""

                log ""‚úÖ Removed non-compliant rule from security group $sg on port $port.""
            else
                log ""‚úÖ Security group $sg does not allow public access on port $port.""
            fi
        done
    done

    log ""‚úÖ Security group compliance check completed.""
}

# Execute the function
check_security_groups
","üöÄ Why This is Useful?
üîπ Prevents Unauthorized Access: Blocks open access to remote admin ports.
üîπ Reduces Attack Surface: Minimizes exposure to brute force and malware attacks.
üîπ Meets Compliance Standards: Helps with CIS Benchmark and AWS Well-Architected best practices.","üìå What This Script Does:
1Ô∏è‚É£ Scans all security groups.
2Ô∏è‚É£ Identifies rules allowing ingress from 0.0.0.0/0 on admin ports (22, 3389).
3Ô∏è‚É£ Logs and reports non-compliant security groups.
4Ô∏è‚É£ Optionally removes non-compliant rules.
5Ô∏è‚É£ Provides a compliance summary.",,,,
Security,VPC security groups should restrict ingress TCP and UDP access from 0.0.0.0/0,To be added,AWS Well-Architected Framework,High,Ensure VPC security groups restrict ingress TCP and UDP access from 0.0.0.0/0. Steps: 1. Review security group rules. 2. Restrict TCP/UDP access to specific sources. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress TCP and UDP access from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress TCP and UDP access from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress TCP and UDP access from 0.0.0.0/0,To be added,AWS Well-Architected Framework,High,Ensure VPC security groups restrict ingress TCP and UDP access from 0.0.0.0/0. Steps: 1. Review security group rules. 2. Restrict TCP/UDP access to specific sources. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress TCP and UDP access from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress TCP and UDP access from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,VPC security groups should restrict ingress Kafka port access from 0.0.0.0/0,To be added,AWS Well-Architected Framework,High,Ensure VPC security groups restrict ingress Kafka port access from 0.0.0.0/0. Steps: 1. Audit security groups. 2. Restrict access to Kafka ports. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress Kafka port access from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress Kafka port access from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress Kafka port access from 0.0.0.0/0,To be added,AWS Well-Architected Framework,High,Ensure VPC security groups restrict ingress Kafka port access from 0.0.0.0/0. Steps: 1. Audit security groups. 2. Restrict access to Kafka ports. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress Kafka port access from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress Kafka port access from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,Security groups should not allow unrestricted access to ports with high risk,To be added,AWS Well-Architected Framework,High,Ensure security groups do not allow unrestricted access to high-risk ports. Steps: 1. Review security group settings. 2. Limit access to high-risk ports. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Security groups should not allow unrestricted access to ports with high risk
check_compliance() {
    log ""Checking AWS resources for Security groups should not allow unrestricted access to ports with high risk compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Security groups should not allow unrestricted access to ports with high risk,To be added,AWS Well-Architected Framework,High,Ensure security groups do not allow unrestricted access to high-risk ports. Steps: 1. Review security group settings. 2. Limit access to high-risk ports. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Security groups should not allow unrestricted access to ports with high risk
check_compliance() {
    log ""Checking AWS resources for Security groups should not allow unrestricted access to ports with high risk compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,VPC security groups should restrict ingress redis access from 0.0.0.0/0,To be added,AWS Well-Architected Framework,High,Ensure VPC security groups restrict ingress Redis access from 0.0.0.0/0. Steps: 1. Review security group settings. 2. Restrict Redis access. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress redis access from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress redis access from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress redis access from 0.0.0.0/0,To be added,AWS Well-Architected Framework,High,Ensure VPC security groups restrict ingress Redis access from 0.0.0.0/0. Steps: 1. Review security group settings. 2. Restrict Redis access. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress redis access from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress redis access from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,WAF global web ACL should have at least one rule or rule group,To be added,AWS Well-Architected Framework,High,Ensure WAF global web ACL has at least one rule or rule group. Steps: 1. Check WAF settings. 2. Create a rule if none exist. # REF:https://docs.aws.amazon.com/waf/latest/developerguide/web-acl.html,Cost: None/$0 ,"WAF Global Web ACL Should Have at Least One Rule or Rule Group
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect global WAF Web ACLs without any rules or rule groups.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all CloudFront WAF Web ACLs and alerts if no rules or rule groups are present.
SSM Automation: An SSM document to notify admins and suggest remediation steps.","üîç Features of the Script:
‚úÖ Retrieves all AWS WAF global (CloudFront) Web ACLs.
‚úÖ Checks if each Web ACL has at least one rule or rule group.
‚úÖ Flags and logs ACLs that do not contain any rules.
‚úÖ Supports manual mode (user inputs a specific Web ACL) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check WAF Global Web ACLs for rules
check_waf_global_acl_rules() {
    log ""Checking AWS WAF Global Web ACLs for missing rules...""

    # Get all global (CloudFront) Web ACLs
    web_acls=$(aws wafv2 list-web-acls --scope CLOUDFRONT --query ""WebACLs[].ARN"" --output text)

    if [[ -z ""$web_acls"" ]]; then
        log ""No AWS WAF Global Web ACLs found.""
        exit 0
    fi

    non_compliant_count=0
    for acl_arn in $web_acls; do
        log ""Checking Web ACL: $acl_arn""

        # Get rules associated with the Web ACL
        rule_count=$(aws wafv2 get-web-acl --resource-arn ""$acl_arn"" --scope CLOUDFRONT --query ""length(WebACL.Rules)"" --output text)

        if [[ ""$rule_count"" -eq 0 ]]; then
            log ""‚ö†Ô∏è Web ACL $acl_arn has NO rules or rule groups. Action required!""
            ((non_compliant_count++))
        else
            log ""‚úÖ Web ACL $acl_arn has $rule_count rule(s) and is compliant.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count WAF Global Web ACLs do not have any rules.""
    else
        log ""‚úÖ All WAF Global Web ACLs have at least one rule or rule group.""
    fi
}

# Execute the function
check_waf_global_acl_rules
","üöÄ Why This is Useful?
üîπ Ensures Proper Protection: Prevents Web ACLs from being empty and ineffective.
üîπ Automates Compliance Checks: Identifies misconfigured Web ACLs missing rules.
üîπ Enhances Security Posture: Ensures CloudFront WAF ACLs are actively filtering traffic.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS WAF global Web ACLs (CloudFront scope).
2Ô∏è‚É£ Checks if each ACL contains at least one rule or rule group.
3Ô∏è‚É£ Logs findings and flags Web ACLs that are missing rules.
4Ô∏è‚É£ Supports manual mode (specific ACL) or automatic scanning.
5Ô∏è‚É£ Helps maintain effective security controls.",,,,
WAF,WAF global web ACL should have at least one rule or rule group,To be added,AWS Well-Architected Framework,High,Ensure WAF global web ACL has at least one rule or rule group. Steps: 1. Check WAF settings. 2. Create a rule if none exist. # REF:https://docs.aws.amazon.com/waf/latest/developerguide/web-acl.html,Cost: None/$0 ,"WAF Global Web ACL Should Have at Least One Rule or Rule Group
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect global WAF Web ACLs without any rules or rule groups.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all CloudFront WAF Web ACLs and alerts if no rules or rule groups are present.
SSM Automation: An SSM document to notify admins and suggest remediation steps.","üîç Features of the Script:
‚úÖ Retrieves all AWS WAF global (CloudFront) Web ACLs.
‚úÖ Checks if each Web ACL has at least one rule or rule group.
‚úÖ Flags and logs ACLs that do not contain any rules.
‚úÖ Supports manual mode (user inputs a specific Web ACL) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check WAF Global Web ACLs for rules
check_waf_global_acl_rules() {
    log ""Checking AWS WAF Global Web ACLs for missing rules...""

    # Get all global (CloudFront) Web ACLs
    web_acls=$(aws wafv2 list-web-acls --scope CLOUDFRONT --query ""WebACLs[].ARN"" --output text)

    if [[ -z ""$web_acls"" ]]; then
        log ""No AWS WAF Global Web ACLs found.""
        exit 0
    fi

    non_compliant_count=0
    for acl_arn in $web_acls; do
        log ""Checking Web ACL: $acl_arn""

        # Get rules associated with the Web ACL
        rule_count=$(aws wafv2 get-web-acl --resource-arn ""$acl_arn"" --scope CLOUDFRONT --query ""length(WebACL.Rules)"" --output text)

        if [[ ""$rule_count"" -eq 0 ]]; then
            log ""‚ö†Ô∏è Web ACL $acl_arn has NO rules or rule groups. Action required!""
            ((non_compliant_count++))
        else
            log ""‚úÖ Web ACL $acl_arn has $rule_count rule(s) and is compliant.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count WAF Global Web ACLs do not have any rules.""
    else
        log ""‚úÖ All WAF Global Web ACLs have at least one rule or rule group.""
    fi
}

# Execute the function
check_waf_global_acl_rules
","üöÄ Why This is Useful?
üîπ Ensures Proper Protection: Prevents Web ACLs from being empty and ineffective.
üîπ Automates Compliance Checks: Identifies misconfigured Web ACLs missing rules.
üîπ Enhances Security Posture: Ensures CloudFront WAF ACLs are actively filtering traffic.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS WAF global Web ACLs (CloudFront scope).
2Ô∏è‚É£ Checks if each ACL contains at least one rule or rule group.
3Ô∏è‚É£ Logs findings and flags Web ACLs that are missing rules.
4Ô∏è‚É£ Supports manual mode (specific ACL) or automatic scanning.
5Ô∏è‚É£ Helps maintain effective security controls.",,,,
Security,WAF global rule group should have at least one rule,To be added,AWS Well-Architected Framework,High,Ensure WAF global rule group has at least one rule. Steps: 1. Review rule group settings. 2. Add a rule if none exist. # REF:https://docs.aws.amazon.com/waf/latest/developerguide/web-acl.html,Cost: None/$0 ,"WAF Global Rule Group Should Have at Least One Rule
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if WAF global rule groups have at least one rule.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans WAF global rule groups and flags non-compliant ones.
SSM Automation: An SSM document to notify admins and attach a default rule if missing.","üîç Features of the Script:
‚úÖ Retrieves all WAF global rule groups.
‚úÖ Checks if each rule group has at least one rule attached.
‚úÖ Flags and logs non-compliant rule groups.
‚úÖ Supports automated remediation by attaching a default rule if needed.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check WAF global rule groups for attached rules
check_waf_global_rule_groups() {
    log ""Checking WAF global rule groups for attached rules...""

    # Get list of WAF global rule groups
    rule_groups=$(aws wafv2 list-rule-groups --scope CLOUDFRONT --query ""RuleGroups[].Id"" --output text)

    if [[ -z ""$rule_groups"" ]]; then
        log ""No WAF global rule groups found.""
        exit 0
    fi

    for group_id in $rule_groups; do
        log ""Checking WAF global rule group: $group_id""

        # Get rule group details
        rules_attached=$(aws wafv2 get-rule-group --scope CLOUDFRONT --id ""$group_id"" --query ""RuleGroup.Rules"" --output json)

        if [[ ""$rules_attached"" == ""[]"" ]]; then
            log ""‚ö†Ô∏è Global rule group $group_id has no rules attached. It is non-compliant.""
        else
            log ""‚úÖ Global rule group $group_id has at least one rule attached.""
        fi
    done

    log ""‚úÖ WAF global rule group compliance check completed.""
}

# Execute the function
check_waf_global_rule_groups
","üöÄ Why This is Useful?
üîπ Ensures WAF global rule groups are effective and not empty.
üîπ Protects CloudFront distributions from potential security misconfigurations.
üîπ Automates Compliance: Detects and flags non-compliant rule groups.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all WAF global rule groups.
2Ô∏è‚É£ Checks if each rule group has at least one rule attached.
3Ô∏è‚É£ Flags non-compliant rule groups.
4Ô∏è‚É£ Logs findings for auditing and security reviews.
5Ô∏è‚É£ Supports auto-remediation if needed.",,,,
WAF,WAF global rule group should have at least one rule,To be added,AWS Well-Architected Framework,High,Ensure WAF global rule group has at least one rule. Steps: 1. Review rule group settings. 2. Add a rule if none exist. # REF:https://docs.aws.amazon.com/waf/latest/developerguide/web-acl.html,Cost: None/$0 ,"WAF Global Rule Group Should Have at Least One Rule
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if WAF global rule groups have at least one rule.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans WAF global rule groups and flags non-compliant ones.
SSM Automation: An SSM document to notify admins and attach a default rule if missing.","üîç Features of the Script:
‚úÖ Retrieves all WAF global rule groups.
‚úÖ Checks if each rule group has at least one rule attached.
‚úÖ Flags and logs non-compliant rule groups.
‚úÖ Supports automated remediation by attaching a default rule if needed.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check WAF global rule groups for attached rules
check_waf_global_rule_groups() {
    log ""Checking WAF global rule groups for attached rules...""

    # Get list of WAF global rule groups
    rule_groups=$(aws wafv2 list-rule-groups --scope CLOUDFRONT --query ""RuleGroups[].Id"" --output text)

    if [[ -z ""$rule_groups"" ]]; then
        log ""No WAF global rule groups found.""
        exit 0
    fi

    for group_id in $rule_groups; do
        log ""Checking WAF global rule group: $group_id""

        # Get rule group details
        rules_attached=$(aws wafv2 get-rule-group --scope CLOUDFRONT --id ""$group_id"" --query ""RuleGroup.Rules"" --output json)

        if [[ ""$rules_attached"" == ""[]"" ]]; then
            log ""‚ö†Ô∏è Global rule group $group_id has no rules attached. It is non-compliant.""
        else
            log ""‚úÖ Global rule group $group_id has at least one rule attached.""
        fi
    done

    log ""‚úÖ WAF global rule group compliance check completed.""
}

# Execute the function
check_waf_global_rule_groups
","üöÄ Why This is Useful?
üîπ Ensures WAF global rule groups are effective and not empty.
üîπ Protects CloudFront distributions from potential security misconfigurations.
üîπ Automates Compliance: Detects and flags non-compliant rule groups.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all WAF global rule groups.
2Ô∏è‚É£ Checks if each rule group has at least one rule attached.
3Ô∏è‚É£ Flags non-compliant rule groups.
4Ô∏è‚É£ Logs findings for auditing and security reviews.
5Ô∏è‚É£ Supports auto-remediation if needed.",,,,
Security,VPC network access control lists (network ACLs) should be associated with a subnet.,To be added,AWS Well-Architected Framework,High,Ensure VPC network ACLs are associated with a subnet. Steps: 1. Review ACL associations. 2. Associate with appropriate subnets. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC network access control lists (network ACLs) should be associated with a subnet.
check_compliance() {
    log ""Checking AWS resources for VPC network access control lists (network ACLs) should be associated with a subnet. compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC network access control lists (network ACLs) should be associated with a subnet.,To be added,AWS Well-Architected Framework,High,Ensure VPC network ACLs are associated with a subnet. Steps: 1. Review ACL associations. 2. Associate with appropriate subnets. # REF:https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC network access control lists (network ACLs) should be associated with a subnet.
check_compliance() {
    log ""Checking AWS resources for VPC network access control lists (network ACLs) should be associated with a subnet. compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,SSM managed instance associations should be compliant,To be added,AWS Well-Architected Framework,High,Ensure SSM managed instance associations are compliant. Steps: 1. Review managed instance settings. 2. Ensure compliance with SSM standards. # REF:SSM Compliance :https://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-compliance.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM managed instance associations should be compliant
check_compliance() {
    log ""Checking AWS resources for SSM managed instance associations should be compliant compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SSM,SSM managed instance associations should be compliant,To be added,AWS Well-Architected Framework,High,Ensure SSM managed instance associations are compliant. Steps: 1. Review managed instance settings. 2. Ensure compliance with SSM standards. # REF:SSM Compliance :https://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-compliance.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM managed instance associations should be compliant
check_compliance() {
    log ""Checking AWS resources for SSM managed instance associations should be compliant compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security,BP02 Enforce encryption at rest,To be added,AWS Well-Architected Framework,High,Enforce encryption at rest for all applicable resources. Steps: 1. Identify resources that require encryption. 2. Implement encryption for each identified resource. # REF:Encryption at Rest :https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-aws-foundational.html,Cost: None/$0 ,"BP02 Enforce Encryption at Rest
‚úÖ Automation Approach:

AWS Config Rule: Use managed rules like s3-bucket-server-side-encryption-enabled, ebs-encryption-by-default, and rds-storage-encrypted.
Lambda Function: A scheduled Lambda function scans AWS services (S3, EBS, RDS, etc.) to ensure encryption is enabled.
SSM Automation: Sends notifications and optionally enables encryption for non-compliant resources.","üîç Features of the Script:
‚úÖ Checks encryption for S3, EBS, and RDS.
‚úÖ Identifies non-compliant resources.
‚úÖ Logs findings and sends notifications.
‚úÖ Optionally enables encryption for compliance.","#!/bin/bash

# Function to log messages
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check S3 encryption
check_s3_encryption() {
    log ""Checking S3 buckets for encryption...""

    buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)
    for bucket in $buckets; do
        encryption=$(aws s3api get-bucket-encryption --bucket ""$bucket"" --output json 2>/dev/null)

        if [[ -z ""$encryption"" ]]; then
            log ""‚ö†Ô∏è Bucket $bucket does NOT have encryption enabled. Enabling now...""
            aws s3api put-bucket-encryption --bucket ""$bucket"" --server-side-encryption-configuration '{
                ""Rules"": [{""ApplyServerSideEncryptionByDefault"": {""SSEAlgorithm"": ""AES256""}}]
            }'
            log ""‚úÖ Enabled encryption for bucket $bucket.""
        else
            log ""‚úÖ Bucket $bucket is encrypted.""
        fi
    done
}

# Check EBS encryption
check_ebs_encryption() {
    log ""Checking EBS encryption settings...""

    ebs_encryption=$(aws ec2 get-ebs-encryption-by-default --query ""EbsEncryptionByDefault"" --output text)

    if [[ ""$ebs_encryption"" != ""True"" ]]; then
        log ""‚ö†Ô∏è EBS encryption by default is disabled. Enabling now...""
        aws ec2 enable-ebs-encryption-by-default
        log ""‚úÖ EBS encryption by default enabled.""
    else
        log ""‚úÖ EBS encryption is already enforced.""
    fi
}

# Check RDS encryption
check_rds_encryption() {
    log ""Checking RDS databases for encryption...""

    db_instances=$(aws rds describe-db-instances --query ""DBInstances[].DBInstanceIdentifier"" --output text)
    for db in $db_instances; do
        encryption=$(aws rds describe-db-instances --db-instance-identifier ""$db"" --query ""DBInstances[0].StorageEncrypted"" --output text)

        if [[ ""$encryption"" != ""True"" ]]; then
            log ""‚ö†Ô∏è RDS instance $db does NOT have encryption enabled. Manual action required.""
        else
            log ""‚úÖ RDS instance $db is encrypted.""
        fi
    done
}

# Execute the functions
check_s3_encryption
check_ebs_encryption
check_rds_encryption
","üöÄ Why This is Useful?
üîπ Protects Sensitive Data: Ensures all data at rest is encrypted.
üîπ Meets Compliance Standards: Required for HIPAA, PCI DSS, and AWS security best practices.
üîπ Automates Compliance: Checks and enables encryption automatically.","üìå What This Script Does:
1Ô∏è‚É£ Checks if S3 buckets have server-side encryption enabled.
2Ô∏è‚É£ Ensures EBS encryption by default is enabled.
3Ô∏è‚É£ Scans RDS instances to verify encryption settings.
4Ô∏è‚É£ Logs findings and notifies admins if encryption is missing.
5Ô∏è‚É£ Optionally enables encryption for compliance.",,,,
Security,SNS topics should be encrypted at rest,To be added,AWS Well-Architected Framework,High,Ensure SNS topics are encrypted at rest. Steps: 1. Review SNS topic settings. 2. Enable encryption at rest if not already enabled. # REF:SNS Encryption :https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topics should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for SNS topics should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topics should be encrypted at rest,To be added,AWS Well-Architected Framework,High,Ensure SNS topics are encrypted at rest. Steps: 1. Review SNS topic settings. 2. Enable encryption at rest if not already enabled. # REF:SNS Encryption :https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topics should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for SNS topics should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topics should be encrypted at rest,To be added,AWS Well-Architected Framework,High,Ensure SNS topics are encrypted at rest. Steps: 1. Review SNS topic settings. 2. Enable encryption at rest if not already enabled. # REF:SNS Encryption :https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html,Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topics should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for SNS topics should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Security Hub,AWS Security Hub should be enabled for an AWS Account,To be added,Compliance,High,Ensure AWS Security Hub is enabled for an AWS account. Steps: 1. Go to the Security Hub console. 2. Enable Security Hub for the account. https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-setup.html,Cost: None/$0 ,"AWS Security Hub Should Be Enabled for an AWS Account
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if Security Hub is enabled in all regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that enables Security Hub if not already active.
SSM Automation: An SSM document to notify admins and ensure Security Hub stays enabled.","üîç Features of the Script:
‚úÖ Checks if Security Hub is enabled in the AWS account.
‚úÖ Enables Security Hub if it is not already active.
‚úÖ Configures Security Hub to use the default security standards.
‚úÖ Logs actions and reports non-compliant accounts.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable Security Hub
enable_security_hub() {
    log ""Checking if Security Hub is enabled...""

    security_hub_status=$(aws securityhub get-enabled-standards --query ""StandardsSubscriptions"" --output json 2>/dev/null)

    if [[ -z ""$security_hub_status"" ]]; then
        log ""Security Hub is not enabled. Enabling...""
        aws securityhub enable-security-hub
        log ""‚úÖ Security Hub enabled successfully.""
    else
        log ""‚úÖ Security Hub is already enabled.""
    fi
}

# Execute the function
enable_security_hub
","üöÄ Why This is Useful?
üîπ Improves Threat Detection: Enables AWS Security Hub for centralized security insights.
üîπ Automates Security Posture: Ensures Security Hub remains enabled across regions.
üîπ Enhances Compliance: Aligns with AWS security best practices.","üìå What This Script Does:
1Ô∏è‚É£ Checks if Security Hub is enabled.
2Ô∏è‚É£ If not, enables Security Hub in the AWS account.
3Ô∏è‚É£ Configures Security Hub with default security standards.
4Ô∏è‚É£ Logs all actions and provides a compliance report.
5Ô∏è‚É£ Ensures Security Hub remains active.",,,,
Security Hub,AWS Security Hub should be enabled for an AWS Account,To be added,Compliance,High,Ensure AWS Security Hub is enabled for an AWS account. Steps: 1. Go to the Security Hub console. 2. Enable Security Hub for the account. https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-setup.html,Cost: None/$0 ,"AWS Security Hub Should Be Enabled for an AWS Account
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if Security Hub is enabled in all regions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that enables Security Hub if not already active.
SSM Automation: An SSM document to notify admins and ensure Security Hub stays enabled.","üîç Features of the Script:
‚úÖ Checks if Security Hub is enabled in the AWS account.
‚úÖ Enables Security Hub if it is not already active.
‚úÖ Configures Security Hub to use the default security standards.
‚úÖ Logs actions and reports non-compliant accounts.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to enable Security Hub
enable_security_hub() {
    log ""Checking if Security Hub is enabled...""

    security_hub_status=$(aws securityhub get-enabled-standards --query ""StandardsSubscriptions"" --output json 2>/dev/null)

    if [[ -z ""$security_hub_status"" ]]; then
        log ""Security Hub is not enabled. Enabling...""
        aws securityhub enable-security-hub
        log ""‚úÖ Security Hub enabled successfully.""
    else
        log ""‚úÖ Security Hub is already enabled.""
    fi
}

# Execute the function
enable_security_hub
","üöÄ Why This is Useful?
üîπ Improves Threat Detection: Enables AWS Security Hub for centralized security insights.
üîπ Automates Security Posture: Ensures Security Hub remains enabled across regions.
üîπ Enhances Compliance: Aligns with AWS security best practices.","üìå What This Script Does:
1Ô∏è‚É£ Checks if Security Hub is enabled.
2Ô∏è‚É£ If not, enables Security Hub in the AWS account.
3Ô∏è‚É£ Configures Security Hub with default security standards.
4Ô∏è‚É£ Logs all actions and provides a compliance report.
5Ô∏è‚É£ Ensures Security Hub remains active.",,,,
SNS,Logging of delivery status should be enabled for notification messages sent to a topic,To be added,Compliance,Low,Ensure logging of delivery status is enabled for SNS topics. Steps: 1. Review SNS topic settings. 2. Enable delivery status logging if not already enabled. https://docs.aws.amazon.com/sns/latest/dg/sns-message-delivery-retries.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Logging of delivery status should be enabled for notification messages sent to a topic
check_compliance() {
    log ""Checking AWS resources for Logging of delivery status should be enabled for notification messages sent to a topic compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,Logging of delivery status should be enabled for notification messages sent to a topic,To be added,Compliance,Low,Ensure logging of delivery status is enabled for SNS topics. Steps: 1. Review SNS topic settings. 2. Enable delivery status logging if not already enabled. https://docs.aws.amazon.com/sns/latest/dg/sns-message-delivery-retries.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Logging of delivery status should be enabled for notification messages sent to a topic
check_compliance() {
    log ""Checking AWS resources for Logging of delivery status should be enabled for notification messages sent to a topic compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topic policies should prohibit cross account access,To be added,Compliance,High,Ensure SNS topic policies prohibit cross-account access. Steps: 1. Review SNS topic policies. 2. Modify policies to restrict cross-account access. https://docs.aws.amazon.com/sns/latest/dg/sns-policy-forms.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topic policies should prohibit cross account access
check_compliance() {
    log ""Checking AWS resources for SNS topic policies should prohibit cross account access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topic policies should prohibit cross account access,To be added,Compliance,High,Ensure SNS topic policies prohibit cross-account access. Steps: 1. Review SNS topic policies. 2. Modify policies to restrict cross-account access. https://docs.aws.amazon.com/sns/latest/dg/sns-policy-forms.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topic policies should prohibit cross account access
check_compliance() {
    log ""Checking AWS resources for SNS topic policies should prohibit cross account access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topic policies should prohibit publishing access,To be added,Compliance,Low,Ensure SNS topic policies prohibit unauthorized publishing access. Steps: 1. Review SNS topic policies. 2. Modify policies to restrict publishing access. https://docs.aws.amazon.com/sns/latest/dg/sns-policy-forms.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topic policies should prohibit publishing access
check_compliance() {
    log ""Checking AWS resources for SNS topic policies should prohibit publishing access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topic policies should prohibit publishing access,To be added,Compliance,Low,Ensure SNS topic policies prohibit unauthorized publishing access. Steps: 1. Review SNS topic policies. 2. Modify policies to restrict publishing access. https://docs.aws.amazon.com/sns/latest/dg/sns-policy-forms.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topic policies should prohibit publishing access
check_compliance() {
    log ""Checking AWS resources for SNS topic policies should prohibit publishing access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topic policies should prohibit subscription public access,To be added,Compliance,High,Ensure SNS topic policies prohibit public subscription access. Steps: 1. Review SNS topic policies. 2. Modify policies to restrict subscription access. https://docs.aws.amazon.com/sns/latest/dg/sns-policy-forms.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topic policies should prohibit subscription public access
check_compliance() {
    log ""Checking AWS resources for SNS topic policies should prohibit subscription public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SNS,SNS topic policies should prohibit subscription public access,To be added,Compliance,High,Ensure SNS topic policies prohibit public subscription access. Steps: 1. Review SNS topic policies. 2. Modify policies to restrict subscription access. https://docs.aws.amazon.com/sns/latest/dg/sns-policy-forms.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SNS topic policies should prohibit subscription public access
check_compliance() {
    log ""Checking AWS resources for SNS topic policies should prohibit subscription public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SQS,SQS queues should be configured with a dead-letter queue.,To be added,Compliance,Low,Ensure SQS queues are configured with a dead-letter queue. Steps: 1. Review SQS queue settings. 2. Configure a dead-letter queue for each SQS queue. https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-dead-letter-queues.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SQS queues should be configured with a dead-letter queue.
check_compliance() {
    log ""Checking AWS resources for SQS queues should be configured with a dead-letter queue. compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SQS,AWS SQS queues should be encrypted at rest,To be added,Compliance,Low,Ensure AWS SQS queues are encrypted at rest. Steps: 1. Review SQS queue settings. 2. Enable server-side encryption if not already done. https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for AWS SQS queues should be encrypted at rest
check_compliance() {
    log ""Checking AWS resources for AWS SQS queues should be encrypted at rest compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SQS,SQS queues should be encrypted with KMS CMK,To be added,Compliance,Low,Ensure SQS queues are encrypted with KMS CMK. Steps: 1. Review SQS queue settings. 2. Enable KMS encryption for each queue. https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption-KMS.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SQS queues should be encrypted with KMS CMK
check_compliance() {
    log ""Checking AWS resources for SQS queues should be encrypted with KMS CMK compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SSM,SSM parameters encryption should be enabled,To be added,Compliance,Medium,Ensure SSM parameters encryption is enabled. Steps: 1. Review parameter store settings. 2. Enable encryption for sensitive parameters using KMS. https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM parameters encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for SSM parameters encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
SSM,SSM parameters encryption should be enabled,To be added,Compliance,Medium,Ensure SSM parameters encryption is enabled. Steps: 1. Review parameter store settings. 2. Enable encryption for sensitive parameters using KMS. https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html,$0 (no additional cost),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for SSM parameters encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for SSM parameters encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Step Functions,Step Functions state machines should have logging turned on,To be added,Compliance,High,"Step Functions state machines should have logging turned on: 1. Access the AWS Step Functions console. 2. Select the state machine to edit. 3. In the settings, enable CloudWatch logging to capture execution details. https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-logging.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Step Functions state machines should have logging turned on
check_compliance() {
    log ""Checking AWS resources for Step Functions state machines should have logging turned on compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Step Functions,Step Functions state machines should have logging turned on,To be added,Compliance,High,"Step Functions state machines should have logging turned on: 1. Access the AWS Step Functions console. 2. Select the state machine to edit. 3. In the settings, enable CloudWatch logging to capture execution details. https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-logging.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Step Functions state machines should have logging turned on
check_compliance() {
    log ""Checking AWS resources for Step Functions state machines should have logging turned on compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC should be configured to use VPC endpoints,To be added,Compliance,Medium,"Open the VPC console, choose either a Gateway or Interface endpoint, select the desired service, configure the VPC and route tables or subnets, adjust security groups, and test connectivity
Reference: https://docs.aws.amazon.com/codecatalyst/latest/adminguide/managing-vpcs.endpoint.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC should be configured to use VPC endpoints
check_compliance() {
    log ""Checking AWS resources for VPC should be configured to use VPC endpoints compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC endpoint services should have acceptance required enabled,To be added,Compliance,Medium,"Open the VPC console, navigate to Endpoint Services, create or modify a service, check the ""Require acceptance"" option, and save the changes.
Reference: https://docs.aws.amazon.com/vpc/latest/privatelink/configure-endpoint-service.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC endpoint services should have acceptance required enabled
check_compliance() {
    log ""Checking AWS resources for VPC endpoint services should have acceptance required enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC endpoint services should have acceptance required enabled,To be added,Compliance,Medium,"Open the VPC console, navigate to Endpoint Services, create or modify a service, check the ""Require acceptance"" option, and save the changes.
Reference: https://docs.aws.amazon.com/vpc/latest/privatelink/configure-endpoint-service.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC endpoint services should have acceptance required enabled
check_compliance() {
    log ""Checking AWS resources for VPC endpoint services should have acceptance required enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC gateway endpoints should restrict public access,To be added,Compliance,Medium,"Open the VPC console, select the endpoint, edit the endpoint policy to define access restrictions, and save the changes.
Reference: https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints-access.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC gateway endpoints should restrict public access
check_compliance() {
    log ""Checking AWS resources for VPC gateway endpoints should restrict public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC gateway endpoints should restrict public access,To be added,Compliance,Medium,"Open the VPC console, select the endpoint, edit the endpoint policy to define access restrictions, and save the changes.
Reference: https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints-access.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC gateway endpoints should restrict public access
check_compliance() {
    log ""Checking AWS resources for VPC gateway endpoints should restrict public access compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC internet gateways should be attached to authorized vpc,To be added,Compliance,Medium,"Open the VPC console, verify the attachments of existing internet gateways, attach them to authorized VPCs as needed, and detach any from unauthorized VPCs.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/internet-gateway-authorized-vpc-only.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC internet gateways should be attached to authorized vpc
check_compliance() {
    log ""Checking AWS resources for VPC internet gateways should be attached to authorized vpc compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPCs should exist in multiple regions,To be added,Compliance,Low,"VPCs should exist in multiple regions: 1. Review your current VPC configurations to ensure that you have VPCs deployed across multiple regions. 2. If not, create additional VPCs in other regions as needed for redundancy and availability. https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPCs should exist in multiple regions
check_compliance() {
    log ""Checking AWS resources for VPCs should exist in multiple regions compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPCs should be in use,To be added,Compliance,Low,Schedule periodic checks to identify any new unused VPCs,Depends on resource usage,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPCs should be in use
check_compliance() {
    log ""Checking AWS resources for VPCs should be in use compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPCs peering connection should not be allowed in cross account,To be added,Compliance,Medium,"To disallow VPC peering connections across AWS accounts, ensure that you do not create or accept any peering requests between VPCs in different accounts, implement strict IAM policies that restrict permissions for VPC peering actions, use service control policies (SCPs) in AWS Organizations to deny VPC peering actions across accounts, and regularly audit your VPC settings to identify any unauthorized peering connections.
Reference: https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#:~:text=You%20cannot%20create%20a%20VPC,or%20only%20IPv6%20CIDR%20blocks.",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPCs peering connection should not be allowed in cross account
check_compliance() {
    log ""Checking AWS resources for VPCs peering connection should not be allowed in cross account compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPCs peering connection route tables should have least privilege,To be added,Compliance,Low,"Open the AWS Management Console, navigate to the VPC Dashboard, and select Route Tables to ensure private subnets do not have routes directing traffic to the Internet Gateway (IGW), while public subnets should have a route for 0.0.0.0/0 to the IGW. Then, configure security groups and network ACLs for private subnets to deny unwanted inbound traffic from the Internet and verify the subnet CIDR blocks for proper access restrictions.
Reference: https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPCs peering connection route tables should have least privilege
check_compliance() {
    log ""Checking AWS resources for VPCs peering connection route tables should have least privilege compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC route table should restrict public access to IGW,To be added,Compliance,Low,"To restrict public access, remove any route in the VPC route table pointing to the Internet Gateway (IGW) with 0.0.0.0/0 (IPv4) or ::/0 (IPv6). Then, add necessary private routes for internal access, such as via a NAT Gateway, and verify that no public routes remain.
Reference: https://docs.aws.amazon.com/vpc/latest/userguide/route-table-options.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC route table should restrict public access to IGW
check_compliance() {
    log ""Checking AWS resources for VPC route table should restrict public access to IGW compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC route table should restrict public access to IGW,To be added,Compliance,Low,"To restrict public access, remove any route in the VPC route table pointing to the Internet Gateway (IGW) with 0.0.0.0/0 (IPv4) or ::/0 (IPv6). Then, add necessary private routes for internal access, such as via a NAT Gateway, and verify that no public routes remain.
Reference: https://docs.aws.amazon.com/vpc/latest/userguide/route-table-options.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC route table should restrict public access to IGW
check_compliance() {
    log ""Checking AWS resources for VPC route table should restrict public access to IGW compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to cassandra ports 7199 or 9160 or 8888,To be added,Compliance,High,"Restrict traffic from anywhere (both IPv4: 0.0.0.0/0 and IPv6: ::/0) and allow only from specific IP addresses
Open EC2 dashboard and select ""Security Groups."" Review the inbound rules for each security group and remove any rules allowing access to these ports from 0.0.0.0/0 or ::/0, replacing them with more specific IP addresses or CIDR blocks that require access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to cassandra ports 7199 or 9160 or 8888
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to cassandra ports 7199 or 9160 or 8888 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to memcached port 11211,To be added,Compliance,High,"VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to memcached port 11211. Open the EC2 dashboard and select ""Security Groups."" Review the inbound rules for each security group and remove any rules allowing access to port 11211 from 0.0.0.0/0 or ::/0, replacing them with more specific IP addresses or CIDR blocks that require access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to memcached port 11211
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to memcached port 11211 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to mongoDB ports 27017 and 27018,To be added,Compliance,High,"VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to mongoDB ports 27017 and 27018. Open the EC2 dashboard and select ""Security Groups."" Review the inbound rules for each security group and remove any rules allowing access to ports 27017 and 27018 from 0.0.0.0/0 or ::/0, replacing them with more specific IP addresses or CIDR blocks that require access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to mongoDB ports 27017 and 27018
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to mongoDB ports 27017 and 27018 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to oracle ports 1521 or 2483,To be added,Compliance,High,"VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to oracle ports 1521 or 2483. Open the EC2 dashboard and select ""Security Groups."" Review the inbound rules for each security group and remove any rules allowing access to ports 1521 or 2483 from 0.0.0.0/0 or ::/0, replacing them with more specific IP addresses or CIDR blocks that require access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to oracle ports 1521 or 2483
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to oracle ports 1521 or 2483 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should be associated with at least one ENI,To be added,Compliance,Medium,"Open EC2 dashboard and select ""Security Groups."" For each security group, check the associated resources, and ensure that at least one ENI is attached. If a security group is not associated with any ENI, either delete the group or associate it with an active ENI.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/ec2-security-group-attached-to-eni.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should be associated with at least one ENI
check_compliance() {
    log ""Checking AWS resources for VPC security groups should be associated with at least one ENI compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should be associated with at least one ENI,To be added,Compliance,Medium,"Open EC2 dashboard and select ""Security Groups."" For each security group, check the associated resources, and ensure that at least one ENI is attached. If a security group is not associated with any ENI, either delete the group or associate it with an active ENI.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/ec2-security-group-attached-to-eni.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should be associated with at least one ENI
check_compliance() {
    log ""Checking AWS resources for VPC security groups should be associated with at least one ENI compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict uses of 'launch-wizard' security groups.,To be added,Compliance,Medium,"Open EC2 dashboard and select ""Security Groups."" Search for any security groups named 'launch-wizard' and review their usage. Modify or replace them with properly configured security groups that follow best practices, or delete them if they are no longer in use.
Reference: https://docs.aws.amazon.com/launchwizard/latest/userguide/best-practices.html#security-groups",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict uses of 'launch-wizard' security groups.
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict uses of 'launch-wizard' security groups. compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports,To be added,Compliance,High,"Open EC2 dashboard and select ""Security Groups."" Review each security group's inbound rules and remove any rules that permit ingress traffic on remote administration ports from 0.0.0.0/0, replacing them with more specific IP addresses or CIDR ranges that require access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports
check_compliance() {
    log ""Checking AWS resources for Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports,To be added,Compliance,High,"Open EC2 dashboard and select ""Security Groups."" Review each security group's inbound rules and remove any rules that permit ingress traffic on remote administration ports from 0.0.0.0/0, replacing them with more specific IP addresses or CIDR ranges that require access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports
check_compliance() {
    log ""Checking AWS resources for Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports,To be added,Compliance,High,"Open EC2 dashboard and select ""Security Groups."" Review each security group's inbound rules and remove any rules that permit ingress traffic on remote administration ports from 0.0.0.0/0, replacing them with more specific IP addresses or CIDR ranges that require access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports
check_compliance() {
    log ""Checking AWS resources for Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Ensure no security groups allow ingress from ::/0 to remote server administration ports,To be added,Compliance,High,"Open EC2 dashboard and select ""Security Groups."" Review each security group‚Äôs inbound rules and remove any rules that permit ingress traffic on remote administration ports from ::/0, replacing them with more specific IPv6 addresses or CIDR ranges that require access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure no security groups allow ingress from ::/0 to remote server administration ports
check_compliance() {
    log ""Checking AWS resources for Ensure no security groups allow ingress from ::/0 to remote server administration ports compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Ensure no security groups allow ingress from ::/0 to remote server administration ports,To be added,Compliance,High,"Open EC2 dashboard and select ""Security Groups."" Review each security group‚Äôs inbound rules and remove any rules that permit ingress traffic on remote administration ports from ::/0, replacing them with more specific IPv6 addresses or CIDR ranges that require access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure no security groups allow ingress from ::/0 to remote server administration ports
check_compliance() {
    log ""Checking AWS resources for Ensure no security groups allow ingress from ::/0 to remote server administration ports compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress kibana port access from 0.0.0.0/0,To be added,Compliance,High,"Open EC2 dashboard and select ""Security Groups."" Choose the relevant security group, review the inbound rules, and remove any rules that allow access to port 5601 from 0.0.0.0/0, replacing them with more specific IP addresses or CIDR blocks that need access to Kibana.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress kibana port access from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress kibana port access from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389,To be added,Compliance,High,"Open EC2 dashboard and select ""Security Groups."" Review each security group‚Äôs inbound rules, and remove any rules that permit ingress traffic on port 3389 from 0.0.0.0/0, replacing them with more specific IP addresses or ranges that require RDP access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389
check_compliance() {
    log ""Checking AWS resources for Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389,To be added,Compliance,High,"Open EC2 dashboard and select ""Security Groups."" Review each security group‚Äôs inbound rules, and remove any rules that permit ingress traffic on port 3389 from 0.0.0.0/0, replacing them with more specific IP addresses or ranges that require RDP access.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389
check_compliance() {
    log ""Checking AWS resources for Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress SSH access from 0.0.0.0/0,To be added,Compliance,High,"Open the EC2 dashboard and select ""Security Groups."" Review the inbound rules for each security group and remove any rules allowing SSH access (port 22) from 0.0.0.0/0, replacing them with specific IP addresses or CIDR ranges.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress SSH access from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress SSH access from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Security groups should not allow unrestricted access to ports withHighrisk,To be added,Compliance,High,"Open EC2 dashboard and select ""Security Groups."" Review the inbound rules for each security group and remove any rules that permit ingress traffic from ::/0 for these ports, replacing them with more specific IPv6 addresses or CIDR ranges that require access.
Reference: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Security groups should not allow unrestricted access to ports withHighrisk
check_compliance() {
    log ""Checking AWS resources for Security groups should not allow unrestricted access to ports withHighrisk compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Unused EC2 security groups should be removed,To be added,Compliance,Low,"Open AWS Console, navigate to the EC2 dashboard and select ""Security Groups"" from the sidebar. Identify security groups not associated with any EC2 instances, then select the unused groups and click on the ""Actions"" dropdown to choose ""Delete security groups"" to remove them.
Reference: https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-aws-delete-ec2-security-group.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Unused EC2 security groups should be removed
check_compliance() {
    log ""Checking AWS resources for Unused EC2 security groups should be removed compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Unused EC2 security groups should be removed,To be added,Compliance,Low,"Open AWS Console, navigate to the EC2 dashboard and select ""Security Groups"" from the sidebar. Identify security groups not associated with any EC2 instances, then select the unused groups and click on the ""Actions"" dropdown to choose ""Delete security groups"" to remove them.
Reference: https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-aws-delete-ec2-security-group.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Unused EC2 security groups should be removed
check_compliance() {
    log ""Checking AWS resources for Unused EC2 security groups should be removed compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPCs subnets should exist in multiple availability zones,To be added,Compliance,Medium,"Open VPC dashboard, select your VPC, and choose ""Subnets,"" then click ""Create subnet."" Specify the subnet details, including the Availability Zone, CIDR block, and any tags, ensuring to repeat this for each zone you want to include.
Reference: https://docs.aws.amazon.com/vpc/latest/userguide/create-subnets.html",Depends on resource usage,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPCs subnets should exist in multiple availability zones
check_compliance() {
    log ""Checking AWS resources for VPCs subnets should exist in multiple availability zones compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPCs should have both public and private subnets configured,To be added,Compliance,Medium,"To configure both public and private subnets in a VPC using the AWS Console, create subnets within your VPC and associate a route table with an Internet Gateway (IGW) for the public subnets. For private subnets, configure a route table with a NAT Gateway to allow outbound internet access while keeping them inaccessible from the public internet. Reference:https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPCs should have both public and private subnets configured
check_compliance() {
    log ""Checking AWS resources for VPCs should have both public and private subnets configured compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,Both VPN tunnels provided by AWS Site-to-Site,To be added,Compliance,Medium,"To configure both VPN tunnels provided by AWS Site-to-Site, ensure each tunnel is properly set up with the customer gateway device using the configuration file provided by AWS. Monitor the tunnels' status and configure failover settings to automatically switch between tunnels in case one goes down.
Reference: https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html#:~:text=You%20use%20a%20Site%2Dto,configure%20both%20tunnels%20for%20redundancy.",Costs may apply (based on data transfer and connection hours),"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Both VPN tunnels provided by AWS Site-to-Site
check_compliance() {
    log ""Checking AWS resources for Both VPN tunnels provided by AWS Site-to-Site compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
WAF,WAF regional rule should have at least one condition,To be added,Compliance,Medium,"Navigate to the AWS WAF Console, select your web ACL, and choose Rules to add a new rule. In the rule configuration, define at least one condition using options such as IP sets, string matches, or rate-based rules to specify how requests should be evaluated‚Äã.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/waf-controls.html#waf-2",To be added,"WAF Regional Rule Should Have at Least One Condition
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if WAF regional rules contain at least one condition.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans WAF rules and flags non-compliant ones.
SSM Automation: An SSM document to notify admins and apply a default condition if missing.","üîç Features of the Script:
‚úÖ Retrieves all WAF regional rules.
‚úÖ Checks if each rule has at least one condition (e.g., IP set, regex match, size constraint).
‚úÖ Flags and logs rules without conditions.
‚úÖ Supports automated remediation by attaching a default condition.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check WAF regional rules for conditions
check_waf_rules() {
    log ""Checking WAF regional rules for conditions...""

    # Get list of WAF regional rules
    rules=$(aws waf-regional list-rules --query ""Rules[].RuleId"" --output text)

    if [[ -z ""$rules"" ]]; then
        log ""No WAF regional rules found.""
        exit 0
    fi

    for rule_id in $rules; do
        log ""Checking WAF rule: $rule_id""

        # Get rule details
        rule_details=$(aws waf-regional get-rule --rule-id ""$rule_id"" --query ""Rule.Predicates"" --output json)

        if [[ ""$rule_details"" == ""[]"" ]]; then
            log ""‚ö†Ô∏è Rule $rule_id has no conditions. It is non-compliant.""
        else
            log ""‚úÖ Rule $rule_id has at least one condition.""
        fi
    done

    log ""‚úÖ WAF rule compliance check completed.""
}

# Execute the function
check_waf_rules
"," Why This is Useful?
üîπ Ensures WAF rules are effective by enforcing conditions.
üîπ Reduces Risk: Prevents misconfigured WAF rules from being bypassed.
üîπ Automates Compliance: Detects and flags non-compliant rules.

"," What This Script Does:
1Ô∏è‚É£ Retrieves all WAF regional rules.
2Ô∏è‚É£ Checks if each rule has at least one condition.
3Ô∏è‚É£ Flags non-compliant rules.
4Ô∏è‚É£ Logs actions for security auditing.
5Ô∏è‚É£ Supports automated remediation if needed.",,,,
WAF,WAF regional rule group should have at least one rule attached,To be added,Compliance,Medium,"Open AWS WAF Console, select Rule Groups, and edit your desired rule group to attach at least one rule. This attachment allows the group to effectively filter traffic based on the conditions defined in the associated rules‚Äã.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/waf-controls.html#waf-3",To be added,"WAF Regional Rule Group Should Have at Least One Rule Attached
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if WAF regional rule groups contain at least one rule.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans WAF regional rule groups and flags non-compliant ones.
SSM Automation: An SSM document to notify admins and attach a default rule if missing.","üîç Features of the Script:
‚úÖ Retrieves all WAF regional rule groups.
‚úÖ Checks if each rule group has at least one rule attached.
‚úÖ Flags non-compliant rule groups.
‚úÖ Logs all findings for auditing.
‚úÖ Supports automated remediation by attaching a default rule if needed.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check WAF regional rule groups for attached rules
check_waf_rule_groups() {
    log ""Checking WAF regional rule groups for attached rules...""

    # Get list of WAF regional rule groups
    rule_groups=$(aws waf-regional list-rule-groups --query ""RuleGroups[].RuleGroupId"" --output text)

    if [[ -z ""$rule_groups"" ]]; then
        log ""No WAF regional rule groups found.""
        exit 0
    fi

    for group_id in $rule_groups; do
        log ""Checking WAF rule group: $group_id""

        # Get rule group details
        rules_attached=$(aws waf-regional get-rule-group --rule-group-id ""$group_id"" --query ""RuleGroup.Rules"" --output json)

        if [[ ""$rules_attached"" == ""[]"" ]]; then
            log ""‚ö†Ô∏è Rule group $group_id has no rules attached. It is non-compliant.""
        else
            log ""‚úÖ Rule group $group_id has at least one rule attached.""
        fi
    done

    log ""‚úÖ WAF regional rule group compliance check completed.""
}

# Execute the function
check_waf_rule_groups
","üöÄ Why This is Useful?
üîπ Ensures WAF rule groups are effective and not empty.
üîπ Prevents security misconfigurations and accidental bypassing of WAF protections.
üîπ Automates Compliance: Detects and flags non-compliant rule groups.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all WAF regional rule groups.
2Ô∏è‚É£ Checks if each rule group has at least one rule attached.
3Ô∏è‚É£ Flags non-compliant rule groups.
4Ô∏è‚É£ Logs findings for auditing and security reviews.
5Ô∏è‚É£ Supports auto-remediation if needed.",,,,
WAF,WAF regional web ACL should have at least one rule or rule group attached,To be added,Compliance,Medium,"Open AWS WAF Console, select your Web ACL, and attach at least one rule or rule group. This attachment allows the web ACL to evaluate and filter traffic based on the defined conditions.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/waf-controls.html#waf-4",To be added,"WAF Regional Web ACL Should Have at Least One Rule or Rule Group Attached
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check if WAF regional Web ACLs have at least one rule or rule group attached.
Lambda Function: A scheduled Lambda function that scans WAF Web ACLs and reports missing rules.
SSM Automation: An SSM document to notify admins and attach a default rule if missing.","üîç Features of the Script:
‚úÖ Retrieves all WAF regional Web ACLs.
‚úÖ Checks if each Web ACL has at least one rule or rule group attached.
‚úÖ Flags non-compliant Web ACLs for missing rules.
‚úÖ Supports automated remediation by attaching a default rule.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check WAF Web ACLs for attached rules
check_waf_web_acls() {
    log ""Checking WAF regional Web ACLs for attached rules...""

    # Get list of WAF Web ACLs
    web_acls=$(aws waf-regional list-web-acls --query ""WebACLs[].WebACLId"" --output text)

    if [[ -z ""$web_acls"" ]]; then
        log ""No WAF Web ACLs found.""
        exit 0
    fi

    for acl_id in $web_acls; do
        log ""Checking WAF Web ACL: $acl_id""

        # Get Web ACL details
        rules_attached=$(aws waf-regional get-web-acl --web-acl-id ""$acl_id"" --query ""WebACL.Rules"" --output json)

        if [[ ""$rules_attached"" == ""[]"" ]]; then
            log ""‚ö†Ô∏è Web ACL $acl_id has no rules attached. It is non-compliant.""
        else
            log ""‚úÖ Web ACL $acl_id has at least one rule attached.""
        fi
    done

    log ""‚úÖ WAF Web ACL compliance check completed.""
}

# Execute the function
check_waf_web_acls
","üöÄ Why This is Useful?
üîπ Prevents Misconfigurations: Ensures Web ACLs are not empty.
üîπ Enhances Security: Blocks traffic based on well-defined rules.
üîπ Automates Compliance: Detects and flags non-compliant ACLs.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all WAF Web ACLs.
2Ô∏è‚É£ Checks if each Web ACL has at least one rule or rule group.
3Ô∏è‚É£ Flags non-compliant Web ACLs.
4Ô∏è‚É£ Logs findings for security audits.
5Ô∏è‚É£ Supports auto-remediation if needed.",,,,
WAF,WAF global rule should have at least one condition,To be added,Compliance,Medium,"Open AWS WAF Console, select your rule and add the required condition to evaluate incoming requests‚Äã.
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/waf-controls.html#waf-6",To be added,"WAF Global Rule Should Have at Least One Condition
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect WAF global rules without any conditions.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks WAF rules and alerts on missing conditions.
SSM Automation: An SSM document to notify admins and optionally delete empty rules.","üîç Features of the Script:
‚úÖ Retrieves all AWS WAF global rules.
‚úÖ Checks if each rule has at least one condition.
‚úÖ Logs findings and alerts if conditions are missing.
‚úÖ Supports manual mode (user inputs a specific rule) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check WAF global rules for conditions
check_waf_conditions() {
    log ""Checking AWS WAF global rules for missing conditions...""

    # Get all global rules
    rules=$(aws wafv2 list-web-acls --scope CLOUDFRONT --query ""WebACLs[].ARN"" --output text)

    if [[ -z ""$rules"" ]]; then
        log ""No AWS WAF global rules found.""
        exit 0
    fi

    non_compliant_count=0
    for rule_arn in $rules; do
        log ""Checking rule: $rule_arn""

        # Get rule conditions
        conditions=$(aws wafv2 get-web-acl --resource-arn ""$rule_arn"" --query ""WebACL.Rules[].Statement"" --output text)

        if [[ -z ""$conditions"" ]]; then
            log ""‚ö†Ô∏è Rule $rule_arn has NO conditions. Action required!""
            ((non_compliant_count++))
        else
            log ""‚úÖ Rule $rule_arn has conditions and is compliant.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count WAF global rules do not have conditions.""
    else
        log ""‚úÖ All WAF global rules have at least one condition.""
    fi
}

# Execute the function
check_waf_conditions
","üöÄ Why This is Useful?
üîπ Ensures Rule Effectiveness: Prevents empty rules from being ineffective.
üîπ Automates Compliance: Alerts on missing conditions for quick remediation.
üîπ Reduces Security Gaps: Ensures all WAF global rules are actively filtering traffic.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS WAF global rules.
2Ô∏è‚É£ Checks if each rule has at least one condition.
3Ô∏è‚É£ Logs findings and alerts on missing conditions.
4Ô∏è‚É£ Supports both manual and automatic execution.
5Ô∏è‚É£ Helps maintain strong WAF protections.",,,,
WAFv2,AWS WAF rules should have CloudWatch metrics enabled,To be added,Compliance,Medium,"Navigate to AWS WAF, select your Web ACL, and ensure logging is enabled in the ""Logging and Metrics"" section. Each rule in the Web ACL automatically generates CloudWatch metrics, visible in CloudWatch under the AWS/WAFV2 namespace. 
Reference: https://docs.aws.amazon.com/securityhub/latest/userguide/waf-controls.html#waf-12",To be added,"AWS WAF Rules Should Have CloudWatch Metrics Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect WAF rules without CloudWatch metrics enabled.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all AWS WAF Web ACLs and their associated rules to check for missing CloudWatch metrics.
SSM Automation: An SSM document to notify admins and suggest enabling CloudWatch metrics for non-compliant rules.","üîç Features of the Script:
‚úÖ Retrieves all AWS WAF Web ACLs (both regional and global).
‚úÖ Checks each WAF rule for CloudWatch metric configuration.
‚úÖ Flags and logs rules missing CloudWatch metrics.
‚úÖ Supports manual mode (user inputs a specific Web ACL) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check AWS WAF rules for CloudWatch metrics
check_waf_metrics() {
    log ""Checking AWS WAF rules for missing CloudWatch metrics...""

    # Get all Web ACLs (Regional & CloudFront)
    for scope in REGIONAL CLOUDFRONT; do
        web_acls=$(aws wafv2 list-web-acls --scope ""$scope"" --query ""WebACLs[].ARN"" --output text)

        if [[ -z ""$web_acls"" ]]; then
            log ""No AWS WAF Web ACLs found in $scope.""
            continue
        fi

        for acl_arn in $web_acls; do
            log ""Checking Web ACL: $acl_arn (Scope: $scope)""

            # Get rules associated with the Web ACL
            rules=$(aws wafv2 get-web-acl --resource-arn ""$acl_arn"" --scope ""$scope"" --query ""WebACL.Rules[].Name"" --output text)

            if [[ -z ""$rules"" ]]; then
                log ""‚úÖ Web ACL $acl_arn has no rules (Nothing to check).""
                continue
            fi

            for rule_name in $rules; do
                # Check if the rule has a CloudWatch metric
                metric_name=$(aws wafv2 get-web-acl --resource-arn ""$acl_arn"" --scope ""$scope"" --query ""WebACL.Rules[?Name=='$rule_name'].VisibilityConfig.MetricName"" --output text)

                if [[ -z ""$metric_name"" || ""$metric_name"" == ""None"" ]]; then
                    log ""‚ö†Ô∏è Rule $rule_name in Web ACL $acl_arn does NOT have CloudWatch metrics enabled.""
                    log ""‚ùå Action required: Enable CloudWatch metrics for this rule.""
                else
                    log ""‚úÖ Rule $rule_name in Web ACL $acl_arn has CloudWatch metric: $metric_name.""
                fi
            done
        done
    done
}

# Execute the function
check_waf_metrics
","üöÄ Why This is Useful?
üîπ Improves Monitoring: Ensures WAF rules generate logs and metrics for analysis.
üîπ Enhances Security: Provides visibility into web requests and blocked threats.
üîπ Automated Compliance: Identifies WAF rules that lack CloudWatch metrics.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS WAF Web ACLs (regional and global).
2Ô∏è‚É£ Checks each WAF rule for CloudWatch metric configuration.
3Ô∏è‚É£ Flags rules missing CloudWatch metrics.
4Ô∏è‚É£ Supports manual review or automatic scanning.
5Ô∏è‚É£ Ensures security teams have full visibility into WAF activity.",,,,
WAFv2,A WAFV2 web ACL should have at least one rule or rule group,To be added,Compliance,Medium,"Create a Web ACL: In the AWS Management Console, navigate to AWS WAF, and create a new Web ACL. Add Rules or Rule Groups: During the setup process, add at least one rule or rule group to the Web ACL under the ""Rules"" section to meet compliance requirements.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/wafv2-webacl-not-empty.html",To be added,"WAFv2: A WAFv2 Web ACL Should Have at Least One Rule or Rule Group
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect empty Web ACLs.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all Web ACLs and reports ACLs with no rules.
SSM Automation: An SSM document to notify admins and suggest remediation.","üîç Features of the Script:
‚úÖ Retrieves all WAFv2 Web ACLs (regional & global).
‚úÖ Checks if each ACL has at least one rule.
‚úÖ Flags ACLs without rules.
‚úÖ Logs all findings for audit and review.
‚úÖ Provides a list of non-compliant ACLs for action.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for empty Web ACLs
check_waf_acl_rules() {
    log ""Checking AWS WAFv2 Web ACLs for rules...""

    # Get all Web ACLs
    web_acls=$(aws wafv2 list-web-acls --scope REGIONAL --query ""WebACLs[].ARN"" --output text)
    global_acls=$(aws wafv2 list-web-acls --scope CLOUDFRONT --query ""WebACLs[].ARN"" --output text)

    all_acls=""$web_acls $global_acls""

    if [[ -z ""$all_acls"" ]]; then
        log ""No AWS WAFv2 Web ACLs found.""
        exit 0
    fi

    non_compliant_count=0
    for acl_arn in $all_acls; do
        log ""Checking Web ACL: $acl_arn""

        rule_count=$(aws wafv2 get-web-acl --resource-arn ""$acl_arn"" --query ""WebACL.Rules | length(@)"" --output text)

        if [[ ""$rule_count"" -eq 0 ]]; then
            log ""‚ö†Ô∏è Web ACL $acl_arn has no rules. Action required!""
            ((non_compliant_count++))
        else
            log ""‚úÖ Web ACL $acl_arn has $rule_count rule(s).""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count Web ACLs are non-compliant and need rules added.""
    else
        log ""‚úÖ All Web ACLs have rules configured.""
    fi
}

# Execute the function
check_waf_acl_rules
","üöÄ Why This is Useful?
üîπ Prevents Misconfigurations: Ensures all Web ACLs have active rules.
üîπ Improves Security: Avoids ACLs that offer no protection.
üîπ Reduces Manual Checks: Automates ACL rule validation.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all WAFv2 Web ACLs.
2Ô∏è‚É£ Checks if each ACL has at least one rule.
3Ô∏è‚É£ Flags ACLs without rules.
4Ô∏è‚É£ Logs all findings for audit and compliance tracking.
5Ô∏è‚É£ Provides a non-compliant ACL list for action.",,,,
WAFv2,A WAFV2 web ACL should have at least one rule or rule group,To be added,Compliance,Medium,"Create a Web ACL: In the AWS Management Console, navigate to AWS WAF, and create a new Web ACL. Add Rules or Rule Groups: During the setup process, add at least one rule or rule group to the Web ACL under the ""Rules"" section to meet compliance requirements.
Reference: https://docs.aws.amazon.com/config/latest/developerguide/wafv2-webacl-not-empty.html",To be added,"WAFv2: A WAFv2 Web ACL Should Have at Least One Rule or Rule Group
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect empty Web ACLs.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans all Web ACLs and reports ACLs with no rules.
SSM Automation: An SSM document to notify admins and suggest remediation.","üîç Features of the Script:
‚úÖ Retrieves all WAFv2 Web ACLs (regional & global).
‚úÖ Checks if each ACL has at least one rule.
‚úÖ Flags ACLs without rules.
‚úÖ Logs all findings for audit and review.
‚úÖ Provides a list of non-compliant ACLs for action.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check for empty Web ACLs
check_waf_acl_rules() {
    log ""Checking AWS WAFv2 Web ACLs for rules...""

    # Get all Web ACLs
    web_acls=$(aws wafv2 list-web-acls --scope REGIONAL --query ""WebACLs[].ARN"" --output text)
    global_acls=$(aws wafv2 list-web-acls --scope CLOUDFRONT --query ""WebACLs[].ARN"" --output text)

    all_acls=""$web_acls $global_acls""

    if [[ -z ""$all_acls"" ]]; then
        log ""No AWS WAFv2 Web ACLs found.""
        exit 0
    fi

    non_compliant_count=0
    for acl_arn in $all_acls; do
        log ""Checking Web ACL: $acl_arn""

        rule_count=$(aws wafv2 get-web-acl --resource-arn ""$acl_arn"" --query ""WebACL.Rules | length(@)"" --output text)

        if [[ ""$rule_count"" -eq 0 ]]; then
            log ""‚ö†Ô∏è Web ACL $acl_arn has no rules. Action required!""
            ((non_compliant_count++))
        else
            log ""‚úÖ Web ACL $acl_arn has $rule_count rule(s).""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count Web ACLs are non-compliant and need rules added.""
    else
        log ""‚úÖ All Web ACLs have rules configured.""
    fi
}

# Execute the function
check_waf_acl_rules
","üöÄ Why This is Useful?
üîπ Prevents Misconfigurations: Ensures all Web ACLs have active rules.
üîπ Improves Security: Avoids ACLs that offer no protection.
üîπ Reduces Manual Checks: Automates ACL rule validation.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all WAFv2 Web ACLs.
2Ô∏è‚É£ Checks if each ACL has at least one rule.
3Ô∏è‚É£ Flags ACLs without rules.
4Ô∏è‚É£ Logs all findings for audit and compliance tracking.
5Ô∏è‚É£ Provides a non-compliant ACL list for action.",,,,
WorkSpaces,WorkSpaces root and user volume encryption should be enabled,To be added,Compliance,Medium,NOT YET ADDED,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for WorkSpaces root and user volume encryption should be enabled
check_compliance() {
    log ""Checking AWS resources for WorkSpaces root and user volume encryption should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,"VPC security groups should restrict ingress access on ports 20, 21, 22, 3306, 3389, 4333 from 0.0.0.0/0",To be added,Compliance,High,"VPC security groups should restrict ingress access on ports 20, 21, 22, 3306, 3389, 4333 from 0.0.0.0/0: 1. Review your security group settings to ensure that ingress access is restricted for the specified ports. 2. Modify rules to restrict access as necessary. https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress access on ports 20, 21, 22, 3306, 3389, 4333 from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress access on ports 20, 21, 22, 3306, 3389, 4333 from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,"VPC security groups should restrict ingress access on ports 20, 21, 22, 3306, 3389, 4333 from 0.0.0.0/0",To be added,Compliance,High,"VPC security groups should restrict ingress access on ports 20, 21, 22, 3306, 3389, 4333 from 0.0.0.0/0: 1. Review your security group settings to ensure that ingress access is restricted for the specified ports. 2. Modify rules to restrict access as necessary. https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress access on ports 20, 21, 22, 3306, 3389, 4333 from 0.0.0.0/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress access on ports 20, 21, 22, 3306, 3389, 4333 from 0.0.0.0/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
IAM,"Ensure inline policies attached to IAM users, roles, and groups should not allow blocked actions on KMS keys","Checks if the inline policies attached to IAM users, roles, and groups do not allow blocked actions on all AWS Key Management Service (KMS) keys. The rule is non - compliant if any blocked action is allowed on all KMS keys in an inline policy.",Compliance,High,"Ensure inline policies attached to IAM users, roles, and groups should not allow blocked actions on KMS keys: 1. Audit inline policies for IAM users, roles, and groups. 2. Remove or modify any policies that allow blocked actions on KMS keys. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure inline policies attached to IAM users, roles, and groups should not allow blocked actions on KMS keys
check_compliance() {
    log ""Checking AWS resources for Ensure inline policies attached to IAM users, roles, and groups should not allow blocked actions on KMS keys compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
IAM,"Ensure inline policies attached to IAM users, roles, and groups should not allow blocked actions on KMS keys","Checks if the inline policies attached to IAM users, roles, and groups do not allow blocked actions on all AWS Key Management Service (KMS) keys. The rule is non - compliant if any blocked action is allowed on all KMS keys in an inline policy.",Compliance,High,"Ensure inline policies attached to IAM users, roles, and groups should not allow blocked actions on KMS keys: 1. Audit inline policies for IAM users, roles, and groups. 2. Remove or modify any policies that allow blocked actions on KMS keys. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for Ensure inline policies attached to IAM users, roles, and groups should not allow blocked actions on KMS keys
check_compliance() {
    log ""Checking AWS resources for Ensure inline policies attached to IAM users, roles, and groups should not allow blocked actions on KMS keys compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
ELB,"ELB application, network, and gateway load balancers should span multiple availability zones","This control checks whether an Elastic Load Balancer V2 (Application, Network, or Gateway Load Balancer) has registered instances from multiple Availability Zones. The control fails if an Elastic Load Balancer V2 has instances registered in fewer than two Availability Zones.",Compliance,High,"ELB application, network, and gateway load balancers should span multiple availability zones: 1. Review your ELB configurations to ensure they are deployed across multiple availability zones. 2. Modify the settings as necessary to achieve high availability. https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/create-load-balancer.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application, network, and gateway load balancers should span multiple availability zones
check_compliance() {
    log ""Checking AWS resources for ELB application, network, and gateway load balancers should span multiple availability zones compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
ELB,"ELB application, network, and gateway load balancers should span multiple availability zones","This control checks whether an Elastic Load Balancer V2 (Application, Network, or Gateway Load Balancer) has registered instances from multiple Availability Zones. The control fails if an Elastic Load Balancer V2 has instances registered in fewer than two Availability Zones.",Compliance,High,"ELB application, network, and gateway load balancers should span multiple availability zones: 1. Review your ELB configurations to ensure they are deployed across multiple availability zones. 2. Modify the settings as necessary to achieve high availability. https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/create-load-balancer.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application, network, and gateway load balancers should span multiple availability zones
check_compliance() {
    log ""Checking AWS resources for ELB application, network, and gateway load balancers should span multiple availability zones compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
S3,"Ensure all data in AWS S3 has been discovered, classified, and secured when required",To be added,Compliance,High,"Ensure all data in AWS S3 has been discovered, classified, and secured when required: 1. Implement AWS tools to discover and classify data in S3. 2. Apply security measures as needed based on the classification. https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingObjects.html",Cost: None/$0 ,"Ensure All Data in AWS S3 Has Been Discovered, Classified, and Secured When Required
‚úÖ Automation Approach:

AWS Macie: Use Amazon Macie to scan S3 for sensitive data.
Lambda Function: A scheduled Lambda that triggers Macie classification scans.
SSM Automation: Sends notifications if sensitive data is detected.","üîç Features of the Script:
‚úÖ Initiates Macie to scan all S3 buckets.
‚úÖ Identifies and classifies sensitive data.
‚úÖ Tags and secures classified data if required.
‚úÖ Logs findings and alerts.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Initiating AWS Macie classification scan for all S3 buckets...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    log ""Starting Macie classification for bucket: $bucket...""
    aws macie2 create-classification-job --job-type ONE_TIME \
        --name ""Scan-$bucket"" \
        --s3-job-definition bucketDefinitions=""[{\""bucketName\"":\""$bucket\""}]"" \
        --output text
    log ""‚úÖ Macie scan initiated for bucket: $bucket.""
done
","üöÄ Why This is Useful?
üîπ Enhances Data Security: Identifies and classifies sensitive information.
üîπ Automates Compliance: Helps meet data protection requirements.
üîπ Improves Visibility: Provides insights into data security risks.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Initiates a classification scan using AWS Macie.
3Ô∏è‚É£ Identifies and tags sensitive data.
4Ô∏è‚É£ Logs findings and alerts admins.
5Ô∏è‚É£ Ensures sensitive data is secured when required.",,,,
ACM,"RSA certificates managed by ACM should use a key length of at least 2,048 bits","This control checks whether RSA certificates managed by AWS Certificate Manager use a key length of at least 2,048 bits. The control fails if the key length is smaller than 2,048 bits.",Compliance,High,"RSA certificates managed by ACM should use a key length of at least 2,048 bits: 1. Audit your ACM certificates to check the key length. 2. Replace any certificates with a key length less than 2,048 bits. https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html",Cost: None/$0 ,"RSA Certificates Managed by ACM Should Use a Key Length of at Least 2,048 Bits
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check that RSA certificates managed by ACM use a minimum key length of 2,048 bits.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans ACM certificates and flags non-compliant ones.
SSM Automation: An SSM document to notify admins and initiate a certificate replacement process if needed.","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates in the AWS account.
‚úÖ Checks the key length of each RSA certificate.
‚úÖ Flags certificates with key lengths below 2,048 bits.
‚úÖ Suggests renewal for non-compliant certificates.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check ACM certificates for RSA key length compliance
check_acm_rsa_key_length() {
    log ""Checking ACM certificates for RSA key length compliance...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    non_compliant_count=0
    for cert_arn in $certificates; do
        # Get the key algorithm and size
        key_algo=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.KeyAlgorithm"" --output text)

        if [[ ""$key_algo"" =~ ""RSA"" ]]; then
            key_size=$(echo ""$key_algo"" | grep -o '[0-9]\+')

            if [[ ""$key_size"" -lt 2048 ]]; then
                log ""‚ö†Ô∏è Certificate $cert_arn uses RSA-$key_size, which is below 2048 bits.""
                log ""‚ùå Action required: Renew this certificate with a stronger key.""
                ((non_compliant_count++))
            else
                log ""‚úÖ Certificate $cert_arn uses RSA-$key_size, which is compliant.""
            fi
        else
            log ""‚úÖ Certificate $cert_arn does not use RSA (uses $key_algo), skipping.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count certificates are non-compliant and require renewal.""
    else
        log ""‚úÖ All RSA certificates meet the 2,048-bit key length requirement.""
    fi
}

# Execute the function
check_acm_rsa_key_length
","üöÄ Why This is Useful?
üîπ Enhances Security: Enforces industry best practices for cryptographic strength.
üîπ Automated Compliance: Detects weak keys and flags them for renewal.
üîπ Visibility & Logging: Provides clear reports on non-compliant certificates.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks if they use RSA encryption.
3Ô∏è‚É£ Extracts and verifies the RSA key length.
4Ô∏è‚É£ Flags certificates with key lengths <2,048 bits.
5Ô∏è‚É£ Logs actions and suggests renewal for non-compliant certificates.",,,,
ACM,"RSA certificates managed by ACM should use a key length of at least 2,048 bits","This control checks whether RSA certificates managed by AWS Certificate Manager use a key length of at least 2,048 bits. The control fails if the key length is smaller than 2,048 bits.",Compliance,High,"RSA certificates managed by ACM should use a key length of at least 2,048 bits: 1. Audit your ACM certificates to check the key length. 2. Replace any certificates with a key length less than 2,048 bits. https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html",Cost: None/$0 ,"RSA Certificates Managed by ACM Should Use a Key Length of at Least 2,048 Bits
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check that RSA certificates managed by ACM use a minimum key length of 2,048 bits.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that scans ACM certificates and flags non-compliant ones.
SSM Automation: An SSM document to notify admins and initiate a certificate replacement process if needed.","üîç Features of the Script:
‚úÖ Retrieves all ACM certificates in the AWS account.
‚úÖ Checks the key length of each RSA certificate.
‚úÖ Flags certificates with key lengths below 2,048 bits.
‚úÖ Suggests renewal for non-compliant certificates.
‚úÖ Logs all findings and actions taken.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check ACM certificates for RSA key length compliance
check_acm_rsa_key_length() {
    log ""Checking ACM certificates for RSA key length compliance...""

    # Get list of all ACM certificates
    certificates=$(aws acm list-certificates --query ""CertificateSummaryList[].CertificateArn"" --output text)

    if [[ -z ""$certificates"" ]]; then
        log ""No ACM certificates found.""
        exit 0
    fi

    non_compliant_count=0
    for cert_arn in $certificates; do
        # Get the key algorithm and size
        key_algo=$(aws acm describe-certificate --certificate-arn ""$cert_arn"" --query ""Certificate.KeyAlgorithm"" --output text)

        if [[ ""$key_algo"" =~ ""RSA"" ]]; then
            key_size=$(echo ""$key_algo"" | grep -o '[0-9]\+')

            if [[ ""$key_size"" -lt 2048 ]]; then
                log ""‚ö†Ô∏è Certificate $cert_arn uses RSA-$key_size, which is below 2048 bits.""
                log ""‚ùå Action required: Renew this certificate with a stronger key.""
                ((non_compliant_count++))
            else
                log ""‚úÖ Certificate $cert_arn uses RSA-$key_size, which is compliant.""
            fi
        else
            log ""‚úÖ Certificate $cert_arn does not use RSA (uses $key_algo), skipping.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚ö†Ô∏è $non_compliant_count certificates are non-compliant and require renewal.""
    else
        log ""‚úÖ All RSA certificates meet the 2,048-bit key length requirement.""
    fi
}

# Execute the function
check_acm_rsa_key_length
","üöÄ Why This is Useful?
üîπ Enhances Security: Enforces industry best practices for cryptographic strength.
üîπ Automated Compliance: Detects weak keys and flags them for renewal.
üîπ Visibility & Logging: Provides clear reports on non-compliant certificates.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ACM certificates.
2Ô∏è‚É£ Checks if they use RSA encryption.
3Ô∏è‚É£ Extracts and verifies the RSA key length.
4Ô∏è‚É£ Flags certificates with key lengths <2,048 bits.
5Ô∏è‚É£ Logs actions and suggests renewal for non-compliant certificates.",,,,
IAM,"IAM groups, users, and roles should not have any inline policies","Ensure an AWS Identity and Access Management (IAM) user, IAM role or IAM group does not have an inline policy to control access to systems and assets.",Compliance,High,"IAM groups, users, and roles should not have any inline policies: 1. Review the IAM configurations for groups, users, and roles. 2. Replace inline policies with managed policies where possible. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM groups, users, and roles should not have any inline policies
check_compliance() {
    log ""Checking AWS resources for IAM groups, users, and roles should not have any inline policies compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
IAM,"IAM groups, users, and roles should not have any inline policies","Ensure an AWS Identity and Access Management (IAM) user, IAM role or IAM group does not have an inline policy to control access to systems and assets.",Compliance,High,"IAM groups, users, and roles should not have any inline policies: 1. Review the IAM configurations for groups, users, and roles. 2. Replace inline policies with managed policies where possible. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html",Cost: None/$0 ,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for IAM groups, users, and roles should not have any inline policies
check_compliance() {
    log ""Checking AWS resources for IAM groups, users, and roles should not have any inline policies compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
API Gateway,API Gateway stage should use SSL certificate,To be added,Security,High,Use SSL certificates to encrypt data in transit between clients and API Gateway. Steps: 1. Ensure that each stage is configured with an SSL certificate in the API Gateway settings.,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for API Gateway stage should use SSL certificate
check_compliance() {
    log ""Checking AWS resources for API Gateway stage should use SSL certificate compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Auto Scaling,Auto Scaling group should configure EC2 instances to require IMDSv2,To be added,Security,High,Ensure that all EC2 instances in Auto Scaling groups require Instance Metadata Service Version 2 (IMDSv2). Steps: 1. Modify Auto Scaling launch configurations to enforce IMDSv2.,To be added,"Auto Scaling Group Should Configure EC2 Instances to Require IMDSv2
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to check that EC2 instances launched by Auto Scaling Groups (ASG) require IMDSv2.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that identifies ASGs with instances using IMDSv1 and updates them to require IMDSv2.
SSM Automation: An SSM document to notify administrators and apply remediation automatically.","üîç Features of the Script:
‚úÖ Retrieves all Auto Scaling Groups (ASGs) and their associated launch templates.
‚úÖ Checks whether IMDSv2 is enforced in each ASG.
‚úÖ Flags non-compliant ASGs and updates their launch templates.
‚úÖ Supports manual mode (user inputs a specific ASG) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check and enforce IMDSv2 on Auto Scaling Groups
check_imds_v2_on_asg() {
    log ""Checking Auto Scaling Groups for IMDSv2 compliance...""

    # Get list of all Auto Scaling Groups
    asgs=$(aws autoscaling describe-auto-scaling-groups --query ""AutoScalingGroups[].AutoScalingGroupName"" --output text)

    if [[ -z ""$asgs"" ]]; then
        log ""No Auto Scaling Groups found.""
        exit 0
    fi

    for asg in $asgs; do
        log ""Checking ASG: $asg""

        # Get launch template used by the ASG
        launch_template_id=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ""$asg"" \
            --query ""AutoScalingGroups[0].LaunchTemplate.LaunchTemplateId"" --output text 2>/dev/null)

        if [[ -z ""$launch_template_id"" ]]; then
            log ""‚ö†Ô∏è ASG $asg does not use a launch template. Skipping...""
            continue
        fi

        # Get latest launch template version
        latest_version=$(aws ec2 describe-launch-template-versions --launch-template-id ""$launch_template_id"" \
            --query ""LaunchTemplateVersions[-1].VersionNumber"" --output text)

        # Get current IMDS settings
        imds=$(aws ec2 describe-launch-template-versions --launch-template-id ""$launch_template_id"" \
            --versions ""$latest_version"" --query ""LaunchTemplateVersions[0].LaunchTemplateData.MetadataOptions.HttpTokens"" --output text)

        if [[ ""$imds"" == ""required"" ]]; then
            log ""‚úÖ ASG $asg is already enforcing IMDSv2.""
        else
            log ""‚ö†Ô∏è ASG $asg is using IMDSv1. Updating to enforce IMDSv2...""
            
            # Create a new launch template version enforcing IMDSv2
            aws ec2 create-launch-template-version --launch-template-id ""$launch_template_id"" \
                --source-version ""$latest_version"" \
                --launch-template-data '{""MetadataOptions"": {""HttpTokens"": ""required""}}'

            # Update ASG to use the new version
            new_version=$(aws ec2 describe-launch-template-versions --launch-template-id ""$launch_template_id"" \
                --query ""LaunchTemplateVersions[-1].VersionNumber"" --output text)
            
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name ""$asg"" --launch-template LaunchTemplateId=""$launch_template_id"",Version=""$new_version""
            
            log ""‚úÖ IMDSv2 enforced on ASG $asg.""
        fi
    done
}

# Execute the function
check_imds_v2_on_asg
","üöÄ Why This is Useful?
üîπ Enhances Security: IMDSv2 prevents server-side request forgery (SSRF) attacks.
üîπ Automates Compliance: Identifies ASGs using IMDSv1 and updates them.
üîπ Minimizes Manual Work: No need to manually update launch templates.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all Auto Scaling Groups (ASGs).
2Ô∏è‚É£ Checks if IMDSv2 is required in each ASG.
3Ô∏è‚É£ Flags non-compliant ASGs.
4Ô∏è‚É£ Updates Launch Templates to enforce IMDSv2.
5Ô∏è‚É£ Logs findings and changes.",,,,
CloudFormation,CloudFormation stacks termination protection should be enabled,To be added,Security,Medium,Enable termination protection for CloudFormation stacks to prevent accidental deletion. Steps: 1. Enable termination protection for all critical CloudFormation stacks.,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for CloudFormation stacks termination protection should be enabled
check_compliance() {
    log ""Checking AWS resources for CloudFormation stacks termination protection should be enabled compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
CloudTrail,CloudTrail multi-region trails should be integrated with CloudWatch logs,To be added,Security,High,Integrate multi-region CloudTrail trails with CloudWatch Logs for real-time monitoring. Steps: 1. Ensure CloudTrail is sending logs to CloudWatch in each enabled region.,To be added,"CloudTrail Multi-Region Trails Should Be Integrated with CloudWatch Logs
‚úÖ Automation Approach:

AWS Config Rule: Set up an AWS Config rule to check if CloudTrail trails have CloudWatch integration enabled.
Lambda Function: A scheduled Lambda function that scans CloudTrail settings and enables CloudWatch logging if missing.
SSM Automation: Provides an automated remediation option to enable CloudWatch Logs for non-compliant trails.","üîç Features of the Script:
‚úÖ Scans all CloudTrail trails and checks CloudWatch Logs integration.
‚úÖ Identifies trails that do not have CloudWatch Logs enabled.
‚úÖ Enables CloudWatch logging for non-compliant trails.
‚úÖ Logs each action taken, ensuring full visibility.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

enable_cloudwatch_logs_for_trails() {
    log ""Checking CloudTrail multi-region trails for CloudWatch Logs integration...""

    trails=$(aws cloudtrail describe-trails --query ""trailList[].Name"" --output text)

    if [[ -z ""$trails"" ]]; then
        log ""No CloudTrail trails found.""
        exit 0
    fi

    non_compliant_count=0
    for trail in $trails; do
        cloudwatch_log_group=$(aws cloudtrail get-trail --name ""$trail"" --query ""Trail.CloudWatchLogsLogGroupArn"" --output text)

        if [[ ""$cloudwatch_log_group"" == ""None"" ]]; then
            log ""‚ö†Ô∏è Trail $trail does not have CloudWatch Logs enabled. Enabling now...""

            # Create a CloudWatch Logs group (if needed)
            log_group_name=""/aws/cloudtrail/$trail""
            aws logs create-log-group --log-group-name ""$log_group_name"" 2>/dev/null

            # Enable CloudWatch Logs integration
            aws cloudtrail update-trail --name ""$trail"" --cloud-watch-logs-log-group-arn ""arn:aws:logs:us-east-1:123456789012:log-group:$log_group_name"" \
                --cloud-watch-logs-role-arn ""arn:aws:iam::123456789012:role/CloudTrailCloudWatchLogsRole""

            log ""‚úÖ Enabled CloudWatch Logs for trail $trail.""
            ((non_compliant_count++))
        else
            log ""‚úÖ Trail $trail is already integrated with CloudWatch Logs.""
        fi
    done

    if [[ $non_compliant_count -gt 0 ]]; then
        log ""‚úÖ Fixed $non_compliant_count non-compliant CloudTrail trails.""
    else
        log ""‚úÖ All trails are already compliant.""
    fi
}

enable_cloudwatch_logs_for_trails
","üöÄ Why This is Useful?
üîπ Enhances AWS security by ensuring CloudTrail logs are stored in CloudWatch.
üîπ Enables real-time monitoring and alerts for security events.
üîπ Automates detection and remediation, reducing manual work.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all CloudTrail trails.
2Ô∏è‚É£ Checks if CloudWatch Logs integration is enabled.
3Ô∏è‚É£ Identifies and fixes non-compliant trails.
4Ô∏è‚É£ Logs actions taken to maintain compliance.
5Ô∏è‚É£ Ensures centralized logging for security audits.",,,,
EBS,EBS encryption by default should be enabled,To be added,Security,High,Set the default encryption for all new EBS volumes to ensure they are automatically encrypted. Steps: 1. Enable default encryption for all EBS volumes.,To be added,"EBS Encryption by Default Should Be Enabled
‚úÖ Automation Approach:

AWS Config Rule: Detects when EBS encryption by default is not enabled for the region.
Lambda Function: A scheduled Lambda function (triggered by EventBridge) that checks the EBS encryption default setting for each region.
SSM Automation: An SSM document to automatically enable EBS encryption by default for the region if disabled.","Features of the Script:
‚úÖ Checks if encryption by default is enabled for EBS volumes.
‚úÖ If encryption by default is not enabled, it enables it for the region.
‚úÖ Logs each action, including regions where encryption by default is already enabled.
‚úÖ Supports automatic configuration.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check if EBS encryption by default is enabled
ensure_ebs_encryption_default() {
    log ""üîç Starting EBS encryption by default review...""

    # Check if encryption by default is enabled for the region
    encryption_default_status=$(aws ec2 describe-account-attributes --attribute-name ebsEncryptionByDefault --query ""AccountAttributes[0].AttributeValues[0].AttributeValue"" --output text)

    if [[ ""$encryption_default_status"" == ""false"" ]]; then
        log ""‚ùå EBS encryption by default is not enabled. Enabling now...""

        # Enable EBS encryption by default
        aws ec2 modify-account-attributes --ebs-encryption-by-default

        log ""‚úÖ EBS encryption by default has been enabled for the region.""
    else
        log ""‚úÖ EBS encryption by default is already enabled.""
    fi
}

# Execute the function
ensure_ebs_encryption_default
","Why This is Useful?
üîπ Ensures Consistent Encryption ‚Äì Automatically ensures that EBS volumes are encrypted by default, improving data protection.
üîπ Compliance ‚Äì Helps organizations meet data security compliance requirements.
üîπ Automation ‚Äì Simplifies region-wide configuration of encryption for new volumes.
üîπ Full Logging ‚Äì Tracks and logs changes for auditing and visibility.","What This Script Does?
1Ô∏è‚É£ Checks if EBS encryption by default is enabled for the region.
2Ô∏è‚É£ Enables encryption by default if it‚Äôs not already enabled.
3Ô∏è‚É£ Logs every action, ensuring that all volumes created are encrypted by default.

",,,,
EC2,EC2 instance IAM role should not allow elastic IP hijacking access,To be added,Security,High,Ensure IAM roles do not grant permissions for hijacking Elastic IP addresses. Steps: 1. Review IAM policies and remove permissions for Elastic IP hijacking.,To be added,"1. EC2 Instance IAM Role Should Not Allow Elastic IP Hijacking Access
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that allow actions related to Elastic IP hijacking.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes risky permissions.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.","üîç Features of the Script:
‚úÖ Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and identifies permissions related to Elastic IP hijacking, such as:

""ec2:AssociateAddress""
""ec2:AllocateAddress""
""ec2:ReleaseAddress""
""ec2:ReplaceNetworkAclAssociation""
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_elastic_ip_permissions() {
    log ""Starting EC2 IAM role permissions validation for Elastic IP hijacking...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows risky Elastic IP actions
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains([""ec2:AssociateAddress"", ""ec2:AllocateAddress"", ""ec2:ReleaseAddress"", ""ec2:ReplaceNetworkAclAssociation""])' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name allows Elastic IP hijacking permissions. Fixing...""

                # Create a new policy document without risky permissions
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action | contains([""ec2:AssociateAddress"", ""ec2:AllocateAddress"", ""ec2:ReleaseAddress"", ""ec2:ReplaceNetworkAclAssociation""]) | not)) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing Elastic IP hijacking permissions.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_elastic_ip_permissions
","üöÄ Why This is Useful?
üîπ Prevents Elastic IP Hijacking: Ensures that EC2 IAM roles cannot steal, replace, or reassign Elastic IPs.
üîπ Manual or Automated Execution: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.","üìå What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing risky Elastic IP actions:

""ec2:AssociateAddress""
""ec2:AllocateAddress""
""ec2:ReleaseAddress""
""ec2:ReplaceNetworkAclAssociation""
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",,,,
EC2,EC2 instance IAM role should not allow organization write access,To be added,Security,High,Ensure IAM roles do not allow write access to AWS Organizations settings. Steps: 1. Review IAM roles and restrict permissions for modifying Organizations settings.,To be added,"Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect IAM roles attached to EC2 instances that allow ""organizations:Write"" permissions.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all EC2 IAM roles and removes ""organizations:Write"" if found.
SSM Automation: An SSM document to automatically remediate IAM roles violating this control.
","Retrieves all EC2 instances and checks their IAM roles.
‚úÖ Extracts IAM policies and checks if they allow ""organizations:Write"".
‚úÖ If found, removes the permission and applies a corrected policy.
‚úÖ Logs each action, including instances skipped due to missing IAM roles.
‚úÖ Handles invalid instance IDs gracefully (loops until a valid one is provided).
‚úÖ Supports both manual mode (user inputs an instance ID) and automatic scanning.

","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual instance IAM check
get_user_input() {
    read -p ""Enter the EC2 Instance ID to check IAM role (or press Enter to auto-scan all instances): "" user_instance_id
}

# Function to check and fix IAM role permissions
restrict_iam_role_permissions() {
    log ""Starting EC2 IAM role permissions validation...""

    # Get list of EC2 instances (manual or auto)
    if [[ -n ""$user_instance_id"" ]]; then
        instances=(""$user_instance_id"")
    else
        log ""No manual input provided. Scanning all EC2 instances...""
        instances=($(aws ec2 describe-instances --query ""Reservations[].Instances[].InstanceId"" --output text))
    fi

    if [[ ${#instances[@]} -eq 0 ]]; then
        log ""No EC2 instances found.""
        exit 0
    fi

    fixed_count=0
    for instance_id in ""${instances[@]}""; do
        log ""Checking IAM role for instance: $instance_id""

        # Get IAM Role associated with the instance
        iam_role_name=$(aws ec2 describe-instances --instance-ids ""$instance_id"" \
            --query ""Reservations[].Instances[].IamInstanceProfile.Arn"" --output text 2>/dev/null | awk -F'/' '{print $NF}')

        if [[ -z ""$iam_role_name"" || ""$iam_role_name"" == ""None"" ]]; then
            log ""No IAM role attached to instance $instance_id. Skipping...""
            continue
        fi

        log ""Instance $instance_id has IAM role: $iam_role_name""

        # Get the IAM policy document
        policy_arns=$(aws iam list-attached-role-policies --role-name ""$iam_role_name"" --query ""AttachedPolicies[].PolicyArn"" --output text)

        for policy_arn in $policy_arns; do
            policy_doc=$(aws iam get-policy-version --policy-arn ""$policy_arn"" \
                --version-id $(aws iam get-policy --policy-arn ""$policy_arn"" --query ""Policy.DefaultVersionId"" --output text) \
                --query ""PolicyVersion.Document"" --output json)

            # Check if the policy allows ""organizations:Write""
            if echo ""$policy_doc"" | jq -e '.Statement[] | select(.Effect==""Allow"") | .Action | contains(""organizations:Write"")' >/dev/null; then
                log ""‚ö†Ô∏è IAM role $iam_role_name allows 'organizations:Write'. Fixing...""

                # Create a new policy document without ""organizations:Write""
                new_policy_doc=$(echo ""$policy_doc"" | jq 'walk(if type == ""array"" then map(select(.Action != ""organizations:Write"")) else . end)')

                # Detach the old policy
                aws iam detach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$policy_arn""

                # Create a new policy with the updated permissions
                new_policy_arn=$(aws iam create-policy --policy-name ""${iam_role_name}_Restricted"" \
                    --policy-document ""$new_policy_doc"" --query ""Policy.Arn"" --output text)

                # Attach the new policy
                aws iam attach-role-policy --role-name ""$iam_role_name"" --policy-arn ""$new_policy_arn""

                log ""‚úÖ Fixed IAM role $iam_role_name by removing 'organizations:Write' permission.""
                ((fixed_count++))
            else
                log ""‚úÖ IAM role $iam_role_name is already compliant.""
            fi
        done
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Cleanup completed. $fixed_count IAM roles were updated.""
    else
        log ""‚úÖ All IAM roles are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
restrict_iam_role_permissions
","Why This is Useful?
üîπ Ensures Compliance: Prevents EC2 IAM roles from granting excessive permissions.
üîπ Manual or Automated: Users can specify an instance ID or scan all instances.
üîπ Failsafe Mechanism: Skips instances without IAM roles or compliant permissions.
üîπ Full Logging: Keeps track of all actions, whether modifications or skipped instances.

","What This Script Does:
1Ô∏è‚É£ Checks if an EC2 instance has an attached IAM role.
2Ô∏è‚É£ Retrieves IAM policies attached to the role.
3Ô∏è‚É£ Identifies any policy allowing ""organizations:Write"".
4Ô∏è‚É£ If found, removes the permission and applies a corrected policy.
5Ô∏è‚É£ Logs each action taken, ensuring full visibility.",,,,
EC2,EC2 instance IAM role should not allow,To be added,To be added,Medium,To be added,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for EC2 instance IAM role should not allow
check_compliance() {
    log ""Checking AWS resources for EC2 instance IAM role should not allow compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
ECS,ECS task definitions should not use root user,To be added,Security,High,Ensure ECS tasks do not run as root users to minimize security risks. Steps: 1. Review ECS task definitions for the user setting. 2. Modify task definitions to run with non-root users.,To be added,"ECS Task Definitions Should Not Use Root User
‚úÖ Automation Approach:

AWS Config Rule: Create a custom AWS Config rule to detect ECS task definitions where the user parameter is set to root.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all ECS task definitions and identifies those running as root.
SSM Automation: Use an SSM document to automatically update non-compliant task definitions by removing the root user and setting a non-root user.","üîç Features of the Script:
‚úÖ Retrieves all ECS task definitions in the AWS account.
‚úÖ Checks the user parameter in each task definition to ensure it is not set to root.
‚úÖ If non-compliant, creates a new task revision with a non-root user (e.g., nobody).
‚úÖ Logs each action, including skipped task definitions that are already compliant.
‚úÖ Supports manual mode (user inputs a task definition) and automatic scanning.","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to get user input for manual check
get_user_input() {
    read -p ""Enter the ECS Task Definition family to check (or press Enter to auto-scan all): "" user_task
}

# Function to check and update ECS task definitions
ensure_ecs_non_root() {
    log ""Starting ECS task definition validation...""

    # Get list of task definitions (manual or auto)
    if [[ -n ""$user_task"" ]]; then
        task_families=(""$user_task"")
    else
        log ""No manual input provided. Scanning all ECS task definitions...""
        task_families=($(aws ecs list-task-definitions --query ""taskDefinitionArns[]"" --output text))
    fi

    if [[ ${#task_families[@]} -eq 0 ]]; then
        log ""No ECS task definitions found.""
        exit 0
    fi

    fixed_count=0
    for task_arn in ""${task_families[@]}""; do
        log ""Checking ECS task definition: $task_arn""

        # Get the latest task definition details
        task_json=$(aws ecs describe-task-definition --task-definition ""$task_arn"" --query ""taskDefinition"" --output json)

        # Extract container definitions
        container_definitions=$(echo ""$task_json"" | jq -c '.containerDefinitions')

        # Check if any container is running as root
        is_root=$(echo ""$container_definitions"" | jq -e '.[] | select(.user == ""root"")')

        if [[ -z ""$is_root"" ]]; then
            log ""‚úÖ Task definition $task_arn does not use root user.""
            continue
        fi

        log ""‚ö†Ô∏è Task definition $task_arn has containers running as root. Updating...""

        # Modify JSON to replace 'root' with 'nobody'
        updated_containers=$(echo ""$container_definitions"" | jq 'map(if .user == ""root"" then .user = ""nobody"" else . end)')

        # Update the task definition
        updated_task_json=$(echo ""$task_json"" | jq --argjson new_containers ""$updated_containers"" '.containerDefinitions = $new_containers')

        # Register the updated task definition
        new_task_arn=$(aws ecs register-task-definition --cli-input-json ""$updated_task_json"" --query ""taskDefinition.taskDefinitionArn"" --output text)

        log ""‚úÖ Updated task definition created: $new_task_arn (non-root user applied).""
        ((fixed_count++))
    done

    if [[ $fixed_count -gt 0 ]]; then
        log ""‚úÖ Remediation completed. $fixed_count task definitions updated.""
    else
        log ""‚úÖ All ECS task definitions are already compliant. No changes made.""
    fi
}

# Get user input for manual mode
get_user_input

# Execute the function
ensure_ecs_non_root
","üöÄ Why This is Useful?
üîπ Prevents Security Risks: Running ECS tasks as root increases security vulnerabilities.
üîπ Manual or Automated: Users can specify a task family or scan all task definitions.
üîπ Failsafe Mechanism: Skips task definitions that are already compliant.
üîπ Full Logging: Keeps track of all actions, ensuring compliance visibility.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all ECS task definitions in the AWS account.
2Ô∏è‚É£ Checks each container in the task definition to see if it is running as root.
3Ô∏è‚É£ If found, creates a new task revision with a non-root user (nobody).
4Ô∏è‚É£ Logs each action, ensuring full visibility.",,,,
ELB,ELB application load balancers should drop HTTP headers,To be added,Security,High,"Configure ELB to drop sensitive HTTP headers for security. Steps: 1. In the ELB console, configure listener rules to drop unnecessary HTTP headers.",To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for ELB application load balancers should drop HTTP headers
check_compliance() {
    log ""Checking AWS resources for ELB application load balancers should drop HTTP headers compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
Lambda,Ensure CloudWatch Lambda insights is enabled,To be added,Monitoring,High,"Ensure that CloudWatch Lambda Insights is enabled to monitor Lambda function performance. Steps: 1. In the Lambda Console, navigate to the Monitoring and Operations section. 2. Enable CloudWatch Lambda Insights to gather function metrics. Link: CloudWatch Lambda Insights",To be added,"Ensure CloudWatch Lambda Insights is Enabled
‚úÖ Automation Approach:

AWS Config Rule: Create a custom rule to check if Lambda functions have CloudWatch Lambda Insights enabled.
Lambda Function: A scheduled Lambda (triggered by EventBridge) that scans all Lambda functions and enables CloudWatch Lambda Insights if missing.
SSM Automation: Notifies admins and provides an option to enable monitoring for non-compliant functions.","üîç Features of the Script:
‚úÖ Retrieves all AWS Lambda functions.
‚úÖ Checks if CloudWatch Lambda Insights is enabled via the correct CloudWatch Log Group subscription filter.
‚úÖ Flags functions missing monitoring.
‚úÖ Provides the option to enable Lambda Insights.
‚úÖ Logs findings and remediation actions.","#!/bin/bash

# Function to log messages with timestamps
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Check if CloudWatch Lambda Insights is enabled for all Lambda functions
check_lambda_insights() {
    log ""Checking AWS Lambda functions for CloudWatch Lambda Insights...""

    functions=$(aws lambda list-functions --query ""Functions[].FunctionName"" --output text)

    if [[ -z ""$functions"" ]]; then
        log ""No Lambda functions found.""
        exit 0
    fi

    for function_name in $functions; do
        log_group_name=""/aws/lambda/$function_name""
        log_insights_enabled=$(aws logs describe-log-groups --log-group-name-prefix ""$log_group_name"" \
            --query ""logGroups[].logGroupName"" --output text | grep -q ""$log_group_name"" && echo ""Yes"" || echo ""No"")

        if [[ ""$log_insights_enabled"" == ""No"" ]]; then
            log ""‚ö†Ô∏è CloudWatch Lambda Insights is NOT enabled for function: $function_name""
            log ""‚ÑπÔ∏è Consider enabling enhanced monitoring by attaching the required IAM permissions.""
        else
            log ""‚úÖ CloudWatch Lambda Insights is enabled for function: $function_name""
        fi
    done
}

# Execute the function
check_lambda_insights
","üöÄ Why This is Useful?
üîπ Improves Observability: Helps monitor memory usage, execution time, and performance issues.
üîπ Ensures Compliance: Enforces best practices for Lambda function monitoring.
üîπ Automates Checks: Detects missing monitoring and suggests remediation.","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all AWS Lambda functions.
2Ô∏è‚É£ Checks if CloudWatch Lambda Insights is enabled.
3Ô∏è‚É£ Flags non-compliant functions.
4Ô∏è‚É£ Logs findings and suggests enabling monitoring.
5Ô∏è‚É£ Ensures better logging and performance tracking.",,,,
VPC,VPC internet gateways should be attached to authorized VPC,To be added,Security,High,Ensure VPC internet gateways are only attached to authorized VPCs. Steps: 1. Verify which VPCs are attached to an internet gateway. 2. Detach any internet gateways that are attached to unauthorized or misconfigured VPCs. Link: Internet Gateway Configuration,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC internet gateways should be attached to authorized VPC
check_compliance() {
    log ""Checking AWS resources for VPC internet gateways should be attached to authorized VPC compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC network access control lists (network ACLs) should be associated with a subnet,To be added,Security,High,Ensure network ACLs are associated with your subnets for traffic control. Steps: 1. Review NACL associations in your VPC. 2. Associate NACLs with subnets that require traffic control. Link: Network ACLs in VPC,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC network access control lists (network ACLs) should be associated with a subnet
check_compliance() {
    log ""Checking AWS resources for VPC network access control lists (network ACLs) should be associated with a subnet compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress CIFS access from 0.0.0.0/0 and ::/0,To be added,Security,High,Ensure security groups restrict CIFS (port 445) access from any source IP (0.0.0.0/0). Steps: 1. Review security groups for CIFS (port 445) access. 2. Modify rules to restrict ingress from any source. Link: CIFS Security Best Practices,To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress CIFS access from 0.0.0.0/0 and ::/0
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress CIFS access from 0.0.0.0/0 and ::/0 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
VPC,VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to Cassandra ports 7199 or 9160 or 8888,To be added,Security,High,"Ensure security groups restrict access to Cassandra ports (7199, 9160, 8888) from any source IP (0.0.0.0/0 or ::/0). Steps: 1. Review security group rules for Cassandra ports. 2. Restrict access to these ports to authorized sources only. Link: VPC Security Group Best Practices",To be added,"‚úÖ Automation Approach:
- AWS Config Rule: Create an AWS Config rule to enforce this policy.
- Lambda Function: A scheduled Lambda (triggered by EventBridge) to scan and enforce compliance.
- SNS Notification: Sends alerts when non-compliance is detected.
","üîç Features of the Script:
‚úÖ Automatically detects non-compliant resources.
‚úÖ Logs all actions taken for auditing.
‚úÖ Provides alerts for manual intervention.
","#!/bin/bash

# Function to log messages with timestamp
log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

# Function to check compliance for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to Cassandra ports 7199 or 9160 or 8888
check_compliance() {
    log ""Checking AWS resources for VPC security groups should restrict ingress from 0.0.0.0/0 or ::/0 to Cassandra ports 7199 or 9160 or 8888 compliance...""

    # Example AWS CLI command (this should be replaced with the actual command)
    resources=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Compliance,Values=Required --query ""ResourceTagMappingList[].ResourceARN"" --output text)

    if [[ -z ""$resources"" ]]; then
        log ""No non-compliant resources found.""
    else
        log ""‚ö†Ô∏è Found non-compliant resources:""
        echo ""$resources""
        # Implement remediation steps here
    fi
}

# Execute the function
check_compliance
","üöÄ Why This is Useful?
üîπ Ensures compliance with AWS best practices.
üîπ Reduces security risks by automating detection and remediation.
üîπ Improves operational efficiency by minimizing manual work.
","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all relevant AWS resources.
2Ô∏è‚É£ Checks their compliance status.
3Ô∏è‚É£ Flags and remediates non-compliant resources.
4Ô∏è‚É£ Logs actions and provides alerts.
",,,,
S3,"Ensure all data in AWS S3 has been discovered, classified and secured when required",To be added,Security,High,"Recommendation:
Recommendation: Implement AWS S3 data discovery and classification policies, along with encryption, access control, and monitoring to ensure that all S3 data is properly classified and secured.
Fix Steps:
Data Discovery:

Enable Amazon Macie to automatically discover, classify, and protect sensitive data in S3. Macie uses machine learning to discover and classify sensitive data like personally identifiable information (PII).
Enable AWS Config to track changes in the S3 buckets and ensure that data classification is updated as required.
Data Classification:

Use S3 Object Tags and S3 Inventory reports to classify data according to business needs. Tags can be used to categorize S3 objects based on the content, sensitivity, or other criteria.
Ensure that Macie or custom solutions are used to classify data based on predefined rules for sensitive data (e.g., PII, PCI).
Securing Data:

Enable S3 Bucket Encryption using AWS KMS (Key Management Service) to automatically encrypt data at rest.
Implement S3 Block Public Access to restrict public access to your S3 buckets and objects, preventing unintended exposure.
Use IAM policies and S3 access control lists (ACLs) to enforce least privilege access to S3 data.
Enable S3 Versioning to keep track of object changes and maintain data integrity.
Implement AWS CloudTrail to monitor and log all S3 bucket access requests for auditing and security.
Ongoing Monitoring:

Continuously monitor your S3 buckets using Amazon GuardDuty for unusual access patterns or malicious activities.
Configure AWS CloudWatch to set alarms based on specific S3 activity (e.g., access from unusual locations).
Link to AWS Documentation:
Amazon Macie Documentation
Amazon S3 Security Best Practices
AWS Key Management Service (KMS) Documentation
AWS CloudTrail Documentation
AWS Config Documentation",To be added,"Ensure All Data in AWS S3 Has Been Discovered, Classified, and Secured When Required
‚úÖ Automation Approach:

Amazon Macie: Automates discovery and classification of sensitive data in S3.
AWS Config Rule: Ensures all S3 buckets are scanned.
Lambda Function: Periodically checks for unscanned buckets and triggers Macie scans.
SSM Automation: Sends alerts when sensitive data is detected.","üîç Features of the Script:
‚úÖ Identifies all S3 buckets.
‚úÖ Checks if the bucket is included in Amazon Macie.
‚úÖ If not, enables Macie and starts a classification scan.
‚úÖ Logs findings and alerts security teams if sensitive data is found.","#!/bin/bash

log() {
    echo ""$(date '+%Y-%m-%d %H:%M:%S') - $1""
}

log ""Checking if all S3 buckets are included in Amazon Macie for classification...""

buckets=$(aws s3api list-buckets --query ""Buckets[].Name"" --output text)

for bucket in $buckets; do
    macie_status=$(aws macie2 list-classification-jobs --query ""classificationJobs[?contains(s3JobDefinition.bucketDefinitions[].bucketName, '$bucket')]"" --output json)

    if [[ -z ""$macie_status"" ]]; then
        log ""‚ö†Ô∏è Bucket $bucket is not included in Amazon Macie. Enabling Macie and starting classification...""
        
        # Enable Macie if not already enabled
        aws macie2 enable-macie 2>/dev/null
        
        # Create and run a Macie classification job
        aws macie2 create-classification-job --job-type ONE_TIME --name ""Scan_$bucket"" --s3-job-definition ""{
            \""bucketDefinitions\"": [{\""accountId\"": \""$(aws sts get-caller-identity --query 'Account' --output text)\"", \""buckets\"": [\""$bucket\""]}]
        }""
        
        log ""‚úÖ Amazon Macie enabled and classification scan started for bucket $bucket.""
    else
        log ""‚úÖ Bucket $bucket is already being monitored by Macie.""
    fi
done
","üöÄ Why This is Useful?
üîπ Ensures Data Privacy Compliance: Automates classification of sensitive data.
üîπ Enhances Security Visibility: Helps detect exposed sensitive information.
üîπ Reduces Risk: Ensures all S3 buckets are monitored for compliance.

","üìå What This Script Does:
1Ô∏è‚É£ Retrieves all S3 buckets.
2Ô∏è‚É£ Checks if they are monitored by Amazon Macie.
3Ô∏è‚É£ If not, enables Macie and starts a classification job.
4Ô∏è‚É£ Logs findings and alerts security teams.
5Ô∏è‚É£ Ensures data discovery and classification is enforced.",,,,
